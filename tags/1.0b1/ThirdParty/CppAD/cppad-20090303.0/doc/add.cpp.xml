<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>AD Binary Addition: Example and Test</title>
<meta name="description" id="description" content="AD Binary Addition: Example and Test"/>
<meta name="keywords" id="keywords" content=" + Ad example add plus test "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_add.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="ad_binary.xml" target="_top">Prev</a>
</td><td><a href="sub.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>Arithmetic</option>
<option>ad_binary</option>
<option>Add.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>std_math_ad</option>
<option>MathOther</option>
<option>CondExp</option>
<option>Discrete</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Arithmetic-&gt;</option>
<option>UnaryPlus</option>
<option>UnaryMinus</option>
<option>ad_binary</option>
<option>compute_assign</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>ad_binary-&gt;</option>
<option>Add.cpp</option>
<option>Sub.cpp</option>
<option>Mul.cpp</option>
<option>Div.cpp</option>
</select>
</td>
<td>Add.cpp</td>
<td>Headings</td>
</tr></table><br/>
<center><b><big><big>AD Binary Addition: Example and Test</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 
# include &lt;cppad/cppad.hpp&gt;

bool Add(void)
{	bool ok = true;
	using CppAD::AD;
	using CppAD::NearEqual;

	// domain space vector
	size_t n  = 1;
	double x0 = 0.5;
	CPPAD_TEST_VECTOR&lt; AD&lt;double&gt; &gt; x(n);
	x[0]      = x0; 

	// declare independent variables and start tape recording
	CppAD::Independent(x);

	// some binary addition operations
	AD&lt;double&gt; a = x[0] + 1.; // AD&lt;double&gt; + double
	AD&lt;double&gt; b = a    + 2;  // AD&lt;double&gt; + int
	AD&lt;double&gt; c = 3.   + b;  // double     + AD&lt;double&gt; 
	AD&lt;double&gt; d = 4    + c;  // int        + AD&lt;double&gt; 

	// range space vector 
	size_t m = 1;
	CPPAD_TEST_VECTOR&lt; AD&lt;double&gt; &gt; y(m);
	y[0] = d + x[0];          // AD&lt;double&gt; + AD&lt;double&gt; 

	// create f: x -&gt; y and stop tape recording
	CppAD::ADFun&lt;double&gt; f(x, y); 

	// check value 
	ok &amp;= NearEqual(y[0] , 2. * x0 + 10,  1e-10 , 1e-10);

	// forward computation of partials w.r.t. x[0]
	CPPAD_TEST_VECTOR&lt;double&gt; dx(n);
	CPPAD_TEST_VECTOR&lt;double&gt; dy(m);
	dx[0] = 1.;
	dy    = f.Forward(1, dx);
	ok   &amp;= NearEqual(dy[0], 2., 1e-10, 1e-10);

	// reverse computation of derivative of y[0]
	CPPAD_TEST_VECTOR&lt;double&gt;  w(m);
	CPPAD_TEST_VECTOR&lt;double&gt; dw(n);
	w[0]  = 1.;
	dw    = f.Reverse(1, w);
	ok   &amp;= NearEqual(dw[0], 2., 1e-10, 1e-10);

	// use a VecAD&lt;Base&gt;::reference object with addition
	CppAD::VecAD&lt;double&gt; v(1);
	AD&lt;double&gt; zero(0);
	v[zero] = a;
	AD&lt;double&gt; result = v[zero] + 2;
	ok     &amp;= (result == b);

	return ok;
}
</pre>
</font></code>


<hr/>Input File: example/add.cpp

</body>
</html>
