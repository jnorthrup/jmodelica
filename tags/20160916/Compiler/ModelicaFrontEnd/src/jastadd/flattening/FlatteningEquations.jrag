/*
    Copyright (C) 2016 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect FlatEquations {
    public void FAbstractEquation.flatten(FQName prefix, FClass fc) {
        flattenEqn(getType().equationList(fc), prefix, fc);
//        if (eqn != null) {
//            eqn.annotation("src").setValue(new FStringLitExp(fileName() + ":" + beginLine()));;
//        }
    }
    
    abstract public List<FAbstractEquation> FEquationType.equationList(FClass fc);
    public List<FAbstractEquation> FNormalEquation.equationList(FClass fc) {
        return fc.getFAbstractEquationListNoTransform();
    }
    public List<FAbstractEquation> FInitialEquation.equationList(FClass fc) {
        return fc.getFInitialEquationListNoTransform();
    }
    
    
    public void FAbstractEquation.flattenEqn(List<FAbstractEquation> l, FQName prefix, FClass fc) {
        l.add(fullCopy());
    }
    
    public void FAbstractEquation.flattenAttrs(FAbstractEquation eqn, FQName prefix) {
        List<FAttribute> flatAttrs = new List<FAttribute>();
        for (FAttribute attr : getFAttributes())
            flatAttrs.add(attr.flatten(prefix));
        eqn.setFAttributeList(flatAttrs);
    }
    
    public void FEquation.flattenEqn(List<FAbstractEquation> l, FQName prefix, FClass fc) {
        FEquation flattened = new FEquation(getLeft().flatten(prefix), getRight().flatten(prefix));
        flattenAttrs(flattened, prefix);
        l.add(flattened);
    }
    
    public static void FAbstractEquation.flattenEqnList(List<FAbstractEquation> l, FQName prefix, FClass fc, List<FAbstractEquation> eqs) {
        for (FAbstractEquation fae : eqs) {
            fae.flattenEqn(l, prefix, fc);
        }
    }
    
    public void InstForClauseE.flattenEqn(List<FAbstractEquation> l, FQName prefix, FClass fc) {
        ArrayList<CommonForIndex> lt = new ArrayList<CommonForIndex>();
        for (InstForIndex ifi : getInstForIndexs()) {
            lt.add(ifi);
        }
        Iterable<CommonForIndex> forIndices = lt;
        Indices ind = Indices.create(forIndices);
        for (Index i : ind) {
            ind.translate(i).setValues(forIndices);
            getFAbstractEquations().flushAllRecursive();
            FAbstractEquation.flattenEqnList(l, prefix, fc, getFAbstractEquations());
        }
        
        for (InstForIndex ifi : getInstForIndexs()) {
            ifi.clearEvaluationValue();
        }
    }
    
    public void FIfWhenElseEquation.flattenEqn(List<FAbstractEquation> l, FQName prefix, FClass fc) {
        FIfWhenElseEquation res = createEmptyNode();
        res.setType((FEquationType) getType().fullCopy());
        FAbstractEquation.flattenEqnList(res.getFAbstractEquationListNoTransform(), prefix, fc, getFAbstractEquations());
        flattenIfWhenTo(res, prefix, fc);
        if (!res.isEmpty()) {
            l.add(res);
        }
    }
    
    public void FIfWhenElseEquation.flattenIfWhenTo(FIfWhenElseEquation res, FQName prefix, FClass fc) {}
    
    public void FIfWhenEquation.flattenIfWhenTo(FIfWhenElseEquation res, FQName prefix, FClass fc) {
        FIfWhenEquation ifWhen = (FIfWhenEquation) res;
        if (hasElse()) {
            List<FAbstractEquation> elseRes = new List<FAbstractEquation>();
            getElse().flattenEqn(elseRes, prefix, fc);
            if (elseRes.getNumChildNoTransform() > 0) {
                ifWhen.setElse((FIfWhenElseEquation)elseRes.getChildNoTransform(0));
            }
        }
        ifWhen.setTest(getTest().flatten(prefix));
    }
    
    syn boolean FIfWhenElseEquation.isEmpty() = getNumFAbstractEquation() == 0;
    eq FIfWhenEquation.isEmpty()              = super.isEmpty() && (!hasElse() || getElse().isEmpty());
    
    public void FConnectClause.flattenEqn(List<FAbstractEquation> l, FQName prefix, FClass fc) {
        
    }
    
    public void FFunctionCallEquation.flattenEqn(List<FAbstractEquation> l, FQName prefix, FClass fc) {
        if (ignoreInFlattening()) {
            return;
        }
        FExp call = getCall().flatten(prefix);
        if (!(call instanceof FAbstractFunctionCall)) {
            return;
        }
        List<FFunctionCallLeft> lefts = new List<FFunctionCallLeft>();
        for (FFunctionCallLeft left : getLefts()) { 
            lefts.add(left.flatten(prefix));
        }
        FFunctionCallEquation flattened =  new FFunctionCallEquation(lefts, (FAbstractFunctionCall) call);
        flattenAttrs(flattened, prefix);
        l.add(flattened);
    }
    
    public FFunctionCallLeft FFunctionCallLeft.flatten(FQName prefix) {
        return new FFunctionCallLeft(hasFExp() ? new Opt(getFExp().flatten(prefix)) : new Opt());
    }

    public void FAlgorithm.flattenEqn(List<FAbstractEquation> l, FQName prefix, FClass fc) {
        List l2 = new List();
        FStatement.flattenFStatementList(getFStatements(), l2, fc, prefix);
        l.add(new FAlgorithm(l2));
    }

}

