/*
Copyright (C) 2009-2017 Modelon AB
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect CCodeGenGlobals {
    class CGenerator {
        /**
         * Generates temporary variables in the global struct
         */
        public class DAETag_C_global_temps extends DAETag {
            
            public DAETag_C_global_temps(AbstractGenerator myGenerator, FClass fclass) {
                super("C_global_temps", myGenerator, fclass);
                addOptions("generate_ode");
            }
            
            public void generate(CodeStream str) {
                CodePrinter p = ASTNode.printer_C;
                CodePrinter ip = p.initialSystemPrinter();
                String indent = p.indent("");
                for (AbstractEquationBlock block : fclass.getDAEInitBLT().getAllBlocks()) {
                    block.genReinitTempDecls_C(ip, str, indent);
                }
                for (AbstractEquationBlock block : fclass.getDAEStructuredBLT().getAllBlocks()) {
                    block.genReinitTempDecls_C(p, str, indent);
                }
                for (AbstractEquationBlock block : fclass.getDAEStructuredBLT().getAllBlocks()) {
                    block.genSetupNodeDecls_C(p, str, indent);
                }
            }
        }
    }

    /**
     * Wraps the name in the JMI_GLOBAL macro which accesses the variable in the global struct rather than the local 
     * namespace.
     * 
     * @param  name Variable name to wrap. It should be declared as a field in the global struct.
     * @return The name wrapped in the JMI_GLOBAL macro
     */
    public static String FExp.global_C(String name) {
        return "JMI_GLOBAL(" + name + ")";
    }
}

aspect CCodeGenGlobalsCached {

    /**
     * Generates the name for the computed flag that accompanies cached values
     * @param name The name of the variable that is cached
     * @return Name of the cache flag
     */
    public static String FExp.computed_C(String name) {
        return name + "_computed";
    }

    /**
     * Check if this needs to cache its value
     * @return true if the value should be cached, else false
     */
    syn boolean FFunctionCall.impureCodeGen(CodePrinter p) = !type().isComposite() && !type().isString() &&
            inWhen() && !isFunctionCallClause() && p.inBlock() && !dependsOnBlock(p.getBlock());

    /**
     * Generate declarations for setup nodes in this block
     */
    public void AbstractEquationBlock.genSetupNodeDecls_C(CodePrinter p, CodeStream str, String indent) {
        if (hasResidualFunction()) {
            for (FFunctionCall call : getSetupNodes()) {
                call.genStaticVarDecls_C(p, str, indent);
            }
        }
    }

    public void FFunctionCall.genStaticVarDecls_C(CodePrinter p, CodeStream str, String indent) {
        str.print(indent, "jmi_real_t ", tempName_C(), ";\n");
        str.print(indent, "int ", FExp.computed_C(tempName_C()), ";\n");
    }

    /**
     * Generate initialization for the setup nodes
     */
    public void AbstractEquationBlock.genBlockResidualSetUpFunctionCall_C(CodePrinter p, CodeStream str, String indent) {
        if (getSetupNodes().size() > 0) {
            str.print(indent, genBlockResidualSetUpFunctionName_C(p), "(jmi);\n");
        }
    }

    public void AbstractEquationBlock.genBlockResidualSetUpFunctionDecl_C(CodePrinter p, CodeStream str, String indent) {
        if (getSetupNodes().size() > 0) {
            String next = p.indent(indent);
            str.print(indent, "static void ", genBlockResidualSetUpFunctionName_C(p), "(jmi_t* jmi) {\n");
            for (FFunctionCall call : getSetupNodes()) {
                call.genStaticTempVars_C(p, str, next);
            }
            str.print(indent, "}\n\n");
        }
    }
    
    
    public void FFunctionCall.genStaticTempVars_C(CodePrinter p, CodeStream str, String indent) {
        str.print(indent, FExp.global_C(FExp.computed_C(tempName_C())), " = 0;\n");
    }

    public String AbstractEquationBlock.genBlockResidualSetUpFunctionName_C(CodePrinter p) {
        return genBlockResidualFunctionName_C(p) + "_set_up";
    }

    /**
     * Gather and cache setup nodes for this block
     */
    private Collection<FFunctionCall> AbstractEquationBlock.setupNodes = null;
    public Collection<FFunctionCall> AbstractEquationBlock.getSetupNodes() {
        if (setupNodes == null) {
            setupNodes = new LinkedHashSet<FFunctionCall>();
            for (AbstractEquationBlock b : blockResidualBlocks()) {
                for (ASTNode n : b.blockResidualNodes()) {
                    n.gatherBlockSetupNodes(blockPrinter(), setupNodes);
                }
            }
        }
        return setupNodes;
    }

    public void ASTNode.gatherBlockSetupNodes(CodePrinter p, Collection<FFunctionCall> res) {
        for (ASTNode n : this) {
            n.gatherBlockSetupNodes(p, res);
        }
    }

    public void FFunctionCall.gatherBlockSetupNodes(CodePrinter p, Collection<FFunctionCall> res) {
        super.gatherBlockSetupNodes(p, res);
        if (impureCodeGen(p)) {
            res.add(this);
        }
    }
}

aspect CCodeGenGlobalsReinit {

    /**
     * Generates temporary variable declarations for storing reinit values.
     */
    public void AbstractEquationBlock.genReinitTempDecls_C(CodePrinter p, CodeStream str, String indent) {
        for (FReinit r : collectReinits_C(p)) {
            str.print(indent, "jmi_real_t ", r.tempName_C(), ";\n");
        }
    }

    /**
     * Generates temporary variable initializaions for storing reinit values.
     * This should be done in the begining of ode-derivatives and sets the
     * value to current value.
     */
    public void AbstractEquationBlock.genReinitTempInits_C(CodePrinter p, CodeStream str, String indent) {
        for (FReinit r : collectReinits_C(p)) {
            p.printAssign(r.type(), str, indent, r, r.getVar());
        }
    }

    /**
     * Generates code that writes back the reinit values to the state. There is
     * no if guard here, that is controlled from the actual reinit statement.
     */
    public void AbstractEquationBlock.genReinitWritebacks_C(CodePrinter p, String indent, CodeStream str) {
        Map<String, ArrayList<FReinit>> map = new LinkedHashMap<>();
        for (FReinit r : collectReinits_C(p)) {
            String key = r.getVar().toString();
            ArrayList<FReinit> list = map.get(key);
            if (list == null) {
                list = new ArrayList<>();
                map.put(key, list);
            }
            list.add(r);
        }
        for (ArrayList<FReinit> list : map.values()) {
            for (int i = 0, n = list.size(); i < n; i++) {
                list.get(i).genReinitWritebacks_C(p, str, indent, i == 0, i == n - 1);
            }
        }
    }

    public void FReinit.genReinitWritebacks_C(
            CodePrinter p, CodeStream str, String indent, boolean first, boolean last) {
        //TODO: This is TEMPORARY, will need a better solution later!
        str.format("%sif (%s != ", (first ? indent : " else "), FExp.global_C(tempName_C()));
        p.print(getVar(), str, indent);
        str.println(") {");
        str.print(p.indent(indent));
        p.print(getVar(), str, indent);
        str.formatln(" = %s;", FExp.global_C(tempName_C()));
        str.formatln("%sjmi->reinit_triggered = 1;", p.indent(indent));
        str.format("%s}", indent);
        if (last)
            str.println();
    }

    /**
     * Helper, used for finding reinits
     */
    public Iterable<FReinit> AbstractEquationBlock.collectReinits_C(CodePrinter p) {
        ArrayList<FReinit> res = new ArrayList<>();
        for (FAbstractEquation eqn : allEquations()) {
            eqn.collectReinits_C(p, res);
        }
        return res;
    }

    /**
     * Helper, used for finding reinits
     */
    public void FAbstractEquation.collectReinits_C(CodePrinter p, Collection<FReinit> res) {}

    @Override
    public void FFunctionCallEquation.collectReinits_C(CodePrinter p, Collection<FReinit> res) {
        getCall().collectReinits_C(p, res);
    }

    @Override
    public void FIfWhenElseEquation.collectReinits_C(CodePrinter p, Collection<FReinit> res) {
        for (FAbstractEquation e : getFAbstractEquations()) {
            e.collectReinits_C(p, res);
        }
    }

    @Override
    public void FIfWhenEquation.collectReinits_C(CodePrinter p, Collection<FReinit> res) {
        if (!p.inInitialSystem() || getTest().isInitialGuard()) {
            super.collectReinits_C(p, res);
        }
        if (hasElse()) {
            getElse().collectReinits_C(p, res);
        }
    }

    /**
     * Helper, used for finding reinits
     */
    public void FAbstractFunctionCall.collectReinits_C(CodePrinter p, Collection<FReinit> res) {
        
    }

    @Override
    public void FReinit.collectReinits_C(CodePrinter p, Collection<FReinit> res) {
        res.add(this);
    }
}