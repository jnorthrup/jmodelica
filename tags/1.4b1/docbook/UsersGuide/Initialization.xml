<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Initialization</title>

  <section>
    <title>Solving DAE initialization problems</title>

    <para>Before a model can be simulated it must be initialized, i.e.
    consistent initial values must be computed. To do this, JModelica.org
    supplies the JMUmodel member function <literal>initialize</literal>, which
    initializes the JMUmodel. The function is called after compiling and
    creating a JMUModel:</para>

    <programlisting language="python"># Compile the stationary initialization model into a DLL
model_name = compile_jmu("My.Model", "/path/to/MyModel.mo")

# Load a model instance into Python
init_model = JMUModel(model_name)
    
# Solve the DAE initialization system
init_result = init_model.initialize()
</programlisting>

    <para>The JMUModel instance <literal>init_model</literal> is now
    initialized and is ready to be simulated.</para>

    <para>The interactive help for the initialize method is shown by the
    command:</para>

    <programlisting>&gt;&gt;&gt; help(init_model.initialize)   
    The initialization method depends on which algorithm is used, this can 
    be set with the function argument 'algorithm'. Options for the algorithm 
    are passed as option classes or as pure dicts. See 
    JMUModel.initialize_options for more details.
        
    The default algorithm for this function is IpoptInitializationAlg. 
        
    Parameters::
        
        algorithm --
            The algorithm which will be used for the initialization is 
            specified by passing the algorithm class as string or class 
            object in this argument. 'algorithm' can be any class which 
            implements the abstract class AlgorithmBase (found in 
            algorithm_drivers.py). In this way it is possible to write own 
            algorithms and use them with this function.
            Default: 'IpoptInitializationAlg'
            
        options -- 
            The options that should be used in the algorithm. For details on 
            the options do:
            
                &gt;&gt; myModel = JMUModel(...)
                &gt;&gt; opts = myModel.initialize_options()
                &gt;&gt; opts?
    
            Valid values are: 
                - A dict which gives IpoptInitializationAlgOptions with 
                  default values on all options except the ones listed in 
                  the dict. Empty dict will thus give all options with 
                  default values.
                - An options object.
            Default: Empty dict
    
    Returns::
        
        Result object, subclass of algorithm_drivers.ResultBase.
</programlisting>

    <para>Options for the available initialization algorithms can be set by
    first retrieving an options object using the <literal>JMUModel</literal>
    method <literal>initialize_options:</literal><programlisting>&gt;&gt;&gt; help(init_model.initialize_options)
    Get an instance of the initialize options class, prefilled with default 
    values. If called without argument then the options class for the 
    default initialization algorithm will be returned.
    
    Parameters::
    
        algorithm --
            The algorithm for which the options class should be fetched. 
            Possible values are: 'IpoptInitializationAlg', 'KInitSolveAlg'.
            Default: 'IpoptInitializationAlg'
            
    Returns::
    
        Options class for the algorithm specified with default values.
</programlisting>Having solved the initialization problem, the result of the
    initialization can be retrieved from the return result object:</para>

    <programlisting language="python">x = init_model['x']
y = init_model['y']
</programlisting>
  </section>

  <section>
    <title>How JModelica.org creates the initialization system of
    equations</title>

    <para>To find a set of consistent initial values a system of non-linear
    equations, called the system of initialization equations, is solved. This
    system is composed from the DAE equations, the initial equations, some
    resulting from start attributes with the fixed attribute set to true.
    Start attributes with the fixed attribute set to false are treated as
    initial guesses for the numerical algorithm used to solve the
    initialization problem</para>

    <para>Some initialization algorithms require the system of initial
    equations to be well defined in the sense that the number of variables
    must be equal to the number of equations. If this is not the case,
    the</para>

    <itemizedlist>
      <listitem>
        <para>If the number of equations is greater than the number of
        variables the system is overdetermined. Such a system may not have a
        solution, and will be treated as ill-defined. An exception is thrown
        in this case.</para>
      </listitem>

      <listitem>
        <para>If the number of equations is less than the number of variables
        the system is underdetermined and such a system has infinitely many
        solutions. In this case, the compiler tries to balance the system by
        setting some fixed attributes to <literal>true</literal>. So if the
        user supplies too few initial conditions, some variables with the
        attribute <literal>fixed</literal> set to <literal>false</literal> may
        be changed to <literal>true</literal> during initialization.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Initialization algorithms</title>

    <section>
      <title>Initialization using IPOPT</title>

      <para>JModelica.org provides a method for DAE initialization that is
      based on IPOPT, the mathematical formulation of the algorithm can be
      found in the <link
      xlink:href="http://www.jmodelica.org/api-docs/jmi/group__jmi__opt__sim__lp.html">JMI
      API documentation</link>.</para>

      <para>The algorithm provides the options summarized in <xref
      linkend="init-tab-collopts" />.</para>

      <table xml:id="init-tab-collopts">
        <title>Options for the collocation-based optimization
        algorithm</title>

        <tgroup cols="3">
          <colspec align="left" colname="col–opt" colwidth="1*" />

          <colspec align="left" colname="col–desc" colwidth="1*" />

          <colspec align="left" colname="col–def" colwidth="2*" />

          <thead>
            <row>
              <entry align="center">Option</entry>

              <entry align="center">Default</entry>

              <entry align="center">Description</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><literal>result_file_name</literal></entry>

              <entry>Empty string (default generated file name will be
              used)</entry>

              <entry>Specifies the name of the file where the optimization
              result is written. Setting this option to an empty string
              results in a default file name that is based on the name of the
              optimization class.</entry>
            </row>

            <row>
              <entry><literal>result_format</literal></entry>

              <entry>'txt'</entry>

              <entry>Specifies in which format to write the result. Currently
              only textual mode is supported.</entry>
            </row>

            <row>
              <entry><literal>write_scaled_result</literal></entry>

              <entry>False</entry>

              <entry>Write the scaled optimization result if set to true. This
              option is only applicable when automatic variable scaling is
              enabled. Only for debugging use.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>In addition to the options for the collocation algorithm, IPOPT
      options can also be set by modifying the dictionary
      <literal>IPOPT_options</literal> contained in the collocation algorithm
      options object. Here, all valid IPOPT options can be specified, see the
      <link xlink:href="http://www.coin-or.org/Ipopt/documentation/">IPOPT
      documentation</link> for further information. For example, setting the
      option <literal>max_iter</literal>:</para>

      <programlisting language="python">opts['IPOPT_options']['max_iter'] = 300
</programlisting>

      <para>makes IPOPT terminate after 300 iterations even if no optimal
      solution has been found.</para>
    </section>
  </section>
</chapter>
