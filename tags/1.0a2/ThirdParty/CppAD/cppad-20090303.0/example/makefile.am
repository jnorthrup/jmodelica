# -----------------------------------------------------------------------------
# CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-08 Bradley M. Bell
#
# CppAD is distributed under multiple licenses. This distribution is under
# the terms of the 
#                     Common Public License Version 1.0.
#
# A copy of this license is included in the COPYING file of this distribution.
# Please visit http://www.coin-or.org/CppAD/ for information on other licenses.
# -----------------------------------------------------------------------------
# automake input file
#
# CppAD pusts all it's preprocessor definitions in the cppad/config.h file
DEFS          =
#
if CppAD_ADOLC
ADOLC_SRC_FILES     = mul_level_adolc.cpp ode_taylor_adolc.cpp
ADOLC_EXTRA_FILES  =
ADOLC_INCLUDE      = -I$(ADOLC_DIR)/include 
ADOLC_LIB          = -ladolc
ADOLC_LIB_DIR      = -L$(ADOLC_DIR)/lib
ADOLC_FLAGS        = -DCPPAD_ADOLC_EXAMPLES
else
ADOLC_SRC_FILES   =
ADOLC_EXTRA_FILES =  mul_level_adolc.cpp ode_taylor_adolc.cpp
ADOLC_INCLUDE     =
ADOLC_LIB         =
ADOLC_LIB_DIR     =
ADOLC_FLAGS       =
endif
#
if CppAD_BOOSTVECTOR
BOOST_INCLUDE = -I$(BOOST_DIR)
else
BOOST_INCLUDE =
endif
# 
# Microsoft project files
EXTRA_DIST        = example.sln example.vcproj test_one.sh.in \
	$(ADOLC_EXTRA_FILES)
#
noinst_PROGRAMS   = example 
#
if CppAD_MS_COMPILER
AM_CXXFLAGS       = -EHsc -g $(CXX_FLAGS) $(ADOLC_FLAGS) 
else
AM_CXXFLAGS       = -g $(CXX_FLAGS) $(ADOLC_FLAGS) 
endif
#
AM_CPPFLAGS       = -I. \
                   -I$(top_srcdir) \
                    $(BOOST_INCLUDE) \
                    $(ADOLC_INCLUDE)
                    
#
LDADD             = $(ADOLC_LIB) 
AM_LDFLAGS        = $(ADOLC_LIB_DIR) 
#
example_SOURCES   = \
	$(ADOLC_SRC_FILES) \
	 \
	example.cpp \
	abort_recording.cpp \
	abs.cpp \
	acos.cpp \
	add.cpp \
	add_eq.cpp \
	asin.cpp \
	atan.cpp \
	atan_2.cpp \
	base_adolc.hpp \
	bender_quad.cpp \
	bool_fun.cpp \
	vector_bool.cpp \
	check_numeric_type.cpp \
	check_simple_vector.cpp \
	compare.cpp \
	compare_change.cpp \
	complex_poly.cpp \
	cond_exp.cpp \
	copy_ad.cpp \
	copy_base.cpp \
	cos.cpp \
	cosh.cpp \
	cppad_vector.cpp \
	default.cpp \
	div.cpp \
	div_eq.cpp \
	eq.cpp \
	equal_op_seq.cpp \
	erf.cpp \
	error_handler.cpp \
	exp.cpp \
	for_one.cpp \
	for_two.cpp \
	forward.cpp \
	for_sparse_jac.cpp \
	fun_check.cpp \
	hes_lagrangian.cpp \
	hes_lu_det.cpp \
	hes_minor_det.cpp \
	hessian.cpp \
	hes_times_dir.cpp \
	independent.cpp \
	integer.cpp \
	interface_2c.cpp\
	interp_onetape.cpp\
	interp_retape.cpp\
	jac_lu_det.cpp \
	jac_minor_det.cpp \
	jacobian.cpp \
	log.cpp \
	log_10.cpp \
	lu_factor.cpp \
	lu_invert.cpp \
	lu_ratio.cpp \
	lu_solve.cpp \
	lu_vec_ad.cpp \
	lu_vec_ad.hpp \
	lu_vec_ad_ok.cpp \
	mul.cpp \
	mul_eq.cpp \
	mul_level.cpp \
	nan.cpp \
	near_equal.cpp \
	near_equal_ext.cpp \
	not_complex_ad.cpp \
	numeric_type.cpp \
	ode_err_control.cpp \
	ode_err_maxabs.cpp \
	ode_gear.cpp \
	ode_gear_control.cpp\
	ode_stiff.cpp \
	ode_taylor.cpp \
	output.cpp \
	par_var.cpp \
	poly.cpp \
	pow.cpp \
	pow_int.cpp \
	reverse_any.cpp \
	reverse_one.cpp \
	reverse_two.cpp \
	rev_one.cpp \
	rev_sparse_hes.cpp \
	rev_sparse_jac.cpp \
	rev_two.cpp \
	romberg_mul.cpp \
	romberg_one.cpp \
	rosen_34.cpp \
	runge_45_1.cpp \
	runge_45_2.cpp \
	seq_property.cpp \
	simple_vector.cpp \
	sin.cpp \
	sinh.cpp \
	sparse_hessian.cpp \
	sparse_jacobian.cpp \
	sqrt.cpp \
	stack_machine.cpp \
	sub.cpp \
	sub_eq.cpp \
	tan.cpp \
	tanh.cpp \
	tape_index.cpp \
	track_new_del.cpp \
	unary_minus.cpp \
	unary_plus.cpp \
	value.cpp \
	var_2par.cpp \
	vec_ad.cpp 
