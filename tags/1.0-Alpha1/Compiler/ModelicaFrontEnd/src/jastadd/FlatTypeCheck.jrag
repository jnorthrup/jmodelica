/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


aspect FlatTypeCheck {
	
  public void ASTNode.typeCheck() {
	  
  }
 
 
  public void InstPrimitive.typeCheck() {
	  if (myBindingInstExp() != null) {
		  // Check type compatibility
		  if (!myBindingInstExp().type().isUnknown() && // Avoid duplicate error messages
				  !type().typeCompatible(myBindingInstExp().type())) {
//			  System.out.println("Error in " + name() + " type: " + 
//					  type().toString() + " binding exp type: " + 
//					  myBindingInstExp().type().toString() + " binding exp:");
//			  myBindingInstExp().dumpTree("");
			  error("The binding expression of the variable " + name() +
					  " does not match the declared type of the variable");
		  }
		  // Check Variability compatibility
		  
	  }
	  
  }
 
  public void FEquation.typeCheck() {
	  //System.out.println(getLeft().type() + " " + getRight().type());
	  if (!getLeft().type().isUnknown() && !getRight().type().isUnknown()) {
		  if (!getLeft().type().equivalentTo(getRight().type())) {
			  error("The right and left expression types of equation are" +
		  			" not compatible");		  
		  }
	  }
  }
  
  public void FArtmBinExp.typeCheck() {
	  if (!getLeft().type().isUnknown() && !getRight().type().isUnknown()) {
		  if (type().isUnknown()) {
			  error("Type error in expression");		  
		  }
	  }
  }
  
}