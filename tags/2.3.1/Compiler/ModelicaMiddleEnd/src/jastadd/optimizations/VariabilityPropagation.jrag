/*
    Copyright (C) 2013-2017 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


aspect VariabilityPropagation {

    public boolean FFunctionCallEquation.taggedForCleanup = false;
	public boolean FAbstractEquation.taggedByVProp = false;
	public boolean FAbstractVariable.taggedByVProp = false;
	public boolean FFunctionCallLeft.taggedByVProp = false;
	public boolean FExp.taggedByVProp              = false;
	
    public void FAbstractEquation.cleanEquations(ArrayList<FAbstractEquation> l) {
        if (!taggedByVProp) {
            l.add(this);
        }
        taggedByVProp = false;
    }
    public void FIfWhenElseEquation.cleanEquations(ArrayList<FAbstractEquation> l) {
        if (!isTempAssign() || !getFAbstractEquation(0).taggedByVProp) {
            l.add(this);
        }
        taggedByVProp = false;
    }
    
    public void FFunctionCallEquation.cleanEquations(ArrayList<FAbstractEquation> l) {
        super.cleanEquations(l);
        if (taggedForCleanup) {
            for (FFunctionCallLeft left : getLefts()) {
                left.cleanEquations();
            }
            taggedForCleanup = false;
        }
    }
    public void FFunctionCallLeft.cleanEquations() {
        if (taggedByVProp) {
            setFExpOpt(new Opt());
            taggedByVProp = false;
        } else if (hasFExp()){
            setFExpOpt(new Opt(getFExp().cleanEquations()));
        }
    }
    
    public FExp FExp.cleanEquations() {
        if (taggedByVProp) {
            return new FNoExp();
        } else {
            return this;
        }
    }
    
    @Override
    public FExp FArray.cleanEquations() {
        if (taggedByVProp) {
            return super.cleanEquations();
        }
        FArray res = new FArray();
        for (FExp exp : getFExps()) {
            res.addFExpNoTransform(exp.cleanEquations());
        }
        return res;
    }
    
    @Override
    public FExp FRecordConstructor.cleanEquations() {
        if (taggedByVProp) {
            return super.cleanEquations();
        }
        FRecordConstructor res = new FRecordConstructor(getRecord().name());
        for (FExp arg : getArgs()) {
            res.addArgNoTransform(arg.cleanEquations());
        }
        return res;
    }
    
    
	
	/**
	 * Checks if equation is eligible for var. prop.
	 */
    syn boolean FAbstractEquation.canPropagate() =
            canPropagateContext() && !containsActiveAnnotations();
    eq FEquation.canPropagate() = super.canPropagate() && variables().size() == 1;
    eq FFunctionCallEquation.canPropagate() {
        getCall().flushAllRecursiveClearFinal();
        return super.canPropagate() && variables().size() > 0 && numScalarEquations() > 0 && 
                ((variables().size() == numScalarEquations() && getCall().variability().parameterOrLess()) 
                        || potentialPartialVariability().knownParameterOrLess());
    }
    eq FAlgorithm.canPropagate() = super.canPropagate() && variables().size() > 0 &&
            variables().size() == numScalarEquations() && variabilityRHS().parameterOrLess();
    
    inh boolean FAbstractEquation.canPropagateContext();
    eq Root.getChild().canPropagateContext() = false;
    eq FClass.getFAbstractEquation().canPropagateContext() = true;
    eq FIfWhenElseEquation.getChild().canPropagateContext() = isTempAssign() && canPropagateContext();
    
    /**
     * If any arg is constant return constant. Otherwise returns combined variability.
     */
    syn FTypePrefixVariability FFunctionCallEquation.potentialPartialVariability()
        = getCall().potentialPartialVariability();
    
    syn FTypePrefixVariability FAbstractFunctionCall.potentialPartialVariability() = variability();
    eq FFunctionCall.potentialPartialVariability() {
        for (FExp exp : getArgs()) {
            if (exp.variability().knownParameterOrLess()) {
                return fConstant();
            }
        }
        return super.potentialPartialVariability();
    }
    
	/**
	 * Checks if left hand side variable(s) is eligible for var. prop.
	 */
	syn boolean FExp.canPropagate() {
		throw new UnsupportedOperationException();
	}
    eq FNoExp.canPropagate() = true;
	eq FRecordConstructor.canPropagate() {
		for (FExp exp : getArgs()) {
			if (!exp.canPropagate()) {
				return false;
			}
		}
		return true;
	}
	eq FArray.canPropagate() {
		for (FExp exp : getFExps()) {
			if (!exp.canPropagate()) {
				return false;
			}
		}
		return true;
	}
	eq FIdUseExp.canPropagate() {
		return myFV().canPropagate();
	}
	syn boolean FAbstractVariable.canPropagate() = false;
	eq FVariable.canPropagate() = !isOutput() && !containsActiveAnnotations();
	eq FDerivativeVariable.canPropagate() = false;
	
	// Hook for checks that are needed in optimica
	syn boolean FEquation.canPropagate(FVariable var, FExp solution) = true;

    public class FClass {
        /**
         * Runs variability propagation if option is set.
         */
        public class variabilityPropagationIfSet extends Transformation {
            public variabilityPropagationIfSet() {
                super("variability_propagation");
            }
            
            public void perform() {
                FClass.VariabilityPropagator propagator = new FClass.VariabilityPropagator();
                variabilityPropagation(propagator);
                constantFolding(propagator.evaluator());
                root().flushAllRecursiveClearFinal();
            }
        }
        
        public class VariabilityPropagator {
            private LinkedHashSet<FAbstractEquation> worklist = new LinkedHashSet<FAbstractEquation>();
            private boolean splitAliasParameters = !(myOptions().getBooleanOption("eliminate_alias_variables") 
                    && myOptions().getBooleanOption("eliminate_alias_parameters"));
            private boolean splitAliasConstants  = !(myOptions().getBooleanOption("eliminate_alias_variables") 
                    && myOptions().getBooleanOption("eliminate_alias_constants"));
            
            private VariableEvaluator evaluator       = 
                    new VariableEvaluator(
                            myOptions().getBooleanOption("variability_propagation_external"));
            private VariableEvaluator partialEvaluator = 
                    new PartialVariableEvaluator(
                            myOptions().getBooleanOption("variability_propagation_external"));
            
            public VariabilityPropagator() {
                
            }
            
            public LinkedHashSet<FAbstractEquation> getWorklist() {
                return worklist;
            }
            
            public VariableEvaluator evaluator() {
                return evaluator;
            }
            
            public VariableEvaluator evaluator(FTypePrefixVariability variability) {
                if (variability.knownParameterOrLess()) {
                    return evaluator;
                } else {
                    return partialEvaluator;
                }
            }
            
            public void addEquation(FTypePrefixVariability v, FAbstractEquation fae) {
                if (v.initialParameterVariability()) {
                    addFInitialEquationNoTransform(fae);
                } else {
                    addFParameterEquationNoTransform(fae);
                }
            }
            
            public void addWorkEq(FAbstractEquation fae) {
                worklist.add(fae);
            }
            
            public boolean splitAliasParameters() {
                return splitAliasParameters;
            }
            
            public boolean splitAliasConstants() {
                return splitAliasConstants;
            }
            
        }
    }
    
    public void FAbstractEquation.addEquationsToWorkList(Set<FAbstractEquation> wl) {
        wl.add(this);
    }
    
    public void FIfWhenElseEquation.addEquationsToWorkList(Set<FAbstractEquation> wl) {
        if (isTempAssign()) {
            for (FAbstractEquation equation: getFAbstractEquations()) {
                equation.addEquationsToWorkList(wl);
            }
        }
    }

    /**
	 * Runs variability propagation.
	 */
    public void FClass.variabilityPropagation(FClass.VariabilityPropagator propagator) {

		List<FAbstractEquation> parameterEquations = getFParameterEquations();
        LinkedHashSet<FAbstractEquation> worklist = propagator.getWorklist();
		List<FAbstractEquation> equations = getFAbstractEquations();

		// Build worklist
		for (FAbstractEquation equation: equations) {
            equation.addEquationsToWorkList(worklist);
		}

		// Work
		while (!worklist.isEmpty()) {
			FAbstractEquation equation = worklist.iterator().next();
            if (equation.canPropagate()) {
                equation.variabilityPropagation(propagator);
            }
			worklist.remove(equation);
		}

		// Clean variables
        ArrayList<FVariable> newVariables = new ArrayList<FVariable>();
        ArrayList<FVariable> newAliases   = new ArrayList<FVariable>();
        AliasManager am = getAliasManager();
        for (FVariable fVariable: getFVariables()) {
            if (!fVariable.taggedByVProp) {
                newVariables.add(fVariable);
            }
        }
        for (FVariable fVariable: getAliasVariables()) {
            if (am.getAliasSet(fVariable) != null) {
                newAliases.add(fVariable);
            } else if (!fVariable.isTemporary()) {
                newVariables.add(fVariable);
            }
        }
        setFVariableList(new List<FVariable>(newVariables));
        setAliasVariableList(new List<FVariable>(newAliases));

		// Clean equations
		ArrayList<FAbstractEquation> newEquations = new ArrayList<FAbstractEquation>();
		for (FAbstractEquation equation: equations) {
			equation.cleanEquations(newEquations);
		}
		setFAbstractEquationList(new List<FAbstractEquation>(newEquations));
		
		// Clean initial equations
		newEquations = new ArrayList<FAbstractEquation>();
		for (FAbstractEquation equation: initialEquations()) {
			if (!equation.taggedByVProp) {
				newEquations.add(equation);
			}
		}
		setFInitialEquationList(new List<FAbstractEquation>(newEquations));
	}
	
	public void FAbstractEquation.variabilityPropagation(FClass.VariabilityPropagator propagator) {
		
	}

    public void FEquation.variabilityPropagation(FClass.VariabilityPropagator propagator) {
        
        FVariable fVariable;
        FExp solution;
        FTypePrefixVariability solutionVariability;

        fVariable = variables().iterator().next();

        if (!fVariable.canPropagate()) {
            return;
        }

        solution = solution(fVariable);
        solution.resetOriginalReferences();
        
        if (!solution.isValidExp()) {
            return;
        }
        
        if (!canPropagate(fVariable, solution)) {
            return;
        }
        
        solutionVariability = solution.variability();

        if (!solutionVariability.parameterOrLess()) {
            // Sometimes combinations of parameters and constants yield 
            // discrete variability. IfExpr, sample() etc.
            return;
        }

        if (solutionVariability.knownParameterOrLess()) {
            FExp newSolution = null;
            try {
                CValue cval = solution.ceval(propagator.evaluator());
                if (cval.hasBuildLiteral()) {
                    newSolution = cval.buildLiteral();
                    solution.collectLocations(newSolution);
                    solution = newSolution;
                }
            } catch (ConstantEvaluationException e) {}
            if (newSolution == null) {
                // If we can't evaluate right now, set it as parameter
                solutionVariability = fParameter();
            }
        }

        if (!solutionVariability.knownParameterOrLess()) {
            propagator.addEquation(solutionVariability, this.setLocationOf(new FEquation(fVariable.setLocationOf(fVariable.createUseExp()), solution)));
        }
        
        this.taggedByVProp = true;
        fVariable.variabilityPropagation(propagator, solutionVariability, solution);
        
    }
    
    public void FFunctionCallEquation.variabilityPropagation(FClass.VariabilityPropagator propagator) {
        
        FTypePrefixVariability variability = getCall().variability();
        for (FFunctionCallLeft left : getLefts()) {
            if (left.hasFExp() && !left.getFExp().canPropagate()) {
                variability = fContinuous();
                break;
            }
        }
        boolean eval = potentialPartialVariability().knownParameterOrLess();
        
        CValue[] val = null;
        if (eval) {
            try {
                VariableEvaluator evaluator = propagator.evaluator(variability);
                val = getCall().evaluate(evaluator);
            } catch (ConstantEvaluationException e) {
                eval = false;
            }
        }
        
        boolean allRemoved = true;
        int i = 0;
        for (FFunctionCallLeft left : getLefts()) {
            if (left.hasFExp()) {
                if (left.getFExp().canPropagate()) {
                    left.taggedByVProp = left.getFExp().variabilityPropagation(propagator,
                            eval ? val[i] : CValue.UNKNOWN, variability);
                }
                allRemoved &= left.taggedByVProp;
            }
            i++;
        }
        
        if (allRemoved) {
            this.taggedByVProp = true;
        } else {
            variability = variability.combine(fFixedParameter());
            if (variability.parameterVariability()) {
                propagator.addEquation(variability, this);
                this.taggedByVProp = true;
            }
        }
        this.taggedForCleanup = true;
    }
    
    public void FAlgorithm.variabilityPropagation(FClass.VariabilityPropagator propagator) {
        FTypePrefixVariability variability = variabilityRHS();
        if (variability.parameterVariability()) {
            for (FVariable fv : referencedFVariablesInLHS()) {
                fv.variabilityPropagation(propagator, variability, null);
            }
            propagator.addEquation(variability, this);
            this.taggedByVProp = true;
        }
    }
	
	public boolean FExp.variabilityPropagation(
            FClass.VariabilityPropagator propagator,
            CValue value,
            FTypePrefixVariability variability) {
		throw new UnsupportedOperationException();
	}
    
    @Override
    public boolean FNoExp.variabilityPropagation(
            FClass.VariabilityPropagator propagator,
            CValue value,
            FTypePrefixVariability variability) {
        return true;
    }
    
    @Override
	public boolean FRecordConstructor.variabilityPropagation(
            FClass.VariabilityPropagator propagator,
            CValue value,
            FTypePrefixVariability variability) {
        
        if (taggedByVProp) {
            return taggedByVProp;
        }
        
	    boolean res = true;
		CValueRecord frc = null;
		if (!value.isUnknown()) {
			frc = (CValueRecord) value;
		}

		for (int i = 0; i < getNumArg(); i++) {
            res &= getArg(i).variabilityPropagation(propagator, 
                    frc != null ? frc.getMember(i) : CValue.UNKNOWN, variability);
		}
		taggedByVProp = res;
		return res;
	}
	
    @Override
    public boolean FArray.variabilityPropagation(
            FClass.VariabilityPropagator propagator,
            CValue value,
            FTypePrefixVariability variability) {
        
        if (taggedByVProp) {
            return taggedByVProp;
        }
        
		CValueArray a = null;
		if (value != CValue.UNKNOWN) {
			a = (CValueArray) value;
		}
        taggedByVProp = this.variabilityPropagationArray(propagator, a, variability, new Enumerator());
        return taggedByVProp;
    }
    
    public boolean FExp.variabilityPropagationArray(
            FClass.VariabilityPropagator propagator,
            CValueArray value,
            FTypePrefixVariability variability,
            Enumerator enumerator) {
        return this.variabilityPropagation(propagator,
                    value == null ? CValue.UNKNOWN : value.values[enumerator.next()], variability);
    }
    
    @Override
    public boolean FArray.variabilityPropagationArray(
            FClass.VariabilityPropagator propagator,
            CValueArray value,
            FTypePrefixVariability variability,
            Enumerator enumerator) {
        boolean res = true;
        for (FExp exp : getFExps()) {
            res &= exp.variabilityPropagationArray(propagator, value, variability, enumerator);
        }
        return res;
    }
    
    @Override
    public boolean FIdUseExp.variabilityPropagation(
            FClass.VariabilityPropagator propagator,
            CValue value,
            FTypePrefixVariability variability) {
        
        if (taggedByVProp) {
            return taggedByVProp;
        }
        
        FExp bexp = null;
        if (value.hasBuildLiteral()) {
            try {
                bexp = value.buildLiteral();
                variability = fConstant();
            } catch (ConstantEvaluationException e) {
                variability = variability.combine(fFixedParameter());
            }
        } else {
            variability = variability.combine(fFixedParameter());
        }
        
        if (variability.parameterOrLess()) {
            myFV().variabilityPropagation(propagator, variability, bexp);
        }
        
        taggedByVProp = variability.knownParameterOrLess();
        return taggedByVProp;
    }
    
    
    public void FAbstractVariable.variabilityPropagation(
            FClass.VariabilityPropagator propagator,
            FTypePrefixVariability variability,
            FExp bindingExp) {
        
        throw new UnsupportedOperationException();
    }
    
    @Override
    public void FVariable.variabilityPropagation(
            FClass.VariabilityPropagator propagator,
            FTypePrefixVariability variability,
            FExp bindingExp) {
        
        FAbstractEquation equation;
        boolean wasDiscrete = isDiscrete();
        boolean isZero = variability.constantVariability() && bindingExp.isLiteralZero();
        
        // Declaration
        // TODO: after we have added "dependent parameter that is evaluated" variability, this exception should use that instead
        if (variability.evalTrueParameterVariability())
            variability = fStructParameter();
        setFTypePrefixVariability(variability);
        if (variability.knownParameterOrLess()) {
            setBindingExp(bindingExp.fullCopy());
        }
        if (variability.fixedParameterVariability()) {
            if (fixedAttributeSet()) {
                setFixedAttribute(true);
            }
        }
        
        // Uses
        for (FIdUseExp use : uses()) {
            if (use.inFEquation()) {
                equation = use.myFEquation();
                equation.variables().remove(this);
                
                if (isZero) {
                    // Adjust variable set for special case y = 0 * z
                    FExp topFactorExp = use.myTopFactorFExp();
                    if (topFactorExp != null) {
                        Set<FIdUseExp> usesInEq = equation.findFIdUseExpsInTree();
                        Set<FIdUseExp> usesInTop = topFactorExp.findFIdUseExpsInTree();
                        usesInEq.removeAll(usesInTop);
                        Set<FVariable> fvsInEq = lookupFVariablesInSet(usesInEq);
                        Set<FVariable> fvsInTop = lookupFVariablesInSet(usesInTop);
                        
                        for (FVariable tFV : fvsInTop) {
                            if (!fvsInEq.contains(tFV)) {
                                equation.variables().remove(tFV);
                            }
                        }
                        
                        topFactorExp.taggedByVProp = true;
                    }
                }
            	
                propagator.addWorkEq(equation);
                if (equation.inInitialEquationSection() && equation.variables().size() == 0
                        && equation.initialParameters().size() == 0) {
                    equation.taggedByVProp = true; // Initial equation
                }
            }
        }
        
        // Pre var
        if (wasDiscrete) {
            FAbstractVariable pre = myPreVariable();
            pre.taggedByVProp = true;
            pre.variabilityPropagation(propagator, variability, bindingExp);
        }
        
        // Derivative
        if (isDifferentiatedVariable()) {
            FAbstractVariable derVar = myDerivativeVariable();
            derVar.taggedByVProp = true;
            derVar.variabilityPropagation(propagator, FTypePrefixVariability.fConstant(), new FIntegerLitExp(0));
        }
        
        // Alias variables
        if (aliasSet() != null) {
            boolean unAlias = (variability.knownParameterOrLess() && propagator.splitAliasConstants()) ||
                    (variability.parameterVariability() && propagator.splitAliasParameters());
            AliasManager.AliasVariable thisAlias = aliasSet().getModelVariable();
            for (AliasManager.AliasVariable av : aliasSet()) {
                FVariable fv = av.getFVariable();
                boolean neg = av.isNegated() ^ thisAlias.isNegated();
                if (fv != this) {
                    fv.setFTypePrefixVariability(variability);
                    if (variability.knownParameterOrLess()) {
                        fv.setBindingExp(bindingExp.negated(neg));
                    } else if (unAlias && variability.parameterVariability() && !fv.isTemporary()) {
                        propagator.addEquation(variability, new FEquation(fv.createUseExp(), createUseExp().negated(neg)));
                    }
                }
            }
            if (unAlias) {
                myFClass().getAliasManager().unAlias(this);
            }
        }
    }
	
    inh FExp FExp.myTopFactorFExp();
    eq BaseNode.getChild().myTopFactorFExp() = null;
    eq FMulExp.getChild().myTopFactorFExp() = topFactorFExp();
    eq FDivExp.getLeft().myTopFactorFExp() = topFactorFExp();
    
    protected FExp FArtmBinExp.topFactorFExp() {
        if (taggedByVProp) {
            return null;
        }
        FExp t = myTopFactorFExp();
        if (t == null) {
            t = this;
        }
        return t;
    }
    
    
    refine Variability eq FMulExp.expVariability() = taggedByVProp ? fConstant() : refined();
    refine Variability eq FDivExp.expVariability() = taggedByVProp ? fConstant() : refined();
    
    refine ConstantEvaluation eq FDotMulExp.cevalCalc(VariableEvaluator evaluator) = taggedByVProp ? 
            type().zeroCValue() : refined(evaluator);
    refine ConstantEvaluation eq FDotDivExp.cevalCalc(VariableEvaluator evaluator) = taggedByVProp ? 
            type().zeroCValue() : refined(evaluator);
}
