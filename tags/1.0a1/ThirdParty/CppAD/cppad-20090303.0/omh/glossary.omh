/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-08 Bradley M. Bell

CppAD is distributed under multiple licenses. This distribution is under
the terms of the 
                    Common Public License Version 1.0.

A copy of this license is included in the COPYING file of this distribution.
Please visit http://www.coin-or.org/CppAD/ for information on other licenses.
-------------------------------------------------------------------------- */

$begin glossary$$
$aindex head subhead$$
$spell
	Vec
	cos
	bool
	Op
	Diff
	Var
	Cpp
	enum
	Taylor
$$

$section Glossary$$



$head AD Function$$
Given an $xref/ADFun/$$ object $italic f$$
there is a corresponding
AD of $italic Base$$ $xref/glossary/Operation/Sequence/operation sequence/1/$$.
This operation sequence
defines a function 
$latex F : B^n \rightarrow B^m $$
where $italic B$$ is the space corresponding to objects of type $italic Base$$.
We refer to $latex F$$ as the AD function corresponding to 
the operation sequence and to the object $italic f$$.
(See the $xref/FunCheck/Discussion/FunCheck discussion/$$ for
possible differences between $latex F(x)$$ and the algorithm that defined
the operation sequence.)

$head AD of Base$$
An object is called an AD of $italic Base$$ object its type is 
either $syntax%AD<%Base%>%$$ 
(see $cref/default/Default/$$ or 
$cref/constructor/ad_copy/Syntax/Constructor/$$)
or $syntax%VecAD<%Base%>::reference%$$ (see $xref/VecAD/$$)
for some $italic Base$$ type.

$head AD Levels Above Base$$
$index level, AD$$
$index AD, level$$
If $italic Base$$ is a type, 
the AD levels above $italic Base$$ 
is the following sequence of types:
$syntax%
	AD<%Base%> %,% AD< AD<%Base%> > %,% AD< AD< AD<%Base%> > > %,% %...%
%$$

$head Base Function$$
A function $latex f : B \rightarrow B$$ 
is referred to as a $italic Base$$ function,
if $italic Base$$ is a C++ type that represent elements of
the domain and range space of $italic f$$; i.e. elements of $latex B$$.

$head Base Type$$
If $italic x$$ is an $syntax%AD<%Base%>%$$ object,
$italic Base$$ is referred to as the base type for $italic x$$.

$head Elementary Vector$$
The $th j$$ elementary vector $latex e^j \in B^m$$ is defined by
$latex \[
e_i^j = \left\{ \begin{array}{ll}
	1 & {\rm if} \; i = j \\
	0 & {\rm otherwise}
\end{array} \right.
\] $$


$head Operation$$

$subhead Atomic$$
An atomic $italic Type$$ operation is an operation that
has a $italic Type$$ result and is not made up of other
more basic operations.

$subhead Sequence$$
A sequence of atomic $italic Type$$ operations 
is called a $italic Type$$ operation sequence.
A sequence of atomic $xref/glossary/AD of Base/AD of Base/$$ operations
is referred to as an AD of $italic Base$$ operation sequence.
The abbreviated notation AD operation sequence is often used
when it is not necessary to specify the base type.

$subhead Dependent$$
Suppose that $italic x$$ and $italic y$$ are $italic Type$$ objects and
the result of 
$syntax%
	%x% < %y%
%$$
has type $code bool$$ (where $italic Type$$ is not the same as $code bool$$).
If one executes the following code
$syntax%
	if( %x% < %y% )
		%y% = cos(%x%);
	else	%y% = sin(%x%); 
%$$
the choice above depends on the value of $italic x$$ and $italic y$$
and the two choices result in a different $italic Type$$ operation sequence.
In this case, we say that the $italic Type$$ operation sequence depends
on $italic x$$ and $italic y$$.

$subhead Independent$$
Suppose that $italic i$$ and $italic n$$ are $code size_t$$ objects,
and $syntax%%x%[%i%]%$$, $italic y$$ are $italic Type$$ objects,
where $italic Type$$ is different from $code size_t$$.
The $italic Type$$ sequence of operations corresponding to
$syntax%
	%y% = %Type%(0);
	for(%i% = 0; %i% < %n%; %i%++)
		%y% += %x%[%i%];
%$$
does not depend on the value of $italic x$$ or $italic y$$.
In this case, we say that the $italic Type$$ operation sequence 
is independent of $italic y$$ and the elements of $italic x$$.

$head Parameter$$
All $italic Base$$ objects are parameters.
An $syntax%AD<%Base%>%$$ object $italic u$$ is currently a parameter if
its value does not depend on the value of 
an $xref/Independent/$$ variable vector for an
$cref/active tape/glossary/Tape/Active/$$.
If $italic u$$ is a parameter, the function 
$xref/ParVar//Parameter(u)/$$ returns true
and $xref/ParVar//Variable(u)/$$ returns false.

$head Sparsity Pattern$$
$index sparsity, pattern$$
$index pattern, sparsity$$
$index efficient, sparsity$$
Given a matrix 
$latex A \in B^{m \times n}$$,
a boolean valued $latex m \times n$$ matrix $latex P$$ is a 
sparsity pattern for $latex A$$ if 
for $latex i = 0, \ldots , m-1$$ and $latex j = 0 , \ldots n-1$$,
$latex \[
A_{i,j} \neq 0  
\; \Rightarrow \; 
P_{i,j} = {\rm true}
\] $$
Given two sparsity patterns $latex P$$ and $italic Q$$ 
for a matrix $italic A$$, we say that $italic P$$ is more efficient than
$italic Q$$ if $italic P$$ has fewer true elements than $italic Q$$.

$head Tape$$

$subhead Active$$
A new tape is created and becomes active 
after each call of the form (see $cref/Independent/$$)
$syntax%
	Independent(%x%)
%$$
All operations that depend on the elements of $italic x$$ are
recorded on this active tape.

$subhead Inactive$$
The
$cref/operation sequence/glossary/Operation/Sequence/$$
stored in a tape must be transferred to a function object using the syntax
(see $cref/ADFun<Base> f(x, y)/FunConstruct/$$)
$syntax%
	ADFun<%Base%> %f%( %x%, %y%)
%$$
or using the syntax (see $cref/f.Dependent(x, y)/Dependent/$$)
$syntax%
	%f%.Dependent( %x%, %y%)
%$$
After such a transfer, the tape becomes inactive.

$subhead Independent Variable$$
While the tape is active, we refer to the elements of $italic x$$ 
as the independent variables for the tape.
When the tape becomes inactive,
the corresponding objects become 
$cref/parameters/glossary/Parameter/$$.

$subhead Dependent Variables$$
While the tape is active, we use the term dependent variables for the tape
for any objects whose value depends on the independent variables for the tape.
When the tape becomes inactive,
the corresponding objects become 
$cref/parameters/glossary/Parameter/$$.

 
$head Taylor Coefficient$$
Suppose $latex X : B \rightarrow B^n$$ is a 
is $latex p$$ times continuously differentiable function
in some neighborhood of zero.
For $latex k = 0 , \ldots , p$$, 
we use the column vector $latex x^{(k)} \in B^n$$ for the $th k$$ order 
Taylor coefficient corresponding to $latex X$$ 
which is defined by
$latex \[
	x^{(k)} = \frac{1}{k !} \Dpow{k}{t} X(0)
\] $$
It follows that 
$latex \[
	X(t) = x^{(0)} + x^{(1)} t + \cdots + x^{(p)} t^p  + R(t)
\]$$
where the remainder $latex R(t)$$ divided by $latex t^p$$ 
converges to zero and $latex t$$ goes to zero.


$head Variable$$
An $syntax%AD<%Base%>%$$ object $italic u$$ is a variable if
its value depends on an independent variable vector for
a currently $cref/active tape/glossary/Tape/Active/$$.
If $italic u$$ is a variable,
$xref/ParVar//Variable(u)/$$ returns true and 
$xref/ParVar//Parameter(u)/$$ returns false. 
For example,
directly after the code sequence
$syntax%
	Independent(%x%);
	AD<double> %u% = %x%[0];
%$$
the $syntax%AD<double>%$$ object $italic u$$ is currently a variable.
Directly after the code sequence
$syntax%
	Independent(%x%);
	AD<double> %u% = %x%[0];
	%u% = 5;
%$$
$italic u$$  is currently a $xref/glossary/Parameter/parameter/$$
(not a variable).
$pre

$$
Note that we often drop the word currently and 
just refer to an $syntax%AD<%Base%>%$$ object as a variable
or parameter.

$end
