<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>OpenMP Multi-Threading Newton's Method Source Code</title>
<meta name="description" id="description" content="OpenMP Multi-Threading Newton's Method Source Code"/>
<meta name="keywords" id="keywords" content=" multi_newton source example Openmp multi-thread "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_multi_newton.hpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="multi_newton.xml" target="_top">Prev</a>
</td><td><a href="sum_i_inv.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>omp_max_thread</option>
<option>openmp_run.sh</option>
<option>multi_newton.cpp</option>
<option>multi_newton.hpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>omp_max_thread-&gt;</option>
<option>openmp_run.sh</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>openmp_run.sh-&gt;</option>
<option>example_a11c.cpp</option>
<option>multi_newton.cpp</option>
<option>sum_i_inv.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>multi_newton.cpp-&gt;</option>
<option>multi_newton</option>
<option>multi_newton.hpp</option>
</select>
</td>
<td>multi_newton.hpp</td>
<td>Headings</td>
</tr></table><br/>










<center><b><big><big>OpenMP Multi-Threading Newton's Method Source Code</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 

# include &lt;cppad/cppad.hpp&gt;
# include &lt;cassert&gt;

# ifdef _OPENMP
# include &lt;omp.h&gt;
# endif

namespace { // BEGIN CppAD namespace

template &lt;class Fun&gt;
void one_newton(double &amp;fcur, double &amp;xcur, Fun &amp;fun, 
	double xlow, double xin, double xup, double epsilon, size_t max_itr)
{	using CppAD::AD;
	using CppAD::vector;
	using CppAD::abs;

	// domain space vector
	size_t n = 1;
	vector&lt; AD&lt;double&gt; &gt; X(n);
	// range space vector
	size_t m = 1;
	vector&lt; AD&lt;double&gt; &gt; Y(m);
	// domain and range differentials
	vector&lt;double&gt; dx(n), dy(m);

	size_t itr;
	xcur = xin;
	for(itr = 0; itr &lt; max_itr; itr++)
	{	// domain space vector
		X[0] = xcur;
		CppAD::Independent(X);
		// range space vector
		Y[0] = fun(X[0]);
		// F : X -&gt; Y
		CppAD::ADFun&lt;double&gt; F(X, Y);
		// fcur = F(xcur)
		fcur  = Value(Y[0]);
		// evaluate dfcur = F'(xcur)
		dx[0] = 1;
		dy = F.Forward(1, dx);
		double dfcur = dy[0];
		// check end of iterations
		if( abs(fcur) &lt;= epsilon )
			return;
		if( (xcur == xlow) &amp; (fcur * dfcur &gt; 0.) )
			return; 
		if( (xcur == xup)  &amp; (fcur * dfcur &lt; 0.) )
			return; 
		if( dfcur == 0. )
			return;
		// next Newton iterate
		double delta_x = - fcur / dfcur;
		if( xlow - xcur &gt;= delta_x )
			xcur = xlow;
		else if( xup - xcur &lt;= delta_x )
			xcur = xup;
		else	xcur = xcur + delta_x;
	}
	return;
}

template &lt;class Fun&gt;
void multi_newton(
	CppAD::vector&lt;double&gt; &amp;xout , 
	Fun &amp;fun                    , 
	size_t n_grid               , 
	double xlow                 , 
	double xup                  , 
	double epsilon              , 
	size_t max_itr              )
{	using CppAD::AD;
	using CppAD::vector;
	using CppAD::abs;

	// check argument values
	assert( xlow &lt; xup );
	assert( n_grid &gt; 0 );

	// OpenMP uses integers in place of size_t
	int i, n = int(n_grid);

	// set up grid
	vector&lt;double&gt; grid(n_grid + 1);
	vector&lt;double&gt; fcur(n_grid), xcur(n_grid), xmid(n_grid);
	double dx = (xup - xlow) / double(n_grid);
	for(i = 0; size_t(i) &lt; n_grid; i++)
	{	grid[i] = xlow + i * dx;
		xmid[i] = xlow + (i + .5) * dx;
	}
	grid[n_grid] = xup;

# ifdef _OPENMP
# pragma omp parallel for 
# endif
	for(i = 0; i &lt; n; i++) 
	{	one_newton(
			fcur[i]   ,
			xcur[i]   ,
			fun       , 
			grid[i]   , 
			xmid[i]   , 
			grid[i+1] , 
			epsilon   , 
			max_itr
		);
	}
// end omp parallel for

	// remove duplicates and points that are not solutions
	double xlast  = xlow;
	size_t ilast  = 0;
	size_t n_zero = 0;
	for(i = 0; size_t(i) &lt; n_grid; i++)
	{	if( abs( fcur[i] ) &lt;= epsilon )
		{	if( n_zero == 0 )
			{	xcur[n_zero++] = xlast = xcur[i];
				ilast = i;
			}
			else if( fabs( xcur[i] - xlast ) &gt; dx ) 
			{	xcur[n_zero++] = xlast = xcur[i];
				ilast = i;
			}
			else if( fabs( fcur[i] ) &lt; fabs( fcur[ilast] ) )
			{	xcur[n_zero - 1] = xlast = xcur[i]; 
				ilast = i;
			}
		}
	}

	// resize output vector and set its values
	xout.resize(n_zero);
	for(i = 0; size_t(i) &lt; n_zero; i++)
		xout[i] = xcur[i];

	return;
}

} // END CppAD namespace
</pre>
</font></code>

<hr/>Input File: openmp/multi_newton.hpp

</body>
</html>
