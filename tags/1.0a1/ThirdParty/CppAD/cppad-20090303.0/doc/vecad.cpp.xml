<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>AD Vectors that Record Index Operations: Example and Test</title>
<meta name="description" id="description" content="AD Vectors that Record Index Operations: Example and Test"/>
<meta name="keywords" id="keywords" content=" Vecad example test "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_vecad.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="vecad.xml" target="_top">Prev</a>
</td><td><a href="base_require.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>VecAD</option>
<option>VecAD.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>AD-&gt;</option>
<option>Default</option>
<option>ad_copy</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>VecAD-&gt;</option>
<option>VecAD.cpp</option>
</select>
</td>
<td>VecAD.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>AD Vectors that Record Index Operations: Example and Test</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 

# include &lt;cppad/cppad.hpp&gt;
# include &lt;cassert&gt;

namespace {
	// return the vector x that solves the following linear system 
	//	a[0] * x[0] + a[1] * x[1] = b[0]
	//	a[2] * x[0] + a[3] * x[1] = b[1]
	// in a way that will record pivot operations on the AD&lt;double&gt; tape
	typedef CPPAD_TEST_VECTOR&lt; CppAD::AD&lt;double&gt; &gt; Vector;
	Vector Solve(const Vector &amp;a , const Vector &amp;b)
	{	using namespace CppAD;
		assert(a.size() == 4 &amp;&amp; b.size() == 2);	

		// copy the vector b into the VecAD object B
		VecAD&lt;double&gt; B(2); 
		AD&lt;double&gt;    u;
		for(u = 0; u &lt; 2; u += 1.)
			B[u] = b[ Integer(u) ];

		// copy the matrix a into the VecAD object A
		VecAD&lt;double&gt; A(4); 
		for(u = 0; u &lt; 4; u += 1.)
			A[u] = a [ Integer(u) ];

		// tape AD operation sequence that determines the row of A
		// with maximum absolute element in column zero
		AD&lt;double&gt; zero(0), one(1);
		AD&lt;double&gt; rmax = CondExpGt(abs(a[0]), abs(a[2]), zero, one);

		// divide row rmax by A(rmax, 0)
		A[rmax * 2 + 1]  = A[rmax * 2 + 1] / A[rmax * 2 + 0];
		B[rmax]          = B[rmax]         / A[rmax * 2 + 0];
		A[rmax * 2 + 0]  = one;

		// subtract A(other,0) times row rmax from other row
		AD&lt;double&gt; other   = one - rmax;
		A[other * 2 + 1]   = A[other * 2 + 1]
		                   - A[other * 2 + 0] * A[rmax * 2 + 1];
		B[other]           = B[other]
		                   - A[other * 2 + 0] * B[rmax];
		A[other * 2 + 0] = zero;

		// back substitute to compute the solution vector x
		CPPAD_TEST_VECTOR&lt; AD&lt;double&gt; &gt; x(2);
		size_t iother = Integer(other);
		size_t imax   = Integer(rmax);
		x[iother]     = B[other] / A[other * 2 + 1];
		x[imax ]      = (B[rmax] - A[rmax * 2 + other] * x[iother])
		              / A[rmax * 2 + 0];

		return x;
	}
}

bool VecAD(void)
{	bool ok = true;
	
	using CppAD::AD;
	using CppAD::NearEqual;

	// domain space vector
	size_t n = 4;
	CPPAD_TEST_VECTOR&lt; AD&lt;double&gt; &gt; X(n);
	X[0] = 2.; X[1] = 0.;  // 2 * identity matrix (rmax in Solve will be 0)
	X[2] = 0.; X[3] = 2.; 

	// declare independent variables and start tape recording
	CppAD::Independent(X);

	// define the vector b
	CPPAD_TEST_VECTOR&lt; AD&lt;double&gt; &gt; B(2);
	B[0] = 0.;
	B[1] = 1.;

	// range space vector solves X * Y = b
	size_t m = 2;
	CPPAD_TEST_VECTOR&lt; AD&lt;double&gt; &gt; Y(m);
	Y = Solve(X, B);

	// create f: X -&gt; Y and stop tape recording
	CppAD::ADFun&lt;double&gt; f(X, Y); 

	// check value 
	ok &amp;= NearEqual(Y[0] , B[0] / X[0],  1e-10 , 1e-10);
	ok &amp;= NearEqual(Y[1] , B[1] / X[3],  1e-10 , 1e-10);

	// forward computation of partials w.r.t. x[0]
	CPPAD_TEST_VECTOR&lt;double&gt; dx(n);
	CPPAD_TEST_VECTOR&lt;double&gt; dy(m);
	dx[0] = 1.; dx[1] = 0.;
	dx[2] = 0.; dx[3] = 0.;
	dy    = f.Forward(1, dx);
	ok   &amp;= NearEqual(dy[0], - B[0] / (X[0] * X[0]) , 1e-10, 1e-10);
	ok   &amp;= NearEqual(dy[1],                     0. , 1e-10, 1e-10);

	// compute the solution for a new x matrix such that pivioting
	// on the original rmax row would divide by zero
	CPPAD_TEST_VECTOR&lt;double&gt; x(n);  
	CPPAD_TEST_VECTOR&lt;double&gt; y(m);
	x[0] = 0.; x[1] = 2.;
	x[2] = 2.; x[3] = 0.;
	y    = f.Forward(0, x);
	ok &amp;= NearEqual(y[0] , B[1] / x[2],  1e-10 , 1e-10);
	ok &amp;= NearEqual(y[1] , B[0] / x[1],  1e-10 , 1e-10);
	
	// forward computation of partials w.r.t. x[1]
	dx[0] = 0.; dx[1] = 1.;
	dx[2] = 0.; dx[3] = 0.;
	dy    = f.Forward(1, dx);
	ok   &amp;= NearEqual(dy[0],                     0. , 1e-10, 1e-10);
	ok   &amp;= NearEqual(dy[1], - B[0] / (x[1] * x[1]) , 1e-10, 1e-10);

	return ok;
}
</pre>
</font></code>


<hr/>Input File: example/vec_ad.cpp

</body>
</html>
