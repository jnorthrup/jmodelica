<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>AD Absolute Value Function: Example and Test</title>
<meta name="description" id="description" content="AD Absolute Value Function: Example and Test"/>
<meta name="keywords" id="keywords" content=" abs example test derivative directional "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_abs.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="abs.xml" target="_top">Prev</a>
</td><td><a href="atan2.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>MathOther</option>
<option>abs</option>
<option>Abs.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>std_math_ad</option>
<option>MathOther</option>
<option>CondExp</option>
<option>Discrete</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>MathOther-&gt;</option>
<option>abs</option>
<option>atan2</option>
<option>erf</option>
<option>pow</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>abs-&gt;</option>
<option>Abs.cpp</option>
</select>
</td>
<td>Abs.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>AD Absolute Value Function: Example and Test</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 

# include &lt;cppad/cppad.hpp&gt;

bool Abs(void)
{	bool ok = true;

	using CppAD::abs;
	using CppAD::AD;
	using CppAD::NearEqual;

	// domain space vector
	size_t n = 1;
	CPPAD_TEST_VECTOR&lt; AD&lt;double&gt; &gt; x(n);
	x[0]     = 0.;

	// declare independent variables and start tape recording
	CppAD::Independent(x);

	// range space vector
	size_t m = 3;
	CPPAD_TEST_VECTOR&lt; AD&lt;double&gt; &gt; y(m);
	y[0]     = abs(x[0] - 1.);
	y[1]     = abs(x[0]);
	y[2]     = abs(x[0] + 1.);

	// create f: x -&gt; y and stop tape recording
	CppAD::ADFun&lt;double&gt; f(x, y);

	// check values
	ok &amp;= (y[0] == 1.);
	ok &amp;= (y[1] == 0.);
	ok &amp;= (y[2] == 1.);

	// forward computation of partials w.r.t. a positive x[0] direction
	size_t p = 1;
	CPPAD_TEST_VECTOR&lt;double&gt; dx(n);
	CPPAD_TEST_VECTOR&lt;double&gt; dy(m);
	dx[0] = 1.;
	dy    = f.Forward(p, dx);
	ok  &amp;= (dy[0] == - dx[0]);
	ok  &amp;= (dy[1] == + dx[0]);
	ok  &amp;= (dy[2] == + dx[0]);

	// forward computation of partials w.r.t. a negative x[0] direction
	dx[0] = -1.;
	dy    = f.Forward(p, dx);
	ok  &amp;= (dy[0] == - dx[0]);
	ok  &amp;= (dy[1] == - dx[0]);
	ok  &amp;= (dy[2] == + dx[0]);

	// reverse computation of derivative of y[0] 
	p    = 0;
	CPPAD_TEST_VECTOR&lt;double&gt;  w(m);
	CPPAD_TEST_VECTOR&lt;double&gt; dw(n);
	w[0] = 1.; w[1] = 0.; w[2] = 0.;
	dw   = f.Reverse(p+1, w);
	ok  &amp;= (dw[0] == -1.);

	// reverse computation of derivative of y[1] 
	w[0] = 0.; w[1] = 1.; w[2] = 0.;
	dw   = f.Reverse(p+1, w);
	ok  &amp;= (dw[0] == 0.);

	// reverse computation of derivative of y[2] 
	w[0] = 0.; w[1] = 0.; w[2] = 1.;
	dw   = f.Reverse(p+1, w);
	ok  &amp;= (dw[0] == 1.);

	// use a VecAD&lt;Base&gt;::reference object with abs
	CppAD::VecAD&lt;double&gt; v(1);
	AD&lt;double&gt; zero(0);
	v[zero]           = -1;
	AD&lt;double&gt; result = abs(v[zero]);
	ok   &amp;= NearEqual(result, 1., 1e-10, 1e-10);

	return ok;
}
</pre>
</font></code>


<hr/>Input File: example/abs.cpp

</body>
</html>
