<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>AD Boolean Functions: Example and Test</title>
<meta name="description" id="description" content="AD Boolean Functions: Example and Test"/>
<meta name="keywords" id="keywords" content=" example Ad bool test "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_boolfun.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="boolfun.xml" target="_top">Prev</a>
</td><td><a href="parvar.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>BoolValued</option>
<option>BoolFun</option>
<option>BoolFun.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>AD-&gt;</option>
<option>Default</option>
<option>ad_copy</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>BoolValued-&gt;</option>
<option>Compare</option>
<option>NearEqualExt</option>
<option>BoolFun</option>
<option>ParVar</option>
<option>EqualOpSeq</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>BoolFun-&gt;</option>
<option>BoolFun.cpp</option>
</select>
</td>
<td>BoolFun.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>AD Boolean Functions: Example and Test</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 

# include &lt;cppad/cppad.hpp&gt;
# include &lt;complex&gt;


// define abbreviation for double precision complex 
typedef std::complex&lt;double&gt; Complex;

namespace {
	// a unary bool function with Complex argument
	static bool IsReal(const Complex &amp;x)
	{	return x.imag() == 0.; }

	// a binary bool function with Complex arguments
	static bool AbsGeq(const Complex &amp;x, const Complex &amp;y)
	{	double axsq = x.real() * x.real() + x.imag() * x.imag();
		double aysq = y.real() * y.real() + y.imag() * y.imag();

		return axsq &gt;= aysq;
	}

	// Create version of IsReal with AD&lt;Complex&gt; argument
	// inside of namespace and outside of any other function.
	CPPAD_BOOL_UNARY(Complex, IsReal)

	// Create version of AbsGeq with AD&lt;Complex&gt; arguments
	// inside of namespace and outside of any other function.
	CPPAD_BOOL_BINARY(Complex, AbsGeq)

}
bool BoolFun(void)
{	bool ok = true;

	CppAD::AD&lt;Complex&gt; x = Complex(1.,  0.);
	CppAD::AD&lt;Complex&gt; y = Complex(1.,  1.);

	ok &amp;= IsReal(x);
	ok &amp;= ! AbsGeq(x, y);

	return ok;
}
</pre>
</font></code>


<hr/>Input File: example/bool_fun.cpp

</body>
</html>
