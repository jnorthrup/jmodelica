<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Construct an ADFun Object and Stop Recording</title>
<meta name="description" id="description" content="Construct an ADFun Object and Stop Recording"/>
<meta name="keywords" id="keywords" content=" Adfun construct tape stop recording default constructor sequence copy assignment operator Openmp Dependent "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_funconstruct_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="independent.cpp.xml" target="_top">Prev</a>
</td><td><a href="fun_assign.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>FunConstruct</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>Example</option>
<option>configure</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>ADFun-&gt;</option>
<option>Independent</option>
<option>FunConstruct</option>
<option>Dependent</option>
<option>abort_recording</option>
<option>seq_property</option>
<option>FunEval</option>
<option>Drivers</option>
<option>FunCheck</option>
<option>omp_max_thread</option>
<option>optimize</option>
<option>FunDeprecated</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>FunConstruct-&gt;</option>
<option>fun_assign.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>x</option>
<option>y</option>
<option>VectorAD</option>
<option>Default Constructor</option>
<option>Sequence Constructor</option>
<option>Copy Constructor</option>
<option>Assignment Operator</option>
<option>---..Taylor Coefficients</option>
<option>---..Sparsity Patterns</option>
<option>OpenMP</option>
<option>Example</option>
<option>---..Sequence Constructor</option>
<option>---..Default Constructor</option>
<option>---..Assignment Operator</option>
</select>
</td>
</tr></table><br/>





<center><b><big><big>Construct an ADFun Object and Stop Recording</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br/>

<code><font color="blue"><span style='white-space: nowrap'>ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>g</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>g</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
The 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 can 
store an AD of 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>

<a href="glossary.xml#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&#xA0;sequence</span></a>
.
It can then be used to calculate derivatives of the corresponding
<a href="glossary.xml#AD Function" target="_top"><span style='white-space: nowrap'>AD&#xA0;function</span></a>


<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>F</mi>
<mo stretchy="false">:</mo>
<msup><mi mathvariant='italic'>B</mi>
<mi mathvariant='italic'>n</mi>
</msup>
<mo stretchy="false">&#x02192;</mo>
<msup><mi mathvariant='italic'>B</mi>
<mi mathvariant='italic'>m</mi>
</msup>
</mrow></math>

where 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>B</mi>
</mrow></math>

 is the space corresponding to objects of type 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
.

<br/>
<br/>
<b><big><a name="x" id="x">x</a></big></b>
<br/>
If the argument 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 is present, it has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>VectorAD</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
It must be the vector argument in the previous call to
<a href="independent.xml" target="_top"><span style='white-space: nowrap'>Independent</span></a>
.
Neither its size, or any of its values, are allowed to change
between calling

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Independent(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>
and 

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>
.

<br/>
<br/>
<b><big><a name="y" id="y">y</a></big></b>
<br/>
If the argument 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 is present, it has prototype

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>VectorAD</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
The sequence of operations that map 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>

to 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 are stored in the ADFun object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.

<br/>
<br/>
<b><big><a name="VectorAD" id="VectorAD">VectorAD</a></big></b>
<br/>
The type 
<code><i><font color="black"><span style='white-space: nowrap'>VectorAD</span></font></i></code>
 must be a <a href="simplevector.xml" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with
<a href="simplevector.xml#Elements of Specified Type" target="_top"><span style='white-space: nowrap'>elements&#xA0;of&#xA0;type</span></a>
 

<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
.
The routine <a href="checksimplevector.xml" target="_top"><span style='white-space: nowrap'>CheckSimpleVector</span></a>
 will generate an error message
if this is not the case.

<br/>
<br/>
<b><big><a name="Default Constructor" id="Default Constructor">Default Constructor</a></big></b>



<br/>
The default constructor 

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
creates an 

<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 object with no corresponding operation sequence; i.e.,

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_var()<br/>
</span></font></code>
returns the value zero (see <a href="seq_property.xml#size_var" target="_top"><span style='white-space: nowrap'>size_var</span></a>
).

<br/>
<br/>
<b><big><a name="Sequence Constructor" id="Sequence Constructor">Sequence Constructor</a></big></b>



<br/>
The default constructor 
The sequence constructor 

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>
creates the 
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
,
stops the recording of AD of 
<code><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i></code>
 operations
corresponding to the call

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Independent(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>
and stores the corresponding operation sequence in the object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.
It then stores the first order taylor_ coefficients 
(corresponding to the value of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
) in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.
This is equivalent to the following steps using the default constructor:

<ol type="1"><li>
Create 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 with the default constructor

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>;<br/>
</span></font></code>
</li><li>
Stop the tape and storing the operation sequence using

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Dependent(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>);<br/>
</span></font></code>
(see <a href="dependent.xml" target="_top"><span style='white-space: nowrap'>Dependent</span></a>
).
</li><li>

Calculating the first order taylor_ coefficients for all 
the variables in the operation sequence using

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Forward(</span></font><i><font color="black"><span style='white-space: nowrap'>p</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>x_p</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>
with 
<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i></code>
 equal to zero and the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>x_p</span></font></i></code>

equal to the corresponding elements of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>

(see <a href="forward.xml" target="_top"><span style='white-space: nowrap'>Forward</span></a>
).
</li></ol>


<br/>
<br/>
<b><big><a name="Copy Constructor" id="Copy Constructor">Copy Constructor</a></big></b>



<br/>
It is an error to attempt to use the <code><font color="blue">%ADFun&lt;%Base%&gt;%</font></code> copy constructor;
i.e., the following syntax is not allowed:

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;g(f)<br/>
</span></font></code>
where 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 is an <code><font color="blue">%ADFun&lt;%Base%&gt;%</font></code> object.
Use its <a href="funconstruct.xml#Default Constructor" target="_top"><span style='white-space: nowrap'>default&#xA0;constructor</span></a>
 instead
and its assignment operator.

<br/>
<br/>
<b><big><a name="Assignment Operator" id="Assignment Operator">Assignment Operator</a></big></b>



<br/>
The 
<code><font color="blue"><span style='white-space: nowrap'>ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>
 assignment operation

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>g</span></font></i><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>
.
makes a copy of the operation sequence currently stored in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>

in the object 
<code><i><font color="black"><span style='white-space: nowrap'>g</span></font></i></code>
.
The object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 is not affected by this operation and
can be <code><font color="blue">const</font></code>.
Any operation sequence or other information in 
<code><i><font color="black"><span style='white-space: nowrap'>g</span></font></i></code>
 is lost.

<br/>
<br/>
<b><a name="Assignment Operator.Taylor Coefficients" id="Assignment Operator.Taylor Coefficients">Taylor Coefficients</a></b>
<br/>
The Taylor coefficient information currently stored in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 
(computed by <a href="forward.xml" target="_top"><span style='white-space: nowrap'>f.Forward</span></a>
) is 
copied to 
<code><i><font color="black"><span style='white-space: nowrap'>g</span></font></i></code>
.
Hence, directly after this operation

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>g</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_taylor()&#xA0;==&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_taylor()<br/>
</span></font></code>
<br/>
<b><a name="Assignment Operator.Sparsity Patterns" id="Assignment Operator.Sparsity Patterns">Sparsity Patterns</a></b>
<br/>
The forward Jacobian sparsity pattern currently stored in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 
(computed by <a href="forsparsejac.xml" target="_top"><span style='white-space: nowrap'>f.ForSparseJac</span></a>
) is 
copied to 
<code><i><font color="black"><span style='white-space: nowrap'>g</span></font></i></code>
.
Hence, directly after this operation

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>g</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_forward_bool()&#xA0;==&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_forward_bool()<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>g</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_forward_set()&#xA0;&#xA0;==&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_forward_set()<br/>
</span></font></code>
<br/>
<b><big><a name="OpenMP" id="OpenMP">OpenMP</a></big></b>




<br/>
In the case of multi-threading with OpenMP,
the call to <code><font color="blue">Independent</font></code>
and the corresponding call to

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>(&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>
or 

<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.Dependent(&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>
must be preformed by the same thread.


<br/>
<br/>
<b><big><a name="Example" id="Example">Example</a></big></b>


<br/>
<br/>
<b><a name="Example.Sequence Constructor" id="Example.Sequence Constructor">Sequence Constructor</a></b>
<br/>
The file
<a href="independent.cpp.xml" target="_top"><span style='white-space: nowrap'>Independent.cpp</span></a>
 
contains an example and test of the sequence constructor.
It returns true if it succeeds and false otherwise.

<br/>
<br/>
<b><a name="Example.Default Constructor" id="Example.Default Constructor">Default Constructor</a></b>
<br/>
The files
<a href="funcheck.cpp.xml" target="_top"><span style='white-space: nowrap'>FunCheck.cpp</span></a>
 
and
<a href="heslagrangian.cpp.xml" target="_top"><span style='white-space: nowrap'>HesLagrangian.cpp</span></a>

contain an examples and tests using the default constructor.
They return true if they succeed and false otherwise.


<br/>
<br/>
<b><a name="Example.Assignment Operator" id="Example.Assignment Operator">Assignment Operator</a></b>
<br/>
The file 
<a href="fun_assign.cpp.xml" target="_top"><span style='white-space: nowrap'>fun_assign.cpp</span></a>

contains an example and test of the 
<code><font color="blue"><span style='white-space: nowrap'>ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>

assignment operator.
It returns true if it succeeds and false otherwise.


<hr/>Input File: cppad/local/fun_construct.hpp

</body>
</html>
