/*
Copyright (C) 2016 Modelon AB

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * This aspect contains all code that is related to C and CAD code-gen of
 * blocks.
 * 
 * There are still methods related to blocks in CCodeGen.jrag nad
 * CADCodeGen.jrag. These should be moved to this file when they are
 * refactored!
 */
aspect CCodeGenBlocks {
    
    public CodePrinter AbstractEquationBlock.blockPrinter() {
        return new CPrettyPrinter(this);
    }

    /**
     * Generates variable declarations for a block, used both when printing the
     * dae but also residual functions.
     */
    public void AbstractEquationBlock.genVarDecls(CodePrinter p, CodeStream str, String indent) {
        if (isSolvable()) {
            genVarDecls(p, str, indent, null);
        } else {
            for (FRelExp relExp : inactiveSwitches_C())
                p.printVarDecls(relExp, str, indent);
            for (FRelExp relExp : inactiveInitialSwitches_C())
                p.printVarDecls(relExp, str, indent);
        }
    }

    @Override
    public void HomotopyBlock.genVarDecls(CodePrinter p, CodeStream str, String indent) {
        subBLTs()[SIMPLIFIED_BLT_POS].genVarDecls(p, str, indent);
    }

    /**
     * Used when generating temporaires in the residual functions. This
     * delegates to the genVarDecls().
     */
    protected void AbstractEquationBlock.genVarDecls(CodePrinter p, CodeStream str, String indent, Set<ASTNode> visited) {
        for (ASTNode n : blockResidualNodes())
            if (visited == null || visited.add(n))
                p.printVarDecls(n, str, indent);
    }

    @Override
    protected void AlgorithmBlock.genVarDecls(CodePrinter p, CodeStream str, String indent, Set<ASTNode> visited) {
        p.printDecl(equation(), str, indent, visited, activeVars, isSolvable());
    }
    
    @Override
    protected void EquationBlock.genVarDecls(CodePrinter p, CodeStream str, String indent, Set<ASTNode> visited) {
        if (visited == null)
            visited = new HashSet<ASTNode>();
        for (SimpleEquationBlock seb : localSolvedBlocks())
            seb.genVarDecls(p, str, indent, visited);
        for (SimpleEquationBlock seb : unsolvedBlocks())
            seb.genVarDecls(p, str, indent, visited);
    }

    protected Collection<AbstractEquationBlock> AbstractEquationBlock.blockResidualBlocks() {
        Collection<AbstractEquationBlock> res = new LinkedHashSet<AbstractEquationBlock>();
        blockResidualBlocks(res);
        return res;
    }

    protected void AbstractEquationBlock.blockResidualBlocks(Collection<AbstractEquationBlock> res) {
        res.add(this);
    }

    @Override
    protected void AlgorithmBlock.blockResidualBlocks(Collection<AbstractEquationBlock> res) {
        res.add(this);
    }

    @Override
    protected void EquationBlock.blockResidualBlocks(Collection<AbstractEquationBlock> res) {
        for (SimpleEquationBlock seb : localSolvedBlocks()) {
            res.add(seb);
        }
        for (SimpleEquationBlock seb : unsolvedBlocks()) {
            res.add(seb);
        }
    }

    /**
     * Returns a set of all nodes which needs to declare variables in the
     * residual function.
     * 
     * TODO: It might be possible to remove this and implement in
     * genVarDecls(..., visited) instead. The problem is probably that we need
     * to include solution() below! 
     */
    public Set<ASTNode> AbstractEquationBlock.blockResidualNodes() {
        Set<ASTNode> res = new LinkedHashSet<ASTNode>();
        res.addAll(allLocalEquations());
        return res;
    }

    @Override
    public Set<ASTNode> SolvedScalarEquationBlock.blockResidualNodes() {
        return Collections.<ASTNode>singleton(solution());
    }

    @Override
    public Set<ASTNode> EquationBlock.blockResidualNodes() {
        Set<ASTNode> res = super.blockResidualNodes();
        res.addAll(localNonRealEquations());
        return res;
    }

    @Override
    public Set<ASTNode> TornEquationBlock.blockResidualNodes() {
        Set<ASTNode> res = super.blockResidualNodes();
        res.addAll(localSolvedEquations());
        return res;
    }

    /**
     * Generate code for this block in the context of a BLT.
     */
    public void AbstractEquationBlock.genSolvedInBLT(CodePrinter p, CodeStream str, String indent) {
        genSolved(p, str, indent, false, new HashSet<FAbstractEquation>());
    }

    /**
     * Generate code for this block in the context of a residual function.
     */
    public void AbstractEquationBlock.genSolvedInResFunc(CodePrinter p, CodeStream str, String indent,
            Set<FAbstractEquation> visited) {
        genSolved(p, str, indent, true, visited);
    }

    @Override
    public void AbstractSubBLTBlock.genSolvedInResFunc(CodePrinter p, CodeStream str, String indent,
            Set<FAbstractEquation> visited) {
        throw new UnsupportedOperationException("Can not produce solved statements for " + getClass().getSimpleName() + " in a residual function! This block type is not ment to be present inside other blocks, something has gone horribly wrong here!");
    }

    /**
     * Internal function which is used for generating code for this block in
     * several contexts. E.g. BLT or residual function.
     */
    protected abstract void AbstractEquationBlock.genSolved(CodePrinter p, CodeStream str, String indent,
            boolean inResFunc, Set<FAbstractEquation> visited);

    @Override
    protected void EquationBlock.genSolved(CodePrinter p, CodeStream str, String indent,
            boolean inResFunc, Set<FAbstractEquation> visited) {
        genBlockResidualCall(p, str, indent);
    }

    @Override
    protected void SimpleEquationBlock.genSolved(CodePrinter p, CodeStream str, String indent,
            boolean inResFunc, Set<FAbstractEquation> visited) {
        if (hasResidualFunction()) {
            genBlockResidualCall(p, str, indent);
        } else if (genBlockEnabled()) {
            Collection<FVariable> forVariables = allLocalVariables();
            Collection<Integer> forIndices = assignedIndices();
            if (inResFunc && !isReal()) {
                // Non-reals needs to be handled specially in the residual functions
                if (equation().isMixed()) {
                    equation().genBlockEval_C(p, str, indent, visited, forVariables, forIndices);
                }
                if (equation().shouldProduceNonRealGuard_C(forVariables)) {
                    str.format("%sif (evaluation_mode & JMI_BLOCK_EVALUATE_NON_REALS) {\n", indent);
                    p.genSolved(equation(), str, p.indent(indent), visited, forVariables, forIndices);
                    str.format("%s}\n", indent);
                } else {
                    p.genSolved(equation(), str, indent, visited, forVariables, forIndices);
                }
            } else {
                p.genSolved(equation(), str, indent, visited, forVariables, forIndices);
            }
            if (!inResFunc && !p.inInitialSystem()) {
                // Write back of pre variables is only done in the DAE BLT
                for (FVariable var : allLocalVariables()) {
                    if (var.isDiscrete() && !var.isPreVariable()) {
                        str.formatln("%s%s = %s;", indent, var.myPreVariable().name_C(), var.name_C());
                    }
                }
            }
        } else {
            throw new UnsupportedOperationException("Unable to produce solving code for block of type " + getClass().getSimpleName());
        }
    }

    /**
     * Helper method which determines if a guard is needed for the non real
     * equation.
     */
    syn boolean FAbstractEquation.shouldProduceNonRealGuard_C(Collection<FVariable> fvs) {
        if (isSampleEquation()) {
            return false;
        }
        for (FVariable fv : fvs) {
            if (!fv.isTemporary()) {
                return true;
            }
        }
        return false;
    }

    /**
     * Helper method which returns true if the right hand side is an sample
     * operator.
     */
    syn boolean FAbstractEquation.isSampleEquation() = false;
    eq FEquation.isSampleEquation()                  = getRight().isFSampleExp();

    /**
     * Helper method which returns true if this expression is of the type 
     * FSampleExp.
     */
    syn boolean FExp.isFSampleExp() = false;
    eq FSampleExp.isFSampleExp()    = true;



    @Override
    protected void MetaEquationBlock.genSolved(CodePrinter p, CodeStream str, String indent,
            boolean inResFunc, Set<FAbstractEquation> visited) {
        p.printPreSteps(equation(), str, indent);
        p.print(equation(), str, indent);
        p.printPostSteps(equation(), str, indent);
    }
    
    @Override
    protected void DynamicStateBlock.genSolved(CodePrinter p, CodeStream str, String indent,
            boolean inResFunc, Set<FAbstractEquation> visited) {
        String innerIndent = p.indent(indent);
        for (DynamicStateSet set : sets) {
            str.formatln("%sif (jmi->atInitial || jmi->atEvent) {", indent);
            str.formatln("%sjmi_dynamic_state_update_states(jmi, %d);", innerIndent, set.id_C());
            str.formatln("%s}", indent);
        }
        boolean first = true;
        for (DynamicStateBLT blt : subBLTs()) {
            if (first)
                str.format("%sif (", indent);
            else
                str.format("%s} else if (", indent);
            first = false;
            blt.genSubBLTTest(p, str);
            str.println(") {");
            blt.genVarDecls(p, str, innerIndent);
            blt.genOdeDerivativeBlocks(p, str, innerIndent);
        }
        str.formatln("%s}", indent);
    }
    
    /**
     * Helper method that print the if branch test that tests weather this 
     * sub-BLT should be used given the current states.
     */
    public void DynamicStateBLT.genSubBLTTest(CodePrinter p, CodeStream str) {
        DynamicStateSet previousSet = null;
        for (FVariable var : states()) {
            DynamicStateSet set = var.dynamicStateSet();
            if (set != previousSet) {
                if (previousSet != null)
                    str.print(") && ");
                previousSet = set;
                str.format("jmi_dynamic_state_check_is_state(jmi, %d", set.id_C());
            }
            str.format(", %d", var.valueReference());
        }
        str.print(")");
    }
 
    @Override
    protected void HomotopyBlock.genSolved(CodePrinter p, CodeStream str, String indent,
            boolean inResFunc, Set<FAbstractEquation> visited) {
        str.formatln("%s/* Start of section for simplified version of homotopy*/", indent);
        CodePrinter simplifiedPrinter = p.homotopySimplifiedPrinter();
        for (AbstractEquationBlock block : subBLTs()[SIMPLIFIED_BLT_POS]) {
            block.genSolved(simplifiedPrinter, str, indent, inResFunc, visited); 
        }
        str.formatln("%s/* End of section for simplified version of homotopy*/", indent);
        homotopySubBlock.genSolved(p, str, indent, inResFunc, visited);
    }

    @Override
    protected void HomotopySubBlock.genSolved(CodePrinter p, CodeStream str, String indent,
            boolean inResFunc, Set<FAbstractEquation> visited) {
        String var = p.inInitialSystem() ? "dae_init_block_residuals" : "dae_block_residuals";
        str.format("%sef |= jmi_solve_block_with_homotopy_residual(jmi->%s[%d]);\n", indent, var, getSequenceNumber());
    }

    /**
     * Helper method which returns true if the block should be printed inline
     * without an residual function call.
     */
    public boolean SimpleEquationBlock.genBlockEnabled()             { return false; }
    @Override
    public boolean SolvedScalarEquationBlock.genBlockEnabled()       { return true; }
    @Override
    public boolean SolvedAlgorithmBlock.genBlockEnabled()            { return true; }
    @Override
    public boolean SolvedFunctionCallEquationBlock.genBlockEnabled() { return true; }
    @Override
    public boolean SolvedIfEquationBlock.genBlockEnabled()           { return true; }

    /**
     * Generates a call to the residual function for this block.
     */
    public void AbstractEquationBlock.genBlockResidualCall(CodePrinter p, CodeStream str, String indent) {
        for (FRelExp relExp : inactiveSwitches_C())
            p.printPreSteps(relExp, str, indent);
        for (FRelExp relExp : inactiveInitialSwitches_C())
            p.printPreSteps(relExp, str, indent);
        p.genBlockResidualCall(this, str, indent);
        for (FRelExp relExp : inactiveSwitches_C())
            p.printPostSteps(relExp, str, indent);
        for (FRelExp relExp : inactiveInitialSwitches_C())
            p.printPostSteps(relExp, str, indent);
    }

    /**
     * C specific dispatch method for
     * AbstractEquationBlock.genBlockResidualCall()
     */
    public void AbstractEquationBlock.genBlockResidualCall_C(CodePrinter p, CodeStream str, String indent) {
        String var = p.inInitialSystem() ? "dae_init_block_residuals" : "dae_block_residuals";
        genBlockResidualSetUpFunctionCall_C(p, str, indent);
        str.formatln("%sef |= jmi_solve_block_residual(jmi->%s[%d]);", indent, var, getSequenceNumber());
    }

    /**
     * CAD specific dispatch method for
     * AbstractEquationBlock.genBlockResidualCall()
     */
    public void AbstractEquationBlock.genBlockResidualCall_CAD(CodePrinter p, CodeStream str, String indent) {
        String var = p.inInitialSystem() ? "dae_init_block_residuals" : "dae_block_residuals";
        str.formatln("%sef |= jmi_ode_unsolved_block_dir_der(jmi, jmi->%s[%d]);", indent, var, getSequenceNumber());
    }

    /**
     * Generates solution statements for all solved equations in this block. 
     * This method is usually called when generating residual functions
     */
    public void AbstractEquationBlock.genSolvedPart(CodePrinter p, CodeStream str,
            String indent, Set<FAbstractEquation> visited) {}

    @Override
    public void EquationBlock.genSolvedPart(CodePrinter p, CodeStream str,
            String indent, Set<FAbstractEquation> visited) {
        // Loop over all solved blocks and write the expressions
        for (AbstractEquationBlock aeb : solvedBlocks())
            aeb.genSolvedInResFunc(p, str, indent, visited);
    }

    /*=========================================================================
     *   Code explicitly related to residual functions
     =========================================================================*/

    /**
     * Helper method which return true if the block is solved by evaluation of
     * an residual function and hence need to produce one.
     */
    public boolean AbstractEquationBlock.hasResidualFunction() {
        return getSequenceNumber() >= 0;
    }

    /**
     * Generates residual equations for all unsolved equations in this block.
     * This method is usually called when generating residual functions
     */
    public abstract void AbstractEquationBlock.genResidualPart(CodePrinter p, CodeStream str, String indent,
            Enumerator enumerator, Set<FAbstractEquation> visited);

    @Override
    public void EquationBlock.genResidualPart(CodePrinter p, CodeStream str, String indent,
            Enumerator enumerator, Set<FAbstractEquation> visited) {
        for (SimpleEquationBlock block : unsolvedBlocks())
            block.genBlockResidual(p, str, indent, enumerator, visited);
    }

    @Override
    public void AbstractSubBLTBlock.genResidualPart(CodePrinter p, CodeStream str, String indent,
            Enumerator enumerator, Set<FAbstractEquation> visited) {
        throw new UnsupportedOperationException("Can not produce residual statements for " + getClass().getSimpleName() + "! This block type does not have any residaul equations, something has gone horribly wrong here!");
    }

    @Override
    public void SimpleEquationBlock.genResidualPart(CodePrinter p, CodeStream str, String indent,
            Enumerator enumerator, Set<FAbstractEquation> visited) {
        genBlockResidual(p, str, indent, enumerator, visited);
    }

    /**
     * Generates a single residual equation for this block
     */
    public void AbstractEquationBlock.genBlockResidual(CodePrinter p, CodeStream str, String indent,
            Enumerator enumerator, Set<FAbstractEquation> visited) {
        throw new UnsupportedOperationException("Can not produce residual statement for " + getClass().getSimpleName() + "! This kind of block should not end up in the residual of another block, something has gone horribly wrong here!");
    }

    @Override
    public void SimpleEquationBlock.genBlockResidual(CodePrinter p, CodeStream str, String indent,
            Enumerator enumerator, Set<FAbstractEquation> visited) {
        p.genResidual(equation(), str, indent, enumerator, visited,
                assignedIndices() == null ? null : new LinkedHashSet<Integer>(assignedIndices()));
    }

}

aspect BlockSetup {

    public String AbstractEquationBlock.genBlockResidualFunctionName_C(CodePrinter p) {
        return "dae_" + (p.inInitialSystem() ? "init_": "") + "block_" + getSequenceNumber();
    }

    public String AbstractEquationBlock.genBlockResidualSetUpFunctionName_C(CodePrinter p) {
        return genBlockResidualFunctionName_C(p) + "_set_up";
    }

    public void AbstractEquationBlock.genBlockResidualSetUpFunctionCall_C(CodePrinter p, CodeStream str, String outerIndent) {
        if (setupNodes().size() > 0) {
            str.formatln("%s%s(jmi);", outerIndent, genBlockResidualSetUpFunctionName_C(p));
        }
    }
    
    public void AbstractEquationBlock.genBlockResidualSetUpFunctionDecl_C(CodePrinter p, CodeStream str, String outerIndent) {
        if (setupNodes().size() > 0) {
            String indent = p.indent(outerIndent);
            for (FFunctionCall call : setupNodes()) {
                call.genStaticVarDecls_C(p, str, outerIndent);
            }
            str.format("%sstatic void %s(jmi_t* jmi) {\n", outerIndent, genBlockResidualSetUpFunctionName_C(p));
            for (FFunctionCall call : setupNodes()) {
                call.genStaticTempVars_C(p, str, indent);
            }
            str.format("%s}\n\n", outerIndent);
        }
    }
    
    private Collection<FFunctionCall> AbstractEquationBlock.setupNodes = null;
    public Collection<FFunctionCall> AbstractEquationBlock.setupNodes() {
        if (setupNodes == null) {
            setupNodes = new LinkedHashSet<FFunctionCall>();
            for (AbstractEquationBlock b : blockResidualBlocks()) {
                for (ASTNode n : b.blockResidualNodes()) {
                    n.gatherBlockSetupNodes(blockPrinter(), setupNodes);
                }
            }
        }
        return setupNodes;
    }
    
    public void ASTNode.gatherBlockSetupNodes(CodePrinter p, Collection<FFunctionCall> res) {
        for (ASTNode n : this) {
            n.gatherBlockSetupNodes(p, res);
        }
    }

    public void FFunctionCall.gatherBlockSetupNodes(CodePrinter p, Collection<FFunctionCall> res) {
        super.gatherBlockSetupNodes(p, res);
        if (impureCodeGen(p)) {
            res.add(this);
        }
    }
}
