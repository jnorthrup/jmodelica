/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect OptimicaPredefinedTypes {

	/**
	 * This attribute defines the NTA for predefined types
	 * which contains a list of predefined PrimitiveClassDef:s.
	 */
	refine PredefinedTypes eq Program.getPredefinedTypeList() {
        log.debug("Optimica: Program.getPredefinedTypeList()");
		List l = PredefinedTypes.Program.getPredefinedTypeList();
		for (int i=0;i<l.getNumChild();i++) {
            if (!(l.getChild(i) instanceof PrimitiveClassDecl)) {
                continue;
            }
			PrimitiveClassDecl cd = (PrimitiveClassDecl)l.getChild(i);
            ParserHandler parserHandler = root().getUtilInterface().getParserHandler();
			if (cd.name().equals("Real")) {
			    ComponentDecl compDecl = new ComponentDecl(true,
				                                      "RealType",
				                                      "initialGuess",
				                                      "0.0",
				                                      parserHandler); 
				cd.addComponentDecl(compDecl);
				compDecl = new ComponentDecl(true,
				                                      "BooleanType",
				                                      "free",
				                                      "false",
				                                      parserHandler); 
				cd.addComponentDecl(compDecl);
			}
			if (cd.name().equals("Integer")) {
			    ComponentDecl compDecl = new ComponentDecl(true,
				                                      "IntegerType",
				                                      "initialGuess",
				                                      "0",
				                                      parserHandler); 
				cd.addComponentDecl(compDecl);
				compDecl = new ComponentDecl(true,
				                                      "BooleanType",
				                                      "free",
				                                      "false",
				                                      parserHandler); 
				cd.addComponentDecl(compDecl);
			}

		
		}		
		return l;
	}
	
	


}
