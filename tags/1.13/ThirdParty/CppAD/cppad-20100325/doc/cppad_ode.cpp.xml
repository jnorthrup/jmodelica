<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>CppAD Speed: Gradient of Ode Solution</title>
<meta name="description" id="description" content="CppAD Speed: Gradient of Ode Solution"/>
<meta name="keywords" id="keywords" content=" cppad speed ode jacobian link_ode "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_cppad_ode.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="cppad_det_lu.cpp.xml" target="_top">Prev</a>
</td><td><a href="cppad_poly.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>speed</option>
<option>speed_cppad</option>
<option>cppad_ode.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>Appendix-&gt;</option>
<option>Faq</option>
<option>speed</option>
<option>Theory</option>
<option>glossary</option>
<option>Bib</option>
<option>Bugs</option>
<option>WishList</option>
<option>whats_new</option>
<option>include_deprecated</option>
<option>License</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>speed-&gt;</option>
<option>speed_main</option>
<option>speed_utility</option>
<option>speed_double</option>
<option>speed_adolc</option>
<option>speed_cppad</option>
<option>speed_fadbad</option>
<option>speed_sacado</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>speed_cppad-&gt;</option>
<option>cppad_det_minor.cpp</option>
<option>cppad_det_lu.cpp</option>
<option>cppad_ode.cpp</option>
<option>cppad_poly.cpp</option>
<option>cppad_sparse_hessian.cpp</option>
<option>cppad_sparse_jacobian.cpp</option>
</select>
</td>
<td>cppad_ode.cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>link_ode</option>
</select>
</td>
</tr></table><br/>



<center><b><big><big>CppAD Speed: Gradient of Ode Solution</big></big></b></center>
<br/>
<b><big><a name="link_ode" id="link_ode">link_ode</a></big></b>


<code><font color='blue'><pre style='display:inline'> 
# include &lt;cstring&gt;
# include &lt;cppad/cppad.hpp&gt;
# include &lt;cppad/speed/ode_evaluate.hpp&gt;
# include &lt;cppad/speed/uniform_01.hpp&gt;
# include &lt;cassert&gt;

bool link_ode(
	size_t                     size       ,
	size_t                     repeat     ,
	CppAD::vector&lt;double&gt;      &amp;x         ,
	CppAD::vector&lt;double&gt;      &amp;jacobian
)
{	// -------------------------------------------------------------
	// setup
	typedef CppAD::<a href="ad.xml" target="_top">AD</a>&lt;double&gt;       ADScalar;
	typedef CppAD::vector&lt;ADScalar&gt; ADVector;
	typedef CppAD::vector&lt;double&gt;   DblVector;

	size_t j;
	size_t m = 0;
	size_t n = size;
	assert( x.size() == n );
	assert( jacobian.size() == n * n );

	ADVector  X(n);
	ADVector  Y(n);

	CppAD::<a href="funconstruct.xml" target="_top">ADFun</a>&lt;double&gt;   F;

	static bool printed = false;
	bool print_this_time = (! printed) &amp; (repeat &gt; 1) &amp; (size &gt;= 3);
	while(repeat--)
	{ 	// choose next x value
		uniform_01(n, x);
		for(j = 0; j &lt; n; j++)
			X[j] = x[j];

		// declare the independent variable vector
		<a href="independent.xml" target="_top">Independent</a>(X);

		// evaluate function
		CppAD::ode_evaluate(X, m, Y);

		// create function object f : X -&gt; Y
		F.Dependent(X, Y);

		extern bool global_optimize;
		if( global_optimize )
		{	size_t before, after;
			before = F.size_var();
			F.optimize();
			if( print_this_time ) 
			{	after = F.size_var();
				std::cout &lt;&lt; &quot;cppad_ode_optimize_size_&quot; 
				          &lt;&lt; int(size) &lt;&lt; &quot; = [ &quot; &lt;&lt; int(before) 
				          &lt;&lt; &quot;, &quot; &lt;&lt; int(after) &lt;&lt; &quot;]&quot; &lt;&lt; std::endl;
				printed         = true;
				print_this_time = false;
			}
		}
		jacobian = F.<a href="jacobian.xml" target="_top">Jacobian</a>(x);
	}
	return true;
}
</pre></font></code>


<hr/>Input File: speed/cppad/ode.cpp

</body>
</html>
