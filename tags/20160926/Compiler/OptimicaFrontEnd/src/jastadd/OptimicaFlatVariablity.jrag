/*
    Copyright (C) 2015 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * This aspect introduces a new type of variability: timed. An expression has 
 * timed variability if it is composed of parameters, literals and timed
 * variables but no continuous or discrete variables.
 */
aspect OptimicaVariability {

	syn boolean FTypePrefixVariability.timedVariability() = false;
	eq FTimed.timedVariability() = true;
	
	syn boolean FExp.isTimedExp() = variability().timedVariability();
	
	eq FTimedVariable.variability()    = fTimed();
	eq InstTimedVariable.variability() = fTimed();
	eq FStartTimeExp.variability()     = fParameter();
	eq FFinalTimeExp.variability()     = fParameter();
	
	public static final FTimed FTimed.instance = new FTimed();	
	public static FTimed ASTNode.fTimed() { return FTimed.instance; }
		
	public static final FOptParameter FOptParameter.instance = new FOptParameter();	
	public static FOptParameter ASTNode.fOptParameter() { return FOptParameter.instance; }
	
	syn boolean FTypePrefixVariability.optParameterVariability() = false;
	eq FOptParameter.optParameterVariability() = true;	
	syn boolean FExp.isOptParameterExp() = variability().optParameterVariability();
	
	protected int FTimed.variabilityLevel()        { return VARIABILITY_LEVEL; }
	protected int FOptParameter.variabilityLevel() { return VARIABILITY_LEVEL; }
	protected static final int FTimed.VARIABILITY_LEVEL        = FDiscrete.VARIABILITY_LEVEL - 5;
	protected static final int FOptParameter.VARIABILITY_LEVEL = FFixedParameter.VARIABILITY_LEVEL;
	
	syn int FOptParameter.combineLevel() = variabilityLevel() * 10 + 5;
	
	// Notice that the attribute FVariable.isParameter is not redefined in order
	// not to render a lot of attributes in FlatAPI to be redefined as a
	// consequence.
    syn boolean FVariable.isOptParameter() = variability().optParameterVariability();
	
	// TODO: Change to be more in line with Variability and more extensible
    refine InstVariability eq InstAssignable.calcVariability() {
        FTypePrefixVariability v = refined();
        if (v.parameterVariability() && freeAttribute()) {
            v = fOptParameter();
        }
        return v;
    }
    
    eq FTimed.toString()               = "timed ";
    eq FOptParameter.toString()        = "free parameter ";
    
    eq FTimed.toStringLiteral()        = "timed";
    eq FOptParameter.toStringLiteral() = "free parameter";
    
    syn boolean FConstraint.isTimed()     = variability().lessOrEqual(fTimed());
    syn boolean FConstraint.isParameter() = variability().parameterOrLess();
    
    syn FTypePrefixVariability FConstraint.variability();
    eq FRelationConstraint.variability() = getLeft().variability().combine(getRight().variability());
    eq FForClauseC.variability()    = combineFConstraintsListVariability(getFConstraints());
    eq InstForClauseC.variability() = combineFConstraintsListVariability(getFConstraints());
    
    syn FTypePrefixVariability FConstraint.combineFConstraintsListVariability(List<FConstraint> l) {
        FTypePrefixVariability res = fConstant();
        for (FConstraint c : l) {
            res = res.combine(c.variability());
        }
        return res;
    }
}