Index: Modelica/Blocks/package.mo
===================================================================
--- Modelica/Blocks/package.mo	(revision 9483)
+++ Modelica/Blocks/package.mo	(working copy)
@@ -1141,1550 +1141,6 @@
 </html>"), experiment(StopTime=2));
   end BusUsage;
 
-  package NoiseExamples
-    "Library of examples to demonstrate the usage of package Blocks.Noise"
-    extends Modelica.Icons.ExamplesPackage;
-
-    model UniformNoise
-      "Demonstrates the most simple usage of the UniformNoise block"
-      extends Modelica.Icons.Example;
-      output Real uniformNoise2_y = uniformNoise2.y;
-
-      inner Modelica.Blocks.Noise.GlobalSeed globalSeed
-        annotation (Placement(transformation(extent={{-20,40},{0,60}})));
-      Modelica.Blocks.Noise.UniformNoise uniformNoise1(
-        samplePeriod=0.02,
-        y_min=-1,
-        y_max=3) annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
-      Modelica.Blocks.Noise.UniformNoise uniformNoise2(
-        samplePeriod=0.02, y_min=-1, y_max=3,
-        useAutomaticLocalSeed=false,
-        fixedLocalSeed=10)
-        annotation (Placement(transformation(extent={{-60,-20},{-40,0}})));
-     annotation (experiment(StopTime=2),    Documentation(info="<html>
-<p>
-This example demonstrates the most simple usage of the
-<a href=\"modelica://Modelica.Blocks.Noise.UniformNoise\">Noise.UniformNoise</a>
-block:
-</p>
-
-<ul>
-<li> <b>globalSeed</b> is the <a href=\"modelica://Modelica.Blocks.Noise.GlobalSeed\">Noise.GlobalSeed</a>
-     block with default options (just dragged from sublibrary Noise).</li>
-<li> <b>uniformNoise1</b> is an instance of
-     <a href=\"modelica://Modelica.Blocks.Noise.UniformNoise\">Noise.UniformNoise</a> with
-     samplePeriod = 0.02 s and a Uniform distribution with limits y_min=-1, y_max=3.</li>
-<li> <b>uniformNoise2</b> is identical to uniformNoise1 with the exception that
-      useAutomaticLocalSeed=false and fixedLocalSeed=10.</li>
-</ul>
-
-<p>
-At every 0.02 seconds a time event occurs and a uniform random number in the band between
--1 ... 3 is drawn. This random number is held constant until the next sample instant.
-The result of a simulation is shown in the next diagram:
-</p>
-
-<p><blockquote>
-<img src=\"modelica://Modelica/Resources/Images/Blocks/NoiseExamples/UniformNoise.png\">
-</blockquote>
-</p>
-</html>",     revisions="<html>
-<p>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> June 22, 2015 </td>
-    <td valign=\"top\">
-
-<table border=0>
-<tr><td valign=\"top\">
-         <img src=\"modelica://Modelica/Resources/Images/Blocks/Noise/dlr_logo.png\">
-</td><td valign=\"bottom\">
-         Initial version implemented by
-         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>
-         <a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>
-</td></tr></table>
-</td></tr>
-
-</table>
-</p>
-</html>"));
-    end UniformNoise;
-
-    model AutomaticSeed
-      "Demonstrates noise with startTime and automatic local seed for UniformNoise"
-      import Modelica;
-       extends Modelica.Icons.Example;
-       parameter Modelica.SIunits.Time startTime = 0.5 "Start time of noise";
-       parameter Real y_off = -1.0 "Output of block before startTime";
-
-       output Real manualSeed1_y = manualSeed1.y;
-       output Real manualSeed2_y = manualSeed2.y;
-       output Real manualSeed3_y = manualSeed3.y;
-
-      inner Modelica.Blocks.Noise.GlobalSeed globalSeed(useAutomaticSeed=false, enableNoise=true)
-        annotation (Placement(transformation(extent={{60,60},{80,80}})));
-
-      Modelica.Blocks.Noise.UniformNoise automaticSeed1(
-        samplePeriod=0.01,
-        startTime=startTime,
-        y_off=y_off,
-        y_min=-1, y_max=3)
-        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
-      Modelica.Blocks.Noise.UniformNoise automaticSeed2(
-        samplePeriod=0.01,
-        startTime=startTime,
-        y_off=y_off,y_min=-1, y_max=3)
-        annotation (Placement(transformation(extent={{-60,-20},{-40,0}})));
-      Modelica.Blocks.Noise.UniformNoise automaticSeed3(
-        samplePeriod=0.01,
-        startTime=startTime,
-        y_off=y_off, y_min=-1, y_max=3)
-        annotation (Placement(transformation(extent={{-60,-60},{-40,-40}})));
-      Modelica.Blocks.Noise.UniformNoise manualSeed1(
-        samplePeriod=0.01,
-        startTime=startTime,
-        y_off=y_off,
-        useAutomaticLocalSeed=false,
-        fixedLocalSeed=1,y_min=-1, y_max=3,
-        enableNoise=true)
-        annotation (Placement(transformation(extent={{0,20},{20,40}})));
-      Modelica.Blocks.Noise.UniformNoise manualSeed2(
-        samplePeriod=0.01,
-        startTime=startTime,
-        y_off=y_off,
-        useAutomaticLocalSeed=false,
-        fixedLocalSeed=2,y_min=-1, y_max=3)
-        annotation (Placement(transformation(extent={{0,-20},{20,0}})));
-      Modelica.Blocks.Noise.UniformNoise manualSeed3(
-        samplePeriod=0.01,
-        startTime=startTime,
-        y_off=y_off,
-        useAutomaticLocalSeed=false,y_min=-1, y_max=3,
-        fixedLocalSeed=3)
-        annotation (Placement(transformation(extent={{0,-60},{20,-40}})));
-     annotation (experiment(StopTime=2),    Documentation(info="<html>
-<p>
-This example demonstrates manual and automatic seed selection of
-<a href=\"Modelica.Blocks.Noise.UniformNoise\">UniformNoise</a> blocks, as well
-as starting the noise at startTime = 0.5 s with an output value of y = -1 before this
-time. All noise blocks in this example generate uniform noise in the
-band y_min=-1 .. y_max=3 with samplePeriod = 0.01 s.
-</p>
-
-<p>
-The blocks automaticSeed1, automaticSeed2, automaticSeed3 use the default
-option to automatically initialize the pseudo random number generators
-of the respective block. As a result, different noise is generated, see next
-diagram:
-</p>
-
-<p><blockquote>
-<img src=\"modelica://Modelica/Resources/Images/Blocks/NoiseExamples/AutomaticSeed1.png\">
-</blockquote></p>
-
-<p>
-The blocks manualSeed1, manualSeed2, manualSeed3 use manual selection of the local seed
-(useAutomaticLocalSeed = false). They use a fixedLocalSeed of 1, 2, and 3 respectively.
-Again, different noise is generated, see next diagram:
-</p>
-
-<p><blockquote>
-<img src=\"modelica://Modelica/Resources/Images/Blocks/NoiseExamples/AutomaticSeed2.png\">
-</blockquote></p>
-
-<p>
-Try to set fixedLocalSeed = 1 in block manualSeed2. As a result, the blocks manualSeed1 and
-manualSeed2 will produce exactly the same noise.
-</p>
-</html>",     revisions="<html>
-<p>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> June 22, 2015 </td>
-    <td valign=\"top\">
-
-<table border=0>
-<tr><td valign=\"top\">
-         <img src=\"modelica://Modelica/Resources/Images/Blocks/Noise/dlr_logo.png\">
-</td><td valign=\"bottom\">
-         Initial version implemented by
-         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>
-         <a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>
-</td></tr></table>
-</td></tr>
-
-</table>
-</p>
-</html>"));
-    end AutomaticSeed;
-
-    model Distributions
-      "Demonstrates noise with different types of distributions"
-      extends Modelica.Icons.Example;
-      parameter Modelica.SIunits.Period samplePeriod=0.02
-        "Sample period of all blocks";
-      parameter Real y_min = -1 "Minimum value of band for random values";
-      parameter Real y_max = 3 "Maximum value of band for random values";
-      inner Modelica.Blocks.Noise.GlobalSeed globalSeed(useAutomaticSeed=
-            false)
-        annotation (Placement(transformation(extent={{40,60},{60,80}})));
-      output Real uniformNoise_y =         uniformNoise.y;
-      output Real truncatedNormalNoise_y = truncatedNormalNoise.y;
-
-      Integer n=if time < 0.5 then 12 else 2;
-
-      Modelica.Blocks.Noise.UniformNoise uniformNoise(
-        useAutomaticLocalSeed=false,
-        fixedLocalSeed=1,
-        samplePeriod=samplePeriod,
-        y_min=y_min,
-        y_max=y_max)
-        annotation (Placement(transformation(extent={{-60,70},{-40,90}})));
-      Modelica.Blocks.Noise.TruncatedNormalNoise truncatedNormalNoise(
-        useAutomaticLocalSeed=false,
-        fixedLocalSeed=1,
-        samplePeriod=samplePeriod,
-        y_min=y_min,
-        y_max=y_max)
-        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
-     annotation (experiment(StopTime=2),    Documentation(info="<html>
-<p>
-This example demonstrates different noise distributions methods that can be selected
-for a Noise block. Both noise blocks use samplePeriod = 0.02 s, y_min=-1, y_max=3, and have
-identical fixedLocalSeed. This means that the same random numbers are drawn for the blocks.
-However, the random numbers are differently transformed according to the selected distributions
-(uniform and truncated normal distribution), and therefore the blocks have different output values.
-Simulation results are shown in the next diagram:
-</p>
-
-<p><blockquote>
-<img src=\"modelica://Modelica/Resources/Images/Blocks/NoiseExamples/Distributions.png\">
-</blockquote></p>
-
-<p>
-As can be seen, uniform noise is distributed evenly between -1 and 3, and
-truncated normal distriution has more values centered around the mean value 1.
-</p>
-</html>",     revisions="<html>
-<p>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> June 22, 2015 </td>
-    <td valign=\"top\">
-
-<table border=0>
-<tr><td valign=\"top\">
-         <img src=\"modelica://Modelica/Resources/Images/Blocks/Noise/dlr_logo.png\">
-</td><td valign=\"bottom\">
-         Initial version implemented by
-         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>
-         <a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>
-</td></tr></table>
-</td></tr>
-
-</table>
-</p>
-</html>"));
-    end Distributions;
-
-    model UniformNoiseProperties
-      "Demonstrates the computation of properties for uniformally distributed noise"
-      extends Modelica.Icons.Example;
-      parameter Real y_min = 0 "Minimum value of band";
-      parameter Real y_max = 6 "Maximum value of band";
-      parameter Real pMean = (y_min + y_max)/2
-        "Theoretical mean value of uniform distribution";
-      parameter Real var =  (y_max - y_min)^2/12
-        "Theoretical variance of uniform distribution";
-      parameter Real std =  sqrt(var)
-        "Theoretical standard deviation of uniform distribution";
-      inner Modelica.Blocks.Noise.GlobalSeed globalSeed
-        annotation (Placement(transformation(extent={{80,60},{100,80}})));
-      output Real meanError_y = meanError.y;
-      output Real sigmaError_y = sigmaError.y;
-
-      Modelica.Blocks.Noise.UniformNoise noise(
-        samplePeriod=0.001,
-        y_min=y_min,
-        y_max=y_max,
-        useAutomaticLocalSeed=false)
-        annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
-      Modelica.Blocks.Math.ContinuousMean mean
-        annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
-      Modelica.Blocks.Math.Variance variance
-        annotation (Placement(transformation(extent={{-40,0},{-20,20}})));
-      Modelica.Blocks.Math.MultiProduct theoreticalVariance(nu=2)
-        annotation (Placement(transformation(extent={{28,-36},{40,-24}})));
-      Modelica.Blocks.Math.Feedback meanError
-        annotation (Placement(transformation(extent={{40,60},{60,80}})));
-      Modelica.Blocks.Sources.Constant theoreticalMean(k=pMean)
-        annotation (Placement(transformation(extent={{-10,40},{10,60}})));
-      Modelica.Blocks.Math.Feedback varianceError
-        annotation (Placement(transformation(extent={{40,0},{60,20}})));
-      Modelica.Blocks.Sources.Constant theoreticalSigma(k=std)
-        annotation (Placement(transformation(extent={{-10,-40},{10,-20}})));
-      Modelica.Blocks.Math.StandardDeviation standardDeviation
-        annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));
-      Modelica.Blocks.Math.Feedback sigmaError
-        annotation (Placement(transformation(extent={{40,-60},{60,-80}})));
-    equation
-      connect(noise.y, mean.u) annotation (Line(
-          points={{-59,70},{-42,70}},
-          color={0,0,127}));
-      connect(noise.y, variance.u) annotation (Line(
-          points={{-59,70},{-52,70},{-52,10},{-42,10}},
-          color={0,0,127}));
-      connect(mean.y, meanError.u1) annotation (Line(
-          points={{-19,70},{42,70}},
-          color={0,0,127}));
-      connect(theoreticalMean.y, meanError.u2) annotation (Line(
-          points={{11,50},{50,50},{50,62}},
-          color={0,0,127}));
-      connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(
-          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}},
-          color={0,0,127}));
-      connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(
-          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}},
-          color={0,0,127}));
-      connect(variance.y, varianceError.u1) annotation (Line(
-          points={{-19,10},{42,10}},
-          color={0,0,127}));
-      connect(theoreticalVariance.y, varianceError.u2) annotation (Line(
-          points={{41.02,-30},{50,-30},{50,2}},
-          color={0,0,127}));
-      connect(noise.y, standardDeviation.u) annotation (Line(
-          points={{-59,70},{-52,70},{-52,-70},{-42,-70}},
-          color={0,0,127}));
-      connect(standardDeviation.y, sigmaError.u1) annotation (Line(
-          points={{-19,-70},{42,-70}},
-          color={0,0,127}));
-      connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(
-          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}},
-          color={0,0,127}));
-     annotation (experiment(StopTime=20, Interval=0.4e-2, Tolerance=1e-009),
-        Documentation(info="<html>
-<p>
-This example demonstrates statistical properties of the
-<a href=\"modelica://Modelica.Blocks.Noise.GenericNoise\">Blocks.Noise.GenericNoise</a> block
-using a <b>uniform</b> random number distribution.
-Block &quot;noise&quot; defines a band of 0 .. 6 and from the generated noise the mean and the variance
-is computed with blocks of package <a href=\"modelica://Modelica.Blocks.Statistics\">Blocks.Statistics</a>.
-Simulation results are shown in the next diagram:
-</p>
-
-<p><blockquote>
-<img src=\"modelica://Modelica/Resources/Images/Blocks/NoiseExamples/UniformNoiseProperties1.png\"/>
-</blockquote></p>
-
-<p>
-The mean value of a uniform noise in the range 0 .. 6 is 3 and its variance is
-3 as well. The simulation results above show good agreement (after a short initial phase).
-This demonstrates that the random number generator and the mapping to a uniform
-distribution have good statistical properties.
-</p>
-</html>",     revisions="<html>
-<p>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> June 22, 2015 </td>
-    <td valign=\"top\">
-
-<table border=0>
-<tr><td valign=\"top\">
-         <img src=\"modelica://Modelica/Resources/Images/Blocks/Noise/dlr_logo.png\">
-</td><td valign=\"bottom\">
-         Initial version implemented by
-         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>
-         <a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>
-</td></tr></table>
-</td></tr>
-
-</table>
-</p>
-</html>"));
-    end UniformNoiseProperties;
-
-    model NormalNoiseProperties
-      "Demonstrates the computation of properties for normally distributed noise"
-      extends Modelica.Icons.Example;
-      parameter Real mu = 3 "Mean value for normal distribution";
-      parameter Real sigma = 1 "Standard deviation for normal distribution";
-      parameter Real pMean = mu "Theoretical mean value of normal distribution";
-      parameter Real var =  sigma^2
-        "Theoretical variance of uniform distribution";
-      parameter Real std =  sigma
-        "Theoretical standard deviation of normal distribution";
-      inner Modelica.Blocks.Noise.GlobalSeed globalSeed
-        annotation (Placement(transformation(extent={{80,60},{100,80}})));
-      output Real meanError_y = meanError.y;
-      output Real sigmaError_y = sigmaError.y;
-
-      Modelica.Blocks.Noise.NormalNoise noise(
-        samplePeriod=0.001,
-        mu=mu,
-        sigma=sigma,
-        useAutomaticLocalSeed=false)
-        annotation (Placement(transformation(extent={{-80,60},{-60,80}})));
-      Modelica.Blocks.Math.ContinuousMean mean
-        annotation (Placement(transformation(extent={{-40,60},{-20,80}})));
-      Modelica.Blocks.Math.Variance variance
-        annotation (Placement(transformation(extent={{-40,0},{-20,20}})));
-      Modelica.Blocks.Math.MultiProduct theoreticalVariance(nu=2)
-        annotation (Placement(transformation(extent={{28,-36},{40,-24}})));
-      Modelica.Blocks.Math.Feedback meanError
-        annotation (Placement(transformation(extent={{40,60},{60,80}})));
-      Modelica.Blocks.Sources.Constant theoreticalMean(k=pMean)
-        annotation (Placement(transformation(extent={{-10,40},{10,60}})));
-      Modelica.Blocks.Math.Feedback varianceError
-        annotation (Placement(transformation(extent={{40,0},{60,20}})));
-      Modelica.Blocks.Sources.Constant theoreticalSigma(k=std)
-        annotation (Placement(transformation(extent={{-10,-40},{10,-20}})));
-      Modelica.Blocks.Math.StandardDeviation standardDeviation
-        annotation (Placement(transformation(extent={{-40,-80},{-20,-60}})));
-      Modelica.Blocks.Math.Feedback sigmaError
-        annotation (Placement(transformation(extent={{40,-60},{60,-80}})));
-    equation
-      connect(noise.y, mean.u) annotation (Line(
-          points={{-59,70},{-42,70}},
-          color={0,0,127}));
-      connect(noise.y, variance.u) annotation (Line(
-          points={{-59,70},{-52,70},{-52,10},{-42,10}},
-          color={0,0,127}));
-      connect(mean.y, meanError.u1) annotation (Line(
-          points={{-19,70},{42,70}},
-          color={0,0,127}));
-      connect(theoreticalMean.y, meanError.u2) annotation (Line(
-          points={{11,50},{50,50},{50,62}},
-          color={0,0,127}));
-      connect(theoreticalSigma.y, theoreticalVariance.u[1]) annotation (Line(
-          points={{11,-30},{24,-30},{24,-27.9},{28,-27.9}},
-          color={0,0,127}));
-      connect(theoreticalSigma.y, theoreticalVariance.u[2]) annotation (Line(
-          points={{11,-30},{24,-30},{24,-32.1},{28,-32.1}},
-          color={0,0,127}));
-      connect(variance.y, varianceError.u1) annotation (Line(
-          points={{-19,10},{42,10}},
-          color={0,0,127}));
-      connect(theoreticalVariance.y, varianceError.u2) annotation (Line(
-          points={{41.02,-30},{50,-30},{50,2}},
-          color={0,0,127}));
-      connect(noise.y, standardDeviation.u) annotation (Line(
-          points={{-59,70},{-52,70},{-52,-70},{-42,-70}},
-          color={0,0,127}));
-      connect(standardDeviation.y, sigmaError.u1) annotation (Line(
-          points={{-19,-70},{42,-70}},
-          color={0,0,127}));
-      connect(theoreticalSigma.y, sigmaError.u2) annotation (Line(
-          points={{11,-30},{18,-30},{18,-42},{50,-42},{50,-62}},
-          color={0,0,127}));
-     annotation (experiment(StopTime=20, Interval=0.4e-2, Tolerance=1e-009),
-    Documentation(info="<html>
-<p>
-This example demonstrates statistical properties of the
-<a href=\"modelica://Modelica.Blocks.Noise.NormalNoise\">Blocks.Noise.NormalNoise</a> block
-using a <b>normal</b> random number distribution with mu=3, sigma=1.
-From the generated noise the mean and the variance
-is computed with blocks of package <a href=\"modelica://Modelica.Blocks.Statistics\">Blocks.Statistics</a>.
-Simulation results are shown in the next diagram:
-</p>
-
-<p><blockquote>
-<img src=\"modelica://Modelica/Resources/Images/Blocks/NoiseExamples/NormalNoiseProperties1.png\">
-</blockquote></p>
-
-<p>
-The mean value of a normal noise with mu=3 is 3 and the variance of normal noise
-is sigma^2, so 1. The simulation results above show good agreement (after a short initial phase).
-This demonstrates that the random number generator and the mapping to a normal
-distribution have good statistical properties.
-</p>
-</html>",     revisions="<html>
-<p>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> June 22, 2015 </td>
-    <td valign=\"top\">
-
-<table border=0>
-<tr><td valign=\"top\">
-         <img src=\"modelica://Modelica/Resources/Images/Blocks/Noise/dlr_logo.png\">
-</td><td valign=\"bottom\">
-         Initial version implemented by
-         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>
-         <a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>
-</td></tr></table>
-</td></tr>
-
-</table>
-</p>
-</html>"));
-    end NormalNoiseProperties;
-
-    model Densities
-      "Demonstrates how to compute distribution densities (= Probability Density Function)"
-      extends Modelica.Icons.Example;
-      output Real uniformDensity_y = uniformDensity.y;
-      output Real normalDensity_y = normalDensity.y;
-      output Real weibullDensity_y = weibullDensity.y;
-
-      Utilities.UniformDensity
-                        uniformDensity(u_min=-4, u_max=4)
-        annotation (Placement(transformation(extent={{10,20},{30,40}})));
-      Modelica.Blocks.Sources.Clock clock
-    annotation (Placement(transformation(extent={{-80,10},{-60,30}})));
-      Modelica.Blocks.Sources.Constant const(k=-10)
-    annotation (Placement(transformation(extent={{-80,-30},{-60,-10}})));
-      Modelica.Blocks.Math.Add add
-    annotation (Placement(transformation(extent={{-46,-10},{-26,10}})));
-      Utilities.NormalDensity
-                        normalDensity(mu=0, sigma=2)
-        annotation (Placement(transformation(extent={{10,-10},{30,10}})));
-      Utilities.WeibullDensity
-                        weibullDensity(lambda=3, k=1.5)
-        annotation (Placement(transformation(extent={{10,-40},{30,-20}})));
-    equation
-      connect(clock.y, add.u1) annotation (Line(
-      points={{-59,20},{-53.5,20},{-53.5,6},{-48,6}},
-      color={0,0,127}));
-      connect(const.y, add.u2) annotation (Line(
-      points={{-59,-20},{-54,-20},{-54,-6},{-48,-6}},
-      color={0,0,127}));
-      connect(add.y, uniformDensity.u) annotation (Line(
-      points={{-25,0},{-14,0},{-14,30},{8,30}},
-      color={0,0,127}));
-      connect(add.y, normalDensity.u) annotation (Line(
-      points={{-25,0},{8,0}},
-      color={0,0,127}));
-      connect(add.y, weibullDensity.u) annotation (Line(
-      points={{-25,0},{-14,0},{-14,-30},{8,-30}},
-      color={0,0,127}));
-     annotation (experiment(StopTime=20, Interval=2e-2),
-        Documentation(info="<html>
-<p>
-This example demonstrates how to compute the probability density functions (pdfs) of
-various distributions.
-In the following diagram simulations results for the uniform, normal, and Weibull distribution
-are shown. The outputs of the blocks are the pdfs that are plotted over one of the
-inputs:
-</p>
-
-<p><blockquote>
-<img src=\"modelica://Modelica/Resources/Images/Blocks/NoiseExamples/Densities.png\">
-</blockquote></p>
-</html>",     revisions="<html>
-<p>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> June 22, 2015 </td>
-    <td valign=\"top\">
-
-<table border=0>
-<tr><td valign=\"top\">
-         <img src=\"modelica://Modelica/Resources/Images/Blocks/Noise/dlr_logo.png\">
-</td><td valign=\"bottom\">
-         Initial version implemented by
-         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>
-         <a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>
-</td></tr></table>
-</td></tr>
-
-</table>
-</p>
-</html>"));
-    end Densities;
-
-    model ImpureGenerator
-      "Demonstrates the usage of the impure random number generator"
-      extends Modelica.Icons.Example;
-      output Real impureRandom_y = impureRandom.y;
-
-      inner Modelica.Blocks.Noise.GlobalSeed globalSeed(useAutomaticSeed=
-            false) annotation (Placement(transformation(extent={{20,40},{40,60}})));
-
-      Utilities.ImpureRandom impureRandom(samplePeriod=0.01)
-        annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
-     annotation (experiment(StopTime=2),    Documentation(info="<html>
-<p>
-This example demonstrates how to use the
-<a href=\"modelica://Modelica.Math.Random.Utilities.impureRandom\">impureRandom(..)</a> function
-to generate random values at event instants. Typically, this approach is only
-used when implementing an own, specialized block that needs a random number
-generator. Simulation results are shown in the next figure:
-</p>
-
-<p><blockquote>
-<img src=\"modelica://Modelica/Resources/Images/Blocks/NoiseExamples/ImpureGenerator.png\">
-</blockquote>
-</p>
-</html>",     revisions="<html>
-<p>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> June 22, 2015 </td>
-    <td valign=\"top\">
-
-<table border=0>
-<tr><td valign=\"top\">
-         <img src=\"modelica://Modelica/Resources/Images/Blocks/Noise/dlr_logo.png\">
-</td><td valign=\"bottom\">
-         Initial version implemented by
-         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>
-         <a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>
-</td></tr></table>
-</td></tr>
-
-</table>
-</p>
-</html>"));
-    end ImpureGenerator;
-
-    model ActuatorWithNoise
-      "Demonstrates how to model measurement noise in an actuator"
-    extends Modelica.Icons.Example;
-      Utilities.Parts.MotorWithCurrentControl motor
-        annotation (Placement(transformation(extent={{-86,-10},{-66,10}})));
-      Utilities.Parts.Controller controller
-        annotation (Placement(transformation(extent={{-60,40},{-80,60}})));
-      Modelica.Blocks.Sources.Step speed(startTime=0.5, height=50)
-        annotation (Placement(transformation(extent={{20,40},{0,60}})));
-      Modelica.Mechanics.Rotational.Components.Gearbox gearbox(
-        lossTable=[0,0.85,0.8,0.1,0.1],
-        c=1e6,
-        d=1e4,
-        ratio=10,
-        w_rel(fixed=true),
-        b=0.0017453292519943,
-        phi_rel(fixed=true))
-        annotation (Placement(transformation(extent={{-60,-10},{-40,10}})));
-      Modelica.Mechanics.Translational.Components.IdealGearR2T idealGearR2T(ratio=
-            300) annotation (Placement(transformation(extent={{-32,-10},{-12,10}})));
-      Modelica.Mechanics.Translational.Components.Mass mass(m=100)
-        annotation (Placement(transformation(extent={{50,-10},{70,10}})));
-      Modelica.Mechanics.Translational.Sources.ConstantForce constantForce(
-          f_constant=10000) annotation (Placement(transformation(
-            extent={{10,-10},{-10,10}},
-            origin={86,0})));
-      Modelica.Blocks.Nonlinear.SlewRateLimiter slewRateLimiter(Rising=50)
-        annotation (Placement(transformation(extent={{-20,40},{-40,60}})));
-      Modelica.Mechanics.Translational.Components.Mass rodMass(m=3)
-        annotation (Placement(transformation(extent={{-4,-10},{16,10}})));
-      Modelica.Mechanics.Translational.Components.SpringDamper elastoGap(c=1e8, d=
-            1e5,
-        v_rel(fixed=true),
-        s_rel(fixed=true))
-                 annotation (Placement(transformation(extent={{22,-10},{42,10}})));
-      inner Noise.GlobalSeed globalSeed(enableNoise=true)
-        annotation (Placement(transformation(extent={{60,60},{80,80}})));
-    equation
-      connect(controller.y1, motor.iq_rms1) annotation (Line(
-          points={{-81,50},{-94,50},{-94,6},{-88,6}},
-          color={0,0,127}));
-      connect(motor.phi, controller.positionMeasured) annotation (Line(
-          points={{-71,8},{-66,8},{-66,20},{-50,20},{-50,44},{-58,44}},
-          color={0,0,127}));
-      connect(motor.flange, gearbox.flange_a) annotation (Line(
-          points={{-66,0},{-60,0}}));
-      connect(gearbox.flange_b, idealGearR2T.flangeR) annotation (Line(
-          points={{-40,0},{-32,0}}));
-      connect(constantForce.flange, mass.flange_b) annotation (Line(
-          points={{76,0},{70,0}},
-          color={0,127,0}));
-      connect(speed.y, slewRateLimiter.u) annotation (Line(
-          points={{-1,50},{-18,50}},
-          color={0,0,127}));
-      connect(slewRateLimiter.y, controller.positionReference) annotation (Line(
-          points={{-41,50},{-50,50},{-50,56},{-58,56}},
-          color={0,0,127}));
-      connect(rodMass.flange_a, idealGearR2T.flangeT) annotation (Line(
-          points={{-4,0},{-12,0}},
-          color={0,127,0}));
-      connect(rodMass.flange_b, elastoGap.flange_a) annotation (Line(
-          points={{16,0},{22,0}},
-          color={0,127,0}));
-      connect(elastoGap.flange_b, mass.flange_a) annotation (Line(
-          points={{42,0},{50,0}},
-          color={0,127,0}));
-      annotation (
-        experiment(StopTime=8, Interval = 0.01, Tolerance=1e-005),
-        Documentation(info="<html>
-<p>
-This example models an actuator with a noisy sensor (which is in the motor component):
-</p>
-
-<blockquote>
-<p>
-<img src=\"modelica://Modelica/Resources/Images/Blocks/NoiseExamples/ActuatorNoiseDiagram.png\"/>
-</p></blockquote>
-
-<p>
-The drive train consists of a synchronous motor with a current controller (= motor) and a gear box.
-The gearbox drives a rod through a linear translation model. Softly attached to the rod is
-another mass representing the actual actuator (= mass). The actuator is loaded with a constant force.
-</p>
-
-<p>
-The whole drive is steered by a rate limited speed step command through a controller model.
-In the motor the shaft angle is measured and this measurement signal is modelled by adding
-additive noise to the motor angle.
-</p>
-
-<p>
-In the following figure, the position of the actuator and the motor output torque are
-shown with and without noise. The noise is not very strong, such that it has no visible effect
-on the position of the actuator. The effect of the noise can be seen in the motor torque.
-</p>
-
-<blockquote><p>
-<img src=\"modelica://Modelica/Resources/Images/Blocks/NoiseExamples/ActuatorNoise.png\"/>
-</p></blockquote>
-
-<p>
-Note, the noise in all components can be easily switched off by setting parameter
-enableNoise = false in the globalSeed component.
-</p>
-</html>",     revisions="<html>
-<p>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> June 22, 2015 </td>
-    <td valign=\"top\">
-
-<table border=0>
-<tr><td valign=\"top\">
-         <img src=\"modelica://Modelica/Resources/Images/Blocks/Noise/dlr_logo.png\">
-</td><td valign=\"bottom\">
-         Initial version implemented by
-         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>
-         <a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>
-</td></tr></table>
-</td></tr>
-
-</table>
-</p>
-</html>"));
-    end ActuatorWithNoise;
-
-    model DrydenContinuousTurbulence
-      "Demonstrates how to model wind turbulence for aircraft with the BandLimitedWhiteNoise block (a simple model of vertical Dryden gust speed at low altitudes < 1000 ft)"
-      extends Modelica.Icons.Example;
-      import SI = Modelica.SIunits;
-      import Modelica.Constants.pi;
-
-      parameter SI.Velocity V =            140 * 0.5144
-        "Airspeed of aircraft (typically 140kts during approach)";
-      parameter SI.Velocity sigma = 0.1 *   30 * 0.5144
-        "Turbulence intensity (=0.1 * wind at 20 ft, typically 30 kt)";
-      parameter SI.Length   L =            600 * 0.3048
-        "Scale length (= flight altitude)";
-
-      Modelica.Blocks.Continuous.TransferFunction Hw(b=sigma*sqrt(L/pi/V)*{sqrt(3)*
-            L/V,1}, a={L^2/V^2,2*L/V,1},
-        initType=Modelica.Blocks.Types.Init.InitialState)
-        "Transfer function of vertical turbulence speed according to MIL-F-8785C"
-        annotation (Placement(transformation(extent={{-10,0},{10,20}})));
-      Modelica.Blocks.Noise.BandLimitedWhiteNoise whiteNoise(samplePeriod=
-           0.005)
-        annotation (Placement(transformation(extent={{-60,0},{-40,20}})));
-      constant Modelica.SIunits.Velocity unitVelocity = 1 annotation(HideResult=true);
-      Modelica.Blocks.Math.Gain compareToSpeed(k=unitVelocity/V)
-        annotation (Placement(transformation(extent={{40,0},{60,20}})));
-      inner Modelica.Blocks.Noise.GlobalSeed globalSeed
-        annotation (Placement(transformation(extent={{40,60},{60,80}})));
-    equation
-      connect(whiteNoise.y, Hw.u) annotation (Line(
-          points={{-39,10},{-12,10}},
-          color={0,0,127}));
-      connect(Hw.y, compareToSpeed.u) annotation (Line(
-          points={{11,10},{38,10}},
-          color={0,0,127}));
-      annotation (experiment(StopTime=100),
-     Documentation(info="<html>
-<p>
-This example shows how to use the
-<a href=\"modelica://Modelica.Blocks.Noise.BandLimitedWhiteNoise\">BandLimitedWhiteNoise</a>
-to feed a Dryden continuous turbulence model. This model is used to describe turbulent wind at low altitudes
-that varies randomly in space
-(see also <a href=\"https://en.wikipedia.org/wiki/Continuous_gusts\">wikipedia</a>).
-</p>
-
-<h4>
-Turbulence model for vertical gust speed at low altitudes
-</h4>
-
-<p>
-The turbulence model of the Dryden form is defined by the power spectral density of the vertical turbulent velocity:
-</p>
-
-<blockquote><p>
-<img src=\"modelica://Modelica/Resources/Images/Blocks/NoiseExamples/equation-erVWhiWU.png\" alt=\"Phi_w(Omega)=sigma^2*L_w/pi*((1+3*(L_w*Omega)^2)/(1+(L_w*Omega)^2)^2)\"/>
-</p></blockquote>
-
-<p>
-The spectrum is parametrized with the following parameters:
-</p>
-
-<ul>
-<li> Lw is the turbulence scale. <br>In low altitudes, it is equal to the flight altitude.</li>
-<li> sigma is the turbulence intensity. <br>In low altitudes, it is equal to 1/10 of the
-     wind speed at 20 ft altitude, which is 30 kts for medium turbulence.</li>
-<li> Omega is the spatial frequency. <br> The turbulence model is thus defined in space and the aircraft experiences turbulence as it flies through the defined wind field.</li>
-<li> Omega = s/V will be used to transform the spatial definition into a temporal definition, which can be realized as a state space system.</li>
-<li> V is the airspeed of the aircraft.<br>It is approximately 150 kts during the approach (i.e. at low altitudes).</li>
-</ul>
-
-<p>
-Using spectral factorization and a fixed airspeed V of the aircraft, a concrete forming filter for the vertical turbulence can be found as
-</p>
-
-<blockquote><p>
-<img src=\"modelica://Modelica/Resources/Images/Blocks/NoiseExamples/equation-W0zl2Gay.png\" alt=\"H_w(s) = sigma*sqrt(L_w/(pi*V)) * ((1 + sqrt(3)*L_w/V*s) / (1+L_w/V*s)^2)\"/>,
-</p></blockquote>
-
-<p>
-for which V * (H_w(i Omega/V) * H_w(-i Omega/V) = Phi_w(Omega).
-</p>
-
-<h4>
-The input to the filter
-</h4>
-
-<p>
-The input to the filter is white noise with a normal distribution, zero mean, and a power spectral density of 1.
-That means, for a sampling time of 1s, it is parameterized with mean=0 and variance=1.
-However, in order to account for the change of noise power due to sampling, the noise must be scaled with sqrt(samplePeriod).
-This is done automatically in the
-<a href=\"modelica://Modelica.Blocks.Noise.BandLimitedWhiteNoise\">BandLimitedWhiteNoise</a> block.
-</p>
-
-<h4>Example output</h4>
-
-<blockquote>
-<p>
-<img src=\"modelica://Modelica/Resources/Images/Blocks/NoiseExamples/DrydenContinuousTurbulence.png\"/>
-</p></blockquote>
-
-<h4>
-Reference
-</h4>
-
-<ol>
-<li>Dryden Wind Turbulence model in US military standard
-    <a href=\"http://everyspec.com/MIL-SPECS/MIL-SPECS-MIL-F/MIL-F-8785C_5295/\">MIL-F-8785</a>.</li>
-</ol>
-</html>"));
-    end DrydenContinuousTurbulence;
-
-    package Utilities "Library of utility models used in the examples"
-      extends Modelica.Icons.UtilitiesPackage;
-
-      block UniformDensity "Calculates the density of a uniform distribution"
-        import distribution = Modelica.Math.Distributions.Uniform.density;
-        extends Modelica.Blocks.Icons.Block;
-
-        parameter Real u_min "Lower limit of u";
-        parameter Real u_max "Upper limit of u";
-
-        Modelica.Blocks.Interfaces.RealInput u "Real input signal" annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
-        Modelica.Blocks.Interfaces.RealOutput y
-          "Density of the input signal according to the uniform probability density function"
-          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
-      equation
-        y = distribution(u, u_min, u_max);
-
-        annotation (Icon(graphics={
-              Polygon(
-                points={{0,94},{-8,72},{8,72},{0,94}},
-                lineColor={192,192,192},
-                fillColor={192,192,192},
-                fillPattern=FillPattern.Solid),
-              Line(points={{0,76},{0,-72}},     color={192,192,192}),
-              Line(points={{-86,-82},{72,-82}},
-                                            color={192,192,192}),
-              Polygon(
-                points={{92,-82},{70,-74},{70,-90},{92,-82}},
-                lineColor={192,192,192},
-                fillColor={192,192,192},
-                fillPattern=FillPattern.Solid),
-          Line( points={{-70,-75.953},{-66.5,-75.8975},{-63,-75.7852},{-59.5,
-                -75.5674},{-56,-75.1631},{-52.5,-74.4442},{-49,-73.2213},{
-                -45.5,-71.2318},{-42,-68.1385},{-38.5,-63.5468},{-35,-57.0467},
-                {-31.5,-48.2849},{-28,-37.0617},{-24.5,-23.4388},{-21,-7.8318},
-                {-17.5,8.9428},{-14,25.695},{-10.5,40.9771},{-7,53.2797},{
-                -3.5,61.2739},{0,64.047},{3.5,61.2739},{7,53.2797},{10.5,
-                40.9771},{14,25.695},{17.5,8.9428},{21,-7.8318},{24.5,
-                -23.4388},{28,-37.0617},{31.5,-48.2849},{35,-57.0467},{38.5,
-                -63.5468},{42,-68.1385},{45.5,-71.2318},{49,-73.2213},{52.5,
-                -74.4442},{56,-75.1631},{59.5,-75.5674},{63,-75.7852},{66.5,
-                -75.8975},{70,-75.953}},
-                smooth=Smooth.Bezier)}), Documentation(info="<html>
-<p>
-This block determines the probability density y of a uniform distribution for the given input signal u
-(for details of this density function see
-<a href=\"Modelica.Math.Distributions.Uniform.density\">Math.Distributions.Uniform.density</a>).
-</p>
-
-<p>
-This block is demonstrated in the example
-<a href=\"modelica://Modelica.Blocks.Examples.NoiseExamples.Densities\">Examples.NoiseExamples.Densities</a> .
-</p>
-</html>",       revisions="<html>
-<p>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> June 22, 2015 </td>
-    <td valign=\"top\">
-
-<table border=0>
-<tr><td valign=\"top\">
-         <img src=\"modelica://Modelica/Resources/Images/Blocks/Noise/dlr_logo.png\">
-</td><td valign=\"bottom\">
-         Initial version implemented by
-         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>
-         <a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>
-</td></tr></table>
-</td></tr>
-
-</table>
-</p>
-</html>"));
-      end UniformDensity;
-
-      block NormalDensity "Calculates the density of a normal distribution"
-        import distribution = Modelica.Math.Distributions.Normal.density;
-        extends Modelica.Blocks.Icons.Block;
-
-        parameter Real mu "Expectation (mean) value of the normal distribution";
-        parameter Real sigma "Standard deviation of the normal distribution";
-
-        Modelica.Blocks.Interfaces.RealInput u "Real input signal" annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
-        Modelica.Blocks.Interfaces.RealOutput y
-          "Density of the input signal according to the normal probability density function"
-          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
-      equation
-        y = distribution(u, mu, sigma);
-
-        annotation (Icon(graphics={
-              Polygon(
-                points={{0,94},{-8,72},{8,72},{0,94}},
-                lineColor={192,192,192},
-                fillColor={192,192,192},
-                fillPattern=FillPattern.Solid),
-              Line(points={{0,76},{0,-72}},     color={192,192,192}),
-              Line(points={{-86,-82},{72,-82}},
-                                            color={192,192,192}),
-              Polygon(
-                points={{92,-82},{70,-74},{70,-90},{92,-82}},
-                lineColor={192,192,192},
-                fillColor={192,192,192},
-                fillPattern=FillPattern.Solid),
-          Line( points={{-70,-75.953},{-66.5,-75.8975},{-63,-75.7852},{-59.5,
-                -75.5674},{-56,-75.1631},{-52.5,-74.4442},{-49,-73.2213},{
-                -45.5,-71.2318},{-42,-68.1385},{-38.5,-63.5468},{-35,-57.0467},
-                {-31.5,-48.2849},{-28,-37.0617},{-24.5,-23.4388},{-21,-7.8318},
-                {-17.5,8.9428},{-14,25.695},{-10.5,40.9771},{-7,53.2797},{
-                -3.5,61.2739},{0,64.047},{3.5,61.2739},{7,53.2797},{10.5,
-                40.9771},{14,25.695},{17.5,8.9428},{21,-7.8318},{24.5,
-                -23.4388},{28,-37.0617},{31.5,-48.2849},{35,-57.0467},{38.5,
-                -63.5468},{42,-68.1385},{45.5,-71.2318},{49,-73.2213},{52.5,
-                -74.4442},{56,-75.1631},{59.5,-75.5674},{63,-75.7852},{66.5,
-                -75.8975},{70,-75.953}},
-                smooth=Smooth.Bezier)}), Documentation(info="<html>
-<p>
-This block determines the probability density y of a normal distribution for the given input signal u
-(for details of this density function see
-<a href=\"Modelica.Math.Distributions.Normal.density\">Math.Distributions.Normal.density</a>).
-</p>
-
-<p>
-This block is demonstrated in the example
-<a href=\"modelica://Modelica.Blocks.Examples.NoiseExamples.Densities\">Examples.NoiseExamples.Densities</a> .
-</p>
-</html>",       revisions="<html>
-<p>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> June 22, 2015 </td>
-    <td valign=\"top\">
-
-<table border=0>
-<tr><td valign=\"top\">
-         <img src=\"modelica://Modelica/Resources/Images/Blocks/Noise/dlr_logo.png\">
-</td><td valign=\"bottom\">
-         Initial version implemented by
-         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>
-         <a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>
-</td></tr></table>
-</td></tr>
-
-</table>
-</p>
-</html>"));
-      end NormalDensity;
-
-      block WeibullDensity "Calculates the density of a Weibull distribution"
-        import distribution = Modelica.Math.Distributions.Weibull.density;
-        extends Modelica.Blocks.Icons.Block;
-
-        parameter Real lambda(min=0)
-          "Scale parameter of the Weibull distribution";
-        parameter Real k(min=0) "Shape parameter of the Weibull distribution";
-
-        Modelica.Blocks.Interfaces.RealInput u "Real input signal" annotation (Placement(transformation(extent={{-140,-20},{-100,20}})));
-        Modelica.Blocks.Interfaces.RealOutput y
-          "Density of the input signal according to the Weibull probability density function"
-          annotation (Placement(transformation(extent={{100,-10},{120,10}})));
-      equation
-        y = distribution(u, lambda, k);
-
-        annotation (Icon(graphics={
-              Polygon(
-                points={{0,94},{-8,72},{8,72},{0,94}},
-                lineColor={192,192,192},
-                fillColor={192,192,192},
-                fillPattern=FillPattern.Solid),
-              Line(points={{0,76},{0,-72}},     color={192,192,192}),
-              Line(points={{-86,-82},{72,-82}},
-                                            color={192,192,192}),
-              Polygon(
-                points={{92,-82},{70,-74},{70,-90},{92,-82}},
-                lineColor={192,192,192},
-                fillColor={192,192,192},
-                fillPattern=FillPattern.Solid),
-          Line( points={{-70,-75.953},{-66.5,-75.8975},{-63,-75.7852},{-59.5,
-                -75.5674},{-56,-75.1631},{-52.5,-74.4442},{-49,-73.2213},{
-                -45.5,-71.2318},{-42,-68.1385},{-38.5,-63.5468},{-35,-57.0467},
-                {-31.5,-48.2849},{-28,-37.0617},{-24.5,-23.4388},{-21,-7.8318},
-                {-17.5,8.9428},{-14,25.695},{-10.5,40.9771},{-7,53.2797},{
-                -3.5,61.2739},{0,64.047},{3.5,61.2739},{7,53.2797},{10.5,
-                40.9771},{14,25.695},{17.5,8.9428},{21,-7.8318},{24.5,
-                -23.4388},{28,-37.0617},{31.5,-48.2849},{35,-57.0467},{38.5,
-                -63.5468},{42,-68.1385},{45.5,-71.2318},{49,-73.2213},{52.5,
-                -74.4442},{56,-75.1631},{59.5,-75.5674},{63,-75.7852},{66.5,
-                -75.8975},{70,-75.953}},
-                smooth=Smooth.Bezier)}), Documentation(info="<html>
-<p>
-This block determines the probability density y of a Weibull distribution for the given input signal u
-(for details of this density function see
-<a href=\"Modelica.Math.Distributions.Weibull.density\">Math.Distributions.Weibull.density</a>).
-</p>
-
-<p>
-This block is demonstrated in the example
-<a href=\"modelica://Modelica.Blocks.Examples.NoiseExamples.Densities\">Examples.NoiseExamples.Densities</a> .
-</p>
-</html>",       revisions="<html>
-<p>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> June 22, 2015 </td>
-    <td valign=\"top\">
-
-<table border=0>
-<tr><td valign=\"top\">
-         <img src=\"modelica://Modelica/Resources/Images/Blocks/Noise/dlr_logo.png\">
-</td><td valign=\"bottom\">
-         Initial version implemented by
-         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>
-         <a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>
-</td></tr></table>
-</td></tr>
-
-</table>
-</p>
-</html>"));
-      end WeibullDensity;
-
-      block ImpureRandom
-        "Block generating random numbers with the impure random number generator"
-        extends Modelica.Blocks.Interfaces.SO;
-
-        parameter Modelica.SIunits.Period samplePeriod
-          "Sample period for random number generation";
-
-      protected
-         outer Modelica.Blocks.Noise.GlobalSeed globalSeed;
-
-      equation
-         when {initial(), sample(samplePeriod,samplePeriod)} then
-            y = Modelica.Math.Random.Utilities.impureRandom(globalSeed.id_impure);
-         end when;
-        annotation (Documentation(info="<html>
-<p>
-This block demonstrates how to implement a block using the impure
-random number generator. This block is used in the example
-<a href=\"modelica://Modelica.Blocks.Examples.NoiseExamples.ImpureGenerator\">Examples.NoiseExamples.ImpureGenerator</a>.
-</p>
-</html>",       revisions="<html>
-<p>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> June 22, 2015 </td>
-    <td valign=\"top\">
-
-<table border=0>
-<tr><td valign=\"top\">
-         <img src=\"modelica://Modelica/Resources/Images/Blocks/Noise/dlr_logo.png\">
-</td><td valign=\"bottom\">
-         Initial version implemented by
-         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>
-         <a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>
-</td></tr></table>
-</td></tr>
-
-</table>
-</p>
-</html>"));
-      end ImpureRandom;
-
-      package Parts "Parts for use in the ActuatorWithNoise examples"
-
-        model MotorWithCurrentControl
-          "Synchronous induction machine with current controller and measurement noise"
-          extends Modelica.Electrical.Machines.Icons.TransientMachine;
-          constant Integer m=3 "Number of phases";
-          parameter Modelica.SIunits.Voltage VNominal=100
-            "Nominal RMS voltage per phase";
-          parameter Modelica.SIunits.Frequency fNominal=50 "Nominal frequency";
-          parameter Modelica.SIunits.Frequency f=50 "Actual frequency";
-          parameter Modelica.SIunits.Time tRamp=1 "Frequency ramp";
-          parameter Modelica.SIunits.Torque TLoad=181.4 "Nominal load torque";
-          parameter Modelica.SIunits.Time tStep=1.2 "Time of load torque step";
-          parameter Modelica.SIunits.Inertia JLoad=0.29 "Load's moment of inertia";
-
-          Modelica.Electrical.Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnet
-            smpm(
-            p=smpmData.p,
-            fsNominal=smpmData.fsNominal,
-            Rs=smpmData.Rs,
-            TsRef=smpmData.TsRef,
-            Lszero=smpmData.Lszero,
-            Lssigma=smpmData.Lssigma,
-            Jr=smpmData.Jr,    Js=smpmData.Js,
-            frictionParameters=smpmData.frictionParameters,
-            wMechanical(fixed=true),
-            statorCoreParameters=smpmData.statorCoreParameters,
-            strayLoadParameters=smpmData.strayLoadParameters,
-            VsOpenCircuit=smpmData.VsOpenCircuit,
-            Lmd=smpmData.Lmd,
-            Lmq=smpmData.Lmq,
-            useDamperCage=smpmData.useDamperCage,
-            Lrsigmad=smpmData.Lrsigmad,
-            Lrsigmaq=smpmData.Lrsigmaq,
-            Rrd=smpmData.Rrd,
-            Rrq=smpmData.Rrq,
-            TrRef=smpmData.TrRef,
-            permanentMagnetLossParameters=smpmData.permanentMagnetLossParameters,
-            phiMechanical(fixed=true),
-            TsOperational=293.15,
-            alpha20s=smpmData.alpha20s,
-            TrOperational=293.15,
-            alpha20r=smpmData.alpha20r)
-            annotation (Placement(transformation(extent={{-20,-50},{0,-30}})));
-          Modelica.Electrical.MultiPhase.Sources.SignalCurrent signalCurrent(final m=m)
-            annotation (Placement(transformation(
-                origin={-10,50},
-                extent={{-10,10},{10,-10}},
-                rotation=270)));
-          Modelica.Electrical.MultiPhase.Basic.Star star(final m=m)
-            annotation (Placement(transformation(extent={{-10,80},{-30,100}})));
-          Modelica.Electrical.Analog.Basic.Ground ground
-            annotation (Placement(transformation(
-                origin={-50,90},
-                extent={{-10,-10},{10,10}},
-                rotation=270)));
-          Modelica.Electrical.Machines.Utilities.CurrentController currentController(p=smpm.p)
-            annotation (Placement(transformation(extent={{-50,40},{-30,60}})));
-          Modelica.Electrical.MultiPhase.Basic.Star starM(final m=m) annotation (Placement(transformation(
-                extent={{-10,-10},{10,10}},
-                rotation=180,
-                origin={-60,-10})));
-          Modelica.Electrical.Analog.Basic.Ground groundM
-            annotation (Placement(transformation(
-                origin={-80,-28},
-                extent={{-10,-10},{10,10}},
-                rotation=270)));
-          Modelica.Electrical.Machines.Utilities.TerminalBox terminalBox(
-              terminalConnection="Y") annotation (Placement(transformation(extent={{-20,-30},
-                    {0,-10}})));
-          Modelica.Electrical.Machines.Sensors.RotorDisplacementAngle rotorDisplacementAngle(p=smpm.p)
-            annotation (Placement(transformation(
-                origin={20,-40},
-                extent={{-10,10},{10,-10}},
-                rotation=270)));
-          Modelica.Mechanics.Rotational.Sensors.AngleSensor angleSensor annotation (
-              Placement(transformation(
-                extent={{-10,-10},{10,10}},
-                rotation=90,
-                origin={10,0})));
-          Modelica.Mechanics.Rotational.Sensors.TorqueSensor torqueSensor annotation (
-              Placement(transformation(
-                extent={{10,10},{-10,-10}},
-                rotation=180,
-                origin={50,-40})));
-          Modelica.Mechanics.Rotational.Sensors.SpeedSensor speedSensor annotation (
-              Placement(transformation(
-                extent={{-10,-10},{10,10}},
-                rotation=90,
-                origin={30,0})));
-          Modelica.Electrical.Machines.Sensors.VoltageQuasiRMSSensor voltageQuasiRMSSensor
-            annotation (Placement(transformation(
-                extent={{-10,10},{10,-10}},
-                rotation=180,
-                origin={-30,-10})));
-          Modelica.Electrical.Machines.Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor
-            annotation (Placement(transformation(
-                origin={-10,0},
-                extent={{-10,-10},{10,10}},
-                rotation=270)));
-          Modelica.Mechanics.Rotational.Components.Inertia inertiaLoad(J=0.29)
-            annotation (Placement(transformation(extent={{70,-50},{90,-30}})));
-          parameter
-            Modelica.Electrical.Machines.Utilities.ParameterRecords.SM_PermanentMagnetData
-            smpmData(useDamperCage=false) "Data for motor"
-            annotation (Placement(transformation(extent={{-20,-80},{0,-60}})));
-          Modelica.Blocks.Sources.Constant id(k=0)
-            annotation (Placement(transformation(extent={{-90,60},{-70,80}})));
-          Modelica.Blocks.Interfaces.RealInput iq_rms1 annotation (Placement(
-                transformation(extent={{-140,40},{-100,80}}),iconTransformation(extent={{-140,40},
-                    {-100,80}})));
-          Modelica.Mechanics.Rotational.Interfaces.Flange_b flange
-            "Right flange of shaft"
-            annotation (Placement(transformation(extent={{90,-10},{110,10}})));
-          Modelica.Blocks.Interfaces.RealOutput phi
-            "Absolute angle of flange as output signal" annotation (Placement(
-                transformation(
-                extent={{-10,-10},{10,10}},
-                origin={110,80}), iconTransformation(extent={{40,70},{60,90}})));
-          Modelica.Blocks.Interfaces.RealOutput phi_motor(unit="rad", displayUnit="deg")
-            "Rotational position"
-            annotation (Placement(transformation(extent={{60,20},{80,40}}),
-                iconTransformation(extent={{90,40},{90,40}})));
-          Modelica.Blocks.Interfaces.RealOutput w(unit="rad/s") "Rotational speed"
-            annotation (Placement(transformation(extent={{60,0},{80,20}}),
-                iconTransformation(extent={{90,40},{90,40}})));
-          Modelica.Blocks.Math.Add addNoise
-            annotation (Placement(transformation(extent={{60,70},{80,90}})));
-          Noise.UniformNoise uniformNoise(
-            samplePeriod=1/200,
-            y_min=-0.01,
-            y_max=0.01) annotation (Placement(transformation(extent={{26,76},{46,96}})));
-        equation
-          connect(star.pin_n, ground.p) annotation (Line(points={{-30,90},{-40,90}}, color={0,0,255}));
-          connect(rotorDisplacementAngle.plug_n, smpm.plug_sn) annotation (Line(
-                points={{26,-30},{26,-20},{-16,-20},{-16,-30}}, color={0,0,255}));
-          connect(rotorDisplacementAngle.plug_p, smpm.plug_sp) annotation (Line(
-                points={{14,-30},{6,-30},{-4,-30}},
-                                            color={0,0,255}));
-          connect(terminalBox.plug_sn, smpm.plug_sn) annotation (Line(
-              points={{-16,-26},{-16,-30}},
-              color={0,0,255}));
-          connect(terminalBox.plug_sp, smpm.plug_sp) annotation (Line(
-              points={{-4,-26},{-4,-30}},
-              color={0,0,255}));
-          connect(smpm.flange, rotorDisplacementAngle.flange) annotation (Line(
-              points={{0,-40},{6,-40},{10,-40}}));
-          connect(signalCurrent.plug_p, star.plug_p) annotation (Line(
-              points={{-10,60},{-10,90}},
-              color={0,0,255}));
-          connect(angleSensor.flange, rotorDisplacementAngle.flange) annotation (Line(
-              points={{10,-10},{10,-40}}));
-          connect(angleSensor.phi, currentController.phi) annotation (Line(
-              points={{10,11},{10,30},{-40,30},{-40,38}},
-              color={0,0,127}));
-          connect(groundM.p, terminalBox.starpoint) annotation (Line(
-              points={{-70,-28},{-19,-28},{-19,-24}},
-              color={0,0,255}));
-          connect(smpm.flange, torqueSensor.flange_a) annotation (Line(
-              points={{0,-40},{40,-40}}));
-          connect(voltageQuasiRMSSensor.plug_p, terminalBox.plugSupply) annotation (
-              Line(
-              points={{-20,-10},{-10,-10},{-10,-24}},
-              color={0,0,255}));
-          connect(starM.plug_p, voltageQuasiRMSSensor.plug_n) annotation (Line(
-              points={{-50,-10},{-40,-10}},
-              color={0,0,255}));
-          connect(starM.pin_n, groundM.p) annotation (Line(
-              points={{-70,-10},{-70,-28}},
-              color={0,0,255}));
-          connect(currentController.y, signalCurrent.i) annotation (Line(
-              points={{-29,50},{-24,50},{-17,50}},
-              color={0,0,127}));
-          connect(speedSensor.flange, smpm.flange) annotation (Line(
-              points={{30,-10},{30,-40},{0,-40}}));
-          connect(torqueSensor.flange_b, inertiaLoad.flange_a) annotation (Line(
-              points={{60,-40},{60,-40},{70,-40}}));
-          connect(signalCurrent.plug_n, currentQuasiRMSSensor.plug_p) annotation (
-             Line(
-              points={{-10,40},{-10,10}},
-              color={0,0,255}));
-          connect(currentQuasiRMSSensor.plug_n, voltageQuasiRMSSensor.plug_p)
-            annotation (Line(
-              points={{-10,-10},{-20,-10}},
-              color={0,0,255}));
-          connect(id.y, currentController.id_rms) annotation (Line(
-              points={{-69,70},{-60,70},{-60,56},{-52,56}},
-              color={0,0,127}));
-          connect(currentController.iq_rms, iq_rms1) annotation (Line(
-              points={{-52,44},{-100,44},{-100,60},{-120,60}},
-              color={0,0,127}));
-          connect(inertiaLoad.flange_b, flange) annotation (Line(
-              points={{90,-40},{90,-40},{90,0},{100,0}}));
-          connect(angleSensor.phi, addNoise.u2) annotation (Line(
-              points={{10,11},{10,30},{50,30},{50,74},{58,74}},
-              color={0,0,127}));
-          connect(addNoise.y, phi) annotation (Line(
-              points={{81,80},{110,80}},
-              color={0,0,127}));
-          connect(uniformNoise.y, addNoise.u1) annotation (Line(
-              points={{47,86},{58,86}},
-              color={0,0,127}));
-          connect(speedSensor.w, w) annotation (Line(points={{30,11},{30,11},{30,10},{70,
-                  10}}, color={0,0,127}));
-          connect(angleSensor.phi, phi_motor) annotation (Line(points={{10,11},{10,11},{
-                  10,22},{10,30},{70,30}},  color={0,0,127}));
-          annotation (
-            Documentation(info="<html>
-<p>
-A synchronous induction machine with permanent magnets, current controller and
-measurement noise of &plusmn;0.01 rad accelerates a quadratic speed dependent load from standstill.
-The rms values of d- and q-current in rotor fixed coordinate system are converted to three-phase currents,
-and fed to the machine. The result shows that the torque is influenced by the q-current,
-whereas the stator voltage is influenced by the d-current.
-</p>
-
-<p>
-Default machine parameters of model
-<a href=\"modelica://Modelica.Electrical.Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnet\">SM_PermanentMagnet</a>
-are used.
-</p>
-
-<p>
-This motor is used in the
-<a href=\"modelica://Modelica.Blocks.Examples.NoiseExamples.ActuatorWithNoise\">Examples.NoiseExamples.ActuatorWithNoise</a>
-actuator example
-</p>
-</html>",         revisions="<html>
-<p>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> June 22, 2015 </td>
-    <td valign=\"top\">
-
-<table border=0>
-<tr><td valign=\"top\">
-         <img src=\"modelica://Modelica/Resources/Images/Logos/dlr_logo.png\">
-</td><td valign=\"bottom\">
-         Initial version implemented by
-         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>
-         <a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>
-</td></tr></table>
-</td></tr>
-
-</table>
-</p>
-</html>"),  Icon(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,
-                    100}}), graphics={Rectangle(
-                  extent={{40,50},{-100,100}},
-                  fillColor={255,170,85},
-                  fillPattern=FillPattern.Solid,
-                  pattern=LinePattern.None,
-                  lineColor={0,0,0}),           Text(
-                extent={{-150,150},{150,110}},
-                textString="%name",
-                lineColor={0,0,255})}));
-        end MotorWithCurrentControl;
-
-        model Controller "Simple position controller for actuator"
-
-          Modelica.Blocks.Continuous.PI speed_PI(k=10, T=5e-2,
-            initType=Modelica.Blocks.Types.Init.InitialOutput)
-            annotation (Placement(transformation(extent={{38,-10},{58,10}})));
-          Modelica.Blocks.Math.Feedback speedFeedback
-            annotation (Placement(transformation(extent={{10,-10},{30,10}})));
-          Modelica.Blocks.Continuous.Derivative positionToSpeed(initType=Modelica.Blocks.Types.Init.InitialOutput,
-              T=0.01)
-            annotation (Placement(transformation(extent={{-60,-70},{-40,-50}})));
-          Modelica.Blocks.Interfaces.RealInput positionMeasured
-            "Position signal of motor"
-            annotation (Placement(transformation(extent={{-140,-80},{-100,-40}})));
-          Modelica.Blocks.Interfaces.RealInput positionReference
-            "Reference position"
-            annotation (Placement(transformation(extent={{-140,40},{-100,80}})));
-          Modelica.Blocks.Interfaces.RealOutput y1
-            "Connector of Real output signal"
-            annotation (Placement(transformation(extent={{100,-10},{120,10}})));
-          Modelica.Blocks.Continuous.PI position_PI(T=5e-1, k=3,
-            initType=Modelica.Blocks.Types.Init.InitialState)
-            annotation (Placement(transformation(extent={{-60,50},{-40,70}})));
-          Modelica.Blocks.Math.Feedback positionFeedback
-            annotation (Placement(transformation(extent={{-90,50},{-70,70}})));
-          Modelica.Blocks.Continuous.FirstOrder busdelay(T=1e-3, initType=Modelica.Blocks.Types.Init.InitialOutput)
-            annotation (Placement(transformation(extent={{68,-10},{88,10}})));
-        equation
-          connect(speedFeedback.y, speed_PI.u) annotation (Line(
-              points={{29,0},{36,0}},
-              color={0,0,127}));
-          connect(positionFeedback.u2, positionToSpeed.u) annotation (Line(
-              points={{-80,52},{-80,-60},{-62,-60}},
-              color={0,0,127}));
-          connect(positionReference, positionFeedback.u1) annotation (Line(
-              points={{-120,60},{-88,60}},
-              color={0,0,127}));
-          connect(positionFeedback.y, position_PI.u) annotation (Line(
-              points={{-71,60},{-62,60}},
-              color={0,0,127}));
-          connect(position_PI.y, speedFeedback.u1) annotation (Line(
-              points={{-39,60},{0,60},{0,0},{12,0}},
-              color={0,0,127}));
-          connect(speed_PI.y, busdelay.u) annotation (Line(
-              points={{59,0},{66,0}},
-              color={0,0,127}));
-          connect(y1, busdelay.y) annotation (Line(
-              points={{110,0},{89,0}},
-              color={0,0,127}));
-          connect(positionMeasured, positionToSpeed.u) annotation (Line(
-              points={{-120,-60},{-62,-60}},
-              color={0,0,127}));
-          connect(positionToSpeed.y, speedFeedback.u2) annotation (Line(
-              points={{-39,-60},{20,-60},{20,-8}},
-              color={0,0,127}));
-          annotation ( Icon(coordinateSystem(
-                  preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics={
-                Rectangle(extent={{-100,100},{100,-100}}, lineColor={0,0,255},
-                  fillColor={255,255,255},
-                  fillPattern=FillPattern.Solid),
-                Text(
-                  extent={{-40,50},{40,-30}},
-                  lineColor={0,0,255},
-                  textString="PI"),             Text(
-                extent={{-150,150},{150,110}},
-                textString="%name",
-                lineColor={0,0,255})}),
-            Documentation(revisions="<html>
-<p>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> June 22, 2015 </td>
-    <td valign=\"top\">
-
-<table border=0>
-<tr><td valign=\"top\">
-         <img src=\"modelica://Modelica/Resources/Images/Blocks/Noise/dlr_logo.png\">
-</td><td valign=\"bottom\">
-         Initial version implemented by
-         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>
-         <a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>
-</td></tr></table>
-</td></tr>
-
-</table>
-</p>
-</html>",         info="<html>
-<p>
-A simple position controller for a drive system.
-This controller is used in the
-<a href=\"modelica://Modelica.Blocks.Examples.NoiseExamples.ActuatorWithNoise\">Examples.NoiseExamples.ActuatorWithNoise</a>
-actuator example
-</p>
-</html>"));
-        end Controller;
-      annotation (Documentation(revisions="<html>
-<p>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> June 22, 2015 </td>
-    <td valign=\"top\">
-
-<table border=0>
-<tr><td valign=\"top\">
-         <img src=\"modelica://Modelica/Resources/Images/Blocks/Noise/dlr_logo.png\">
-</td><td valign=\"bottom\">
-         Initial version implemented by
-         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>
-         <a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>
-</td></tr></table>
-</td></tr>
-
-</table>
-</p>
-</html>",       info="<html>
-<p>
-Parts used in the
-<a href=\"modelica://Modelica.Blocks.Examples.NoiseExamples.ActuatorWithNoise\">Examples.NoiseExamples.ActuatorWithNoise</a>
-actuator example
-</p>
-</html>"));
-      end Parts;
-    annotation (Documentation(info="<html>
-<p>
-This package contains utility models that are used for the examples.
-</p>
-</html>",     revisions="<html>
-<p>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> June 22, 2015 </td>
-    <td valign=\"top\">
-
-<table border=0>
-<tr><td valign=\"top\">
-         <img src=\"modelica://Modelica/Resources/Images/Blocks/Noise/dlr_logo.png\">
-</td><td valign=\"bottom\">
-         Initial version implemented by
-         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>
-         <a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>
-</td></tr></table>
-</td></tr>
-
-</table>
-</p>
-</html>"));
-    end Utilities;
-  annotation (Documentation(info="<html>
-<p>
-This package contains various example models that demonstrates how
-to utilize the blocks from sublibrary
-<a href=\"modelica://Modelica.Blocks.Noise\">Blocks.Noise</a>.
-</p>
-</html>",   revisions="<html>
-<p>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> June 22, 2015 </td>
-    <td valign=\"top\">
-
-<table border=0>
-<tr><td valign=\"top\">
-         <img src=\"modelica://Modelica/Resources/Images/Blocks/Noise/dlr_logo.png\">
-</td><td valign=\"bottom\">
-         Initial version implemented by
-         A. Kl&ouml;ckner, F. v.d. Linden, D. Zimmer, M. Otter.<br>
-         <a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>
-</td></tr></table>
-</td></tr>
-
-</table>
-</p>
-</html>"));
-  end NoiseExamples;
-
   package BusUsage_Utilities
     "Utility models and connectors for example Modelica.Blocks.Examples.BusUsage"
     extends Modelica.Icons.UtilitiesPackage;
Index: Modelica/Blocks/package.order
===================================================================
--- Modelica/Blocks/package.order	(revision 9483)
+++ Modelica/Blocks/package.order	(working copy)
@@ -9,7 +9,6 @@
 MathBoolean
 Nonlinear
 Routing
-Noise
 Sources
 Tables
 Types
Index: Modelica/Electrical/Machines.mo
===================================================================
--- Modelica/Electrical/Machines.mo	(revision 9483)
+++ Modelica/Electrical/Machines.mo	(working copy)
@@ -2474,166 +2474,6 @@
 </html>"));
       end SMPM_VoltageSource;
 
-      model SMPM_Braking
-        "Test example: PermanentMagnetSynchronousInductionMachine acting as brake"
-        extends Modelica.Icons.Example;
-        import Modelica.Constants.pi;
-        constant Integer m=3 "Number of phases";
-        constant Real unitK( unit="rad/(s.Ohm)")=1 annotation(HideResult=true);
-        parameter Modelica.SIunits.Resistance R=1 "Nominal braking resistance";
-        parameter Modelica.SIunits.AngularVelocity wNominal=2*pi*smpmData.fsNominal/smpmData.p
-          "Nominal speed";
-        parameter Modelica.SIunits.Inertia JLoad=0.29
-          "Load's moment of inertia";
-        Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnet
-          smpm(
-          phiMechanical(start=0, fixed=true),
-          useSupport=false,
-          useThermalPort=false,
-          p=smpmData.p,
-          fsNominal=smpmData.fsNominal,
-          Rs=smpmData.Rs,
-          TsRef=smpmData.TsRef,
-          Lszero=smpmData.Lszero,
-          Lssigma=smpmData.Lssigma,
-          Jr=smpmData.Jr,
-          Js=smpmData.Js,
-          frictionParameters=smpmData.frictionParameters,
-          statorCoreParameters=smpmData.statorCoreParameters,
-          strayLoadParameters=smpmData.strayLoadParameters,
-          VsOpenCircuit=smpmData.VsOpenCircuit,
-          Lmd=smpmData.Lmd,
-          Lmq=smpmData.Lmq,
-          useDamperCage=smpmData.useDamperCage,
-          Lrsigmad=smpmData.Lrsigmad,
-          Lrsigmaq=smpmData.Lrsigmaq,
-          Rrd=smpmData.Rrd,
-          Rrq=smpmData.Rrq,
-          TrRef=smpmData.TrRef,
-          permanentMagnetLossParameters=smpmData.permanentMagnetLossParameters,
-          TsOperational=293.15,
-          alpha20s=smpmData.alpha20s,
-          wMechanical(start=wNominal, fixed=true),
-          TrOperational=293.15,
-          alpha20r=smpmData.alpha20r) annotation (Placement(transformation(
-                extent={{-20,-50},{0,-30}})));
-
-        Modelica.Electrical.Analog.Basic.Ground ground annotation (Placement(
-              transformation(
-              origin={-80,60},
-              extent={{-10,-10},{10,10}},
-              rotation=270)));
-        Machines.Utilities.TerminalBox terminalBox(terminalConnection="Y")
-          annotation (Placement(transformation(extent={{-20,-34},{0,-14}})));
-        Modelica.Mechanics.Rotational.Components.Inertia inertiaLoad(J=JLoad)
-          annotation (Placement(transformation(extent={{50,-50},{70,-30}})));
-        Modelica.Mechanics.Rotational.Sensors.SpeedSensor speedSensor
-          annotation (Placement(transformation(
-              extent={{-10,-10},{10,10}},
-              rotation=90,
-              origin={40,0})));
-        parameter Machines.Utilities.ParameterRecords.SM_PermanentMagnetData
-          smpmData(useDamperCage=false)
-          annotation (Placement(transformation(extent={{-20,-80},{0,-60}})));
-        Sensors.CurrentQuasiRMSSensor currentQuasiRMSSensor annotation (
-            Placement(transformation(
-              origin={-10,0},
-              extent={{-10,-10},{10,10}},
-              rotation=270)));
-        PowerConverters.ACDC.DiodeBridge2mPulse diodeBridge2mPulse(m=m) annotation (
-            Placement(transformation(
-              extent={{-10,10},{10,-10}},
-              rotation=90,
-              origin={-10,30})));
-        Analog.Basic.VariableResistor variableResistor
-          annotation (Placement(transformation(extent={{0,50},{-20,70}})));
-        Blocks.Math.Gain          gain(k=unitK*R/wNominal)
-                                       annotation (Placement(transformation(
-              extent={{-10,-10},{10,10}},
-              rotation=90,
-              origin={40,30})));
-        Blocks.Nonlinear.Limiter          limiter(           uMin=0.1, uMax=10)
-                                                          annotation (Placement(
-              transformation(
-              extent={{-10,-10},{10,10}},
-              rotation=90,
-              origin={40,60})));
-        Blocks.Math.Gain          ac2dc(k=pi^2/8)
-                                       annotation (Placement(transformation(
-              extent={{-10,10},{10,-10}},
-              rotation=180,
-              origin={10,80})));
-        MultiPhase.Basic.Star                     starM(final m=m) annotation (
-            Placement(transformation(
-              extent={{-10,-10},{10,10}},
-              rotation=180,
-              origin={-60,-10})));
-        Sensors.VoltageQuasiRMSSensor          voltageQuasiRMSSensor
-          annotation (Placement(transformation(
-              extent={{-10,10},{10,-10}},
-              rotation=180,
-              origin={-30,-10})));
-        Analog.Basic.Resistor grounding(R=1e6) annotation (Placement(transformation(
-              extent={{-10,-10},{10,10}},
-              rotation=90,
-              origin={-70,30})));
-      initial equation
-        smpm.is[1:2] = zeros(2);
-        smpm.i_0_s = 0;
-
-      equation
-        connect(terminalBox.plug_sn, smpm.plug_sn) annotation (Line(
-            points={{-16,-30},{-16,-30}},
-            color={0,0,255}));
-        connect(terminalBox.plug_sp, smpm.plug_sp) annotation (Line(
-            points={{-4,-30},{-4,-30}},
-            color={0,0,255}));
-        connect(currentQuasiRMSSensor.plug_n, terminalBox.plugSupply)
-          annotation (Line(points={{-10,-10},{-10,-10},{-10,-28}}, color={0,0,255}));
-        connect(diodeBridge2mPulse.ac, currentQuasiRMSSensor.plug_p)
-          annotation (Line(points={{-10,20},{-10,15},{-10,10}},
-                                                              color={0,0,255}));
-        connect(variableResistor.p, diodeBridge2mPulse.dc_p) annotation (Line(points={{0,60},{
-                0,50},{-4,50},{-4,40}},               color={0,0,255}));
-        connect(variableResistor.n, diodeBridge2mPulse.dc_n)
-          annotation (Line(points={{-20,60},{-20,50},{-16,50},{-16,40}},
-                                                                   color={0,0,255}));
-        connect(smpm.flange, inertiaLoad.flange_a)
-          annotation (Line(points={{0,-40},{50,-40}}));
-        connect(gain.u, speedSensor.w)
-          annotation (Line(points={{40,18},{40,11}},      color={0,0,127}));
-        connect(limiter.u, gain.y)
-          annotation (Line(points={{40,48},{40,41}}, color={0,0,127}));
-        connect(limiter.y, ac2dc.u)
-          annotation (Line(points={{40,71},{40,80},{22,80}}, color={0,0,127}));
-        connect(ac2dc.y, variableResistor.R)
-          annotation (Line(points={{-1,80},{-10,80},{-10,71}}, color={0,0,127}));
-        connect(starM.plug_p, voltageQuasiRMSSensor.plug_n) annotation (Line(
-              points={{-50,-10},{-48,-10},{-40,-10}}, color={0,0,255}));
-        connect(voltageQuasiRMSSensor.plug_p, currentQuasiRMSSensor.plug_n)
-          annotation (Line(points={{-20,-10},{-20,-10},{-10,-10}}, color={0,0,
-                255}));
-        connect(smpm.flange, speedSensor.flange)
-          annotation (Line(points={{0,-40},{40,-40},{40,-10}}));
-        connect(terminalBox.starpoint, starM.pin_n) annotation (Line(points={{-19,-28},
-                {-44,-28},{-70,-28},{-70,-10}}, color={0,0,255}));
-        connect(ground.p, variableResistor.n)
-          annotation (Line(points={{-70,60},{-46,60},{-20,60}}, color={0,0,255}));
-        connect(ground.p, grounding.n)
-          annotation (Line(points={{-70,60},{-70,60},{-70,40}}, color={0,0,255}));
-        connect(starM.pin_n, grounding.p)
-          annotation (Line(points={{-70,-10},{-70,5},{-70,20}}, color={0,0,255}));
-        annotation (experiment(StopTime=0.8, Interval=0.001), Documentation(
-              info="<html>
-<p>
-A synchronous induction machine with permanent magnets starts braking from nominal speed by feeding a diode bridge, which in turn feeds a braking resistor.<br>
-Since induced voltage is reduced proportional to falling speed, the braking resistance is set proportional to speed to achieve constant current and torque.</p>
-<p>
-Default machine parameters of model <a href=\"modelica://Modelica.Electrical.Machines.BasicMachines.SynchronousInductionMachines.SM_PermanentMagnet\">SM_PermanentMagnet</a> are used.
-</p>
-</html>"));
-      end SMPM_Braking;
-
       model SMEE_Generator
         "Test example: ElectricalExcitedSynchronousInductionMachine as Generator"
         extends Modelica.Icons.Example;
Index: Modelica/Electrical/package.order
===================================================================
--- Modelica/Electrical/package.order	(revision 9483)
+++ Modelica/Electrical/package.order	(working copy)
@@ -2,6 +2,5 @@
 Digital
 Machines
 MultiPhase
-PowerConverters
 QuasiStationary
 Spice3
Index: Modelica/Magnetic/FluxTubes.mo
===================================================================
--- Modelica/Magnetic/FluxTubes.mo	(revision 9483)
+++ Modelica/Magnetic/FluxTubes.mo	(working copy)
@@ -112,361 +112,6 @@
 </html>"));
     end ReluctanceForceCalculation;
 
-    package Hysteresis "Hysteresis"
-      extends Modelica.Icons.Info;
-      package StaticHysteresis "Static Hysteresis"
-        extends Modelica.Icons.Info;
-        class Tellinen "Tellinen Hysteresis Model"
-          extends Modelica.Icons.Information;
-
-          annotation (Documentation(info="<html>
-<p>
-<b><span style=\"color: #008000;\">The Tellinen hysteresis model</span></b>
-</p>
-
-<p>
-The Tellinen hysteresis model is described in more detail in <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Literature\">[Te98, ZB12]</a>. It is a simple model to describe the static magnetic hysteresis behavior of ferromagnetic materials. It only requires the Upper B<sub>U</sub>(H) and lower B<sub>L</sub>(H) branches of the linmiting hysteresis loop for the adaption to a material specific hysteresis shape. Coming from negative magnetic saturation with increasing magnetic field strength H(t) the flux density B(T) travels along the B<sub>L</sub>(H). Coming from positiv saturation with a decreasing H(t), B(t) travels along B<sub>U</sub>(H). The Tellinen model is defined by the following equation, which gives a calculation rule for time derivative of the magnetic flux density B(t) with respect to the current value of B(t), H(t) and its slope dH(t)/dt.
-</p>
-
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\"<tr>
-<td><p><img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/StaticHysteresis/Tellinen/Eqn_Tellinen01.png\"/> </p></td>
-</tr>
-</table>
-
-<p>
-Therein, S<sub>U</sub>(H) and S<sub>L</sub>(H) are the derivatives of limiting branches of the hysteresis loop with respect to the magnetic field strength H, as illustrated in Fig 1.
-</p>
-<p>
-<b>Fig. 1:</b> Upper B<sub>U</sub>(H) and lower B<sub>L</sub>(H) branches of the hysteresis envelope curve, their corresponding slope functions S<sub>UH</sub>(H) and S<sub>LH</sub>(H) and the actual operating point H(t), B(t). </p>
-
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\"<tr>
-<td><p><img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/StaticHysteresis/Tellinen/TellinenDesc1.png\"/> </p></td>
-</tr>
-</table>
-</html>"));
-        end Tellinen;
-
-        class Preisach "Preisach Hysteresis Model"
-          extends Modelica.Icons.Information;
-
-          annotation (Documentation(info="<html>
-<h4><font color=\"#008000\">The Preisach hysteresis model</font></h4>
-
-<p>
-This section gives an very brief overview of the Preisach hysteresis model, which is explained in more detail in <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Literature\">[Pr35, Ma03, Zi12]</a>. The classical Preisach hysteresis model describes the course of magnetic flux density B(t) of a ferromagnetic core material as a function of the course of the mangetic field strength H(t) and its history. The model assumes an infinite set of elementary hysteresis operators &gamma;&alpha;&beta;. The simple rectangular pattern of the output &gamma;&alpha;&beta;H(t) of such an operator with its upper and lower switching limits &alpha; and &beta; is shown Fig. 1.
-</p>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-  <caption align=\"bottom\"><b>Fig. 1: </b>Characteristics of an elementary hysteresis operator.</caption>
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/StaticHysteresis/Preisach/preisach_elementaryOperator.png\">
-    </td>
-  </tr>
-</table>
-
-<p>
-Due to &alpha;&ge;&beta;, the switching limits &alpha; and &beta; span a right triangular region, oftern referred to as Preisach plane (see Fig. 2a). For each single point (&alpha;,&beta;) on this plane exactly one elementary hysteresis operator is defined with exactly the switching limits of &alpha; and &beta;.
-</p>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-  <caption align=\"bottom\"><b>Fig. 2:</b> Preisach Plane (a) and exemplary plot of the Preisach distribution function P(&alpha;,&beta;) (b)</caption>
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/StaticHysteresis/Preisach/preisach_PlaneAndDist.png\">
-    </td>
-  </tr>
-</table>
-
-<p>
-Additionally, the Preisach distribution function P(&alpha;,&beta;) is defined over the Preisach plane, which gives each operator an individual weight (see Fig. 2b). The Preisach plane can be separated into two regions. The S+ region, in which all the operators being in the &quot;+1&quot; state and the S- region, in which all the operators being in the &quot;-1&quot; state. The line L(t), which separates the regions S+ and S- develops along with the variation of the magnetic field strength H(t) and holds information about its history. The current magnetic flux density can than be computed as follows:
-</p>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/StaticHysteresis/Preisach/Eqn_PreisachBt.png\">
-    </td>
-  </tr>
-</table>
-
-<h4><font color=\"#008000\">Hysteresis shape and computing of the double integral</font></h4>
-
-<p>
-The equation above shows, that the double integral of P(&alpha;,&beta;) have to be computed in every time step to compute B(t) according to the Preisach hysteresis model. Typically, the Preisach distribution function is not analytically integrable twice. A numerical double integration in every time step would be very computationally intensive. Therefore, an analytical description of the Everett function <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Literature\">[YUY89]</a> is used to define the hysteresis shape.
-</p>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/StaticHysteresis/Preisach/Eqn_EverettFcn.png\">
-    </td>
-  </tr>
-</table>
-
-<p>
-The Everett function returns the change in magnetization which results whenn all elementary hysteresis operators of the region R switch from \"-1\" to the \"+1\" state (see Fig 3.). The entire Region S+ can be now be decomposed into several smaller triangular regions similar to R. This way the magnetization B(t) can be efficiently evaluated without the need of the numerical integration of the Preisach distribution function.
-</p>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-  <caption align=\"bottom\"><b>Fig. 3:</b> Preisach plane and region R over which P(&alpha;,&beta;) is integrated to obtain E(H1,H2)</caption>
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/StaticHysteresis/Preisach/EverettRegion.png\">
-    </td>
-  </tr>
-</table>
-
-<p>
-According to <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Literature\">[YUY89]</a> the used analytical form of the Everett function is parameterized by 8 parameters. Several parameter sets were identified to fit measured or published static hysteresis behavior of different materials. These predefined parameter sets are stored in <a href=\"modelica://Modelica.Magnetic.FluxTubes.Material.HysteresisEverettParameter\"><code>FluxTubes.Material.HysteresisEverettParameter</code></a> library and can be used with the <a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets.GenericHystPreisachEverett\"><code>GenericHystPreisachEverett</code></a> flux tube element. Additionally, also the <a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets.GenericHystTellinenEverett\"><code>GenericHystTellinenEverett</code></a> element can use this library.
-</p>
-
-<p></p>
-</html>"));
-        end Preisach;
-        annotation (Documentation(info="<html>
-<p>
-Two different types of hyteresis models are supported:
-<ul>
-<li> Tellinen model (a simple model to describe the static magnetic hysteresis behavior of ferromagnetic materials).</li>
-<li> Preisach model (a more detailed, but also computationally more involved hysteresis model).</li>
-</ul>
-</html>"));
-      end StaticHysteresis;
-
-      class DynamicHysteresis "Dynamic Hysteresis (Eddy Currents)"
-        extends Modelica.Icons.Information;
-        annotation (Documentation(info="<html>
-
-<h4><font color=\"#008000\">Dynamic Hysteresis (Eddy Currents)</font></h4>
-
-<p>
-Some of the hysteresis flux tubes elements of the package <a href=\"FluxTubes.Shapes.HysteresisAndMagnets\">HysteresisAndMagnets</a> are capable of simulating eddy currents (dynamic hysteresis) additional to the static hysteresis behavior of the core material. The computation of eddy currents can be activated via the switch <code>includeEddyCurrents</code> in the \"LossesAndHeat\" tab of the corresponding elements parameter dialog. The total magnetic field strength <code>H</code> of the element is the sum of the ferromagnetic portion <code>Hstat</code> and the eddy current portion <code>Heddy:</code>
-</p>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/DynamicHysteresis/Eqn_EddyCurrent_Ht.png\">
-    </td>
-  </tr>
-</table>
-
-<p>
-The eddy current portion of the magnetic field strength is the product of the classical eddy current factor (<code>&sigma;<sub>cl</sub></code>) <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Literature\">[BE01,Te98]</a> and the time derivative of the magnetic flux density B(t):
-</p>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/DynamicHysteresis/Eqn_EddyCurrent_Heddy.png\">
-    </td>
-  </tr>
-</table>
-
-<p>
-Where <code>&sigma;</code> is the electrical conductivity and <code>d</code> the thickness of the used electric steel sheets. Fig. 1 shows the decomposition of an exemplary dynamic hysteresis in its static and eddy current portion.
-</p>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-<caption align=\"bottom\"><b>Fig. 1:</b> Static and dynamic portion of the hysteresis B(H)</caption>
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/DynamicHysteresis/Eddy_BHBHstatBHeddy.png\">
-    </td>
-  </tr>
-</table>
-
-<p>
-The following two figures show a comparison between measured and simulated dynamic hysteresis at several frequencies. The measurements were performed with a 25 cm Epstein frame  according to DIN EN 60404-2. The magnetic core was made up of four layers of M330-50A steel sheet. The primary Winding of the used Epstein frame had 720 turns. The primary voltage was adjusted so that the magnetic excitation was about Hmax = 400 A/m, but 72 V in maximum. The simulation results (see Fig. 3) were generated with a simple model of this setup using the <a href=\"FluxTubes.Shapes.HysteresisAndMagnets.GenericHystTellinenTable\">GenericHystTellinenTable</a> hysteresis flux tube element for modeling the magnetic core.
-</p>
-
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-<caption align=\"bottom\"><b>Fig. 2:</b> Dynamic hysteresis measurements with an 25 cm Epstein frame according to DIN EN 60404-2 (Material: M330-50A, 4 Sheets)</caption>
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/DynamicHysteresis/EddyCurrent_Epstein_Meas.png\">
-    </td>
-  </tr>
-</table>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-<caption align=\"bottom\"><b>Fig. 3:</b> Simulation results of a 25 cm Epstein frame model according to the measurement setup of Fig. 1</caption>
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/DynamicHysteresis/EddyCurrent_Epstein_Sim.png\">
-    </td>
-  </tr>
-</table>
-
-
-</html>"));
-      end DynamicHysteresis;
-
-      class HysteresisLosses "Hysteresis losses"
-        extends Modelica.Icons.Information;
-        annotation (Documentation(info="<html>
-<p><b><font style=\"color: #008000; \">Hysteresis power losses</font></b> </p>
-<p>The total power loss (<code>LossPower</code>) of an hysteresis flux tube element is the sum of the power loss due to the static ferromagnetic hsysteresis (<code>LossPowerStat</code>) and the power loss due to eddy currents (<code>LossPowerEddy</code>). </p>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/HysteresisLosses/Eqn_LossPower01.png\">
-    </td>
-  </tr>
-</table>
-
-<p>
-The two componenets <code>LossPowerStat</code> and <code>LossPowerEddy</code> can be calculated as follows.
-</p>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/HysteresisLosses/Eqn_LossPower02.png\">
-    </td>
-  </tr>
-</table>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/HysteresisLosses/Eqn_LossPower03.png\">
-    </td>
-  </tr>
-</table>
-
-<p>
-Where <code>&sigma;<sub>cl</sub></code> is the classical eddy current factor (see <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis.DynamicHysteresis\">UsersGuide.Hysteresis.DynamicHysteresis</a>) and V the volume of the core material. The equations show that <code>LossPowerStat</code> acts as power sink and power source (magnetic energy storage) whereas <code>LossPowerEddy</code> is always positive (Power sink). By means of an simple example the following figures show the time course of the magntix flux density,  the magnetic field strength and the hysteresis losses. The pulsuating course of the power loss (see Fig. 3c) makes it difficult to estimate an average loss. For this reason, the hysteresis flux tube elements are capable of dircetly computing the moving average of the power losses. Therefore, <code>t_avg</code> of the \"LossesAndHeat\" tab of the elements parameter dialog may be adjusted to set an adequate time interval (see Fig. 3d).
-</p>
-
-
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-  <caption align=\"bottom\"><b>Fig. 1:</b> Diagram of a simple transformer with ferromagnetic core (model available at <a href=\"modelica://Modelica.Magnetic.FluxTubes.Examples.Hysteresis.TransformerWithHysteresis\">Examples.Hysteresis.TransformerWithHysteresis</a>)</caption>
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/HysteresisLosses/PowerLoss_Hysteresis01.png\">
-    </td>
-  </tr>
-</table>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-  <caption align=\"bottom\"><b>Fig. 2:</b> Simulated total dynamic hysteres loop with its static and eddy current fractions</caption>
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/HysteresisLosses/PowerLoss_Hysteresis02.png\">
-    </td>
-  </tr>
-</table>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-  <caption align=\"bottom\"><b>Fig. 3:</b> Simulated outputs of the <code>Core</code> component of Fig. 1</caption>
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/HysteresisLosses/PowerLoss_Hysteresis03.png\">
-    </td>
-  </tr>
-</table>
-
-</html>
-
-"));
-      end HysteresisLosses;
-      annotation (Documentation(info="<html>
-
-<h4><font color=\"#008000\">Introduction</font></h4>
-
-<p>
-The elements provided in the package Shapes.HysteresisAndMagnets allow for consideration of ferromagnetic and dynamic hysteresis during the simulation of electromagnetic networks. The ferromagnetic hysteresis is a material property of the core material and frequency independent. Due to eddy currents the static ferromagnetic hysteresis is superposed by a frequency dependent hysteresis when the ferromagnetic material is exposed to an alternating magnetic field. Fig 1 exemplarily shows the simulated hysteresis characteristics of a simple inductor with an iron core for three different excitation frequencies. Thereby, the 0 Hz hysteresis loop represents the static ferromagnetic hysteresis of the core material. The widening of the loops for higher frequencies is due to eddy currents induced in the core material.
-</p>
-
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <caption align=\"bottom\"><b>Fig. 1:</b> Inductor with ferromagnetic core and hysteresis effects; (a) diagram of the network model; (b) simulated hysteresis characteristics of the core for different excitation frequencies of 0, 10 and 100 Hz (the example model can be found at: <a href=\"modelica://Modelica.Magnetic.FluxTubes.Examples.Hysteresis.InductorWithHysteresis\">Examples.Hystersis.InductorWithHysteresis</a>)</td>
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/InductorWithHysteresis_DiagramAndSim.png\">
-   </td>
-  </tr>
-</table>
-
-
-<p>
-Several models to describe the static hysteresis behavior of ferromagnetic materials are known. In this library two of them are implemented. The simple but fast <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis.StaticHysteresis.Tellinen\">Tellinen hysteresis model</a> and the more accurate but complex <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis.StaticHysteresis.Preisach\">Preisach hysteresis model</a>. Click the links for a short descripten of both models.
-</p>
-
-<h4><font color=\"#008000\">Flux tube elements of the Package HysteresisAndMagnets</font></h4>
-
-
-<table border=1 cellspacing=0 cellpadding=2>
- <tr>
-  <th>Name / Icon</th><th>Description</th>
- </tr>
-
- <tr>
-  <td valign=\"top\"><a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets.GenericHystTellinenSoft\">GenericHystTellinenSoft</a><br><img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/GenericHystTellinenS.png\">
-  </td>
-  <td valign=\"top\">
-  Flux tube element for modeling soft magnetic materials with ferromagnetic and dynamic hysteresis (eddy currents). The ferromagnetic hysteresis behavior is defined by the <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis.StaticHysteresis.Tellinen\">Tellinen hysteresis model</a>. The shape of the limiting hysteresis loop is described by simple hyperbolic tangent functions with 4 parameters. Therefore, the hysteresis shape variety is limited but the parameterization of the model is very simple and the model is relatively fast and robust.
-  </td>
- </tr>
-
- <tr>
-  <td valign=\"top\"><a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets.GenericHystTellinenHard\">GenericHystTellinenHard</a><br><img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/GenericHystTellinenH.png\">
-  </td>
-  <td valign=\"top\">
-  Flux tube element for modeling the ferromagnetic (static) hysteresis of hard magnetic materials. The ferromagnetic hysteresis behavior is defined by the <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis.StaticHysteresis.Tellinen\">Tellinen hysteresis model</a>. The shape of the limiting hysteresis loop is described by simple hyperbolic tangent functions with 4 parameters.
-  </td>
- </tr>
-
- <tr>
-  <td valign=\"top\"><a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets.GenericHystTellinenEverett\">GenericHystTellinenEverett</a><br><img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/GenericHystTellinenE.png\">
-  </td>
-  <td valign=\"top\">
-  Flux tube element for modeling soft magnetic materials with ferromagnetic and dynamic hysteresis (eddy currents). The ferromagnetic hysteresis behavior is defined by the <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis.StaticHysteresis.Tellinen\">Tellinen hysteresis model</a>. The Shape of the limiting ferromagnetic hysteresis loop is specified by an analytical description of the Everett function, which is also used to parameterize the <a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets.GenericHystPreisachEverett\">GenericHystPreisachEverett</a> model. A library of predefined parameter sets can be found in <a href=\"modelica://Modelica.Magnetic.FluxTubes.Material.HysteresisEverettParameter\">FluxTubes.Material.HysteresisEverettParameter</a>.
-  </td>
- </tr>
-
- <tr>
-  <td valign=\"top\"><a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets.GenericHystTellinenTable\">GenericHystTellinenTable</a><br><img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/GenericHystTellinenT.png\">
-  </td>
-  <td valign=\"top\">
-  Flux tube element for modeling magnetic materials with ferromagnetic and dynamic hysteresis (eddy currents). The ferromagnetic hysteresis behavior is defined by the <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis.StaticHysteresis.Tellinen\">Tellinen hysteresis model</a>. The rising and falling branch of the limiting ferromagnetic hysteresis loop are specified by table data. Therefore, almost any hysteresis shapes are possible. A library with predefined tables can be found at <a href=\"modelica://Modelica.Magnetic.FluxTubes.Material.HysteresisTableData\">FluxTubes.Material.HysteresisTableData</a>.
-  </td>
- </tr>
-
- <tr>
-  <td valign=\"top\"><a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets.GenericHystPreisachEverett\">GenericHystPreisachEverett</a><br><img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/GenericHystPreisachE.png\">
-  </td>
-  <td valign=\"top\">
-  Flux tube element for modeling magnetic materials with ferromagnetic and dynamic hysteresis (eddy currents). The ferromagnetic hysteresis behavior is defined by the
-<a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis.StaticHysteresis.Preisach\">Preisach hysteresis model</a>. The Shape of the limiting ferromagnetic hysteresis loop is specified by an analytical description of the Everett function. A library of predefined parameter sets can be found in <a href=\"modelica://Modelica.Magnetic.FluxTubes.Material.HysteresisEverettParameter\">FluxTubes.Material.HysteresisEverettParameter</a>.
-  </td>
- </tr>
-
- <tr>
-  <td valign=\"top\"><a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets.GenericHystTellinenPermanentMagnet\">GenericHystTellinenPermanentMagnet</a><br><img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/GenericHystTellinenPM.png\">
-  </td>
-  <td valign=\"top\">
-  Flux tube element for modeling the hard magnetic hysteresis of permanent magnets. The model is similar to <a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets.GenericHystTellinenHard\">GenericHystTellinenHard</a> but has an initial magnetization preset of -100&percnt; and and adapted icon for better readability of the diagram.
-  </td>
- </tr>
-
- <tr>
-  <td valign=\"top\"><a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets.GenericLinearPermanentMagnet\">GenericLinearPermanentMagnet</a><br><img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/UsersGuide/Hysteresis/GenericLinearPM.png\">
-  </td>
-  <td valign=\"top\">
-  Simple model of a linear permanent Magnet. Typical characteristics of common permanent magnetic materials can be found at <a href=\"modelica://Modelica.Magnetic.FluxTubes.Material.HardMagnetic\">FluxTubes.Material.HardMagnetic</a>.
-  </td>
- </tr>
-
-</table>
-
-</html>"));
-    end Hysteresis;
-
     class Literature "Literature"
       extends Modelica.Icons.References;
 
@@ -596,11 +241,6 @@
 <h5>Version 3.2.2, 2014-12-05 (Johannes&nbsp;Ziske, Thomas&nbsp;B&ouml;drich)</h5>
 
 <ul>
-<li>Added package <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis\">FluxTubes.UsersGuide.Hysteresis</a></li>
-<li>Added package <a href=\"modelica://Modelica.Magnetic.FluxTubes.Examples.Hysteresis\">Fluxtubes.Examples.Hysteresis</a></li>
-<li>Added package <a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets\">FluxTubes.Shapes.HysteresisAndMagnets</a></li>
-<li>Added package <a href=\"modelica://Modelica.Magnetic.FluxTubes.Material.HysteresisEverettParameter\">FluxTubes.Material.HysteresisEverettParameter</a></li>
-<li>Added package <a href=\"modelica://Modelica.Magnetic.FluxTubes.Material.HysteresisTableData\">FluxTubes.Material.HysteresisTableData</a></li>
 <li>Updated <a href=\"modelica://Modelica.Magnetic.FluxTubes.Interfaces.PartialFixedShape\">FluxTubes.Interfaces.PartialFixedShape</a> for differentiability</li>
 <li>Updated <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Literature\">FluxTubes.UsersGuide.Literature</a></li>
 </ul>
@@ -2725,1512 +2365,6 @@
 </html>"));
     end SolenoidActuator;
 
-    package Hysteresis
-      extends Modelica.Icons.ExamplesPackage;
-
-      model HysteresisModelComparison
-        "Comparison of the different hysteresis models"
-        extends Modelica.Icons.Example;
-        Modelica.Blocks.Sources.TimeTable timeTable(table=[0.0,0.0; 1,500; 3,-500;
-              5,500; 6,-24; 7,24; 8,-24; 9,24; 10,-24; 11,24; 12,-24; 13,24; 14,
-              -24; 15,24])
-          annotation (Placement(transformation(extent={{-88,62},{-76,74}})));
-        Basic.ElectroMagneticConverterWithLeakageInductance W1(N=1) "Winding 1"
-          annotation (Placement(transformation(extent={{2,58},{22,78}})));
-        Modelica.Electrical.Analog.Basic.Ground elGnd1
-          annotation (Placement(transformation(extent={{-24,38},{-4,58}})));
-        Basic.Ground magGnd1
-          annotation (Placement(transformation(extent={{12,38},{32,58}})));
-        Modelica.Electrical.Analog.Basic.Resistor R1(R=1)
-          annotation (Placement(transformation(extent={{-22,68},{-2,88}})));
-        Modelica.Electrical.Analog.Sources.SignalVoltage V1 annotation (
-            Placement(transformation(
-              extent={{10,-10},{-10,10}},
-              rotation=90,
-              origin={-28,68})));
-        Basic.ElectroMagneticConverterWithLeakageInductance W2(N=1) "Winding 1"
-          annotation (Placement(transformation(extent={{2,8},{22,28}})));
-        Modelica.Electrical.Analog.Basic.Ground elGnd2
-          annotation (Placement(transformation(extent={{-22,-12},{-2,8}})));
-        Shapes.HysteresisAndMagnets.GenericHystTellinenTable TellinenTable(
-          includeEddyCurrents=false,
-          sigma=1,
-          K=100,
-          mat=FluxTubes.Material.HysteresisTableData.M330_50A(),
-          l=1,
-          MagRel(fixed=true, start=0))
-               annotation (Placement(transformation(
-              extent={{-10,-10},{10,10}},
-              origin={40,28})));
-        Basic.Ground magGnd2
-          annotation (Placement(transformation(extent={{12,-12},{32,8}})));
-        Modelica.Electrical.Analog.Basic.Resistor R2(R=1)
-          annotation (Placement(transformation(extent={{-22,18},{-2,38}})));
-        Modelica.Electrical.Analog.Sources.SignalVoltage V2 annotation (
-            Placement(transformation(
-              extent={{10,-10},{-10,10}},
-              rotation=90,
-              origin={-28,18})));
-        Basic.ElectroMagneticConverterWithLeakageInductance W3(N=1) "Winding 1"
-          annotation (Placement(transformation(extent={{2,-44},{22,-24}})));
-        Modelica.Electrical.Analog.Basic.Ground elGnd3
-          annotation (Placement(transformation(extent={{-22,-64},{-2,-44}})));
-        Shapes.HysteresisAndMagnets.GenericHystPreisachEverett PreisachEverett(
-          includeEddyCurrents=false,
-          sigma=1,
-          mat=FluxTubes.Material.HysteresisEverettParameter.M330_50A(),
-          l=1,
-          MagRel(fixed=true, start=0))
-               annotation (Placement(transformation(
-              extent={{-10,-10},{10,10}},
-              origin={40,-24})));
-        Basic.Ground magGnd3
-          annotation (Placement(transformation(extent={{12,-64},{32,-44}})));
-        Modelica.Electrical.Analog.Basic.Resistor R3(R=1)
-          annotation (Placement(transformation(extent={{-22,-34},{-2,-14}})));
-        Modelica.Electrical.Analog.Sources.SignalVoltage V3 annotation (
-            Placement(transformation(
-              extent={{10,-10},{-10,10}},
-              rotation=90,
-              origin={-28,-34})));
-        Modelica.Blocks.Math.Gain gain(k=1)
-          annotation (Placement(transformation(extent={{-68,62},{-56,74}})));
-        Shapes.HysteresisAndMagnets.GenericHystTellinenSoft TellinenSoft(
-          l=1,
-          Js=1.35,
-          Br=1.0,
-          Hc=40,
-          K=100,
-          MagRel(fixed=true, start=0))
-          annotation (Placement(transformation(extent={{30,70},{50,90}})));
-      equation
-        connect(W1.port_n, magGnd1.port) annotation (Line(
-            points={{22,62},{22,58}},
-            color={255,127,0}));
-        connect(R1.n, W1.p) annotation (Line(
-            points={{-2,78},{2,78},{2,74}},
-            color={0,0,255}));
-        connect(W1.n, elGnd1.p) annotation (Line(
-            points={{2,62},{2,58},{-14,58}},
-            color={0,0,255}));
-        connect(V1.p, R1.p) annotation (Line(
-            points={{-28,78},{-22,78}},
-            color={0,0,255}));
-        connect(elGnd1.p, V1.n) annotation (Line(
-            points={{-14,58},{-28,58}},
-            color={0,0,255}));
-        connect(W2.port_n, magGnd2.port) annotation (Line(
-            points={{22,12},{22,8}},
-            color={255,127,0}));
-        connect(W2.port_p, TellinenTable.port_p) annotation (Line(
-            points={{22,24},{22,28},{30,28}},
-            color={255,127,0}));
-        connect(R2.n, W2.p) annotation (Line(
-            points={{-2,28},{2,28},{2,24}},
-            color={0,0,255}));
-        connect(W2.n, elGnd2.p) annotation (Line(
-            points={{2,12},{2,8},{-12,8}},
-            color={0,0,255}));
-        connect(V2.p, R2.p) annotation (Line(
-            points={{-28,28},{-22,28}},
-            color={0,0,255}));
-        connect(elGnd2.p, V2.n) annotation (Line(
-            points={{-12,8},{-28,8}},
-            color={0,0,255}));
-        connect(TellinenTable.port_n, magGnd2.port) annotation (Line(
-            points={{50,28},{54,28},{54,8},{22,8}},
-            color={255,127,0}));
-        connect(V2.v, V1.v) annotation (Line(
-            points={{-35,18},{-44,18},{-44,68},{-35,68}},
-            color={0,0,127}));
-        connect(W3.port_n, magGnd3.port) annotation (Line(
-            points={{22,-40},{22,-44}},
-            color={255,127,0}));
-        connect(W3.port_p, PreisachEverett.port_p) annotation (Line(
-            points={{22,-28},{22,-24},{30,-24}},
-            color={255,127,0}));
-        connect(R3.n, W3.p) annotation (Line(
-            points={{-2,-24},{2,-24},{2,-28}},
-            color={0,0,255}));
-        connect(W3.n, elGnd3.p) annotation (Line(
-            points={{2,-40},{2,-44},{-12,-44}},
-            color={0,0,255}));
-        connect(V3.p, R3.p) annotation (Line(
-            points={{-28,-24},{-22,-24}},
-            color={0,0,255}));
-        connect(elGnd3.p, V3.n) annotation (Line(
-            points={{-12,-44},{-28,-44}},
-            color={0,0,255}));
-        connect(PreisachEverett.port_n, magGnd3.port) annotation (Line(
-            points={{50,-24},{54,-24},{54,-44},{22,-44}},
-            color={255,127,0}));
-        connect(V3.v, V1.v) annotation (Line(
-            points={{-35,-34},{-44,-34},{-44,68},{-35,68}},
-            color={0,0,127}));
-        connect(timeTable.y, gain.u) annotation (Line(
-            points={{-75.4,68},{-69.2,68}},
-            color={0,0,127}));
-        connect(gain.y, V1.v) annotation (Line(
-            points={{-55.4,68},{-35,68}},
-            color={0,0,127}));
-        connect(W1.port_p, TellinenSoft.port_p) annotation (Line(points={{22,74},
-                {22,80},{30,80}}, color={255,127,0}));
-        connect(magGnd1.port, TellinenSoft.port_n) annotation (Line(points={{22,
-                58},{54,58},{54,80},{50,80}}, color={255,127,0}));
-        annotation (experiment(StartTime=0, StopTime=14, Interval=3e-3, Tolerance=1e-005),            Documentation(info="
-<html>
-<p>
-Use the following simulation settings:
-</p>
-<ul>
-  <li>Stop time: 14 s</li>
-  <li>Number of intervals: 5000</li>
-  <li>Tolerance: 1e-5</li>
-</ul>
-<p>
-This example compares the behavior of three different hysteresis mdoels due to the exact same input magnetic field strength. The three different models are:
-</p>
-<ol>
-  <li>Model=GenericHystTellinenSoft, Tellinen hysteresis model, the upper and lower branch of the limiting hysteresis loop is roughly approximated with simple hyperbolic tangent functions (Fig1. c)</li>
-  <li>Model=GenericHystTellinenTable, Tellinen hysteresis model, the upper and lower branch of the limiting hysteresis loop can be defined with almost arbitrary table data (Fig1. d)</li>
-  <li>Model=GenericHystPreisachEverett,Preisach hysteresis model, the hysteresis shape is defined by the Everett function (Fig1. e)</li>
-</ol>
-<p>
-Compared to the complex Preisach hysteresis model the Tellinen model is very simple and thus computationally more effective and stable. It is sufficient for many applications. But the Tellinen model has inherently a problem with small periodic input field variations at locations where the outer hysteresis loop has large slopes. In such a case, the simulated minor loops settle to the center of the hysteresis envelope curve, whereas the minor loops of the Preisach model stay constant ('property of equal vertical chords', <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Literature\">[Ma03]</a>). The input signal of the example (Fig.1 a) corresponds to that case and Fig. 1 b-e shows the behavior of the different models.
-</p>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-  <caption align=\"bottom\"><b>Fig. 1: </b>Simulated magnetic flux densities B of different hysteresis models (b) due to an applied mangetic field strength shown in (a). Corresponding B(H) loops of the hysteresis models GenericHystTellinenSoft (c), GenericHystTellinenTable (d) and GenericHystPreisachEverett (e).</caption>
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Examples/Hysteresis/HysteresisModelComparison/plot1.png\">
-    </td>
-  </tr>
-</table>
-</html>
-"));
-      end HysteresisModelComparison;
-
-      model InductorWithHysteresis
-        extends Modelica.Icons.Example;
-        Basic.Ground mag_ground
-          annotation (Placement(transformation(extent={{0,-32},{20,-12}})));
-        Basic.ElectroMagneticConverterWithLeakageInductance Winding(i(fixed=
-                true), N=10)
-          annotation (Placement(transformation(extent={{-10,4},{10,24}})));
-        Modelica.Electrical.Analog.Basic.Ground el_ground
-          annotation (Placement(transformation(extent={{-48,-32},{-28,-12}})));
-        Modelica.Electrical.Analog.Basic.Resistor R(R=0.1)
-          annotation (Placement(transformation(extent={{-34,10},{-14,30}})));
-        Modelica.Electrical.Analog.Sources.SineVoltage SineVoltage(freqHz=200, V=5)
-                        annotation (Placement(transformation(
-              extent={{-10,-10},{10,10}},
-              rotation=270,
-              origin={-38,4})));
-        Shapes.HysteresisAndMagnets.GenericHystTellinenEverett Core(
-          mat=FluxTubes.Material.HysteresisEverettParameter.M330_50A(),
-          A=4e-4,
-          MagRel(fixed=true, start=0),
-          includeEddyCurrents=true,
-          derHstat(fixed=true),
-          l=0.1)
-          annotation (Placement(transformation(extent={{20,10},{40,30}})));
-      equation
-        connect(Winding.port_n, mag_ground.port) annotation (Line(
-            points={{10,8},{10,-12}},
-            color={255,127,0}));
-        connect(SineVoltage.p, R.p) annotation (Line(
-            points={{-38,14},{-38,20},{-34,20}},
-            color={0,0,255}));
-        connect(SineVoltage.n, el_ground.p) annotation (Line(
-            points={{-38,-6},{-38,-12}},
-            color={0,0,255}));
-        connect(Winding.n, el_ground.p) annotation (Line(
-            points={{-10,8},{-10,-12},{-38,-12}},
-            color={0,0,255}));
-        connect(R.n, Winding.p) annotation (Line(
-            points={{-14,20},{-10,20}},
-            color={0,0,255}));
-        connect(Winding.port_p, Core.port_p) annotation (Line(points={{10,20},{
-                15,20},{20,20}}, color={255,127,0}));
-        connect(mag_ground.port, Core.port_n) annotation (Line(points={{10,-12},
-                {46,-12},{46,20},{40,20}}, color={255,127,0}));
-        annotation (experiment(StartTime=0, StopTime=0.02, Interval=4e-6, Tolerance=1e-004),                                                                                  Documentation(info="<html>
-<p>
-This is a simple model of an inductor with a ferromagnetic core. The used GenericHystTellinenEverett model considers the ferromagnetic hysteresis, eddy currents and remanence of the core material. For example you can simulate the model for 0.02s and plot Core.B vs. Core.H to visualize the resulting hysteresis loops.
-</p>
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-  <caption align=\"bottom\"><b>Fig. 1: </b>Results Core.B(t) and Core.B(H) of the magnetic Core.</caption>
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Examples/Hysteresis/InductorWithHysteresis/plot1.png\">
-    </td>
-  </tr>
-</table>
-</html>
-"));
-      end InductorWithHysteresis;
-
-      model SinglePhaseTransformerWithHysteresis1
-        extends Modelica.Icons.Example;
-        Basic.Ground mag_ground
-          annotation (Placement(transformation(extent={{-22,-20},{-2,0}})));
-        Basic.ElectroMagneticConverterWithLeakageInductance WindingPrim(
-                       N=10, i(fixed=true))
-          annotation (Placement(transformation(extent={{-32,16},{-12,36}})));
-        Modelica.Electrical.Analog.Basic.Ground el_ground1
-          annotation (Placement(transformation(extent={{-70,-20},{-50,0}})));
-        Modelica.Electrical.Analog.Basic.Resistor Rprim(R=0.05)
-          annotation (Placement(transformation(extent={{-56,22},{-36,42}})));
-        Modelica.Electrical.Analog.Sources.SineVoltage SineVoltage(      freqHz=
-             400, V=8)  annotation (Placement(transformation(
-              extent={{-10,-10},{10,10}},
-              rotation=270,
-              origin={-60,16})));
-        Basic.ElectroMagneticConverterWithLeakageInductance WindingSec(
-                       N=10, i(fixed=true))
-          annotation (Placement(transformation(extent={{-10,10},{10,-10}},
-              rotation=180,
-              origin={30,26})));
-        Modelica.Electrical.Analog.Basic.Resistor Rsec(R=2)
-          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
-              origin={56,32})));
-        Modelica.Electrical.Analog.Basic.Ground el_ground2
-          annotation (Placement(transformation(extent={{30,-20},{50,0}})));
-        Shapes.HysteresisAndMagnets.GenericHystTellinenTable Core(
-          asc(fixed=false),
-          mat=FluxTubes.Material.HysteresisTableData.M330_50A(),
-          includeEddyCurrents=true,
-          l=0.2,
-          A=5e-4,
-          MagRel(start=0.5, fixed=true))
-          annotation (Placement(transformation(extent={{-6,22},{14,42}})));
-      equation
-        connect(WindingPrim.port_n, mag_ground.port)
-                                                 annotation (Line(
-            points={{-12,20},{-12,0}},
-            color={255,127,0}));
-        connect(SineVoltage.p, Rprim.p)
-                                    annotation (Line(
-            points={{-60,26},{-60,32},{-56,32}},
-            color={0,0,255}));
-        connect(SineVoltage.n, el_ground1.p)
-                                            annotation (Line(
-            points={{-60,6},{-60,0}},
-            color={0,0,255}));
-        connect(WindingPrim.n, el_ground1.p)
-                                        annotation (Line(
-            points={{-32,20},{-32,0},{-60,0}},
-            color={0,0,255}));
-        connect(Rprim.n, WindingPrim.p)
-                                annotation (Line(
-            points={{-36,32},{-32,32}},
-            color={0,0,255}));
-        connect(WindingSec.port_n, mag_ground.port) annotation (Line(
-            points={{20,20},{20,0},{-12,0}},
-            color={255,127,0}));
-        connect(WindingSec.p, Rsec.p)
-                                    annotation (Line(
-            points={{40,32},{46,32}},
-            color={0,0,255}));
-        connect(WindingSec.n, el_ground2.p) annotation (Line(
-            points={{40,20},{40,0}},
-            color={0,0,255}));
-        connect(Rsec.n, el_ground2.p)
-                                    annotation (Line(
-            points={{66,32},{70,32},{70,0},{40,0}},
-            color={0,0,255}));
-        connect(WindingPrim.port_p, Core.port_p) annotation (Line(
-            points={{-12,32},{-6,32}},
-            color={255,127,0}));
-        connect(Core.port_n, WindingSec.port_p) annotation (Line(
-            points={{14,32},{20,32}},
-            color={255,127,0}));
-        annotation (experiment(StartTime=0, StopTime=0.02, Interval=4e-6, Tolerance=1e-006), Documentation(info="<html>
-<p>
-This simple model of an single phase transformer shows the inrush currents due to the remanence of the core material (M330-50A). For an accurate modelling of the core material the GenericHystTellinenTable hysteresis flux tube element is used. The initial magnetization MagRel of the Core component is set to 80%. Simulation settings:
-</p>
-<ul>
-  <li>Stop time: 0.02 s</li>
-  <li>Number of intervals: 5000</li>
-  <li>Tolerance: 1e-6</li>
-</ul>
-<p>
-Then plot the flux density of the Core Core.B over the magnetic field strength Core.H and additionally the time course of the primary and secondary current and e.g. the power consumption of the iron core Core.LossPower (see the following figures).
-</p>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Examples/Hysteresis/SinglePhaseTransformerWithHysteresis1/plot01.png\" Hspace=\"10\" Vspace=\"10\">
-    </td>
-  </tr>
-</table>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Examples/Hysteresis/SinglePhaseTransformerWithHysteresis1/plot02.png\" Hspace=\"10\" Vspace=\"10\">
-    </td>
-  </tr>
-</table>
-
-</html>
-
-"));
-      end SinglePhaseTransformerWithHysteresis1;
-
-      model SinglePhaseTransformerWithHysteresis2
-        extends Modelica.Icons.Example;
-        Modelica.Electrical.Analog.Basic.Ground el_ground1
-          annotation (Placement(transformation(extent={{-90,-20},{-70,0}})));
-        Modelica.Electrical.Analog.Basic.Resistor Rprim(R=0.05)
-          annotation (Placement(transformation(extent={{-54,22},{-34,42}})));
-        Modelica.Electrical.Analog.Sources.SineVoltage SineVoltage(      freqHz=
-             400, V=6)  annotation (Placement(transformation(
-              extent={{-10,-10},{10,10}},
-              rotation=270,
-              origin={-80,16})));
-        Modelica.Electrical.Analog.Basic.Resistor Rsec(R=2)
-          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
-              origin={30,32})));
-        Modelica.Electrical.Analog.Basic.Ground el_ground2
-          annotation (Placement(transformation(extent={{2,-20},{22,0}})));
-        Components.Transformer1PhaseWithHysteresis tr(
-          mat=FluxTubes.Material.HysteresisEverettParameter.M330_50A(),
-          MagRelFixed=true,
-          IpFixed=true,
-          EddyCurrents=false,
-          HFixed=false)
-          annotation (Placement(transformation(extent={{-20,22},{0,42}})));
-      equation
-        connect(SineVoltage.p, Rprim.p)
-                                    annotation (Line(
-            points={{-80,26},{-80,32},{-54,32}},
-            color={0,0,255}));
-        connect(SineVoltage.n, el_ground1.p)
-                                            annotation (Line(
-            points={{-80,6},{-80,0}},
-            color={0,0,255}));
-        connect(Rsec.n, el_ground2.p)
-                                    annotation (Line(
-            points={{40,32},{60,32},{60,0},{12,0}},
-            color={0,0,255}));
-        connect(Rprim.n, tr.p_A) annotation (Line(
-            points={{-34,32},{-20,32}},
-            color={0,0,255}));
-        connect(tr.p_N, el_ground1.p) annotation (Line(
-            points={{-16,22},{-28,22},{-28,0},{-80,0}},
-            color={0,0,255}));
-        connect(tr.p_a, Rsec.p) annotation (Line(
-            points={{0,32},{20,32}},
-            color={0,0,255}));
-        connect(tr.p_n, el_ground2.p) annotation (Line(
-            points={{-4,22},{12,22},{12,0}},
-            color={0,0,255}));
-        annotation (experiment(StartTime=0, StopTime=0.1, Interval=2e-5, Tolerance=1e-004), Documentation(info="<html>
-<p>
-A simple model of an single phase transformer (similar to <a href=\"modelica://Modelica.Magnetic.FluxTubes.Examples.Hysteresis.SinglePhaseTransformerWithHysteresis1\">SinglePhaseTransformerWithHysteresis1</a> but with separate transformer model: <a href=\"modelica://Modelica.Magnetic.FluxTubes.Examples.Hysteresis.Components.Transformer1PhaseWithHysteresis\">Transformer1PhaseWithHysteresis</a>). Use the simulation settings:
-</p>
-<ul>
-  <li>Stop time: 0.1 s</li>
-  <li>Number of intervals: 5000.</li>
-</ul>
-<p>
-The figure shows the magnetic hysteresis in the transformer core. In (a) the consideration of the eddy currents is switched off, in (b) it is enabled.
-</p>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Examples/Hysteresis/SinglePhaseTransformerWithHysteresis2/plot1.png\" Hspace=\"10\" Vspace=\"10\">
-    </td>
-  </tr>
-</table>
-
-</html>"));
-      end SinglePhaseTransformerWithHysteresis2;
-
-      model ThreePhaseTransformerWithRectifier
-        "3 Phase transformer (including hysteresis effect) with rectifier"
-        import Modelica.Magnetic.FluxTubes;
-        extends Modelica.Icons.Example;
-
-        Modelica.Electrical.Analog.Basic.Ground G1
-          annotation (Placement(transformation(extent={{-141,-91},{-121,-71}})));
-        Modelica.Electrical.Analog.Basic.Ground G2
-          annotation (Placement(transformation(extent={{-37,-91},{-17,-71}})));
-        Modelica.Electrical.Analog.Sources.SineVoltage VA(
-          offset=0,
-          freqHz=50,
-          V=50)      annotation (Placement(transformation(
-              extent={{-10,-10},{10,10}},
-              rotation=270,
-              origin={-131,-40})));
-        Components.Transformer3PhaseYyWithHysteresis
-                                           TR3PhaseYy(
-          EddyCurrents=true,
-          N_p=200,
-          N_s=10,
-          mat=FluxTubes.Material.HysteresisEverettParameter.M330_50A(),
-          sigma=2.2e6,
-          HFixed={true,true,true},
-          MagRelFixed={true,true,false},
-          IprimFixed={true,true,true},
-          IsecFixed={true,false,false},
-          useHeatPort=false,
-          MagRelStart={-0.4,0.8,-0.4},
-          l1=0.2,
-          l2=0.15,
-          a=0.04,
-          b=0.04,
-          t=0.0005)
-          annotation (Placement(transformation(extent={{-41,-16},{-21,4}})));
-        Modelica.Electrical.Analog.Sources.SineVoltage VB(
-          offset=0,
-          freqHz=VA.freqHz,
-          V=50,
-          phase=4.1887902047864)
-                     annotation (Placement(transformation(
-              extent={{-10,-10},{10,10}},
-              rotation=270,
-              origin={-110,-40})));
-        Modelica.Electrical.Analog.Sources.SineVoltage VC(
-          offset=0,
-          freqHz=VA.freqHz,
-          V=50,
-          phase=2.0943951023932)
-                     annotation (Placement(transformation(
-              extent={{-10,-10},{10,10}},
-              rotation=270,
-              origin={-90,-40})));
-        Modelica.Electrical.Analog.Basic.Resistor RA(R=0)
-          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
-              origin={-71,9})));
-        Modelica.Electrical.Analog.Basic.Resistor RB(R=RA.R)
-          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
-              origin={-71,-6})));
-        Modelica.Electrical.Analog.Basic.Resistor RC(R=RA.R)
-          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
-              origin={-71,-21})));
-        Modelica.Electrical.Analog.Ideal.IdealDiode D1(Vknee=0.7)
-                                                       annotation (Placement(
-              transformation(
-              extent={{-10,-10},{10,10}},
-              rotation=90,
-              origin={29,19})));
-        Modelica.Electrical.Analog.Ideal.IdealDiode D2(Vknee=0.7)
-                                                       annotation (Placement(
-              transformation(
-              extent={{-10,-10},{10,10}},
-              rotation=90,
-              origin={29,-31})));
-        Modelica.Electrical.Analog.Basic.Resistor RL(R=5)
-          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
-              rotation=270,
-              origin={116,-7})));
-        Modelica.Electrical.Analog.Ideal.IdealDiode D3(Vknee=0.7)
-                                                       annotation (Placement(
-              transformation(
-              extent={{-10,-10},{10,10}},
-              rotation=90,
-              origin={49,19})));
-        Modelica.Electrical.Analog.Ideal.IdealDiode D4(Vknee=0.7)
-                                                       annotation (Placement(
-              transformation(
-              extent={{-10,-10},{10,10}},
-              rotation=90,
-              origin={49,-31})));
-        Modelica.Electrical.Analog.Ideal.IdealDiode D5(Vknee=0.7)
-                                                       annotation (Placement(
-              transformation(
-              extent={{-10,-10},{10,10}},
-              rotation=90,
-              origin={69,19})));
-        Modelica.Electrical.Analog.Ideal.IdealDiode D6(Vknee=0.7)
-                                                       annotation (Placement(
-              transformation(
-              extent={{-10,-10},{10,10}},
-              rotation=90,
-              origin={69,-31})));
-        Modelica.Electrical.Analog.Basic.Capacitor capacitor1(C=1e-6, v(fixed=
-                true))                                                annotation (
-           Placement(transformation(
-              extent={{-10,-10},{10,10}},
-              rotation=270,
-              origin={89,19})));
-        Modelica.Electrical.Analog.Basic.Inductor inductor(L=1e-3)
-          annotation (Placement(transformation(extent={{-11,-1},{9,19}})));
-        Modelica.Electrical.Analog.Basic.Inductor inductor1(L=1e-3)
-          annotation (Placement(transformation(extent={{-11,-16},{9,4}})));
-        Modelica.Electrical.Analog.Basic.Inductor inductor2(L=1e-3)
-          annotation (Placement(transformation(extent={{-10,-32},{10,-12}})));
-        Modelica.Electrical.Analog.Basic.Capacitor capacitor2(C=1e-6, v(fixed=
-                true))                                                annotation (
-           Placement(transformation(
-              extent={{-10,-10},{10,10}},
-              rotation=270,
-              origin={89,-31})));
-        Modelica.Blocks.Sources.RealExpression rExp1(y=TR3PhaseYy.LossPowerStat)
-          annotation (Placement(transformation(extent={{-111,67},{-80,83}})));
-        Modelica.Blocks.Sources.RealExpression rExp2(y=TR3PhaseYy.LossPowerEddy)
-          annotation (Placement(transformation(extent={{-111,47},{-79,63}})));
-        Modelica.Blocks.Sources.RealExpression rExp3(y=TR3PhaseYy.LossPowerWinding)
-          annotation (Placement(transformation(extent={{-111,27},{-79,43}})));
-        Modelica.Blocks.Continuous.Filter PdissStatAvg(f_cut=10)
-          "Approx. average static hysteresis losses"
-          annotation (Placement(transformation(extent={{-48,70},{-38,80}})));
-        Modelica.Blocks.Continuous.Filter PdissEddyAvg(f_cut=10)
-          "Approx. average eddy current losses"
-          annotation (Placement(transformation(extent={{-48,50},{-38,60}})));
-        Modelica.Blocks.Continuous.Filter PdissCopAvg(f_cut=10)
-          "Approx. average copper losses"
-          annotation (Placement(transformation(extent={{-48,30},{-38,40}})));
-      equation
-        connect(VA.n, G1.p)          annotation (Line(
-            points={{-131,-50},{-131,-71}},
-            color={0,0,255}));
-        connect(VB.n, G1.p) annotation (Line(
-            points={{-110,-50},{-110,-71},{-131,-71}},
-            color={0,0,255}));
-        connect(VC.n, G1.p) annotation (Line(
-            points={{-90,-50},{-90,-71},{-131,-71}},
-            color={0,0,255}));
-        connect(RA.n, TR3PhaseYy.p_A)
-                              annotation (Line(
-            points={{-61,9},{-51,9},{-51,0},{-41,0}},
-            color={0,0,255}));
-        connect(RA.p, VA.p) annotation (Line(
-            points={{-81,9},{-131,9},{-131,-30}},
-            color={0,0,255}));
-        connect(RB.n, TR3PhaseYy.p_B)
-                              annotation (Line(
-            points={{-61,-6},{-41,-6}},
-            color={0,0,255}));
-        connect(RB.p, VB.p) annotation (Line(
-            points={{-81,-6},{-110,-6},{-110,-30}},
-            color={0,0,255}));
-        connect(VC.p, RC.p) annotation (Line(
-            points={{-90,-30},{-90,-21},{-81,-21}},
-            color={0,0,255}));
-        connect(RC.n, TR3PhaseYy.p_C)
-                              annotation (Line(
-            points={{-61,-21},{-51,-21},{-51,-12},{-41,-12}},
-            color={0,0,255}));
-        connect(D2.n, D1.p) annotation (Line(
-            points={{29,-21},{29,9}},
-            color={0,0,255}));
-        connect(D4.n, D3.p) annotation (Line(
-            points={{49,-21},{49,9}},
-            color={0,0,255}));
-        connect(D6.n, D5.p) annotation (Line(
-            points={{69,-21},{69,9}},
-            color={0,0,255}));
-        connect(D2.p, D4.p) annotation (Line(
-            points={{29,-41},{49,-41}},
-            color={0,0,255}));
-        connect(D4.p, D6.p) annotation (Line(
-            points={{49,-41},{69,-41}},
-            color={0,0,255}));
-        connect(D1.n, D3.n) annotation (Line(
-            points={{29,29},{49,29}},
-            color={0,0,255}));
-        connect(D3.n, D5.n) annotation (Line(
-            points={{49,29},{69,29}},
-            color={0,0,255}));
-        connect(D5.n, capacitor1.p) annotation (Line(
-            points={{69,29},{89,29}},
-            color={0,0,255}));
-        connect(RL.p, capacitor1.p)   annotation (Line(
-            points={{116,3},{116,29},{89,29}},
-            color={0,0,255}));
-        connect(TR3PhaseYy.p_a, inductor.p) annotation (Line(
-            points={{-21,0},{-11,0},{-11,9}},
-            color={0,0,255}));
-        connect(TR3PhaseYy.p_b, inductor1.p) annotation (Line(
-            points={{-21,-6},{-11,-6}},
-            color={0,0,255}));
-        connect(inductor1.n, D3.p) annotation (Line(
-            points={{9,-6},{49,-6},{49,9}},
-            color={0,0,255}));
-        connect(inductor2.p, TR3PhaseYy.p_c) annotation (Line(
-            points={{-10,-22},{-11,-22},{-11,-12},{-21,-12}},
-            color={0,0,255}));
-        connect(inductor2.n, D6.n) annotation (Line(
-            points={{10,-22},{10,-11},{69,-11},{69,-21}},
-            color={0,0,255}));
-        connect(capacitor2.n, D6.p) annotation (Line(
-            points={{89,-41},{69,-41}},
-            color={0,0,255}));
-        connect(capacitor2.p, capacitor1.n) annotation (Line(
-            points={{89,-21},{89,9}},
-            color={0,0,255}));
-        connect(inductor.n, D1.p) annotation (Line(
-            points={{9,9},{9,-1},{29,-1},{29,9}},
-            color={0,0,255}));
-        connect(RL.n, capacitor2.n) annotation (Line(
-            points={{116,-17},{116,-41},{89,-41}},
-            color={0,0,255}));
-        connect(TR3PhaseYy.pN, G1.p) annotation (Line(
-            points={{-35,-16},{-35,-71},{-131,-71}},
-            color={0,0,255}));
-        connect(TR3PhaseYy.pn, G2.p) annotation (Line(
-            points={{-27,-16},{-27,-71}},
-            color={0,0,255}));
-        connect(G2.p, capacitor2.p) annotation (Line(
-            points={{-27,-71},{102,-71},{102,-21},{89,-21}},
-            color={0,0,255}));
-        connect(rExp3.y, PdissCopAvg.u)
-          annotation (Line(points={{-77.4,35},{-49,35}}, color={0,0,127}));
-        connect(rExp2.y, PdissEddyAvg.u)
-          annotation (Line(points={{-77.4,55},{-49,55}}, color={0,0,127}));
-        connect(rExp1.y, PdissStatAvg.u) annotation (Line(points={{-78.45,75},{-63.725,
-                75},{-49,75}}, color={0,0,127}));
-        annotation (experiment(StartTime=0, StopTime=0.2, Interval=1e-4, Tolerance=1e-006), Diagram(coordinateSystem(
-              preserveAspectRatio=false,
-              extent={{-150,-100},{150,100}},
-              grid={1,1})),          Documentation(info="
-<html>
-<p>
-This is a model of a three-phase transformer and rectifier unit using the <a href=\"modelica://Modelica.Magnetic.FluxTubes.Examples.Hysteresis.Components.Transformer3PhaseYyWithHysteresis\">Transformer3PhaseYyWithHysteresis</a> model. Use the following simulation settings:
-</p>
-
-<ul>
-  <li>Stop time: 0.2 s</li>
-  <li>Number of intervals: 5000</li>
-  <li>Tolerance: 1e-6</li>
-</ul>
-
-<p>
-An example simulation shows the transformer inrush currents due to an initially magnetized transformer core.
-</p>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-<caption align=\"bottom\"><b>Fig. 1:</b> Transformer inrush currents due to initial magnetization of the magnetic core; (a) transformer primary currents; (b)  transformer secondary currents; (c) flux densities of the transformer legs; (d) B(H) hysteresis loops of transformer leg one.; (e) instantaneous static hysteresis, eddy current and copper losses of the transformer; (f) approximated average static hysteresis, eddy current and copper losses of the transformer</caption>
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Examples/Hysteresis/ThreePhaseTransformerWithRectifier/plot01.png\" Hspace=\"10\" Vspace=\"10\">
-    </td>
-  </tr>
-</table>
-</html>
-"));
-      end ThreePhaseTransformerWithRectifier;
-
-      package Components "Components to be used in examples"
-
-        model Transformer1PhaseWithHysteresis
-          "Single Phase transformer with ferromagnetic core and hysteresis"
-
-          Modelica.Electrical.Analog.Interfaces.NegativePin p_N
-            "Negativ Pin of primary Winding"
-            annotation (Placement(transformation(extent={{-70,-110},{-50,-90}})));
-          Modelica.Electrical.Analog.Interfaces.PositivePin p_A
-            "Positive Pin of primary Winding"
-            annotation (Placement(transformation(extent={{-110,-10},{-90,10}})));
-          Modelica.Electrical.Analog.Interfaces.NegativePin p_n
-            "Negative Pin of secondary Winding"
-            annotation (Placement(transformation(extent={{50,-110},{70,-90}})));
-          Modelica.Electrical.Analog.Interfaces.PositivePin p_a
-            "Positive Pin of secondary Winding"
-            annotation (Placement(transformation(extent={{90,-10},{110,10}})));
-
-          Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature Temp
-            annotation (Placement(transformation(extent={{-94,-44},{-86,-36}})));
-
-          // Tab: Electrical //Group:Primary Winding
-          parameter Integer N_p=10 "Primary turns"
-            annotation(Dialog(tab="Electrical", group="Primary Winding"));
-          parameter SI.Length l_p(displayUnit="mm") = 1.2*2*(a+b)
-            "Mean primary turn length"
-            annotation(Dialog(tab="Electrical", group="Primary Winding"));
-          parameter SI.Length d_p(displayUnit="mm") = 0.5e-3
-            "Wire diameter of primary turns"
-            annotation(Dialog(tab="Electrical", group="Primary Winding"));
-          parameter SI.Resistivity rho_p = 1.678e-8
-            "Resistivity of primary winding (at 20degC)"
-            annotation(Dialog(tab="Electrical", group="Primary Winding"));
-          parameter SI.LinearTemperatureCoefficient alpha_p = 0
-            "Temperature coefficient of primary turns" annotation(Dialog(tab="Electrical", group="Primary Winding"));
-
-          // Tab: Electrical //Group:Secondary Winding
-          parameter Integer N_s=10 "Secondary turns"
-            annotation(Dialog(tab="Electrical", group="Secondary Winding"));
-          parameter SI.Length l_s(displayUnit="mm") = l_p
-            "Mean secondary turn length"
-            annotation(Dialog(tab="Electrical", group="Secondary Winding"));
-          parameter SI.Length d_s(displayUnit="mm") = d_p
-            "Wire diameter of secondary turns"
-            annotation(Dialog(tab="Electrical", group="Secondary Winding"));
-          parameter SI.Resistivity rho_s = rho_p
-            "Resistivity of secondary winding (at 20degC)"
-            annotation(Dialog(tab="Electrical", group="Secondary Winding"));
-
-          parameter SI.LinearTemperatureCoefficient alpha_s = alpha_p
-            "Temperature coefficient of secondary turns" annotation(Dialog(tab="Electrical", group="Secondary Winding"));
-
-          parameter SI.Length l1(displayUnit="mm") = 40e-3
-            "Mean Length l1 of core"                                                 annotation (Dialog(tab="Core", group="Geometry", groupImage="modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Examples/Hysteresis/Components/Transformer1PhaseWithHysteresis/Core_SinglePhase.png"));
-          parameter SI.Length l2(displayUnit="mm") = 60e-3
-            "Mean Length l2 of core"                                                annotation (Dialog(tab="Core", group="Geometry"));
-          parameter SI.Length a(displayUnit="mm") = 15e-3 "Height of core"  annotation (Dialog(tab="Core", group="Geometry"));
-          parameter SI.Length b(displayUnit="mm") = 10e-3 "Width of core"  annotation (Dialog(tab="Core", group="Geometry"));
-
-          //
-          parameter FluxTubes.Material.HysteresisEverettParameter.BaseData mat=
-              FluxTubes.Material.HysteresisEverettParameter.BaseData()
-            "Parameter set of ferromagnetic Hysteresis" annotation (Dialog(tab="Core",
-                group="Material"), choicesAllMatching=true);
-
-          output SI.Voltage v_p "Primary voltage drop";
-          output SI.Voltage v_s "secondary voltage drop";
-
-          output SI.Resistance R_p "Primary resistance of Winding";
-          output SI.Resistance R_s "Secondary resistance of Winding";
-
-          output SI.Current i_p "Primary current";
-          output SI.Current i_s "Secondary current";
-
-          output SI.MagneticFluxDensity B "Magnetic Flux Density of Core";
-          output SI.MagneticFieldStrength Hstat
-            "Ferromagnetic portion of magnetic field strength";
-          output SI.MagneticFieldStrength Heddy
-            "Eddy current portion of magnetic field strength";
-          output SI.MagneticFieldStrength H
-            "Total magnetic field strength of core";
-
-          //output SI.Resistance R_p
-
-          parameter Real MagRelStart=0 "Initial magnetization of Core (-1..1)"
-            annotation (Dialog(tab="Core", group="Initialization"));
-          parameter Boolean MagRelFixed = false "Fixed" annotation (Dialog(tab="Core", group="Initialization"),choices(checkBox=true));
-
-          parameter SI.MagneticFieldStrength HStart=0
-            "Initial magnetic field strength of Core"
-            annotation (Dialog(tab="Core", group="Initialization"));
-          parameter Boolean HFixed = false "Fixed"
-            annotation (Dialog(tab="Core", group="Initialization"),choices(checkBox=true));
-          parameter SI.ElectricCurrent IpStart=0
-            "Initial primary current through winding"                                     annotation (Dialog(tab="Core", group="Initialization"));
-          parameter Boolean IpFixed = false "Fixed" annotation (Dialog(tab="Core", group="Initialization"),choices(checkBox=true));
-
-          output SI.Power LossPowerWinding "Winding lossses";
-          output SI.Power LossPowerStat "Ferromagnetic hysteresis losses";
-          output SI.Power LossPowerEddy "Eddy current losses";
-
-          extends Interfaces.ConditionalHeatPort;
-          parameter Boolean EddyCurrents = false "Enable eddy currents"
-            annotation(Dialog(tab="Losses and Heat", group="Eddy Currents"), choices(checkBox=true));
-          parameter SI.Conductivity sigma = mat.sigma
-            "Conductivity of core material"                                           annotation (Dialog(tab="Losses and Heat", group="Eddy Currents", enable=EddyCurrents));
-          parameter SI.Length t(displayUnit="mm") = 0.5e-3
-            "Tickness of lamination"                                                annotation (Dialog(tab="Losses and Heat", group="Eddy Currents", enable=EddyCurrents));
-          parameter SI.Length L_lp=10e-3 "Length of leakage of primary Winding"
-                                                                                                  annotation (Dialog(tab="Leakage"));
-          parameter SI.Area A_lp=10e-6
-            "Cross section of leakage of primary Winding"                                               annotation (Dialog(tab="Leakage"));
-          parameter Real mu_relp=1
-            "Constant relative permeability of primary leakage (>0 required)"                            annotation (Dialog(tab="Leakage"));
-          parameter SI.Length L_ls=10e-3
-            "Length of leakage of secondary Winding"                               annotation (Dialog(tab="Leakage"));
-          parameter SI.Area A_ls=10e-6
-            "Cross section of leakage of secondary Winding"                            annotation (Dialog(tab="Leakage"));
-          parameter Real mu_rels=1
-            "Constant relative permeability of secondary leakage (>0 required)"
-                                                                                                           annotation (Dialog(tab="Leakage"));
-
-        protected
-          Basic.Ground ground
-            annotation (Placement(transformation(extent={{-10,-46},{10,-26}})));
-          Basic.ElectroMagneticConverterWithLeakageInductance Wp(N=N_p,
-            L=L_lp,
-            A=A_lp,
-            mu_rel=mu_relp,
-            i(start=IpStart, fixed=IpFixed))
-            annotation (Placement(transformation(extent={{-60,-16},{-40,4}})));
-          Basic.ElectroMagneticConverterWithLeakageInductance Ws(N=N_s,
-            L=L_ls,
-            mu_rel=mu_rels,
-            A=A_ls)
-            annotation (Placement(transformation(extent={{60,-16},{40,4}})));
-
-          Modelica.Electrical.Analog.Basic.Resistor Rp(
-            R=rho_p*N_p*l_p/(pi/4*d_p^2),
-            useHeatPort=true,
-            alpha=alpha_p,
-            T_ref=293.15)
-            annotation (Placement(transformation(extent={{-90,-10},{-70,10}})));
-          Modelica.Electrical.Analog.Basic.Resistor Rs(
-            R=rho_s*N_s*l_s/(pi/4*d_s^2),
-            useHeatPort=true,
-            alpha=alpha_s,
-            T_ref=293.15)
-            annotation (Placement(transformation(extent={{68,-10},{88,10}})));
-
-        public
-          Shapes.HysteresisAndMagnets.GenericHystTellinenEverett Core(
-            mat=mat,
-            l=2*(l1 + l2),
-            A=a*b,
-            includeEddyCurrents=EddyCurrents,
-            sigma=sigma,
-            d=t,
-            H(start=HStart, fixed=HFixed),
-            MagRel(start=MagRelStart, fixed=MagRelFixed))
-            annotation (Placement(transformation(extent={{-10,0},{10,20}})));
-        equation
-          v_p = p_A.v-p_N.v;
-          i_p = Rp.i;
-          R_p = Rp.R_actual;
-
-          v_s = p_a.v-p_n.v;
-          i_s = Rs.i;
-          R_s = Rs.R_actual;
-
-          B = Core.B;
-          Hstat = Core.Hstat;
-          Heddy = Core.Heddy;
-          H = Core.H;
-          //der(MagRel)=0;
-
-          Temp.T = if useHeatPort then T_heatPort else T;
-
-          LossPowerWinding = Rp.LossPower + Rs.LossPower; //AvgWinding.y;
-          LossPowerStat = Core.LossPowerStat;
-          LossPowerEddy = Core.LossPowerEddy;
-          LossPower = LossPowerWinding + LossPowerEddy + LossPowerStat;
-
-          connect(Wp.port_n, ground.port)        annotation (Line(
-              points={{-40,-12},{-40,-26},{0,-26}},
-              color={255,127,0}));
-          connect(Rp.n, Wp.p)         annotation (Line(
-              points={{-70,0},{-60,0}},
-              color={0,0,255}));
-          connect(Rp.p, p_A)  annotation (Line(
-              points={{-90,0},{-100,0}},
-              color={0,0,255}));
-          connect(Rs.n, p_a)  annotation (Line(
-              points={{88,0},{100,0}},
-              color={0,0,255}));
-          connect(Wp.n, p_N)  annotation (Line(
-              points={{-60,-12},{-60,-100}},
-              color={0,0,255}));
-          connect(Temp.port, Rp.heatPort)  annotation (Line(
-              points={{-86,-40},{-80,-40},{-80,-10}},
-              color={191,0,0}));
-          connect(Rs.heatPort, Temp.port)  annotation (Line(
-              points={{78,-10},{78,-40},{-86,-40}},
-              color={191,0,0}));
-          connect(Ws.port_n, ground.port) annotation (Line(
-              points={{40,-12},{40,-26},{0,-26}},
-              color={255,127,0}));
-          connect(Ws.n, Rs.p) annotation (Line(
-              points={{60,-12},{68,-12},{68,0}},
-              color={0,0,255}));
-          connect(p_n, Ws.p) annotation (Line(
-              points={{60,-100},{52,-100},{52,4},{60,4},{60,0}},
-              color={0,0,255}));
-          connect(Core.port_p, Wp.port_p)
-            annotation (Line(points={{-10,10},{-40,10},{-40,0}}, color={255,127,0}));
-          connect(Core.port_n, Ws.port_p)
-            annotation (Line(points={{10,10},{40,10},{40,0}}, color={255,127,0}));
-          annotation (defaultComponentName="tr",                                                                    Icon(graphics={
-                Polygon(
-                  points={{50,60},{30,40},{30,-40},{50,-60},{50,60}},
-                  lineColor={0,0,0},
-                  fillColor={255,128,0},
-                  fillPattern=FillPattern.VerticalCylinder),
-                Polygon(
-                  points={{-50,60},{-30,40},{-30,-40},{-50,-60},{-50,60}},
-                  lineColor={0,0,0},
-                  fillColor={255,128,0},
-                  fillPattern=FillPattern.VerticalCylinder),
-                Rectangle(
-                  extent={{-68,36},{-12,-36}},
-                  lineColor={0,128,255},
-                  fillPattern=FillPattern.VerticalCylinder,
-                  fillColor={0,128,255}),
-                Rectangle(
-                  extent={{20,20},{60,-20}},
-                  lineColor={128,0,255},
-                  fillPattern=FillPattern.VerticalCylinder,
-                  fillColor={128,0,255}),
-                Text(
-                  extent={{0,100},{0,60}},
-                  lineColor={0,0,255},
-                  textString="%name"),
-                Polygon(
-                  points={{-10,60},{10,40},{10,-20},{-10,-40},{-10,60}},
-                  lineColor={0,0,0},
-                  fillColor={255,128,0},
-                  fillPattern=FillPattern.VerticalCylinder,
-                  origin={10,-50},
-                  rotation=90),
-                Polygon(
-                  points={{-10,20},{-30,0},{-30,-60},{-10,-80},{-10,-44.0625},{-10,20}},
-                  lineColor={0,0,0},
-                  fillColor={255,128,0},
-                  fillPattern=FillPattern.VerticalCylinder,
-                  origin={-30,70},
-                  rotation=90)}),
-            Documentation(info="<html>
-<p>
-Simple model of a single phase transformer with a primary and a secondary winding and a magnetic core. The core is modeled with <a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets.GenericHystTellinenEverett\">GenericHystTellinenEverett</a> flux tube elements. Thus, this element considers static and dynamic hysteresis.
-</p>
-
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <caption align=\"bottom\"><b>Fig. 1:</b> Sketch of the modelled transformer with magnetic core, primary and secondary winding</caption>
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Examples/Hysteresis/Components/Transformer1PhaseWithHysteresis/Core_SinglePhase.png\">
-   </td>
-  </tr>
-</table>
-
-</html>"));
-        end Transformer1PhaseWithHysteresis;
-
-        model Transformer3PhaseYyWithHysteresis
-          "Three phase transfomer in Yy configuration"
-
-          Modelica.Thermal.HeatTransfer.Sources.PrescribedTemperature Temp
-            annotation (Placement(transformation(extent={{-166,14},{-154,26}})));
-
-          // Tab: Electrical //Group:Primary Winding
-          parameter Integer N_p=10 "Primary turns"
-            annotation(Dialog(tab="Electrical", group="Primary Winding"));
-          parameter SI.Length l_p(displayUnit="mm") = 1.2*2*(a+b)
-            "Mean primary turn length"
-            annotation(Dialog(tab="Electrical", group="Primary Winding"));
-          parameter SI.Length d_p(displayUnit="mm") = 0.5e-3
-            "Wire diameter of primary turns"
-            annotation(Dialog(tab="Electrical", group="Primary Winding"));
-          parameter SI.Resistivity rho_p = 1.678e-8
-            "Resistivity of primary winding (at 20degC)"
-            annotation(Dialog(tab="Electrical", group="Primary Winding"));
-          parameter SI.LinearTemperatureCoefficient alpha_p = 0
-            "Temperature coefficient of primary turns" annotation(Dialog(tab="Electrical", group="Primary Winding"));
-
-          // Tab: Electrical //Group:Secondary Winding
-          parameter Integer N_s=10 "Secondary turns"
-             annotation(Dialog(tab="Electrical", group="Secondary Winding"));
-          parameter SI.Length l_s(displayUnit="mm") = l_p
-            "Mean secondary turn length"
-            annotation(Dialog(tab="Electrical", group="Secondary Winding"));
-          parameter SI.Length d_s(displayUnit="mm") = d_p
-            "Wire diameter of secondary turns"
-            annotation(Dialog(tab="Electrical", group="Secondary Winding"));
-          parameter SI.Resistivity rho_s = rho_p
-            "Resistivity of secondary winding (at 20degC)"
-            annotation(Dialog(tab="Electrical", group="Secondary Winding"));
-
-          parameter SI.LinearTemperatureCoefficient alpha_s = alpha_p
-            "Temperature coefficient of secondary turns" annotation(Dialog(tab="Electrical", group="Secondary Winding"));
-
-          parameter SI.Length l1(displayUnit="mm") = 40e-3
-            "Mean length l1 of core"                                                 annotation (Dialog(tab="Core", group="Geometry", groupImage="modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Examples/Hysteresis/Components/Transformer3PhaseYyWithHysteresis/Core_ThreePhase1.png"));
-          parameter SI.Length l2(displayUnit="mm") = 60e-3
-            "Mean length l2 of core"                                                annotation (Dialog(tab="Core", group="Geometry"));
-          parameter SI.Length a(displayUnit="mm") = 15e-3 "Height of core"  annotation (Dialog(tab="Core", group="Geometry"));
-          parameter SI.Length b(displayUnit="mm") = 10e-3 "Width of core"  annotation (Dialog(tab="Core", group="Geometry"));
-
-          parameter FluxTubes.Material.HysteresisEverettParameter.BaseData mat=
-              FluxTubes.Material.HysteresisEverettParameter.BaseData()
-            "Core Material" annotation (Dialog(tab="Core", group="Material"),
-              choicesAllMatching=true);
-
-          output SI.Voltage v_p[3] "Voltage drop of primary winding 1-3";
-          output SI.Voltage v_s[3] "Voltage drop of secondary winding 1-3";
-
-          output SI.Resistance R_p[3] "Resistance of primary winding 1-3";
-          output SI.Resistance R_s[3] "Resistance of secondary winding 1-3";
-
-          output SI.Current i_p[3] "Current in primary winding 1-3";
-          output SI.Current i_s[3] "Current in secondary winding 1-3";
-
-          output SI.MagneticFluxDensity B[3]
-            "Magnetic Flux Density in core portions 1-3";
-          output SI.MagneticFlux Phi[3]
-            "Magnetic Flux through core portions 1-3";
-
-          output SI.MagneticFieldStrength Hstat[3]
-            "Ferromagnetic portion of magnetic field strength";
-          output SI.MagneticFieldStrength Heddy[3]
-            "Eddy current portion of magnetic field strength";
-          output SI.MagneticFieldStrength H[3]
-            "Total magnetic field strength of core";
-
-          //output SI.Resistance R_p
-
-          parameter Real MagRelStart[3]={0,0,0}
-            "Initial magnetization of Core (-1..1)"      annotation (Dialog(tab="Core", group="Initialization"));
-          parameter Boolean MagRelFixed[3] = {false,false,false} "Fixed" annotation (Dialog(tab="Core", group="Initialization"));
-
-          parameter SI.MagneticFieldStrength HStart[3]={0,0,0}
-            "Initial magnetic field strength of Core"  annotation (Dialog(tab="Core", group="Initialization"));
-          parameter Boolean HFixed[3] = {false,false,false} "Fixed"  annotation (Dialog(tab="Core", group="Initialization"),choices(checkBox=true));
-
-          parameter SI.ElectricCurrent IprimStart[3]={0,0,0}
-            "Initial current of primary Windings"  annotation (Dialog(tab="Core", group="Initialization"));
-          parameter Boolean IprimFixed[3] = {false,false,false} "Fixed"  annotation (Dialog(tab="Core", group="Initialization"),choices(checkBox=true));
-
-          parameter SI.ElectricCurrent IsecStart[3]={0,0,0}
-            "Initial current of secondary Windings"   annotation (Dialog(tab="Core", group="Initialization"));
-          parameter Boolean IsecFixed[3] = {false,false,false} "Fixed"  annotation (Dialog(tab="Core", group="Initialization"),choices(checkBox=true));
-
-          output SI.Power LossPowerWinding "Winding lossses";
-          output SI.Power LossPowerStat "Ferromagnetic hysteresis losses";
-          output SI.Power LossPowerEddy "Eddy current losses";
-
-          extends Interfaces.ConditionalHeatPort;
-          parameter Boolean EddyCurrents = false "Enable eddy currents"  annotation(Dialog(tab="Losses and Heat", group="Eddy Currents"), choices(checkBox=true));
-          parameter SI.Conductivity sigma = mat.sigma
-            "Conductivity of core material"                                           annotation (Dialog(tab="Losses and Heat", group="Eddy Currents", enable=EddyCurrents));
-          parameter SI.Length t(displayUnit="mm") = 0.5e-3
-            "Tickness of lamination"                                                annotation (Dialog(tab="Losses and Heat", group="Eddy Currents", enable=EddyCurrents));
-
-          parameter SI.Length L_lp=10e-3 "Length of leakage of primary Winding"
-                                                                                 annotation (Dialog(tab="Leakage"));
-          parameter SI.Area A_lp=10e-6
-            "Cross section of leakage of primary Winding"                            annotation (Dialog(tab="Leakage"));
-          parameter Real mu_relp=1
-            "Constant relative permeability of primary leakage (>0 required)" annotation (Dialog(tab="Leakage"));
-          parameter SI.Length L_ls=10e-3
-            "Cross section of leakage of secondary Winding" annotation (Dialog(tab="Leakage"));
-          parameter SI.Area A_ls=10e-6 "Length of leakage of secondary Winding"
-                                                                                annotation (Dialog(tab="Leakage"));
-          parameter Real mu_rels=1
-            "Constant relative permeability of secondary leakage (>0 required)"
-                                                                                annotation (Dialog(tab="Leakage"));
-
-        protected
-          Shapes.HysteresisAndMagnets.GenericHystTellinenEverett CoreA(
-            mat=mat,
-            A=a*b,
-            sigma=sigma,
-            d=t,
-            useHeatPort=false,
-            includeEddyCurrents=EddyCurrents,
-            l=l1 + 2*l2,
-            H(start=HStart[1], fixed=HFixed[1]),
-            MagRel(start=MagRelStart[1], fixed=MagRelFixed[1])) annotation (
-              Placement(transformation(
-                extent={{10,-10},{-10,10}},
-                origin={-40,114})));
-          Shapes.HysteresisAndMagnets.GenericHystTellinenEverett CoreB(
-            mat=mat,
-            A=a*b,
-            sigma=sigma,
-            d=t,
-            useHeatPort=false,
-            includeEddyCurrents=EddyCurrents,
-            l=l2,
-            H(start=HStart[2], fixed=HFixed[2]),
-            MagRel(start=MagRelStart[2], fixed=MagRelFixed[2])) annotation (
-              Placement(transformation(
-                extent={{-10,-10},{10,10}},
-                rotation=270,
-                origin={10,92})));
-
-          Shapes.HysteresisAndMagnets.GenericHystTellinenEverett CoreC(
-            mat=mat,
-            A=a*b,
-            includeEddyCurrents=EddyCurrents,
-            sigma=sigma,
-            d=t,
-            l=l1 + 2*l2,
-            H(start=HStart[3], fixed=HFixed[3]),
-            MagRel(start=MagRelStart[3], fixed=MagRelFixed[3]))
-            annotation (Placement(transformation(extent={{70,104},{90,124}})));
-
-          Basic.Ground ground
-            annotation (Placement(transformation(extent={{0,-80},{20,-60}})));
-
-          Basic.ElectroMagneticConverterWithLeakageInductance WA(N=N_p,
-            L=L_lp,
-            A=A_lp,
-            mu_rel=mu_relp,
-            i(start=IprimStart[1], fixed=IprimFixed[1]))
-            annotation (Placement(transformation(extent={{-110,40},{-90,60}})));
-
-          Basic.ElectroMagneticConverterWithLeakageInductance WB(N=N_p,
-            L=L_lp,
-            A=A_lp,
-            mu_rel=mu_relp,
-            i(start=IprimStart[2], fixed=IprimFixed[2]))
-            annotation (Placement(transformation(extent={{-10,40},{10,60}})));
-
-          Basic.ElectroMagneticConverterWithLeakageInductance WC(N=N_p,
-            L=L_lp,
-            A=A_lp,
-            mu_rel=mu_relp,
-            i(start=IprimStart[3], fixed=IprimFixed[3]))
-            annotation (Placement(transformation(extent={{110,40},{130,60}})));
-
-           Basic.ElectroMagneticConverterWithLeakageInductance Wa(N=N_s,
-            L=L_ls,
-            A=A_ls,
-            mu_rel=mu_rels,
-            i(start=IsecStart[1], fixed=IsecFixed[1]))
-            annotation (Placement(transformation(extent={{-110,-20},{-90,0}})));
-
-           Basic.ElectroMagneticConverterWithLeakageInductance Wb(N=N_s,
-            L=L_ls,
-            A=A_ls,
-            mu_rel=mu_rels,
-            i(start=IsecStart[1], fixed=IsecFixed[1]))
-            annotation (Placement(transformation(extent={{-10,-20},{10,0}})));
-
-          Basic.ElectroMagneticConverterWithLeakageInductance Wc(N=N_s,
-            L=L_ls,
-            A=A_ls,
-            mu_rel=mu_rels,
-            i(start=IsecStart[1], fixed=IsecFixed[1]))
-            annotation (Placement(transformation(extent={{110,-20},{130,0}})));
-
-          Modelica.Electrical.Analog.Basic.Resistor RA(
-            R=rho_p*N_p*l_p/(pi/4*d_p^2),
-            useHeatPort=true,
-            alpha=alpha_p,
-            T_ref=293.15)
-            annotation (Placement(transformation(extent={{-140,50},{-120,70}})));
-          Modelica.Electrical.Analog.Basic.Resistor Ra(
-            R=rho_s*N_s*l_s/(pi/4*d_s^2),
-            useHeatPort=true,
-            alpha=alpha_s,
-            T_ref=293.15)
-            annotation (Placement(transformation(extent={{-120,-10},{-140,10}})));
-
-          Modelica.Electrical.Analog.Basic.Resistor RB(
-            R=rho_p*N_p*l_p/(pi/4*d_p^2),
-            useHeatPort=true,
-            alpha=alpha_p,
-            T_ref=293.15)
-            annotation (Placement(transformation(extent={{-40,50},{-20,70}})));
-          Modelica.Electrical.Analog.Basic.Resistor Rb(
-            R=rho_s*N_s*l_s/(pi/4*d_s^2),
-            useHeatPort=true,
-            alpha=alpha_s,
-            T_ref=293.15)
-            annotation (Placement(transformation(extent={{-20,-10},{-40,10}})));
-
-          Modelica.Electrical.Analog.Basic.Resistor Rc(
-            R=rho_s*N_s*l_s/(pi/4*d_s^2),
-            useHeatPort=true,
-            alpha=alpha_s,
-            T_ref=293.15)
-            annotation (Placement(transformation(extent={{100,-10},{80,10}})));
-
-          Modelica.Electrical.Analog.Basic.Resistor RC(
-            R=rho_p*N_p*l_p/(pi/4*d_p^2),
-            useHeatPort=true,
-            alpha=alpha_p,
-            T_ref=293.15)
-            annotation (Placement(transformation(extent={{80,50},{100,70}})));
-          Shapes.FixedShape.Cuboid Leakage(
-            nonLinearPermeability=false,
-            mu_rConst=1,
-            l=l2,
-            a=a,
-            b=b/1000)
-            annotation (Placement(transformation(
-                extent={{-10,-10},{10,10}},
-                rotation=270,
-                origin={32,90})));
-
-        public
-          Modelica.Electrical.Analog.Interfaces.PositivePin p_A
-            "Positive Pin of primary Winding"
-            annotation (Placement(transformation(extent={{-170,50},{-150,70}}),
-                iconTransformation(extent={{-110,50},{-90,70}})));
-          Modelica.Electrical.Analog.Interfaces.PositivePin p_B
-            "Positive Pin of primary Winding"
-            annotation (Placement(transformation(extent={{-70,50},{-50,70}}),
-                iconTransformation(extent={{-110,-10},{-90,10}})));
-          Modelica.Electrical.Analog.Interfaces.PositivePin p_C
-            "Positive Pin of primary Winding"
-            annotation (Placement(transformation(extent={{50,50},{70,70}}),
-                iconTransformation(extent={{-110,-70},{-90,-50}})));
-          Modelica.Electrical.Analog.Interfaces.PositivePin p_a
-            "Positive Pin of primary Winding"
-            annotation (Placement(transformation(extent={{-170,-10},{-150,10}}),
-                iconTransformation(extent={{90,50},{110,70}})));
-          Modelica.Electrical.Analog.Interfaces.PositivePin p_b
-            "Positive Pin of primary Winding"
-            annotation (Placement(transformation(extent={{-70,-10},{-50,10}}),
-                iconTransformation(extent={{90,-10},{110,10}})));
-          Modelica.Electrical.Analog.Interfaces.PositivePin p_c
-            "Positive Pin of primary Winding"
-            annotation (Placement(transformation(extent={{50,-10},{70,10}}),
-                iconTransformation(extent={{90,-70},{110,-50}})));
-          Modelica.Electrical.Analog.Interfaces.NegativePin pn
-            "Star point of secondary windings"
-            annotation (Placement(transformation(extent={{-120,-44},{-100,-24}}),
-                iconTransformation(extent={{30,-110},{50,-90}})));
-          Modelica.Electrical.Analog.Interfaces.NegativePin pN
-            "Star point of primary windings"
-            annotation (Placement(transformation(extent={{-120,20},{-100,40}}),
-                iconTransformation(extent={{-50,-110},{-30,-90}})));
-
-        equation
-          v_p[1] = RA.p.v-WA.n.v;
-          v_p[2] = RB.p.v-WB.n.v;
-          v_p[3] = RC.p.v-WC.n.v;
-          i_p[1] = RA.i;
-          i_p[2] = RB.i;
-          i_p[3] = RC.i;
-          R_p[1] = RA.R_actual;
-          R_p[2] = RB.R_actual;
-          R_p[3] = RC.R_actual;
-
-          v_s[1] = Ra.n.v-Wa.n.v;
-          v_s[2] = Ra.n.v-Wa.n.v;
-          v_s[3] = Ra.n.v-Wa.n.v;
-          i_s[1] = Ra.i;
-          i_s[2] = Rb.i;
-          i_s[3] = Rc.i;
-          R_s[1] = Ra.R_actual;
-          R_s[2] = Rb.R_actual;
-          R_s[3] = Rc.R_actual;
-
-          B[1] = CoreA.B;
-          B[2] = CoreB.B;
-          B[3] = CoreC.B;
-
-          Phi[1] = CoreA.Phi;
-          Phi[2] = CoreB.Phi;
-          Phi[3] = CoreC.Phi;
-
-          Hstat[1] = CoreA.Hstat;
-          Hstat[2] = CoreB.Hstat;
-          Hstat[3] = CoreC.Hstat;
-          Heddy[1] = CoreA.Heddy;
-          Heddy[2] = CoreB.Heddy;
-          Heddy[3] = CoreC.Heddy;
-          H[1] = CoreA.H;
-          H[2] = CoreB.H;
-          H[3] = CoreC.H;
-
-          Temp.T = if useHeatPort then T_heatPort else T;
-
-          LossPowerWinding = RA.LossPower + RB.LossPower + RC.LossPower + Ra.LossPower + Rb.LossPower + Rc.LossPower;
-          LossPowerStat = CoreA.LossPowerStat + CoreB.LossPowerStat + CoreC.LossPowerStat;
-          LossPowerEddy = CoreA.LossPowerEddy + CoreB.LossPowerEddy + CoreC.LossPowerEddy;
-          LossPower = LossPowerWinding + LossPowerEddy + LossPowerStat;
-
-          connect(WA.port_n, Wa.port_p) annotation (Line(
-              points={{-90,44},{-90,-4}},
-              color={255,127,0}));
-          connect(WA.p, RA.n) annotation (Line(
-              points={{-110,56},{-116,56},{-116,60},{-120,60}},
-              color={0,0,255}));
-          connect(RA.p, p_A) annotation (Line(
-              points={{-140,60},{-160,60}},
-              color={0,0,255}));
-          connect(WB.p, RB.n) annotation (Line(
-              points={{-10,56},{-16,56},{-16,60},{-20,60}},
-              color={0,0,255}));
-          connect(WC.p, RC.n) annotation (Line(
-              points={{110,56},{104,56},{104,60},{100,60}},
-              color={0,0,255}));
-          connect(WB.port_p, CoreB.port_n) annotation (Line(
-              points={{10,56},{10,82}},
-              color={255,127,0}));
-          connect(WB.port_n, Wb.port_p) annotation (Line(
-              points={{10,44},{10,-4}},
-              color={255,127,0}));
-          connect(Wa.port_n, ground.port) annotation (Line(
-              points={{-90,-16},{-90,-60},{10,-60}},
-              color={255,127,0}));
-          connect(ground.port, Wb.port_n) annotation (Line(
-              points={{10,-60},{10,-16}},
-              color={255,127,0}));
-          connect(Wc.port_n, ground.port) annotation (Line(
-              points={{130,-16},{130,-60},{10,-60}},
-              color={255,127,0}));
-          connect(Wc.port_p, WC.port_n) annotation (Line(
-              points={{130,-4},{130,44}},
-              color={255,127,0}));
-          connect(WC.port_p, CoreC.port_n) annotation (Line(
-              points={{130,56},{130,114},{90,114}},
-              color={255,127,0}));
-          connect(p_B, RB.p) annotation (Line(
-              points={{-60,60},{-40,60}},
-              color={0,0,255}));
-          connect(p_C, RC.p) annotation (Line(
-              points={{60,60},{80,60}},
-              color={0,0,255}));
-          connect(Temp.port, RA.heatPort) annotation (Line(
-              points={{-154,20},{-130,20},{-130,50}},
-              color={191,0,0}));
-          connect(RB.heatPort, Temp.port) annotation (Line(
-              points={{-30,50},{-30,20},{-154,20}},
-              color={191,0,0}));
-          connect(RC.heatPort, Temp.port) annotation (Line(
-              points={{90,50},{90,20},{-154,20}},
-              color={191,0,0}));
-          connect(Rc.heatPort, Temp.port) annotation (Line(
-              points={{90,-10},{46,-10},{46,20},{-154,20}},
-              color={191,0,0}));
-          connect(Rb.heatPort, Temp.port) annotation (Line(
-              points={{-30,-10},{-80,-10},{-80,20},{-154,20}},
-              color={191,0,0}));
-          connect(Ra.heatPort, Temp.port) annotation (Line(
-              points={{-130,-10},{-146,-10},{-146,20},{-154,20}},
-              color={191,0,0}));
-          connect(Ra.p, Wa.p) annotation (Line(
-              points={{-120,0},{-110,0},{-110,-4}},
-              color={0,0,255}));
-          connect(Rb.p, Wb.p) annotation (Line(
-              points={{-20,0},{-10,0},{-10,-4}},
-              color={0,0,255}));
-          connect(Rc.p, Wc.p) annotation (Line(
-              points={{100,0},{110,0},{110,-4}},
-              color={0,0,255}));
-          connect(Ra.n, p_a) annotation (Line(
-              points={{-140,0},{-160,0}},
-              color={0,0,255}));
-          connect(Rb.n, p_b) annotation (Line(
-              points={{-40,0},{-60,0}},
-              color={0,0,255}));
-          connect(Rc.n, p_c) annotation (Line(
-              points={{80,0},{60,0}},
-              color={0,0,255}));
-          connect(Leakage.port_n, ground.port) annotation (Line(
-              points={{32,80},{32,-60},{10,-60}},
-              color={255,127,0}));
-          connect(WA.port_p, CoreA.port_n) annotation (Line(
-              points={{-90,56},{-90,114},{-50,114}},
-              color={255,127,0}));
-          connect(CoreA.port_p, CoreB.port_p) annotation (Line(
-              points={{-30,114},{10,114},{10,102}},
-              color={255,127,0}));
-          connect(CoreC.port_p, CoreA.port_p) annotation (Line(
-              points={{70,114},{-30,114}},
-              color={255,127,0}));
-          connect(Leakage.port_p, CoreC.port_p) annotation (Line(
-              points={{32,100},{32,114},{70,114}},
-              color={255,127,0}));
-
-          connect(WA.n, pN) annotation (Line(
-              points={{-110,44},{-110,30}},
-              color={0,0,255}));
-          connect(pN, WC.n) annotation (Line(
-              points={{-110,30},{110,30},{110,44}},
-              color={0,0,255}));
-          connect(pN, WB.n) annotation (Line(
-              points={{-110,30},{-10,30},{-10,44}},
-              color={0,0,255}));
-          connect(Wa.n, pn) annotation (Line(
-              points={{-110,-16},{-110,-34}},
-              color={0,0,255}));
-          connect(pn, Wb.n) annotation (Line(
-              points={{-110,-34},{-10,-34},{-10,-16}},
-              color={0,0,255}));
-          connect(Wc.n, pn) annotation (Line(
-              points={{110,-16},{110,-34},{-110,-34}},
-              color={0,0,255}));
-
-          annotation (defaultComponentName="T3PhaseYyHyst", Diagram(coordinateSystem(preserveAspectRatio=true, extent={{-200,
-                    -200},{200,200}}),
-                                 graphics), Icon(graphics={
-                Polygon(
-                  points={{70,60},{50,40},{50,-40},{70,-60},{70,60}},
-                  lineColor={0,0,0},
-                  fillColor={255,128,0},
-                  fillPattern=FillPattern.VerticalCylinder),
-                Polygon(
-                  points={{-70,60},{-50,40},{-50,-40},{-70,-60},{-70,60}},
-                  lineColor={0,0,0},
-                  fillColor={255,128,0},
-                  fillPattern=FillPattern.VerticalCylinder),
-                Rectangle(
-                  extent={{-74,36},{-46,-36}},
-                  lineColor={128,0,255},
-                  fillPattern=FillPattern.VerticalCylinder,
-                  fillColor={128,0,255}),
-                Text(
-                  extent={{0,140},{0,100}},
-                  lineColor={0,0,255},
-                  textString="%name"),
-                Polygon(
-                  points={{-20,10},{0,-10},{1.22465e-016,-50},{-10,-60},{-20,-60},{-20,10}},
-                  lineColor={0,0,0},
-                  fillColor={255,128,0},
-                  fillPattern=FillPattern.VerticalCylinder,
-                  origin={-60,-40},
-                  rotation=90),
-                Polygon(
-                  points={{-10,40},{0,50},{10,40},{10,-40},{0,-50},{-10,-40},{-10,40}},
-                  lineColor={0,0,0},
-                  fillColor={255,128,0},
-                  fillPattern=FillPattern.VerticalCylinder),
-                Polygon(
-                  points={{-20,-10},{0,10},{0,50},{-10,60},{-20,60},{-20,-10}},
-                  lineColor={0,0,0},
-                  fillColor={255,128,0},
-                  fillPattern=FillPattern.VerticalCylinder,
-                  origin={60,-40},
-                  rotation=90),
-                Polygon(
-                  points={{20,10},{0,-10},{0,-50},{10,-60},{20,-60},{20,10}},
-                  lineColor={0,0,0},
-                  fillColor={255,128,0},
-                  fillPattern=FillPattern.VerticalCylinder,
-                  origin={-60,40},
-                  rotation=90),
-                Polygon(
-                  points={{20,-10},{0,10},{0,50},{10,60},{20,60},{20,-10}},
-                  lineColor={0,0,0},
-                  fillColor={255,128,0},
-                  fillPattern=FillPattern.VerticalCylinder,
-                  origin={60,40},
-                  rotation=90),
-                Rectangle(
-                  extent={{-80,26},{-40,-26}},
-                  lineColor={0,128,255},
-                  fillPattern=FillPattern.VerticalCylinder,
-                  fillColor={0,128,255}),
-                Rectangle(
-                  extent={{-14,36},{14,-36}},
-                  lineColor={128,0,255},
-                  fillPattern=FillPattern.VerticalCylinder,
-                  fillColor={128,0,255}),
-                Rectangle(
-                  extent={{-20,26},{20,-26}},
-                  lineColor={0,128,255},
-                  fillPattern=FillPattern.VerticalCylinder,
-                  fillColor={0,128,255}),
-                Rectangle(
-                  extent={{46,36},{74,-36}},
-                  lineColor={128,0,255},
-                  fillPattern=FillPattern.VerticalCylinder,
-                  fillColor={128,0,255}),
-                Rectangle(
-                  extent={{40,26},{80,-26}},
-                  lineColor={0,128,255},
-                  fillPattern=FillPattern.VerticalCylinder,
-                  fillColor={0,128,255})}),
-            Documentation(info="<html>
-<p>
-Simple model of a three phase transformer with primary and a secondary windings and a magnetic E-I shaped core. The core is modeled with <a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets.GenericHystTellinenEverett\">GenericHystTellinenEverett</a> flux tube elements. Thus, this model considers static and dynamic hysteresis as well as initial flux.
-</p>
-
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <caption align=\"bottom\"><b>Fig. 1:</b> Sketch of the modelled transformer with magnetic core, primary and secondary winding</caption>
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Examples/Hysteresis/Components/Transformer3PhaseYyWithHysteresis/Core_ThreePhase1.png\">
-   </td>
-  </tr>
-</table>
-</html>
-"));
-        end Transformer3PhaseYyWithHysteresis;
-      end Components;
-
-    end Hysteresis;
-
     package Utilities "Utilities to be used in examples"
       extends Modelica.Icons.UtilitiesPackage;
 
@@ -5708,581 +3842,6 @@
 </html>"));
     end Leakage;
 
-    package HysteresisAndMagnets
-      "Flux tube elements for modelling ferromagnetic hysteresis, eddy currents and permanent magnets"
-      extends Modelica.Icons.VariantsPackage;
-      model GenericHystTellinenSoft
-        "Generic flux tube with soft magnetic hysteresis based on the Tellinen model and simple tanh()-functions"
-        // Dialog Group Hysteresis
-        parameter SI.MagneticFluxDensity Js = 1.8 "Saturation polarization" annotation (Dialog(group="Hysteresis", groupImage="modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Shapes/HysteresisAndMagnets/GenericHystTellinenSoft/SoftMagneticHysteresis2.png"));
-        parameter SI.MagneticFluxDensity Br=0.9 "Remanence" annotation (Dialog(group="Hysteresis"));
-        parameter SI.MagneticFieldStrength Hc=120 "Coercitivity" annotation (Dialog(group="Hysteresis"));
-        parameter Real K=1 "mu_0 multiplier" annotation (Dialog(group="Hysteresis"));
-
-        extends Interfaces.PartialGenericHysteresisTellinen(mu0=K*mu_0);
-
-      protected
-        parameter SI.MagneticFluxDensity eps=Js/1000;
-        //parameter Real mu0(final unit="N/A2")=K*mu_0;
-        parameter Real H0=0.5*Modelica.Math.log((1 + Br/Js)/(1 - Br/Js));
-        parameter Real M=H0/Hc;
-        constant SI.MagneticFieldStrength unitH = 1;
-
-      equation
-        hystR = Js*tanh((M*Hstat - H0)/unitH) + mu0*Hstat - eps/2;
-        hystF = Js*tanh((M*Hstat + H0)/unitH) + mu0*Hstat + eps/2;
-
-        annotation (defaultComponentName="Core", Documentation(info="<html>
-Flux tube element for modeling soft magnetic materials with ferromagnetic and dynamic hysteresis (eddy currents). The ferromagnetic hysteresis behavior is defined by the <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis.StaticHysteresis.Tellinen\">Tellinen hysteresis model</a>. The shape of the limiting hysteresis loop (see Fig. 1) is described by simple hyperbolic tangent functions with 4 parameters. Therefore, the hysteresis shape variety is limited but the parameterization of the model is very simple and the model is relatively fast and robust. The rising (hyst<sub>R</sub>) and falling (hyst<sub>F</sub>) branches of the limiting hysteresis loop are defined by the following equations. </p>
-<table cellspacing=\"2\" cellpadding=\"0\" border=\"0\"<tr>
-<td><p><img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Shapes/HysteresisAndMagnets/GenericHystTellinenSoft/Eqn_ShapeFunctionsTellinen.png\"/> </p><p><br><b>Fig. 1:</b> Hyperbolic tangent functions define the shape of the ferromagnetic (static) hysteresis </p><p><img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Shapes/HysteresisAndMagnets/GenericHystTellinenSoft/SoftMagneticHysteresis1.png\"/> </p>
-<p><br>An overview over of available hysteresis and permanent magnet elements of the package <a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets\">HysteresisAndMagnets</a> can be found in <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis\">UsersGuide.Hysteresis</a>. </p>
-</td>
-</tr>
-</table>
-</html>"),       Icon(graphics={Text(
-                extent={{40,0},{40,-30}},
-                lineColor={255,128,0},
-                textString="TS")}));
-      end GenericHystTellinenSoft;
-
-      model GenericHystTellinenHard
-        "Generic flux tube with hard magnetic hysteresis based on the Tellinen model and simple tanh()-functions"
-
-        extends Interfaces.PartialGenericHysteresisTellinen(mu0=K*mu_0);
-
-        //Hysteresis parameter
-        parameter SI.MagneticFluxDensity Br=1.2 "Remanence" annotation (Dialog(group="Hysteresis", groupImage="modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Shapes/HysteresisAndMagnets/GenericHystTellinenHard/HardMagneticHysteresis.png"));
-        parameter SI.MagneticFieldStrength Hc=5e5 "Coercitivity" annotation (Dialog(group="Hysteresis"));
-        parameter Real M = 10/Hc "Slope of tanh()-function" annotation (Dialog(group="Hysteresis"));
-        parameter Real K=1 "mu_0 multiplier" annotation (Dialog(group="Hysteresis"));
-
-      protected
-        final parameter SI.MagneticFluxDensity eps = Br/1000;
-        //final parameter Real mu0(final unit="N/A2") = K*mu_0;
-        final parameter SI.MagneticFieldStrength H0= 0.5*log((1+mu0*Hc/Br)/(1-mu0*Hc/Br)) + M*Hc;
-        constant SI.MagneticFieldStrength unitH = 1;
-
-        Real tanhR;
-        Real tanhF;
-
-      equation
-        tanhR = tanh((M*H - H0)/unitH);
-        tanhF = tanh((M*H + H0)/unitH);
-        hystR = Br*tanhR + mu0*H - eps/2;
-        hystF = Br*tanhF + mu0*H + eps/2;
-
-       annotation (defaultComponentName="Core", Icon(coordinateSystem(preserveAspectRatio=true,  extent={{-100,
-                  -100},{100,100}}), graphics={
-              Rectangle(
-                extent={{-70,32},{70,-30}},
-                lineColor={255,128,0},
-                fillColor={255,255,255},
-                fillPattern=FillPattern.Solid),
-              Line(
-                points={{70,0},{100,0}},
-                color={255,128,0}),
-              Line(
-                points={{-90,0},{-70,0}},
-                color={255,128,0}),   Line(
-                points={{-30,-20},{-14,-20},{-6,-16},{2,0},{10,16},{18,20},{26,20}},
-                color={255,128,0},
-                smooth=Smooth.Bezier,
-                origin={-14,0},
-                rotation=180),     Line(
-                points={{-18,-20},{-2,-20},{6,-16},{14,0},{22,16},{30,20},{38,
-                    20}},
-                color={255,128,0},
-                smooth=Smooth.Bezier),
-              Line(
-                points={{-18,-20},{-42,-20}},
-                color={255,128,0}),
-              Line(
-                points={{16,20},{40,20}},
-                color={255,128,0}),
-              Text(
-                extent={{40,-2},{40,-30}},
-                lineColor={255,128,0},
-                textString="TH")}),    Documentation(info="<html>
-<p>
-  Flux tube element for modeling the ferromagnetic (static) hysteresis of hard magnetic materials. The ferromagnetic hysteresis behavior is defined by the <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis.StaticHysteresis.Tellinen\">Tellinen hysteresis model</a>. The shape of the limiting hysteresis loop is described by simple hyperbolic tangent functions with 4 parameters.
-</p>
-
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <caption align=\"bottom\"><b>Fig. 1:</b> Hyperbolic tangent functions define the shape of the ferromagnetic (static) hysteresis</caption>
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Shapes/HysteresisAndMagnets/GenericHystTellinenHard/HardMagneticHysteresis.png\">
-   </td>
-  </tr>
-</table>
-
-<p>
-An overview of all available hysteresis and permanent magnet elements of the package <a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets\">HysteresisAndMagnets</a> can be found in <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis\">UsersGuide.Hysteresis</a>.
-</p>
-</html>"));
-      end GenericHystTellinenHard;
-
-      model GenericHystTellinenEverett
-        "Generic flux tube with ferromagnetic hysteresis based on the Tellinen model and the Everett fucntion [Ya89])"
-
-        parameter FluxTubes.Material.HysteresisEverettParameter.BaseData mat=
-            FluxTubes.Material.HysteresisEverettParameter.BaseData()
-          "Material properties"
-          annotation (Dialog(group="Material"), choicesAllMatching=true);
-        extends Interfaces.PartialGenericHysteresisTellinen(mu0=mat.K*mu_0, sigma=mat.sigma);
-
-      protected
-        parameter SI.MagneticFluxDensity Js = 0.5 * FluxTubes.Utilities.everett(
-                                                           mat.Hsat,-mat.Hsat, mat, false)
-          "Saturation polarization";
-        //final parameter Real mu0 = mat.K * mu_0;
-        parameter SI.MagneticFluxDensity eps=mat.M/1000;
-        parameter Real P1 = (mat.M*mat.r*(2/pi*atan(mat.q*(mat.Hsat-mat.Hc))+1)+(2*mat.M*(1-mat.r))/(1+1/2*(exp(-mat.p1*(mat.Hsat-mat.Hc))+exp(-mat.p2*(mat.Hsat-mat.Hc)))));
-        parameter Real P4 = (mat.M*mat.r*(2/pi*atan(mat.q*(-mat.Hsat-mat.Hc))+1)+(2*mat.M*(1-mat.r))/(1+1/2*(exp(-mat.p1*(-mat.Hsat-mat.Hc))+exp(-mat.p2*(-mat.Hsat-mat.Hc)))));
-
-        SI.MagneticFieldStrength H2;
-        SI.MagneticFieldStrength H3;
-        Real P2;
-        Real P3;
-        Real H_lim;
-        constant SI.MagneticFluxDensity unitT = 1;
-
-      equation
-        H_lim = if Hstat<-mat.Hsat then -mat.Hsat elseif Hstat>mat.Hsat then mat.Hsat else Hstat;
-        H2 = H_lim-mat.Hc;
-        H3 = -H_lim-mat.Hc;
-
-        P2 = (mat.M*mat.r*(2/pi*atan(mat.q*H2)+1)+(2*mat.M*(1-mat.r))/(1+1/2*(exp(-mat.p1*H2)+exp(-mat.p2*H2))));
-        P3 = (mat.M*mat.r*(2/pi*atan(mat.q*H3)+1)+(2*mat.M*(1-mat.r))/(1+1/2*(exp(-mat.p1*H3)+exp(-mat.p2*H3))));
-
-        hystR = -Js + unitT*(P1*P2-P3*P4) + mu0*Hstat - eps/2;
-        hystF =  Js + unitT*(P4*P2-P3*P1) + mu0*Hstat + eps/2;
-
-        annotation (defaultComponentName="Core", Icon(graphics={Text(
-                extent={{40,0},{40,-30}},
-                lineColor={255,128,0},
-                textString="TE")}),
-          Documentation(info="<html>
-
-<p>
-Flux tube element for modeling soft magnetic materials with ferromagnetic and dynamic hysteresis (eddy currents). The ferromagnetic hysteresis behavior is defined by the <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis.StaticHysteresis.Tellinen\">Tellinen hysteresis model</a>. The Shape of the limiting ferromagnetic hysteresis loop is specified by an analytical description of the Everett function, which is also used to parameterize the <a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets.GenericHystPreisachEverett\">GenericHystPreisachEverett</a> model. A library of predefined parameter sets can be found in <a href=\"modelica://Modelica.Magnetic.FluxTubes.Material.HysteresisEverettParameter\">FluxTubes.Material.HysteresisEverettParameter</a>.
-</p>
-
-
-<p>
-An overview of all available hysteresis and permanent magnet elements of the package <a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets\">HysteresisAndMagnets</a> can be found in <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis\">UsersGuide.Hysteresis</a>.
-</p>
-
-</html>"));
-      end GenericHystTellinenEverett;
-
-      model GenericHystTellinenTable
-        "Generic flux tube with ferromagnetic hysteresis based on the Tellinen model and table data"
-
-        parameter FluxTubes.Material.HysteresisTableData.BaseData mat=
-            FluxTubes.Material.HysteresisTableData.BaseData()
-          annotation (choicesAllMatching=true, Dialog(group="Hysteresis"));
-        parameter Real K = 1
-          "Slope of hysteresis in the saturation region (K*mu_0)"                    annotation(Dialog(group="Hysteresis"));
-
-        extends Interfaces.PartialGenericHysteresisTellinen(mu0=mu_0*K, sigma=mat.sigma);
-
-      protected
-        constant SI.MagneticFluxDensity unitT=1;
-        parameter SI.MagneticFluxDensity eps = unitT*mat.tabris[size(mat.tabris,1),2]/1000;
-
-        Modelica.Blocks.Tables.CombiTable1D tabris(
-          table=mat.tabris,
-          smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative);
-
-        Modelica.Blocks.Tables.CombiTable1D tabfal(
-          table=mat.tabfal,
-          smoothness=Modelica.Blocks.Types.Smoothness.ContinuousDerivative);
-
-      equation
-        tabris.u[1]=Hstat;
-        tabfal.u[1]=Hstat;
-
-        hystR = unitT*tabris.y[1]+mu0*Hstat-eps;
-        hystF = unitT*tabfal.y[1]+mu0*Hstat+eps;
-
-        annotation (defaultComponentName="Core", Icon(graphics={Text(
-                extent={{40,0},{40,-30}},
-                lineColor={255,128,0},
-                textString="TT")}),
-          Documentation(info="<html>
-
-<p>
-Flux tube element for modeling magnetic materials with ferromagnetic and dynamic hysteresis (eddy currents). The ferromagnetic hysteresis behavior is defined by the <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis.StaticHysteresis.Tellinen\">Tellinen hysteresis model</a>. The rising and falling branch of the limiting ferromagnetic hysteresis loop are specified by table data. Therefore, almost any hysteresis shapes are possible. A library with predefined tables can be found at <a href=\"modelica://Modelica.Magnetic.FluxTubes.Material.HysteresisTableData\">FluxTubes.Material.HysteresisTableData</a>.
-
-<p>
-An overview of all available hysteresis and permanent magnet elements of the package <a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets\">HysteresisAndMagnets</a> can be found in <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis\">UsersGuide.Hysteresis</a>.
-</p>
-
-</html>"));
-      end GenericHystTellinenTable;
-
-      model GenericHystPreisachEverett
-        "Generic flux tube with ferromagnetic hysteresis based on the Preisach model and the Everett function [Ya89])"
-        import Modelica.Constants.pi;
-
-        parameter FluxTubes.Material.HysteresisEverettParameter.BaseData mat=
-            FluxTubes.Material.HysteresisEverettParameter.BaseData()
-          "Preisach Parameters"
-          annotation (Dialog(group="Material"), choicesAllMatching=true);
-
-        parameter Integer Count=100 "Length of history array" annotation(Dialog(group="Advanced"));
-        parameter SI.MagneticFieldStrength eps=1e-5
-          "Tolerance in Preisach history"                                           annotation(Dialog(group="Advanced"));
-        parameter SI.Time t1=1e-6 "Initialization time" annotation(Dialog(group="Advanced"));
-
-        extends Interfaces.PartialGenericHysteresis(sigma=mat.sigma);
-
-      protected
-        final parameter Real mu0=mat.K*Modelica.Constants.mue_0;
-
-        SI.MagneticFluxDensity J "Polarisation";
-        SI.MagneticFieldStrength hmax(start=0, min=0) "maximum value of h";
-
-        SI.MagneticFieldStrength alpha
-          "Current alpha coordinate of Everett-Function everett(alpha,beta)";
-        SI.MagneticFieldStrength beta
-          "Current beta coordinate of Everett-Function everett(alpha,beta)";
-
-        Boolean asc(start=true, fixed=true) "=asc without chatter";
-        Boolean asc2 "Hstat is ascending der(Hstat)>0";
-        Boolean delAsc(start=false)
-          "wipeout history vertex at ascending Hstat";
-        Boolean delDesc(start=false)
-          "wipeout history vertex at descending Hstat";
-        Boolean del(start=false) "delAsc or delDesc";
-        Boolean init(start=false, fixed=true)
-          "If init=1 then J runs on the initial magnetization curve";
-        Boolean evInit(start=false) "Event init=0 -> init=1";
-        Boolean evAsc(start=false) "Event asc=0 -> asc=1";
-        Boolean evDesc(start=false) "Event asc=1 -> asc=0";
-
-        SI.MagneticFieldStrength aSav[Count]
-          "1xCount array of alpha history (vertices on Preisach Plane)";
-        SI.MagneticFieldStrength bSav[Count]
-          "1xCount array of beta history (vertices on Preisach Plane)";
-
-        SI.MagneticFluxDensity E "Everett function";
-        SI.MagneticFieldStrength H1 "Term for computing the Everett function";
-        SI.MagneticFieldStrength H2 "Term for computing the Everett function";
-        SI.MagneticFieldStrength H3 "Term for computing the Everett function";
-        SI.MagneticFieldStrength H4 "Term for computing the Everett function";
-        constant SI.MagneticFluxDensity unitT=1;
-
-        Real v(start=0,  fixed=true, final unit="1");
-
-        Boolean init2(start=false, fixed=true);
-        Boolean init3;
-        SI.MagneticFieldStrength x(start=0)
-          "Variable for initialization of the Preisach model";
-        discrete Real aSavI(start=0, fixed=true);
-        discrete Real bSavI(start=0, fixed=true);
-        discrete Real bI(start=0, fixed=true);
-        discrete Real hmaxI(start=0, fixed=true);
-
-      initial equation
-        J = 0.5*(FluxTubes.Utilities.everett(
-                H,
-                -mat.Hsat,
-                mat,
-                false)*(1 - MagRel) - FluxTubes.Utilities.everett(
-                mat.Hsat,
-                H,
-                mat,
-                false)*(1 + MagRel) + FluxTubes.Utilities.everett(
-                mat.Hsat,
-                -mat.Hsat,
-                mat,
-                false)*MagRel);
-        J = FluxTubes.Utilities.initPreisach(
-                x,
-                H,
-                mat);
-        aSav=fill( mat.Hsat,Count);
-        bSav=fill(-mat.Hsat,Count);
-        beta=alpha;
-        hmax=mat.Hsat;
-
-      equation
-        init2 = time > 1.5*t1;
-        init3 = edge(init2);
-
-        der(x) = 0;
-        when init2 then
-          hmaxI = abs(Hstat)+abs(x);
-          if hmax<eps then
-            aSavI = mat.Hsat;
-            bSavI = -mat.Hsat;
-          elseif asc and x<0 then
-            aSavI = mat.Hsat;
-            bSavI = -hmax;
-          elseif asc and x>0 then
-            aSavI = hmax;
-            bSavI = alpha;
-          elseif not asc and x<0 then
-            aSavI = alpha;
-            bSavI = -hmax;
-          else
-            aSavI = hmax;
-            bSavI = -mat.Hsat;
-          end if;
-          bI = if asc then bSav[1] else aSav[1];
-        end when;
-
-        alpha = if Hstat<=-mat.Hsat then -mat.Hsat elseif Hstat>=mat.Hsat then mat.Hsat else Hstat;
-
-        asc2 = der(Hstat)>0;
-        der(v)= if (asc2 and v<1) then 0.5/t1 elseif (not asc2 and v>0) then -0.5/t1 else 0;
-        asc = v>0.5;
-
-        evAsc = (not pre(asc)) and asc;
-        evDesc = pre(asc) and (not asc);
-
-        der(beta) = if init then -der(alpha) else 0;
-
-        delAsc = (alpha > pre(aSav[1]));
-        delDesc = (alpha < pre(bSav[1]));
-        del = delAsc or delDesc or evInit;
-
-        init = (abs(alpha) >= pre(hmax)) and time>2*t1;
-
-        evInit = init and not pre(init);
-
-        when init3 or (change(asc) and pre(init)) then
-          hmax = if init3 then hmaxI else abs(Hstat);
-        end when;
-
-        //##### bSav #####
-        when {init3, evAsc, del} then
-          if init3 then
-            bSav=cat(1,{bSavI},fill(-mat.Hsat,Count-1));
-          elseif evAsc then
-            bSav = if (alpha-eps)>pre(bSav[1]) then cat(1,{alpha},pre(bSav[1:end-1])) else pre(bSav);
-          elseif del then
-            bSav = cat(1,pre(bSav[2:end]),{-mat.Hsat});
-          else
-            bSav = pre(bSav);
-          end if;
-        end when;
-
-        //##### REINIT aSav #####
-        when {init3, evDesc, del} then
-          if init3 then
-            aSav=cat(1,{aSavI},fill(mat.Hsat,Count-1));
-          elseif evDesc then
-            aSav = if (alpha+eps)<pre(aSav[1]) then cat(1,{alpha},pre(aSav[1:end-1])) else pre(aSav);
-          elseif del then
-            aSav = cat(1,pre(aSav[2:end]),{mat.Hsat});
-          else
-            aSav = pre(aSav);
-          end if;
-        end when;
-
-        // #### beta ####
-        when {init3, change(asc), evInit, del} then
-          reinit(beta, if init3 then bI elseif change(asc) then alpha elseif evInit then -alpha elseif asc then bSav[1] else aSav[1]);
-        end when;
-
-        H1= -beta-mat.Hc;
-        H2= alpha-mat.Hc;
-        H3= -alpha-mat.Hc;
-        H4= beta-mat.Hc;
-
-        E = unitT*
-            ((mat.M*mat.r*(2/pi*atan(mat.q*H1)+1)+(2*mat.M*(1-mat.r))/(1+1/2*(exp(-mat.p1*H1)+exp(-mat.p2*H1))))*
-            (mat.M*mat.r*(2/pi*atan(mat.q*H2)+1)+(2*mat.M*(1-mat.r))/(1+1/2*(exp(-mat.p1*H2)+exp(-mat.p2*H2))))-
-            (mat.M*mat.r*(2/pi*atan(mat.q*H3)+1)+(2*mat.M*(1-mat.r))/(1+1/2*(exp(-mat.p1*H3)+exp(-mat.p2*H3))))*
-            (mat.M*mat.r*(2/pi*atan(mat.q*H4)+1)+(2*mat.M*(1-mat.r))/(1+1/2*(exp(-mat.p1*H4)+exp(-mat.p2*H4)))));
-
-        der(J) = (if init then 0.5 else 1) * der(E);
-        B = J + mu0 * Hstat;
-
-        annotation (defaultComponentName="Core", Icon(graphics={Text(
-                extent={{40,0},{40,-30}},
-                lineColor={255,128,0},
-                textString="PE")}),
-          Documentation(info="<html>
-<p>
-Flux tube element for modeling magnetic materials with ferromagnetic and dynamic hysteresis (eddy currents). The ferromagnetic hysteresis behavior is defined by the
-<a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis.StaticHysteresis.Preisach\">Preisach hysteresis model</a>. The Shape of the limiting ferromagnetic hysteresis loop is specified by an analytical description of the Everett function. A library of predefined parameter sets can be found in <a href=\"modelica://Modelica.Magnetic.FluxTubes.Material.HysteresisEverettParameter\">FluxTubes.Material.HysteresisEverettParameter</a>.
-</p>
-
-<p>
-An overview over all available hysteresis and permanent magnet elements of the package <a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets\">HysteresisAndMagnets</a> can be found in <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis\">UsersGuide.Hysteresis</a>.
-</p>
-
-</html>"));
-      end GenericHystPreisachEverett;
-
-      model GenericHystTellinenPermanentMagnet
-        "Permanent magnet based on the Tellinen hysteresis model"
-
-        extends FluxTubes.Interfaces.PartialGenericHysteresisTellinen(mu0=K*
-              Modelica.Constants.mue_0, MagRel(start=-1, fixed=true));
-
-        parameter SI.MagneticFluxDensity Br=1.2 "Remanence" annotation (Dialog(group="Hysteresis", groupImage="modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Shapes/HysteresisAndMagnets/GenericHystTellinenHard/HardMagneticHysteresis.png"));
-        parameter SI.MagneticFieldStrength Hc=5e5 "Coercitivity" annotation (Dialog(group="Hysteresis"));
-        parameter Real M(final unit="1") = unitH*10/Hc
-          "Slope of tanh()-function"                                              annotation (Dialog(group="Hysteresis"));
-        parameter Real K(final unit="1")=1 "mu_0 multiplier" annotation (Dialog(group="Hysteresis"));
-
-      protected
-        constant SI.MagneticFieldStrength unitH = 1;
-        parameter SI.MagneticFluxDensity eps= Br/1000;
-        parameter SI.MagneticFieldStrength H0= 0.5*log((1+mu0*Hc/Br)/(1-mu0*Hc/Br)) + M*Hc;
-
-      equation
-        hystR = Br*tanh((M*H - H0)/unitH) + mu0*H - eps/2;
-        hystF = Br*tanh((M*H + H0)/unitH) + mu0*H + eps/2;
-
-        annotation (defaultComponentName="PM",
-                    Icon(coordinateSystem(preserveAspectRatio=true,  extent={{-100,
-                  -100},{100,100}}), graphics={
-              Rectangle(
-                extent={{-70,30},{70,-30}},
-                lineColor={255,128,0},
-                fillColor={255,255,255},
-                fillPattern=FillPattern.Solid),
-              Line(
-                points={{70,0},{100,0}},
-                color={255,128,0}),
-              Rectangle(
-                extent={{34,20},{60,-20}},
-                lineColor={0,127,0},
-                fillColor={0,127,0},
-                fillPattern=FillPattern.Solid),
-              Text(
-                extent={{-20,13},{20,-13}},
-                lineColor={0,0,0},
-                textStyle={TextStyle.Bold},
-                fillPattern=FillPattern.Solid,
-                fillColor={0,127,0},
-                origin={47,0},
-                rotation=90,
-                textString="S"),   Line(
-                points={{-38,-20},{-4,-20},{4,-16},{12,0},{20,16},{28,20},{36,
-                    20}},
-                color={255,128,0},
-                smooth=Smooth.Bezier), Line(
-                points={{-42,-20},{-14,-20},{-6,-16},{2,0},{10,16},{18,20},{28,
-                    20}},
-                color={255,128,0},
-                smooth=Smooth.Bezier,
-                origin={-6,0},
-                rotation=180),
-              Line(
-                points={{-100,0},{-70,0}},
-                color={255,128,0}),
-              Rectangle(
-                extent={{-60,20},{-34,-20}},
-                lineColor={255,0,0},
-                fillColor={255,0,0},
-                fillPattern=FillPattern.Solid),
-              Text(
-                extent={{-20,13},{20,-13}},
-                lineColor={0,0,0},
-                textStyle={TextStyle.Bold},
-                fillPattern=FillPattern.Solid,
-                fillColor={0,127,0},
-                textString="N",
-                origin={-47,0},
-                rotation=90),
-              Text(
-                extent={{22,0},{22,-18}},
-                lineColor={255,128,0},
-                textString="TH")}),    Documentation(info="<html>
-
-<p>
-Flux tube element for modeling the hard magnetic hysteresis of permanent magnets. The model is similar to <a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets.GenericHystTellinenHard\">GenericHystTellinenHard</a> but has an initial magnetization preset of -100&percnt; and and adapted icon for better readability of the diagram.
-</p>
-
-<p>
-An overview over all available hysteresis and permanent magnet elements of the package <a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets\">HysteresisAndMagnets</a> can be found in <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis\">UsersGuide.Hysteresis</a>.
-</p>
-
-</html>"));
-      end GenericHystTellinenPermanentMagnet;
-
-      model GenericLinearPermanentMagnet
-        "Permanent Magnet with linear characteristic"
-        extends Interfaces.PartialGeneric;
-
-        parameter Material.HardMagnetic.BaseData mat=
-            Material.HardMagnetic.BaseData() "Material"   annotation (Dialog(group="Material"),choicesAllMatching=true);
-
-        output SI.MagneticFieldStrength H;
-        output SI.MagneticFluxDensity B;
-
-      equation
-        V_m = H*l;
-        Phi = B*A;
-        B = -mat.B_r+mu_0*mat.mu_r*H;
-        annotation (defaultComponentName="PM",Icon(graphics={
-              Rectangle(
-                extent={{-70,30},{70,-30}},
-                lineColor={255,128,0},
-                fillColor={255,255,255},
-                fillPattern=FillPattern.Solid),
-              Line(
-                points={{-100,0},{-70,0}},
-                color={255,128,0}),
-              Line(
-                points={{70,0},{100,0}},
-                color={255,128,0}),
-              Rectangle(
-                extent={{-60,20},{-34,-20}},
-                lineColor={255,0,0},
-                fillColor={255,0,0},
-                fillPattern=FillPattern.Solid),
-              Text(
-                extent={{-20,13},{20,-13}},
-                lineColor={0,0,0},
-                textStyle={TextStyle.Bold},
-                fillPattern=FillPattern.Solid,
-                fillColor={0,127,0},
-                textString="N",
-                origin={-47,0},
-                rotation=90),
-              Rectangle(
-                extent={{34,20},{60,-20}},
-                lineColor={0,127,0},
-                fillColor={0,127,0},
-                fillPattern=FillPattern.Solid),
-              Text(
-                extent={{-20,13},{20,-13}},
-                lineColor={0,0,0},
-                textStyle={TextStyle.Bold},
-                fillPattern=FillPattern.Solid,
-                fillColor={0,127,0},
-                origin={47,0},
-                rotation=90,
-                textString="S")}),
-          Documentation(info="<html>
-<p>
-Simple model of a linear permanent Magnet. Typical characteristics of common permanent magnetic materials can be found at <a href=\"modelica://Modelica.Magnetic.FluxTubes.Material.HardMagnetic\">FluxTubes.Material.HardMagnetic</a>.
-</p>
-
-<p>
-An overview over all available hysteresis and permanent magnet elements of the package <a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets\">HysteresisAndMagnets</a> can be found in <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis\">UsersGuide.Hysteresis</a>.
-</p>
-
-</html>"));
-      end GenericLinearPermanentMagnet;
-
-      annotation (Documentation(info="<html>
-
-<p>
-Please have a look at <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Hysteresis\">UsersGuide.Hysteresis</a> for an explanation of the Content of the package.
-</p>
-
-</html>"));
-    end HysteresisAndMagnets;
   end Shapes;
 
   package Material
@@ -6828,854 +4387,6 @@
 </html>"));
     end HardMagnetic;
 
-    package HysteresisEverettParameter
-      "Parameter sets for an analytical description of the Everett function"
-      extends Modelica.Icons.MaterialPropertiesPackage;
-      record BaseData "Base Data Record"
-        parameter SI.MagneticFieldStrength Hsat=100
-          "Hysteresis region between -Hsat .. Hsat";
-        parameter Real M(final unit="1")=0.95
-          "Related to saturation value of magnetization";
-        parameter Real r(final unit="1")=0.55
-          "Proportion of the straight region in the vicinity of Hc";
-        parameter Real q(final unit="m/A")=2.4e-1
-          "Slope of the straight region in the vicinity of Hc";
-        parameter Real p1(final unit="m/A")=1.2e-1 "Sharpness of major loop";
-        parameter Real p2(final unit="m/A")=8e-1 "Sharpness of major loop";
-        parameter SI.MagneticFieldStrength Hc=7.4 "Major loop coercivity";
-        parameter Real K(final unit="1")=1
-          "Slope in saturation regeion mue_0*K";
-        parameter SI.Conductivity sigma = 1
-          "Electrical conductivity of material";
-
-        annotation (Documentation(info="<html>
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisEverettParameter/hyst_BaseData.png\">
-   </td>
-  </tr>
-</table>
-</html>
-"));
-      end BaseData;
-
-      record Vacoflux17 "Vacoflux17"
-        extends BaseData(
-          M = 0.919590,
-          r = 0.728070,
-          q = 0.015757,
-          p1 = 0.016407,
-          p2 = 0.001049,
-          Hc = 98.0842,
-          K = 110,
-          Hsat = 1000,
-          sigma = 2.56e6);
-        annotation (Documentation(info="<html>
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisEverettParameter/hyst_Vacoflux17.png\">
-   </td>
-  </tr>
-</table>
-</html>"));
-      end Vacoflux17;
-
-      record Vacodur50 "Vacodur50"
-        extends BaseData(
-          M = 1.002,
-          r = 1.0835,
-          q = 0.052305,
-          p1 = 0.79581,
-          p2 = 0.00898,
-          Hc = 133.5884,
-          K = 160,
-          Hsat = 800,
-          sigma=2.38e6);
-        annotation (Documentation(info="<html>
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisEverettParameter/hyst_Vacodur50.png\">
-   </td>
-  </tr>
-</table>
-</html>"));
-      end Vacodur50;
-
-      record M270_50A "M270-50A"
-        extends BaseData(
-          Hsat = 650,
-          M = 0.980890,
-          r = 0.429330,
-          q = 0.027285,
-          p1 = 0.48567,
-          p2 = 0.000549,
-          Hc = 24.4948,
-          K = 50,
-          sigma = 1.72e6);
-        annotation (Documentation(info="<html>
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisEverettParameter/hyst_M270-50A.png\">
-   </td>
-  </tr>
-</table>
-</html>"));
-      end M270_50A;
-
-      record M330_50A "M330-50A"
-        extends BaseData(
-          Hsat = 650,
-          M = 0.967,
-          r = 0.502560,
-          q = 0.039964,
-          p1 = 0.188070,
-          p2 = 0.000781,
-          Hc = 42.2283,
-          K = 50,
-          sigma = 2.2e6);
-        annotation (Documentation(info="<html>
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisEverettParameter/hyst_M330-50A.png\">
-   </td>
-  </tr>
-</table>
-</html>"));
-      end M330_50A;
-
-      record M400_50A "M400-50A"
-        extends BaseData(
-          Hsat = 700,
-          M = 0.96642,
-          r = 0.44216,
-          q = 0.027763,
-          p1 = 0.29943,
-          p2 = 0.000757,
-          Hc = 43.2967,
-          K = 50,
-          sigma = 2.22e6);
-        annotation (Documentation(info="<html>
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisEverettParameter/hyst_M400-50A.png\">
-   </td>
-  </tr>
-</table>
-</html>"));
-      end M400_50A;
-
-      record M400_50AP "M400-50AP"
-        extends BaseData(
-          Hsat = 600,
-          M = 1.0013,
-          r = 0.42687,
-          q = 0.034302,
-          p1 = 0.31794,
-          p2 = 0.000759,
-          Hc = 36.204,
-          K = 50,
-          sigma = 2.22e6);
-        annotation (Documentation(info="<html>
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisEverettParameter/hyst_M400-50AP.png\">
-   </td>
-  </tr>
-</table>
-</html>"));
-      end M400_50AP;
-
-      record M800_65A "M800-65A"
-        extends BaseData(
-          Hsat = 700,
-          M = 1.146100,
-          r = 0.160700,
-          q = 0.012965,
-          p1 = 0.183490,
-          p2 = 0.000425,
-          Hc = 100.0602,
-          K = 50,
-          sigma = 3.27e6);
-        annotation (Documentation(info="<html>
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisEverettParameter/hyst_M800-65A.png\">
-   </td>
-  </tr>
-</table>
-</html>"));
-      end M800_65A;
-      annotation (Documentation(info="<html>
-<p>These parameter records contain the parameters which adapt the analytical Everett function to a specific hysteresis shape (see <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Literature\">[YUY89]</a> for a detailed description of that function). The Everett function is used to define the shape of the ferromagnetic hysteresis of the <code><a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.GenericHystTellinenEverett\">GenericHystTellinenEverett</a></code> and the <code><a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.GenericHystPreisachEverett\">GenericHystPreisachEverett</a></code> flux tube elements.</p>
-</html>"));
-    end HysteresisEverettParameter;
-
-    package HysteresisTableData
-      extends Modelica.Icons.MaterialPropertiesPackage;
-      record BaseData "hysteresis table data"
-
-        extends Modelica.Icons.Record;
-
-        parameter Real[:,:] tabris=[
-          -10000000, -0.8000;
-          -1000, -0.8000;
-          -300, -0.8000;
-          -200, -0.8000;
-          -190, -0.8000;
-          -180, -0.8000;
-          -160, -0.7999;
-          -150, -0.7998;
-          -140, -0.7997;
-          -130, -0.7996;
-          -120, -0.7993;
-          -110, -0.7989;
-          -100, -0.7982;
-          -90, -0.7971;
-          -80, -0.7953;
-          -70, -0.7924;
-          -60, -0.7878;
-          -50, -0.7802;
-          -40, -0.7680;
-          -30, -0.7486;
-          -20, -0.7180;
-          -10, -0.6708;
-          0, -0.6000;
-          10, -0.4983;
-          20, -0.3611;
-          30, -0.1908;
-          40, 0.0000;
-          50, 0.1908;
-          60, 0.3611;
-          70, 0.4983;
-          80, 0.6000;
-          90, 0.6708;
-          100, 0.7180;
-          110, 0.7486;
-          120, 0.7680;
-          130, 0.7802;
-          140, 0.7878;
-          150, 0.7924;
-          160, 0.7953;
-          170, 0.7971;
-          180, 0.7982;
-          190, 0.7989;
-          200, 0.7993;
-          300, 0.8000;
-          1000, 0.8000;
-          10000000, 0.8000]
-          "table data of the rising (lower) branch of the hysteresis envelope curve (H, B)";
-
-        parameter Real[:,:] tabfal=[
-          -10000000, -0.8000;
-          -1000, -0.8000;
-          -300, -0.8000;
-          -200, -0.7993;
-          -190, -0.7989;
-          -180, -0.7982;
-          -170, -0.7971;
-          -160, -0.7953;
-          -150, -0.7924;
-          -140, -0.7878;
-          -130, -0.7802;
-          -120, -0.7680;
-          -110, -0.7486;
-          -100, -0.7180;
-          -90, -0.6708;
-          -80, -0.6000;
-          -70, -0.4983;
-          -60, -0.3611;
-          -50, -0.1908;
-          -40, 0.0000;
-          -30, 0.1908;
-          -20, 0.3611;
-          -10, 0.4983;
-          0, 0.6000;
-          10, 0.6708;
-          20, 0.7180;
-          30, 0.7486;
-          40, 0.7680;
-          50, 0.7802;
-          60, 0.7878;
-          70, 0.7924;
-          80, 0.7953;
-          90, 0.7971;
-          100, 0.7982;
-          110, 0.7989;
-          120, 0.7993;
-          130, 0.7996;
-          140, 0.7997;
-          150, 0.7998;
-          160, 0.7999;
-          180, 0.8000;
-          190, 0.8000;
-          200, 0.8000;
-          300, 0.8000;
-          1000, 0.8000;
-          10000000, 0.8000]
-          "table data of the falling (upper) branch of the hysteresis envelope curve (H, B)";
-        parameter SI.Conductivity sigma = 1;
-        annotation (Documentation(info="<html>
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisTableData/hysttd_BaseData.png\">
-   </td>
-  </tr>
-</table>
-</html>"));
-      end BaseData;
-
-      record Vacoflux17 "Vacoflux17"
-        extends FluxTubes.Material.HysteresisTableData.BaseData(
-          tabris=[-1e7,-1.577; -1000.000,-1.577; -800.000,-1.577; -655.738,-1.555;
-              -505.647,-1.526; -374.499,-1.483; -253.552,-1.417; -135.519,-1.315;
-              -88.889,-1.221; -45.173,-1.097; -20.401,-0.967; 11.658,-0.770; 69.945,
-              -0.269; 102.004,0.138; 122.404,0.429; 145.719,0.690; 177.778,0.887;
-              211.293,1.025; 253.552,1.148; 306.011,1.243; 376.463,1.340; 480.978,
-              1.422; 673.913,1.528; 800.000,1.577; 1000.000,1.577; 1e7,1.577],
-          tabfal=[-1e7,-1.577; -1000.000,-1.577; -800.000,-1.577; -576.505,-1.477;
-              -409.072,-1.377; -292.851,-1.245; -213.838,-1.046; -176.321,-0.858;
-              -147.177,-0.661; -122.404,-0.414; -103.461,-0.109; -85.975,0.138;
-              -71.403,0.298; -48.087,0.516; -10.200,0.807; 27.687,1.032; 93.261,
-              1.250; 145.719,1.344; 192.350,1.388; 264.841,1.453; 351.184,1.497;
-              543.534,1.555; 657.609,1.572; 800.000,1.577; 1000.000,1.577; 1e7,1.577],
-          sigma=2.56e6);
-
-        annotation (Documentation(info="<html>
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisTableData/hysttd_Vacoflux17.png\">
-   </td>
-  </tr>
-</table>
-</html>"));
-      end Vacoflux17;
-
-      record Vacoflux48 "Vacoflux48"
-        extends FluxTubes.Material.HysteresisTableData.BaseData(
-          tabris=[-1500,-2.22424; -1000,-2.22424; -798.541,-2.22424; -641.021,-2.19521;
-              -476.208,-2.15167; -320.146,-2.09361; -187.42,-1.9775; -134.913,-1.93396;
-              -98.4503,-1.87591; -66.3628,-1.8106; -43.0264,-1.73803; -24.0656,-1.66546;
-              -8.02188,-1.59289; 3.64631,-1.51306; 16.773,-1.41147; 22.6071,-1.32438;
-              25.5242,-1.23004; 29.8997,-0.33019; 35.7338,0.56241; 43.0264,1.15022;
-              51.7776,1.38244; 61.9872,1.52758; 72.1969,1.62917; 88.2407,1.71626;
-              107.201,1.78157; 123.245,1.83237; 149.499,1.90493; 177.211,1.94848;
-              207.84,1.99202; 244.303,2.0283; 292.434,2.07184; 352.233,2.10813;
-              433.911,2.14441; 512.671,2.17344; 597.265,2.19521; 706.655,2.21698;
-              800,2.23149; 1000,2.23149; 1500,2.23149],
-          tabfal=[-1500,-2.22424; -1000,-2.22424; -798.541,-2.22424; -641.021,-2.19521;
-              -476.208,-2.15167; -320.146,-2.07184; -187.42,-1.92671; -136.372,-1.84688;
-              -111.577,-1.78882; -91.1577,-1.709; -76.5725,-1.63643; -57.6117,-1.49129;
-              -44.485,-1.28084; -38.6509,-0.94703; -31.3582,-0.09797; -25.5242,0.83091;
-              -19.6901,1.36792; -13.856,1.44775; -2.18778,1.52758; 8.02188,1.61466;
-              28.4412,1.67997; 64.9043,1.78882; 95.5333,1.8579; 126.162,1.91945;
-              159.708,1.96163; 207.84,2.00653; 244.303,2.03585; 292.434,2.07184;
-              352.233,2.10813; 433.911,2.14441; 512.671,2.17344; 597.265,2.19521;
-              706.655,2.21698; 800,2.23149; 1000,2.23149; 1500,2.23149],
-          sigma=2.27e6);
-        annotation (Documentation(info="<html>
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisTableData/hysttd_Vacoflux48.png\">
-   </td>
-  </tr>
-</table>
-</html>"));
-      end Vacoflux48;
-
-      record Vacodur50 "Vacodur50"
-        extends FluxTubes.Material.HysteresisTableData.BaseData(
-          tabris=[-10000000.000,-2.137; -1500.000,-2.137; -1000.000,-2.137; -798.541,
-              -2.137; -632.270,-2.108; -464.540,-2.072; -283.683,-1.999; -145.123,
-              -1.912; -34.275,-1.825; 24.066,-1.716; 45.944,-1.644; 67.821,-1.549;
-              85.324,-1.419; 101.367,-1.208; 121.787,-0.584; 131.996,-0.004; 146.582,
-              0.795; 158.250,1.208; 175.752,1.586; 185.962,1.673; 206.381,1.753;
-              235.552,1.847; 279.307,1.912; 347.858,1.970; 467.457,2.036; 594.348,
-              2.072; 798.541,2.123; 1000.000,2.123; 1500.000,2.123; 10000000.000,
-              2.123],
-          tabfal=[-10000000.000,-2.137; -1500.000,-2.137; -1000.000,-2.137; -795.624,
-              -2.130; -627.894,-2.094; -464.540,-2.036; -330.356,-1.963; -282.224,
-              -1.927; -247.220,-1.876; -203.464,-1.753; -178.669,-1.629; -168.459,
-              -1.477; -158.250,-1.274; -148.040,-0.983; -142.206,-0.541; -131.996,
-              -0.105; -121.787,0.483; -102.826,1.085; -85.324,1.390; -53.236,1.578;
-              -10.939,1.738; 56.153,1.825; 127.621,1.898; 200.547,1.941; 299.727,
-              2.007; 385.779,2.043; 468.915,2.057; 800.000,2.123; 1000.000,2.123;
-              1500.000,2.123; 10000000.000,2.123],
-          sigma=2.38e6);
-        annotation (Documentation(info="<html>
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisTableData/hysttd_Vacodur50.png\">
-   </td>
-  </tr>
-</table>
-</html>"));
-      end Vacodur50;
-
-      record M270_50A "M270-50A"
-        extends FluxTubes.Material.HysteresisTableData.BaseData(
-          tabris=[-50000,-2.36142149079005; -37500,-2.34572149079005; -25000,-2.20784143083814;
-              -12500,-1.94778131093431; -9500,-1.85604366776894; -9000,-1.83955155226256;
-              -8500,-1.82258455430894; -8000,-1.80507033229993; -7500,-1.78711018607209;
-              -7000,-1.76854566993810; -6500,-1.74932788983047; -6000,-1.72941810924188;
-              -5500,-1.70874679619234; -5000,-1.68715955603320; -4500,-1.66464746674895;
-              -4000,-1.64100464903791; -3500,-1.61593724456462; -3000,-1.58926699830608;
-              -2500,-1.56035493729185; -2000,-1.52877764744974; -1500,-1.49303148569657;
-              -1000,-1.45033726325941; -500,-1.39107814253068; -475,-1.38697746828591;
-              -450,-1.38267482765617; -425,-1.37833105973775; -400,-1.37377662153415;
-              -375,-1.36882438008219; -350,-1.36356879129129; -325,-1.35799622091367;
-              -300,-1.35190077460742; -275,-1.34512176251881; -250,-1.33773575415686;
-              -225,-1.32942423700513; -200,-1.31952959523452; -175,-1.30728420632473;
-              -150,-1.29378356382414; -125,-1.27626065020945; -100,-1.25268401433474;
-              -75,-1.22153894002743; -50,-1.17227751254882; -45,-1.16075298668474;
-              -40,-1.14606393745292; -35,-1.13142982553525; -30,-1.11531942595351;
-              -25,-1.09396956307260; -20,-1.07095509280378; -15,-1.04859501123272;
-              -10,-1.02107504052280; -5,-0.989392176805378; 0,-0.959829637667445;
-              5,-0.908604709968595; 10,-0.846864392654515; 15,-0.749655834487944;
-              20,-0.398773687293659; 25,0.373311242081990; 30,0.590020294584589;
-              35,0.671821320404104; 40,0.736659219518838; 45,0.791353153207790;
-              50,0.838655490546030; 75,0.988585111647679; 100,1.07559475808794;
-              125,1.13210758630769; 150,1.17332186681192; 175,1.20616261336206;
-              200,1.23146912912525; 225,1.25215125877909; 250,1.26844972752130;
-              275,1.28315829857436; 300,1.29515203325250; 325,1.30647370432217;
-              350,1.31576370455381; 375,1.32425072416663; 400,1.33229409096317;
-              425,1.34007989376204; 450,1.34727951499250; 475,1.35321892573422;
-              500,1.35863485716407; 1000,1.43330411726965; 1500,1.48096951700072;
-              2000,1.51920274857903; 2500,1.55230032928980; 3000,1.58218256821786;
-              3500,1.60957343077396; 4000,1.63525269735252; 4500,1.65934255632023;
-              5000,1.68218796544641; 5500,1.70405627320433; 6000,1.72494039832143;
-              6500,1.74511951283721; 7000,1.76457818244663; 7500,1.78337203170120;
-              8000,1.80154227627029; 8500,1.81922495056038; 9000,1.83634585185398;
-              9500,1.85301443870688; 12500,1.94475208187226; 25000,2.20481220177608;
-              37500,2.34269226172799; 50000,2.35839226172799],
-          tabfal=[-50000,-2.36142149079005; -37500,-2.34572149079005; -25000,-2.20784143083814;
-              -12500,-1.94778131093431; -9500,-1.85604366776894; -9000,-1.83942307876298;
-              -8500,-1.82229989817775; -8000,-1.80468156576120; -7500,-1.78650645752764;
-              -7000,-1.76779510063662; -6500,-1.74834500001267; -6000,-1.72817242280115;
-              -5500,-1.70728853838413; -5000,-1.68540616617853; -4500,-1.66253513933876;
-              -4000,-1.63841123419282; -3500,-1.61289397609053; -3000,-1.58542016678115;
-              -2500,-1.55553231646565; -2000,-1.52241494895645; -1500,-1.48420672559264;
-              -1000,-1.43662690910042; -500,-1.36140193513238; -475,-1.35578382798670;
-              -450,-1.34963814839912; -425,-1.34267878891743; -400,-1.33485841403481;
-              -375,-1.32703597143112; -350,-1.31847214273919; -325,-1.30814609379248;
-              -300,-1.29797786984086; -275,-1.28582125972062; -250,-1.27062684432575;
-              -225,-1.25467155812574; -200,-1.23320681958327; -175,-1.20836849729829;
-              -150,-1.17466441368633; -125,-1.13213335917786; -100,-1.07327113174349;
-              -75,-0.983943258578330; -50,-0.831860723978254; -45,-0.791174630360292;
-              -40,-0.730860778213513; -35,-0.648944604927353; -30,-0.539436531904091;
-              -25,-0.297969678679362; -20,0.423561463624426; -15,0.783143776259089;
-              -10,0.870481236955322; -5,0.919860864365896; 0,0.958355916902741;
-              5,0.995210026018745; 10,1.02830008136892; 15,1.05003168490807; 20,
-              1.07204589744377; 25,1.09488735273993; 30,1.11425511031784; 35,1.13333619269922;
-              40,1.14706537678261; 45,1.16224717605861; 50,1.17393024108665; 75,
-              1.22100249420562; 100,1.25247361546262; 125,1.27577025429942; 150,
-              1.29301878595457; 175,1.30648315753826; 200,1.31783072682881; 225,
-              1.32740651813805; 250,1.33561633582420; 275,1.34310089621653; 300,
-              1.34973173145922; 325,1.35576000065507; 350,1.36138307638896; 375,
-              1.36668264869560; 400,1.37167426041476; 425,1.37635180685877; 450,
-              1.38069509895108; 475,1.38477922097523; 500,1.38869331314083; 1000,
-              1.44801140511640; 1500,1.49066348689616; 2000,1.52647802510402; 2500,
-              1.55811034242703; 3000,1.58688253425227; 3500,1.61359336867843; 4000,
-              1.63866877100998; 4500,1.66232889093008; 5000,1.68483122212201; 5500,
-              1.70635087911731; 6000,1.72703063606343; 6500,1.74700304982812; 7000,
-              1.76618126253122; 7500,1.78476734506602; 8000,1.80273806456998; 8500,
-              1.82018416370832; 9000,1.83715524334565; 9500,1.85361777911541; 12500,
-              1.94535542228079; 25000,2.20541554218462; 37500,2.34329560213653;
-              50000,2.35899560213653],
-          sigma=1.72e6);
-        annotation (Documentation(info="<html>
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisTableData/hysttd_M270-50A.png\">
-   </td>
-  </tr>
-</table>
-</html>"));
-      end M270_50A;
-
-      record M330_50A "M330-50A"
-        extends FluxTubes.Material.HysteresisTableData.BaseData(
-          tabris=[-50000,-2.44743549087484; -37500,-2.43173549087484; -25000,-2.29175406960198;
-              -12500,-2.02749122705627; -9500,-1.93424060373981; -9000,-1.91734557383536;
-              -8500,-1.90003831579647; -8000,-1.88228336311722; -7500,-1.86410325306585;
-              -7000,-1.84544168583579; -6500,-1.82622653273328; -6000,-1.80643712142018;
-              -5500,-1.78596588967781; -5000,-1.76475673275961; -4500,-1.74274295978669;
-              -4000,-1.71958116023747; -3500,-1.69519681691703; -3000,-1.66922815434013;
-              -2500,-1.64113365434545; -2000,-1.61012556776875; -1500,-1.57460825746692;
-              -1000,-1.53154975676172; -500,-1.47050141163166; -475,-1.46622093109730;
-              -450,-1.46200139454249; -425,-1.45756401383884; -400,-1.45283335606619;
-              -375,-1.44773279142268; -350,-1.44239226856165; -325,-1.43674835101656;
-              -300,-1.43044338373318; -275,-1.42369405062971; -250,-1.41658602660702;
-              -225,-1.40843067805861; -200,-1.39918824257754; -175,-1.38897584817539;
-              -150,-1.37684878370263; -125,-1.36190318298965; -100,-1.34364363168061;
-              -75,-1.32096745150757; -50,-1.28806145284464; -45,-1.28061490419651;
-              -40,-1.27162255870714; -35,-1.26154821540497; -30,-1.25078841368914;
-              -25,-1.23833667771816; -20,-1.22599711027031; -15,-1.21088890996667;
-              -10,-1.19741834476920; -5,-1.17811735498978; 0,-1.15454734935544;
-              5,-1.13014547258613; 10,-1.10617621802212; 15,-1.06773732096551; 20,
-              -1.02246701683548; 25,-0.902119509520453; 30,-0.558593283376474; 35,
-              -0.158787116256930; 40,0.113151131584899; 45,0.336783141080566; 50,
-              0.541865704013350; 75,0.955840735658849; 100,1.08873353832287; 125,
-              1.16057378694876; 150,1.21270126546580; 175,1.24969229404607; 200,
-              1.27939785471278; 225,1.30397489820994; 250,1.32243760947971; 275,
-              1.33988626282660; 300,1.35445139381851; 325,1.36639472361266; 350,
-              1.37831513730715; 375,1.38815641351734; 400,1.39715852973264; 425,
-              1.40525966753328; 450,1.41256069744102; 475,1.42022154092164; 500,
-              1.42690491746546; 1000,1.50993903640482; 1500,1.56009261898428; 2000,
-              1.59913154972533; 2500,1.63215979009916; 3000,1.66178246326100; 3500,
-              1.68850800352239; 4000,1.71272916087899; 4500,1.73572148025338; 5000,
-              1.75764646474993; 5500,1.77872746673938; 6000,1.79900863540491; 6500,
-              1.81866581587930; 7000,1.83769268690732; 7500,1.85624654695152; 8000,
-              1.87427340278025; 8500,1.89178891688000; 9000,1.90886536500246; 9500,
-              1.92560023719942; 12500,2.01885086051588; 25000,2.28311370306159;
-              37500,2.42309512433445; 50000,2.43879512433445],
-          tabfal=[-50000,-2.44743549087484; -37500,-2.43173549087484; -25000,-2.29175406960198;
-              -12500,-2.02749122705627; -9500,-1.93424060373981; -9000,-1.91734557383536;
-              -8500,-1.90003831579647; -8000,-1.88228336311722; -7500,-1.86396184546015;
-              -7000,-1.84524857210249; -6500,-1.82591070525470; -6000,-1.80594439934052;
-              -5500,-1.78531310330034; -5000,-1.76382025520505; -4500,-1.74142910912243;
-              -4000,-1.71783221361736; -3500,-1.69280878752801; -3000,-1.66591530113576;
-              -2500,-1.63649294648485; -2000,-1.60339863123377; -1500,-1.56442149385622;
-              -1000,-1.51441561468259; -500,-1.43080809535224; -475,-1.42450289449529;
-              -450,-1.41732721660085; -425,-1.40951882234757; -400,-1.40118064526704;
-              -375,-1.39220914273277; -350,-1.38211113291766; -325,-1.37125742032855;
-              -300,-1.35917182037113; -275,-1.34411680370286; -250,-1.32861822862062;
-              -225,-1.30745835828352; -200,-1.28557369127376; -175,-1.25419814205060;
-              -150,-1.21937409523818; -125,-1.16769743255509; -100,-1.08621953798151;
-              -75,-0.949248973899088; -50,-0.463062524232745; -45,-0.241397022221927;
-              -40,-0.0917328024445698; -35,0.182881911670973; -30,0.647941622043669;
-              -25,0.925720611599761; -20,1.01589911772097; -15,1.06212781456762;
-              -10,1.09723124440593; -5,1.13156726933814; 0,1.15460822013300; 5,1.17506808994058;
-              10,1.19012140311265; 15,1.20695474596496; 20,1.22235157331926; 25,
-              1.23492992961726; 30,1.24500433228815; 35,1.25511140047050; 40,1.26642123811028;
-              45,1.27567122597037; 50,1.28254253926943; 75,1.31450423011738; 100,
-              1.33781959105884; 125,1.35535350494447; 150,1.37076038889320; 175,
-              1.38300521211089; 200,1.39317334290652; 225,1.40231271538781; 250,
-              1.41003370402153; 275,1.41775224948779; 300,1.42443612181079; 325,
-              1.43071011319246; 350,1.43632820821805; 375,1.44160298825063; 400,
-              1.44689685195180; 425,1.45157598310516; 450,1.45604404631093; 475,
-              1.46029335493483; 500,1.46434035987343; 1000,1.52527944546714; 1500,
-              1.56827087926856; 2000,1.60364207715609; 2500,1.63460389841854; 3000,
-              1.66261092660742; 3500,1.68850800352239; 4000,1.71272916087899; 4500,
-              1.73572148025338; 5000,1.75764646474993; 5500,1.77872746673938; 6000,
-              1.79900863540491; 6500,1.81866581587930; 7000,1.83769268690732; 7500,
-              1.85624654695152; 8000,1.87427340278025; 8500,1.89178891688000; 9000,
-              1.90886536500246; 9500,1.92560023719942; 12500,2.01885086051588; 25000,
-              2.28311370306159; 37500,2.42309512433445; 50000,2.43879512433445],
-          sigma=2.2e6);
-
-        annotation (Documentation(info="<html>
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisTableData/hysttd_M330-50A.png\">
-   </td>
-  </tr>
-</table>
-</html>"));
-      end M330_50A;
-
-      record M400_50A "M400-50A"
-        extends FluxTubes.Material.HysteresisTableData.BaseData(
-          tabris=[-50000,-2.40794008749097; -37500,-2.39224008749097; -25000,-2.24695058192848;
-              -12500,-1.97207157080350; -9500,-1.87499912679850; -9000,-1.85751518672007;
-              -8500,-1.83965523812239; -8000,-1.82141038807705; -7500,-1.80269741316036;
-              -7000,-1.78361027358886; -6500,-1.76397706310715; -6000,-1.74376646292382;
-              -5500,-1.72310546808403; -5000,-1.70181437219379; -4500,-1.67962462884578;
-              -4000,-1.65666284827733; -3500,-1.63264436534337; -3000,-1.60708993405725;
-              -2500,-1.57974973637101; -2000,-1.54982226707762; -1500,-1.51586253475425;
-              -1000,-1.47496092753935; -500,-1.41663981975470; -475,-1.41272678886742;
-              -450,-1.40867695906844; -425,-1.40429024210058; -400,-1.39949573135137;
-              -375,-1.39437411472418; -350,-1.38910109228470; -325,-1.38358638889354;
-              -300,-1.37741291943839; -275,-1.37055394225841; -250,-1.36313596477737;
-              -225,-1.35455952163501; -200,-1.34470907175791; -175,-1.33378230144229;
-              -150,-1.32070821907347; -125,-1.30469411228698; -100,-1.28463220674296;
-              -75,-1.25712368223457; -50,-1.22156402021633; -45,-1.21248835333625;
-              -40,-1.20398927138400; -35,-1.19366676583453; -30,-1.18308077897121;
-              -25,-1.17112000211898; -20,-1.15424024453449; -15,-1.13849009536025;
-              -10,-1.12200378482708; -5,-1.10250992067697; 0,-1.08424243844649;
-              5,-1.05584135449536; 10,-1.02126486868300; 15,-0.992421905049552;
-              20,-0.949405100423591; 25,-0.900754074748590; 30,-0.793043668212206;
-              35,-0.543461193341693; 40,0.0460983803994556; 45,0.349171417184043;
-              50,0.500051423262693; 75,0.858218702672487; 100,0.988821492542939;
-              125,1.07418126307667; 150,1.12775610877896; 175,1.16833527822034;
-              200,1.19966429488883; 225,1.22449543932453; 250,1.24530028024648;
-              275,1.26418294609521; 300,1.27970325326426; 325,1.29226375074143;
-              350,1.30381327176382; 375,1.31461362475715; 400,1.32412514622875;
-              425,1.33300046485911; 450,1.34137963352322; 475,1.34908136246852;
-              500,1.35559133448013; 1000,1.44068827636001; 1500,1.49232320632115;
-              2000,1.53261053126646; 2500,1.56686963341284; 3000,1.59719357713455;
-              3500,1.62461949559943; 4000,1.65018830452586; 4500,1.67439400887558;
-              5000,1.69730736756213; 5500,1.71941215481472; 6000,1.74068353487267;
-              6500,1.76130076608619; 7000,1.78127426070862; 7500,1.80062725888872;
-              8000,1.81956050551157; 8500,1.83806221770118; 9000,1.85616144832625;
-              9500,1.87384237012775; 12500,1.97091481413274; 25000,2.24579382525772;
-              37500,2.39108333082021; 50000,2.40678333082021],
-          tabfal=[-50000,-2.40794008749097; -37500,-2.39224008749097; -25000,-2.24695058192848;
-              -12500,-1.97207157080350; -9500,-1.87499912679850; -9000,-1.85723961648917;
-              -8500,-1.83914182012976; -8000,-1.82064286718470; -7500,-1.80170149544270;
-              -7000,-1.78229030140852; -6500,-1.76238978953953; -6000,-1.74186533334584;
-              -5500,-1.72064937133164; -5000,-1.69867319886329; -4500,-1.67570536641489;
-              -4000,-1.65154759695206; -3500,-1.62602751204391; -3000,-1.59846991740992;
-              -2500,-1.56817580922799; -2000,-1.53394382544710; -1500,-1.49351750990638;
-              -1000,-1.44179121964259; -500,-1.35699503821154; -475,-1.35058208948424;
-              -450,-1.34305096520136; -425,-1.33434484732302; -400,-1.32567786111080;
-              -375,-1.31566996645446; -350,-1.30487255910588; -325,-1.29319860879985;
-              -300,-1.28023272360678; -275,-1.26390126428613; -250,-1.24676054534940;
-              -225,-1.22561280869116; -200,-1.19976520976629; -175,-1.16838696849014;
-              -150,-1.12556294836344; -125,-1.06829053659527; -100,-0.985799775563185;
-              -75,-0.852111241109577; -50,-0.492720171584574; -45,-0.278242753704216;
-              -40,0.0448369570554025; -35,0.641381355833371; -30,0.802736389022337;
-              -25,0.893394884424712; -20,0.949121302392295; -15,1.00155835207574;
-              -10,1.03239600457521; -5,1.05524756193883; 0,1.08419795677726; 5,1.10137204522905;
-              10,1.12479679237370; 15,1.13871579138954; 20,1.15405008546833; 25,
-              1.16800772243013; 30,1.18098283835024; 35,1.19282831091812; 40,1.20269143661662;
-              45,1.21148630541073; 50,1.22169947272959; 75,1.25854635534815; 100,
-              1.28423656861203; 125,1.30451634362611; 150,1.32044675392559; 175,
-              1.33356822941784; 200,1.34416172543795; 225,1.35388748675014; 250,
-              1.36266379345288; 275,1.37005108590170; 300,1.37691263179040; 325,
-              1.38311998030807; 350,1.38871246553893; 375,1.39407316354554; 400,
-              1.39913287717800; 425,1.40385644364325; 450,1.40820401223748; 475,
-              1.41229579159378; 500,1.41636730911577; 1000,1.47444101764742; 1500,
-              1.51537103879942; 2000,1.54920274539220; 2500,1.57895514526599; 3000,
-              1.60622369280379; 3500,1.63168409169342; 4000,1.65582030634452; 4500,
-              1.67885056600531; 5000,1.70095243004908; 5500,1.72241606513783; 6000,
-              1.74315976223534; 6500,1.76320320694510; 7000,1.78274594002133; 7500,
-              1.80182103074219; 8000,1.82045219174860; 8500,1.83870653811386; 9000,
-              1.85653503322130; 9500,1.87395783314220; 12500,1.97103027714719; 25000,
-              2.24590928827217; 37500,2.39119879383466; 50000,2.40689879383466],
-          sigma=3.22e6);
-
-        annotation (Documentation(info="<html>
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisTableData/hysttd_M400-50A.png\">
-   </td>
-  </tr>
-</table>
-</html>"));
-      end M400_50A;
-
-      record M400_50AP "M400-50AP"
-        extends FluxTubes.Material.HysteresisTableData.BaseData(
-          tabris=[-50000,-2.46382892861845; -37500,-2.44812892861845; -25000,-2.30818994558873;
-              -12500,-2.04401197952928; -9500,-1.95079191174787; -9000,-1.93387674112452;
-              -8500,-1.91672556778064; -8000,-1.89896942464980; -7500,-1.88073461400595;
-              -7000,-1.86206758074805; -6500,-1.84279298755417; -6000,-1.82293917426668;
-              -5500,-1.80230388639417; -5000,-1.78099763229757; -4500,-1.75874869462130;
-              -4000,-1.73550951637937; -3500,-1.71090173903357; -3000,-1.68470473348043;
-              -2500,-1.65633183092179; -2000,-1.62508354107692; -1500,-1.58945673773091;
-              -1000,-1.54678762740518; -500,-1.48805055931781; -475,-1.48423891995731;
-              -450,-1.48004980187494; -425,-1.47566539435348; -400,-1.47112736749377;
-              -375,-1.46629117626267; -350,-1.46106365058826; -325,-1.45578439873425;
-              -300,-1.45024393347103; -275,-1.44384833074375; -250,-1.43686477876995;
-              -225,-1.42915277935868; -200,-1.42063394319262; -175,-1.41108689895730;
-              -150,-1.39962738080824; -125,-1.38553227888587; -100,-1.36815309444647;
-              -75,-1.34451261907668; -50,-1.31064672792780; -45,-1.30130000392603;
-              -40,-1.29011128031286; -35,-1.27641439332424; -30,-1.26334375372063;
-              -25,-1.25166624249455; -20,-1.23641244162183; -15,-1.22034808978838;
-              -10,-1.20576927906433; -5,-1.18337366296358; 0,-1.15820720032109;
-              5,-1.12319720329000; 10,-1.09595857510564; 15,-1.05606410752299; 20,
-              -0.999110118045015; 25,-0.888838803452849; 30,-0.579572416199649;
-              35,0.108724547956082; 40,0.497629081605811; 45,0.619843487025022;
-              50,0.710919795734406; 75,1.00699336611590; 100,1.11949200274764; 125,
-              1.19303802014454; 150,1.24146292713087; 175,1.27893709765235; 200,
-              1.30790216535830; 225,1.33049099545422; 250,1.34886614236863; 275,
-              1.36515185404256; 300,1.37866255521476; 325,1.39070623112655; 350,
-              1.40108019942174; 375,1.41015975780422; 400,1.41863013677997; 425,
-              1.42680652152224; 450,1.43405894041434; 475,1.44096910543117; 500,
-              1.44716608767129; 1000,1.52657859162748; 1500,1.57566132262307; 2000,
-              1.61442921237017; 2500,1.64765924917206; 3000,1.67728059650028; 3500,
-              1.70449246758517; 4000,1.72974728303406; 4500,1.75356276150791; 5000,
-              1.77613593000974; 5500,1.79734490172157; 6000,1.81785143984963; 6500,
-              1.83764169193727; 7000,1.85684560873870; 7500,1.87546284116314; 8000,
-              1.89361565580100; 8500,1.91130272210699; 9000,1.92850585042699; 9500,
-              1.94523522262764; 12500,2.03845529040904; 25000,2.30263325646849;
-              37500,2.44257223949821; 50000,2.45827223949821],
-          tabfal=[-50000,-2.46382892861845; -37500,-2.44812892861845; -25000,-2.30818994558873;
-              -12500,-2.04401197952928; -9500,-1.95079191174787; -9000,-1.93383868193463;
-              -8500,-1.91641714272642; -8000,-1.89859545198052; -7500,-1.88022305703523;
-              -7000,-1.86140480107545; -6500,-1.84194696861618; -6000,-1.82178502031352;
-              -5500,-1.80099882340133; -5000,-1.77933152536594; -4500,-1.75675721368131;
-              -4000,-1.73300740439535; -3500,-1.70779475482113; -3000,-1.68069079162634;
-              -2500,-1.65105957378560; -2000,-1.61796187192022; -1500,-1.57931567521232;
-              -1000,-1.53046463851206; -500,-1.45119364742972; -475,-1.44514068330733;
-              -450,-1.43819841365508; -425,-1.43082858336197; -400,-1.42333429622881;
-              -375,-1.41500193723060; -350,-1.40572943265705; -325,-1.39506609342774;
-              -300,-1.38381293060116; -275,-1.37034205983274; -250,-1.35502271722346;
-              -225,-1.33563207501628; -200,-1.31379388380889; -175,-1.28690380857075;
-              -150,-1.25062187633717; -125,-1.20172681221045; -100,-1.13058070927231;
-              -75,-1.01847079254535; -50,-0.773262273660970; -45,-0.670922877950458;
-              -40,-0.520873450464802; -35,-0.215347366687344; -30,0.233189343929989;
-              -25,0.824474360863061; -20,0.971400317810317; -15,1.03213316422303;
-              -10,1.07516463012753; -5,1.10780824092723; 0,1.14713548342183; 5,1.16795524606017;
-              10,1.19579823142800; 15,1.21532492908983; 20,1.23368599507119; 25,
-              1.24744497272300; 30,1.26055274055566; 35,1.27386822207864; 40,1.28475215847344;
-              45,1.29572380774099; 50,1.30298288864754; 75,1.33896606719870; 100,
-              1.36309730594176; 125,1.38096649430808; 150,1.39488378292637; 175,
-              1.40671263362037; 200,1.41681797855726; 225,1.42518599056065; 250,
-              1.43272842101261; 275,1.43951928933170; 300,1.44587724763213; 325,
-              1.45187209472306; 350,1.45721096962617; 375,1.46226908169060; 400,
-              1.46714904797764; 425,1.47155977424238; 450,1.47587033754042; 475,
-              1.48001915913557; 500,1.48395824378596; 1000,1.54292152451423; 1500,
-              1.58537041880632; 2000,1.62086780535223; 2500,1.65195517411888; 3000,
-              1.68019216457496; 3500,1.70625619278504; 4000,1.73080495757818; 4500,
-              1.75401239418427; 5000,1.77613593000974; 5500,1.79734490172157; 6000,
-              1.81785143984963; 6500,1.83764169193727; 7000,1.85684560873870; 7500,
-              1.87546284116314; 8000,1.89361565580100; 8500,1.91130272210699; 9000,
-              1.92850585042699; 9500,1.94523522262764; 12500,2.03845529040904; 25000,
-              2.30263325646849; 37500,2.44257223949821; 50000,2.45827223949821],
-          sigma=2.22e6);
-
-        annotation (Documentation(info="<html>
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisTableData/hysttd_M400-50AP.png\">
-   </td>
-  </tr>
-</table>
-</html>"));
-      end M400_50AP;
-
-      record M800_65A "M800-65A"
-        extends FluxTubes.Material.HysteresisTableData.BaseData(
-          tabris=[-50000,-2.41999852648723; -37500,-2.40429852648723; -25000,-2.27880094925962;
-              -12500,-2.04350579480440; -9500,-1.96068353920052; -9000,-1.94568995233264;
-              -8500,-1.93041822970326; -8000,-1.91475949701547; -7500,-1.89874433390909;
-              -7000,-1.88236828095776; -6500,-1.86537308304654; -6000,-1.84783939049721;
-              -5500,-1.82981032196217; -5000,-1.81107184740532; -4500,-1.79159897726765;
-              -4000,-1.77123035482398; -3500,-1.74979929331988; -3000,-1.72692693859863;
-              -2500,-1.70207572583859; -2000,-1.67452174917622; -1500,-1.64239094777668;
-              -1000,-1.60247237131668; -500,-1.54533600718972; -475,-1.54168227527625;
-              -450,-1.53757207272177; -425,-1.53354365522856; -400,-1.52930457910108;
-              -375,-1.52501703732544; -350,-1.52047052595297; -325,-1.51534762021198;
-              -300,-1.50988805208212; -275,-1.50448604508862; -250,-1.49864942593720;
-              -225,-1.49267327153294; -200,-1.48607902904147; -175,-1.47826700048845;
-              -150,-1.47049749975416; -125,-1.46165991590660; -100,-1.45073713730738;
-              -75,-1.43953712623273; -50,-1.42606350889752; -45,-1.42306059615738;
-              -40,-1.42003788116232; -35,-1.41677039682308; -30,-1.41311031012442;
-              -25,-1.40937572039118; -20,-1.40539518874169; -15,-1.40139646331311;
-              -10,-1.39733567044656; -5,-1.39316537981227; 0,-1.38859559387787;
-              5,-1.38393180627993; 10,-1.37910270072745; 15,-1.37303527101498; 20,
-              -1.36647146416808; 25,-1.36003055780954; 30,-1.35246976780151; 35,
-              -1.34480250683144; 40,-1.33661841921041; 45,-1.32660958220509; 50,
-              -1.31553366281474; 75,-1.20910700118601; 100,0.532882913959500; 125,
-              1.02662015074423; 150,1.14103374810766; 175,1.21035479681112; 200,
-              1.26117867073488; 225,1.29990005326361; 250,1.32928682416420; 275,
-              1.35349589983733; 300,1.37497864892124; 325,1.39154723105790; 350,
-              1.40623400788508; 375,1.41962698015960; 400,1.43092716185703; 425,
-              1.44180550696708; 450,1.45154225103006; 475,1.46045094827107; 500,
-              1.46827716942789; 1000,1.56502686789323; 1500,1.61813266260293; 2000,
-              1.65691785176050; 2500,1.68862359484650; 3000,1.71602291200781; 3500,
-              1.74076601755817; 4000,1.76360452982075; 4500,1.78385282919978; 5000,
-              1.80316458712648; 5500,1.82176933161498; 6000,1.83977798278110; 6500,
-              1.85715410433795; 7000,1.87401121805731; 7500,1.89035061534208; 8000,
-              1.90631333368602; 8500,1.92193342101337; 9000,1.93701667085534; 9500,
-              1.95187443686403; 12500,2.03469669246791; 25000,2.26999184692313;
-              37500,2.39548942415074; 50000,2.41118942415074],
-          tabfal=[-50000,-2.41999852648723; -37500,-2.40429852648723; -25000,-2.27880094925962;
-              -12500,-2.04350579480440; -9500,-1.96068353920052; -9000,-1.94559764965089;
-              -8500,-1.93012471087006; -8000,-1.91431436677689; -7500,-1.89804454750764;
-              -7000,-1.88136056469418; -6500,-1.86414170412796; -6000,-1.84629637075897;
-              -5500,-1.82783197926636; -5000,-1.80860853371515; -4500,-1.78849721730208;
-              -4000,-1.76727398124316; -3500,-1.74455485772303; -3000,-1.71995764003778;
-              -2500,-1.69263734912522; -2000,-1.66110452490584; -1500,-1.62250111260705;
-              -1000,-1.56951283599084; -500,-1.47373308898170; -475,-1.46574359498977;
-              -450,-1.45725321084224; -425,-1.44792419910822; -400,-1.43731948098116;
-              -375,-1.42607124814977; -350,-1.41341880892223; -325,-1.39822468414060;
-              -300,-1.38205239395401; -275,-1.36124323845596; -250,-1.33769536106313;
-              -225,-1.30626151822381; -200,-1.27091203465938; -175,-1.22139379835218;
-              -150,-1.15427523748093; -125,-1.02992248377946; -100,-0.608768490711078;
-              -75,1.18882367706862; -50,1.30642658694914; -45,1.31694528126388;
-              -40,1.32814566191774; -35,1.33514513339720; -30,1.34371244491101;
-              -25,1.35168731983670; -20,1.35843175053249; -15,1.36469564105692;
-              -10,1.37097132070720; -5,1.37590996027985; 0,1.38027193786232; 5,1.38486560748417;
-              10,1.38948101768076; 15,1.39350772834206; 20,1.39753051177479; 25,
-              1.40117224620763; 30,1.40481398064048; 35,1.40851870679405; 40,1.41223590538195;
-              45,1.41547339350741; 50,1.41852318447409; 75,1.43211067244877; 100,
-              1.44427442904375; 125,1.45435264246972; 150,1.46359132926859; 175,
-              1.47161026636863; 200,1.47874657754524; 225,1.48569764333275; 250,
-              1.49197145197213; 275,1.49786150413129; 300,1.50347448393359; 325,
-              1.50857087126280; 350,1.51349777185305; 375,1.51810575247842; 400,
-              1.52254893507848; 425,1.52673061275018; 450,1.53104072452336; 475,
-              1.53492503963004; 500,1.53857480545245; 1000,1.59579332675057; 1500,
-              1.63555234030539; 2000,1.66746001465413; 2500,1.69491356421077; 3000,
-              1.71953285083828; 3500,1.74228408813402; 4000,1.76364065532799; 4500,
-              1.78385282919978; 5000,1.80316458712648; 5500,1.82176933161498; 6000,
-              1.83977798278110; 6500,1.85715410433795; 7000,1.87401121805731; 7500,
-              1.89035061534208; 8000,1.90631333368602; 8500,1.92193342101337; 9000,
-              1.93701667085534; 9500,1.95187443686403; 12500,2.03469669246791; 25000,
-              2.26999184692313; 37500,2.39548942415074; 50000,2.41118942415074],
-          sigma=3.27e6);
-
-        annotation (Documentation(info="<html>
-<table cellspacing=\"0\" cellpadding=\"2\" border=\"0\">
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisTableData/hysttd_M800-65A.png\">
-   </td>
-  </tr>
-</table>
-</html>"));
-      end M800_65A;
-      annotation (Documentation(info="<html>
-<p>
-Material table data for the <a href=\"modelica://Modelica.Magnetic.FluxTubes.Shapes.HysteresisAndMagnets.GenericHystTellinenTable\">GenericHystTellinenTable</a> flux tube element. The records contain two data tables <code>tabris</code> and <code>tabfal</code> describing the rising and the falling branch of the hysteresis envelope curve of the corresponding material. The first colum is the magnetic field strength H and has to be strictly monotonically increasing. The second collumn contains the corresponding values of the magnetic fluxdensity B. Both curves may not intersect each other.
-</p>
-
-<p>
-Fig. 1 and Fig. 2 show library entries based on own measurements of several steel sheet qualities in two different ranges of the magnetic field strength. For the measurements a 25 cm Epstein frame was used according to DIN EN 60404-2.
-</p>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-<caption align=\"bottom\"><b>Fig. 1:</b> Static hysteresis envelope curves of several steel sheets</caption>
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisTableData/StaticLoops01.png\">
-    </td>
-  </tr>
-</table>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-<caption align=\"bottom\"><b>Fig. 2:</b> Static hysteresis envelope curves of several steel sheets</caption>
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisTableData/StaticLoops02.png\">
-    </td>
-  </tr>
-</table>
-
-<p>
-Fig. 3 shows the static hysteresis loop library entries for soft magnetic cobalt-iron-alloys which were extracted from <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Literature\">[Va01]</a>.
-</p>
-
-<table border=\"0\" cellspacing=\"0\" cellpadding=\"2\">
-<caption align=\"bottom\"><b>Fig. 3:</b> Soft magnetic cobalt iron library entries <a href=\"modelica://Modelica.Magnetic.FluxTubes.UsersGuide.Literature\">[Va01]</a></caption>
-  <tr>
-    <td>
-      <img src=\"modelica://Modelica/Resources/Images/Magnetic/FluxTubes/Material/HysteresisTableData/StaticLoops03.png\">
-    </td>
-  </tr>
-</table>
-
-</html>
-
-"));
-    end HysteresisTableData;
     annotation (Documentation(info="<html>
 </html>"));
   end Material;
Index: Modelica/Magnetic/package.order
===================================================================
--- Modelica/Magnetic/package.order	(revision 9483)
+++ Modelica/Magnetic/package.order	(working copy)
@@ -1,3 +1,2 @@
 FluxTubes
 FundamentalWave
-QuasiStatic
Index: Modelica/Math/FastFourierTransform.mo
===================================================================
--- Modelica/Math/FastFourierTransform.mo	(revision 9483)
+++ Modelica/Math/FastFourierTransform.mo	(working copy)
@@ -1,852 +0,0 @@
-within Modelica.Math;
-package FastFourierTransform
-  "Library of functions for the Fast Fourier Transform (FFT)"
-  extends Modelica.Icons.Package;
-
-  package Examples
-    "Examples demonstrating the usage of the Math.FastFourierTransform functions"
-   extends Modelica.Icons.ExamplesPackage;
-
-    model RealFFT1
-      "Example demonstrating the use of an FFT calculation during simulation (and storing both amplitudes and phases on file)"
-      import Modelica.Constants.pi;
-      extends Modelica.Icons.Example;
-      parameter Modelica.SIunits.Frequency f_max = 4
-        "Maximum frequency of interest";
-      parameter Modelica.SIunits.Frequency f_resolution = 0.2
-        "Frequency resolution";
-      parameter Modelica.SIunits.Frequency f1 = 2 "Frequency of sine";
-      parameter Modelica.SIunits.Frequency f2 = 3 "Frequency of cosine";
-      parameter String FFT_resultFileName = "RealFFT1_resultFFT.mat"
-        "File where FFT will be stored as [f,A,Phi], with f in {Hz] and A the amplitudes and Phi the phases in [rad]";
-      final parameter Integer nfi = max(1,min(integer(ceil(f_max/f_resolution))+1,nf))
-        "Number of frequency points of the interested frequency range (only up to f_max)";
-      final parameter Modelica.SIunits.Frequency fi[nfi](each fixed=false)
-        "FFT frequencies of interested frequency points";
-      Real y(final start=0, final fixed=true)
-        "Signal from which FFT is computed";
-      final output Real Ai[nfi](each start=0, each fixed=true)
-        "FFT amplitudes of interested frequency points";
-      final output Real Phii[nfi](each start=0, each fixed=true)
-        "FFT phases of interested frequency points";
-      output Integer info(final start=0, final fixed=true)
-        "Information flag from FFT computation; = 0: FFT successfully computed";
-
-    protected
-      parameter Integer ns = realFFTsamplePoints(f_max, f_resolution, f_max_factor=5);
-      parameter Modelica.SIunits.Frequency f_max_FFT = f_resolution*div(ns, 2)
-        "Maximum frequency used by FFT";
-      parameter Integer nf = div(ns,2) + 1 "Number of frequency points";
-      parameter Modelica.SIunits.Time Ts = 1/(2*f_max_FFT) "Sample period";
-      parameter Modelica.SIunits.Time T = (ns - 1)*Ts
-        "Simulation time for one FFT calculation";
-
-      Integer iTick(start=0, fixed=true);
-      Real y_buf[ns](each start=0, each fixed=true);
-    initial equation
-      for i in 1:nfi loop
-         fi[i] = (i-1)*f_resolution;
-      end for;
-
-    algorithm
-      when sample(0,Ts) then
-         iTick :=pre(iTick) + 1;
-         y := 5 + 3*sin(2*pi*f1*time) + 1.5*cos(2*pi*f2*time);
-         if iTick >= 1 and iTick <= ns then
-            y_buf[iTick] := y;
-         end if;
-
-         if iTick == ns then
-           (info,Ai,Phii) := realFFT(y_buf, nfi);
-           Modelica.Math.FastFourierTransform.realFFTwriteToFile(time,FFT_resultFileName,f_max,Ai,Phii);
-         end if;
-      end when;
-
-      annotation (experiment(StopTime=6),
-        Documentation(revisions="<html>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> Nov. 29, 2015 </td>
-    <td valign=\"top\">
-     Initial version implemented by
-     Martin R. Kuhn and Martin Otter
-     (<a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>.</td></tr>
-</table>
-</html>",
-      info="<html>
-<p>
-In this example the signal y
-</p>
-
-<pre>
-   y = 5 + 3*sin(2*pi*f1) + 1.5*cos(2*pi*f2)
-</pre>
-
-<p>
-is sampled and an FFT is computed from the sampled signal (default: f1 = 2 Hz, f2 = 3 Hz).
-In the public part the FFT is stored up to f_max (internally in the protected part the FFT is stored up to 5*f_max).
-With the default values for f_max (= 4 Hz) and f_resolution (= 0.2 Hz), the following results are achieved:
-</p>
-
-<pre>   fi[0]  = 0,  Ai[0]  = 5;   // mean value of signal
-   fi[11] = 2,  Ai[11] = 3;   // frequency/amplitude of sine
-   fi[16] = 3,  Ai[16] = 1.5; // frequency/amplitude of cosine
-</pre>
-
-<p>
-A plot of the resulting FFT is shown in the next image:
-</p>
-
-<p><blockquote>
-<img src=\"modelica://Modelica/Resources/Images/Math/FFT1.png\">
-</blockquote>
-</p>
-
-<p>
-Note, phases of small amplitudes (= smaller as 0.0001*maximalAmplitude) are explicitly set to zero, since the corresponding
-\"phase\" is numerical noise (and would just be confusing).
-Furthermore, note that the FFT phases are with respect to a cos(..) signal.
-</p>
-</html>"));
-    end RealFFT1;
-
-    model RealFFT2
-      "Example demonstrating the use of an FFT calculation during simulation (and storing only amplitudes on file)"
-      import Modelica.Constants.pi;
-      extends Modelica.Icons.Example;
-      parameter Modelica.SIunits.Frequency f_max = 4
-        "Maximum frequency of interest";
-      parameter Modelica.SIunits.Frequency f_resolution = 0.2
-        "Frequency resolution";
-      parameter Modelica.SIunits.Frequency f1 = 2 "Frequency of sine";
-      parameter Modelica.SIunits.Frequency f2 = 3 "Frequency of cosine";
-      parameter String FFT_resultFileName = "RealFFT1_resultFFT.mat"
-        "File where FFT will be stored as [f,A,Phi], with f in {Hz] and A the amplitues and Phi the phases in [rad]";
-      final parameter Integer nfi = max(1,min(integer(ceil(f_max/f_resolution))+1,nf))
-        "Number of frequency points of the interested frequency range (only up to f_max)";
-      final parameter Modelica.SIunits.Frequency fi[nfi](each fixed=false)
-        "FFT frequencies of interested frequency points";
-      Real y(final start=0, final fixed=true)
-        "Signal from which FFT is computed";
-      final output Real Ai[nfi](each start=0, each fixed=true)
-        "FFT amplitudes of interested frequency points";
-      output Integer info(final start=0, final fixed=true)
-        "Information flag from FFT computation; = 0: FFT successfully computed";
-
-    protected
-      parameter Integer ns = realFFTsamplePoints(f_max, f_resolution, f_max_factor=5);
-      parameter Modelica.SIunits.Frequency f_max_FFT = f_resolution*div(ns, 2)
-        "Maximum frequency used by FFT";
-      parameter Integer nf = div(ns,2) + 1 "Number of frequency points";
-      parameter Modelica.SIunits.Time Ts = 1/(2*f_max_FFT) "Sample period";
-      parameter Modelica.SIunits.Time T = (ns - 1)*Ts
-        "Simulation time for one FFT calculation";
-
-      Integer iTick(start=0, fixed=true);
-      Real y_buf[ns](each start=0, each fixed=true);
-    initial equation
-      for i in 1:nfi loop
-         fi[i] = (i-1)*f_resolution;
-      end for;
-
-    algorithm
-      when sample(0,Ts) then
-         iTick :=pre(iTick) + 1;
-         y := 5 + 3*sin(2*pi*f1*time) + 1.5*cos(2*pi*f2*time);
-         if iTick >= 1 and iTick <= ns then
-            y_buf[iTick] := y;
-         end if;
-
-         if iTick == ns then
-           (info,Ai) := realFFT(y_buf, nfi);
-           Modelica.Math.FastFourierTransform.realFFTwriteToFile(time,FFT_resultFileName,f_max,Ai);
-         end if;
-      end when;
-
-      annotation (experiment(StopTime=6),
-        Documentation(revisions="<html>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> Nov. 29, 2015 </td>
-    <td valign=\"top\">
-     Initial version implemented by
-     Martin R. Kuhn and Martin Otter
-     (<a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>.</td></tr>
-</table>
-</html>",
-      info="<html>
-<p>
-This is the same example as <a href=\"Modelica.Math.FastFourierTransform.Examples.RealFFT1\">Examples.RealFFT1</a>
-with the only difference that just the amplitudes of the FFT are stored on file (but not the phases).
-</p>
-</html>"));
-    end RealFFT2;
-    annotation (Documentation(revisions="<html>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> Nov. 29, 2015 </td>
-    <td valign=\"top\">
-     Initial version implemented by
-     Martin R. Kuhn and Martin Otter
-     (<a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>.</td></tr>
-</table>
-</html>"));
-  end Examples;
-
-  function realFFTinfo
-    "Print information about real FFT for given f_max and f_resolution"
-    extends Modelica.Icons.Function;
-    import Modelica.Utilities.Streams.print;
-    input Modelica.SIunits.Frequency f_max "Maximum frequency";
-    input Modelica.SIunits.Frequency f_resolution "Frequency resolution";
-    input Integer f_max_factor(min=1)=5
-      "Maximum FFT frequency >= f_max*f_max_factor (sample frequency = 2*Maximum FFT Frequency)";
-  protected
-    Integer ns = realFFTsamplePoints(f_max, f_resolution, f_max_factor);
-    Integer nf = div(ns,2)+1;
-    Modelica.SIunits.Frequency f_max_used = f_resolution*div(ns, 2);
-    Modelica.SIunits.Frequency fs = f_max_used*2;
-    Modelica.SIunits.Time Ts= 1/(2*f_max_used) "Sample period";
-    Modelica.SIunits.Time T=(ns - 1)*Ts "Simulation time for FFT calculation";
-    Integer e2, e3, e5;
-    Boolean success;
-  algorithm
-    (success,e2,e3,e5) :=Internal.prime235Factorization(ns);
-
-    print("\n... Real FFT properties");
-    print(" Desired:");
-    print("    f_max         = " + String(f_max) + " Hz");
-    print("    f_resolution  = " + String(f_resolution) + " Hz");
-    print("    f_max_factor  = " + String(f_max_factor));
-    print(" Calculated:");
-    print("    Number of sample points    = " + String(ns) + " (= 2^"+String(e2)+"*3^"+String(e3)+"*5^"+String(e5)+")");
-    print("    Sampling frequency         = " + String(fs) + " Hz (= " + String(f_resolution) + "*" + String(ns) + ")");
-    print("    Sampling period            = " + String(Ts) + " s (= " + "1/" + String(fs) + ")");
-    print("    Maximum FFT frequency      = " + String(f_max_used) + " Hz (= " + String(f_resolution) + "*" + String(ns) + "/2; "
-                                                                   + "f={0," + String(f_resolution) + ","
-                                                                   + String(2*f_resolution) + ",...,"
-                                                                   + String(f_max_used) + "} Hz)");
-    print("    Number of frequency points = " + String(nf) + " (= " + String(ns) + "/2+1)");
-    print("    Simulation time            = " + String(T) + " s");
-    annotation (Documentation(revisions="<html>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> Nov. 29, 2015 </td>
-    <td valign=\"top\">
-     Initial version implemented by
-     Martin R. Kuhn and Martin Otter
-     (<a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>.</td></tr>
-</table>
-</html>",
-        info="<html>
-<h4>Syntax</h4>
-
-<blockquote><p>
-<b>realFFTinfo</b>(f_max, f_resolution, f_max_factor=5);
-</p></blockquote>
-
-<h4>Description</h4>
-<p>
-From the maximum interested frequency f_max (in [Hz]) and the frequency resolution f_resolution (in [Hz]) the
-function computes the key FFT data as used by the FFT blocks and prints them to the output window.
-</p>
-
-<h4>Example</h4>
-<blockquote>
-realFFTinfo(f_max=170, f_resolution=0.3)
-</blockquote>
-
-<p>
-results in the following output:
-</p>
-
-<pre>
-... Real FFT properties
- Desired:
-    f_max         = 170 Hz
-    f_resolution  = 0.3 Hz
-    f_max_factor  = 5
- Calculated:
-    Number of sample points    = 5760 (= 2^7*3^2*5^1)
-    Sampling frequency         = 1728 Hz (= 0.3*5760)
-    Sampling period            = 0.000578704 s (= 1/1728)
-    Maximum FFT frequency      = 864 Hz (= 0.3*5760/2; f={0,0.3,0.6,...,864} Hz)
-    Number of frequency points = 2881 (= 5760/2+1)
-    Simulation time            = 3.33275 s
-</pre>
-
-<h4>See also</h4>
-<p>
-<a href=\"modelica://Modelica.Math.FastFourierTransform.realFFTsamplePoints\">realFFTsamplePoints</a>,
-<a href=\"modelica://Modelica.Math.FastFourierTransform.realFFT\">realFFT</a>,
-<a href=\"modelica://Modelica.Math.FastFourierTransform.realFFTwriteToFile\">realFFTwriteToFile</a>
-</p>
-</html>"));
-  end realFFTinfo;
-
-  function realFFTsamplePoints "Return number of sample points for a real FFT"
-     extends Modelica.Icons.Function;
-     input Modelica.SIunits.Frequency f_max "Maximum frequency of interest";
-     input Modelica.SIunits.Frequency f_resolution "Frequency resolution";
-     input Integer f_max_factor(min=1)=5
-      "Maximum FFT frequency >= f_max*f_max_factor (sample frequency = 2*Maximum FFT Frequency)";
-     output Integer ns
-      "Number of sample points that can be expressed as ns = 2^i*3^j*5^k and ns is even";
-  protected
-     Integer ns1;
-  algorithm
-     // Check input arguments
-     assert(f_resolution > 0, "f_resolution > 0 required");
-     assert(f_max > f_resolution, "f_max > f_resolution required");
-
-     // Compute best ns according to f_max*f_max_factor and f_resolution = roundAgainstInfinity(2*f_max*f_max_factor/f_resolution)
-     ns1 :=2*integer(ceil(f_max*f_max_factor/f_resolution));
-
-     // If necessary, enlarge ns1 so that it is even and can be expressed as 2^i*3^j*5^k
-     ns :=if mod(ns1, 2) == 0 then ns1 else ns1 + 1;
-
-     while true loop
-        ns1 :=ns;
-        while mod(ns1,2) == 0 loop ns1 :=div(ns1, 2);end while;
-        while mod(ns1,3) == 0 loop ns1 :=div(ns1, 3);end while;
-        while mod(ns1,5) == 0 loop ns1 :=div(ns1, 5);end while;
-
-        if ns1 <= 1 then
-           break;
-        end if;
-        ns :=ns + 2;
-     end while;
-    annotation (Documentation(revisions="<html>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> Nov. 29, 2015 </td>
-    <td valign=\"top\">
-     Initial version implemented by
-     Martin R. Kuhn and Martin Otter
-     (<a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>.</td></tr>
-</table>
-</html>",
-      info="<html>
-<h4>Syntax</h4>
-
-<blockquote><p>
-ns = <b>realFFTsamplePoints</b>(f_max, f_resolution, f_max_factor=5);
-</p></blockquote>
-
-<h4>Description</h4>
-<p>
-From the maximum interested frequency f_max (in [Hz]) and the frequency resolution f_resolution (in [Hz]) the
-function computes the number of sample points ns that is as small as possible and fulfills the following criteria:
-</p>
-
-<ul>
-<li> Maximum FFT frequency &ge; f_max_factor*f_max (= the largest frequency value of the frequency vector).</li>
-<li> Frequency axis resolution is f_resolution.</li>
-<li> The number of sample points is expressed as 2^a*3^b*5^c
-     (and a,b,c are appropriate Integers).</li>
-<li> The number of sample points is even.</li>
-</ul>
-
-<p>
-Note, in the original publication about the efficient computation of FFT (Cooley and Tukey, 1965),
-the number of sample points must be 2^a. However, all newer FFT algorithms do not have
-this strong restriction and especially not the open source software
-<a href=\"http://sourceforge.net/projects/kissfft/\">KissFFT</a> from Mark Borgerding
-used in this function
-</p>
-
-<h4>References</h4>
-
-<dl>
-<dt>Mark Borgerding (2010):</dt>
-<dd> <b>KissFFT, version 1.3.0</b>.
-     <a href=\"http://sourceforge.net/projects/kissfft/\">http://sourceforge.net/projects/kissfft/</a>.
-     <br>&nbsp;
-     </dd>
-
-<dt>James W. Cooley, John W. Tukey (1965):</dt>
-<dd> <b>An algorithm for the machine calculation of complex Fourier series</b>.
-     Math. Comput. 19: 297-301. doi:10.2307/2003354.
-     <br>&nbsp;
-     </dd>
-
-<dt>Martin R. Kuhn, Martin Otter, Tim Giese (2015):</dt>
-<dd> <b>Model Based Specifications in Aircraft Systems Design</b>.
-     Modelica 2015 Conference, Versailles, France,
-     pp. 491-500, Sept.23-25, 2015.
-     Download from:
-     <a href=\"http://www.ep.liu.se/ecp/118/053/ecp15118491.pdf\">http://www.ep.liu.se/ecp/118/053/ecp15118491.pdf</a>
-     </dd>
-</dl>
-
-
-<h4>Example</h4>
-<blockquote>
-ns = realFFTinfo(f_max=170, f_resolution=0.3)
-</blockquote>
-
-<p>
-results in the following output:
-</p>
-
-<pre>   ns = 5760
-</pre>
-
-<h4>See also</h4>
-<p>
-<a href=\"modelica://Modelica.Math.FastFourierTransform.realFFTinfo\">realFFTinfo</a>,
-<a href=\"modelica://Modelica.Math.FastFourierTransform.realFFT\">realFFT</a>,
-<a href=\"modelica://Modelica.Math.FastFourierTransform.realFFTwriteToFile\">realFFTwriteToFile</a>
-</p>
-</html>"));
-  end realFFTsamplePoints;
-
-  function realFFT "Return amplitude and phase vectors for a real FFT"
-    extends Modelica.Icons.Function;
-    input Real  u[:]
-      "Signal for which FFT shall be computed (size(nu,1) MUST be EVEN and should be an integer multiple of 2,3,5, that is size(nu,1) = 2^a*3^b*5^c, with a,b,c Integer >= 0)";
-    input Integer nfi
-      "Number of frequency points that shall be returned in amplitudes and phases (typically: nfi = max(1,min(integer(ceil(f_max/f_resolution))+1,nf))); the maximal possible value is nfi=div(size(u,1),2)+1)";
-    output Integer info
-      "Information flag (0: FFT computed, 1: nu is not even, 3: another error)";
-    output Real amplitudes[nfi] "Amplitudes of FFT";
-    output Real phases[nfi] "Phases of FFT in [deg]";
-  protected
-    Integer nu = size(u,1);
-    Integer nf = div(size(u,1),2)+1;
-    Real u_DC;
-    Real u2[size(u,1)];
-    Real A[div(size(u,1),2)+1];
-    Real Phi[div(size(u,1),2)+1];
-    Real Aeps;
-  algorithm
-    assert(nfi > 0 and nfi <= div(size(u,1),2)+1, "Argument nfi is out of range");
-
-    u_DC :=sum(u)/nu;
-    u2   :=u - fill(u_DC, nu);
-    (info, A, Phi) :=Internal.rawRealFFT(u2);
-    amplitudes :=A[1:nfi];
-    phases :=Modelica.SIunits.Conversions.to_deg(Phi[1:nfi]);
-    Aeps :=0.0001*max(amplitudes);
-    amplitudes[1] :=u_DC;
-    phases[1] := 0.0;
-
-    // Set phases[i] explicitly to zero, if the correspondion amplitude is < Aeps (= 0.0001*Amax; = numerical noise).
-
-    for i in 2:nfi loop
-       if amplitudes[i] < Aeps then
-          phases[i] :=0.0;
-       end if;
-    end for;
-
-  annotation (Documentation(revisions="<html>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> Nov. 29, 2015 </td>
-    <td valign=\"top\">
-     Initial version implemented by
-     Martin R. Kuhn and Martin Otter
-     (<a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>.</td></tr>
-</table>
-</html>",
-      info="<html>
-<h4>Syntax</h4>
-
-<blockquote><p>
-(info, amplitudes, phases) = <b>realFFT</b>(u);
-</p></blockquote>
-
-<h4>Description</h4>
-<p>
-The input argument of this function is a Real vector u. size(u,1) <b>must</b> be even. An efficient computation
-is performed, if size(u,1) = 2^a*3^b*5^c (a,b,c Integer &ge; 0).
-An appropriate length of vector u can be computed with function
-<a href=\"modelica://Modelica.Math.FastFourierTransform.realFFTsamplePoints\">realFFTsamplePoints</a>.
-Function <b>realFFT</b> computes a real FFT (Fast Fourier Transform) of u and returns the result
-in form of the outputs amplitudes and phases. Argument info provides additional information:
-</p>
-
-<pre>   info = 0: Successful FFT computation.
-   info = 1: size(u,1) is not even.
-   info = 3: Another error.
-</pre>
-
-<p>
-Note, in the original publication about the efficient computation of FFT (Cooley and Tukey, 1965),
-the number of sample points must be 2^a. However, all newer FFT algorithms do not have
-this strong restriction and especially not the open source software
-<a href=\"http://sourceforge.net/projects/kissfft/\">KissFFT</a> from Mark Borgerding
-used in this function.
-</p>
-
-<p>
-The function returns the FFT such that amplitudes[1] is the mean value of u (= sum(u)/size(u,1)), and
-amplitudes[i] is the amplitude of a sine-function at the i-th frequency.
-</p>
-
-<h4>References</h4>
-
-<dl>
-<dt>Mark Borgerding (2010):</dt>
-<dd> <b>KissFFT, version 1.3.0</b>.
-     <a href=\"http://sourceforge.net/projects/kissfft/\">http://sourceforge.net/projects/kissfft/</a>.
-     <br>&nbsp;
-     </dd>
-
-<dt>James W. Cooley, John W. Tukey (1965):</dt>
-<dd> <b>An algorithm for the machine calculation of complex Fourier series</b>.
-     Math. Comput. 19: 297-301. doi:10.2307/2003354.
-     <br>&nbsp;
-     </dd>
-
-<dt>Martin R. Kuhn, Martin Otter, Tim Giese (2015):</dt>
-<dd> <b>Model Based Specifications in Aircraft Systems Design</b>.
-     Modelica 2015 Conference, Versailles, France,
-     pp. 491-500, Sept.23-25, 2015.
-     Download from:
-     <a href=\"http://www.ep.liu.se/ecp/118/053/ecp15118491.pdf\">http://www.ep.liu.se/ecp/118/053/ecp15118491.pdf</a>
-     </dd>
-</dl>
-
-
-<h4>Example</h4>
-<blockquote>
-(info, A) = realFFT({0,0.1,0.2,0.4,0.5, 0.6})
-</blockquote>
-
-<p>
-See also <a href=\"modelica://Modelica.Math.FastFourierTransform.Examples.RealFFT1\">Examples.RealFFT1</a>
-which is a complete example where an FFT is computed during simulation and stored on file.
-</p>
-
-<h4>See also</h4>
-<p>
-<a href=\"modelica://Modelica.Math.FastFourierTransform.realFFTinfo\">realFFTinfo</a>,
-<a href=\"modelica://Modelica.Math.FastFourierTransform.realFFTsamplePoints\">realFFTsamplePoints</a>,
-<a href=\"modelica://Modelica.Math.FastFourierTransform.realFFTwriteToFile\">realFFTwriteToFile</a>
-</p>
-</html>"));
-  end realFFT;
-
-  function realFFTwriteToFile "Write real FFT computation to file"
-    extends Modelica.Icons.Function;
-     import Modelica.Utilities.Streams.print;
-     import Modelica.SIunits.Conversions.to_deg;
-     import Modelica.Utilities.Streams.writeRealMatrix;
-     input Real t_computed "Time instant at which the FFT was computed";
-     input String fileName
-      "File where FFT shall be stored (if it exists, it is deleted and then re-created)";
-     input Modelica.SIunits.Frequency f_max "Maximum frequency";
-     input Real amplitudes[:] "Amplitudes of FFT";
-     input Real phases[:] = fill(0.0,0)
-      "Phases of FFT (either provide no argument, or a vector with the same length as amplitudes)";
-     input String format = "4"
-      "MATLAB MAT-file version: \"4\" -> v4, \"6\" -> v6, \"7\" -> v7"
-       annotation(choices(choice="4" "Matlat MAT v4",
-                          choice="6" "Matlat MAT v6",
-                          choice="7" "Matlat MAT v7"));
-    output Boolean success "true if successful";
-  protected
-     Integer nA = size(amplitudes,1);
-     Real fA[3*size(amplitudes,1),if size(phases,1)==0 then 2 else 3];
-     Real f;
-  algorithm
-     assert(size(phases,1) == 0 or size(phases,1) == size(amplitudes,1), "Input vector phases has the wrong size");
-
-     // Remove file, if it exists
-     Modelica.Utilities.Files.removeFile(fileName);
-
-     // Construct output matrix
-     if size(phases,1) == size(amplitudes,1) then
-        for i in 1:nA loop
-           f := f_max*(i-1)/(nA-1);
-           fA[1+3*(i-1):1+3*(i-1)+2,:] :=[f,0,0; f,amplitudes[i],phases[i]; f,0,0];
-        end for;
-     else
-        for i in 1:nA loop
-           f := f_max*(i-1)/(nA-1);
-           fA[1+3*(i-1):1+3*(i-1)+2,:] :=[f,0; f,amplitudes[i]; f,0];
-        end for;
-     end if;
-
-     // Write matrix on file and print message
-     success := writeRealMatrix(fileName, "FFT", fA, format=format);
-     if success then
-        print("... FFT result computed at time = " + String(t_computed) + " s stored on file: " + fileName);
-     end if;
-    annotation (Documentation(info="<html>
-<h4>Syntax</h4>
-
-<blockquote><p>
-success = <b>realFFTwriteToFile</b>(t_computed, fileName, f_max, amplitudes, phases, format);
-</p></blockquote>
-
-<h4>Description</h4>
-<p>
-This functions stores the result of an FFT computation on file, so that it can
-be easily plotted. <b>amplitudes</b> and <b>phases</b> are the vectors that hold the
-amplitudes and phases values of an FFT computation. If the size of the phases vector is zero,
-no phases will be stored on file. Otherwise, phases must have the same dimension as the amplitudes
-vector. The frequency vector f is constructed within the function from the dimension of the
-amplitudes vector and the information that amplitudes[end] is at frequency <b>f_max</b>.
-The <b>format</b> argument defines the file format (for details see
-<a href=\"modelica://Modelica.Utilities.Streams.writeRealMatrix\">writeRealMatrix</a>).
-Argument <b>t_computed</b> is the actual time instant when the FFT was computed.
-It is used in the print message after the result was stored on file.
-</p>
-
-<p>
-The matrix on file has the following structure:
-</p>
-
-<ul>
-<li> First column: Equidistant frequency vector f in Hz from 0 Hz ... f_max Hz.</li>
-<li> Second column: Amplitudes[:]</li>
-<li> Optional third column: Phases[:]</li>
-</ul>
-
-<h4>Example</h4>
-
-<p>
-See detailed example model:
-<a href=\"modelica://Modelica.Math.FastFourierTransform.Examples.RealFFT1\">Examples.RealFFT1</a>.
-</p>
-
-<h4>See also</h4>
-<p>
-<a href=\"modelica://Modelica.Math.FastFourierTransform.realFFTinfo\">realFFTinfo</a>,
-<a href=\"modelica://Modelica.Math.FastFourierTransform.realFFTsamplePoints\">realFFTsamplePoints</a>,
-<a href=\"modelica://Modelica.Math.FastFourierTransform.realFFT\">realFFT</a>
-</p>
-</html>"));
-  end realFFTwriteToFile;
-
-  package Internal
-    "Internal library that should not be used directly by a user"
-    extends Modelica.Icons.InternalPackage;
-    function rawRealFFT "Compute raw Fast Fourier Transform for real signal vector"
-      extends Modelica.Icons.Function;
-      input Real  u[:]
-        "Signal for which FFT shall be computed (size(nu,1) MUST be EVEN and should be an integer multiple of 2,3,5, that is size(nu,1) = 2^a*3^b*5^c, with a,b,c Integer >= 0)";
-      output Integer info
-        "Information flag (0: FFT computed, 1: nu is not even, 2: nwork is wrong, 3: another error)";
-      output Real amplitudes[div(size(u,1),2)+1] "Amplitudes of FFT";
-      output Real phases[    div(size(u,1),2)+1] "Phases of FFT";
-    protected
-      Real work[3*size(u,1) + 2*(div(size(u,1),2)+1)];
-      external "C" info = ModelicaFFT_kiss_fftr(u, size(u,1), work, size(work,1), amplitudes, phases)
-                   annotation(Library="ModelicaExternalC");
-      annotation (Documentation(revisions="<html>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> Nov. 29, 2015 </td>
-    <td valign=\"top\">
-     Initial version implemented by
-     Martin R. Kuhn and Martin Otter
-     (<a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>.</td></tr>
-</table>
-</html>",
-      info="<html>
-<h4>Syntax</h4>
-
-<blockquote><p>
-(info, amplitudes, phases) = <b>rawRealFFT</b>(u);
-</p></blockquote>
-
-<h4>Description</h4>
-<p>
-Raw interface to a function of the Kiss_FFT package to compute the FFT of a real, sampled signal.
-The input argument of this function is a Real vector u. size(u,1) <b>must</b> be even. An efficient computation
-is performed, if size(u,1) = 2^a*3^b*5^c (a,b,c Integer &ge; 0).
-The function computes a real FFT (Fast Fourier Transform) of u and returns the result
-in form of the outputs amplitudes and phases. Argument info provides additional information:
-</p>
-
-<pre>   info = 0: Successful FFT computation.
-   info = 1: size(u,1) is not even.
-   info = 2: size(work,1) is not correct (= a protected utility array).
-   info = 3: Another error.
-</pre>
-
-<p>
-Note, in the original publication about the efficient computation of FFT (Cooley and Tukey, 1965),
-the number of sample points must be 2^a. However, all newer FFT algorithms do not have
-this strong restriction and especially not the open source software
-<a href=\"http://sourceforge.net/projects/kissfft/\">KissFFT</a> from Mark Borgerding
-used in this function.
-</p>
-
-<h4>References</h4>
-
-<dl>
-<dt>Mark Borgerding (2010):</dt>
-<dd> <b>KissFFT, version 1.3.0</b>.
-     <a href=\"http://sourceforge.net/projects/kissfft/\">http://sourceforge.net/projects/kissfft/</a>.
-     <br>&nbsp;
-     </dd>
-
-<dt>James W. Cooley, John W. Tukey (1965):</dt>
-<dd> <b>An algorithm for the machine calculation of complex Fourier series</b>.
-     Math. Comput. 19: 297-301. doi:10.2307/2003354.
-     <br>&nbsp;
-     </dd>
-
-<dt>Martin R. Kuhn, Martin Otter, Tim Giese (2015):</dt>
-<dd> <b>Model Based Specifications in Aircraft Systems Design</b>.
-     Modelica 2015 Conference, Versailles, France,
-     pp. 491-500, Sept.23-25, 2015.
-     Download from:
-     <a href=\"http://www.ep.liu.se/ecp/118/053/ecp15118491.pdf\">http://www.ep.liu.se/ecp/118/053/ecp15118491.pdf</a>
-     </dd>
-</dl>
-
-
-<h4>Example</h4>
-<blockquote>
-(info, A, phases) = realFFT({0,0.1,0.2,0.4,0.5, 0.6})
-</blockquote>
-</html>"));
-    end rawRealFFT;
-
-    function prime235Factorization "Factorization of an integer in prime numbers 2,3,5"
-      extends Modelica.Icons.Function;
-      input Integer n;
-      output Boolean success "= true, if factorization in 2,3,5 is possible";
-      output Integer e2 "n = 2^e2*3^e3*5^e5";
-      output Integer e3 "n = 2^e2*3^e3*5^e5";
-      output Integer e5 "n = 2^e2*3^e3*5^e5";
-    protected
-      Integer ns1 = n;
-    algorithm
-      e2:=0;
-      e3:=0;
-      e5:=0;
-      while mod(ns1,2) == 0 loop
-         ns1 :=div(ns1, 2);
-         e2 :=e2 + 1;
-      end while;
-
-      while mod(ns1,3) == 0 loop
-         ns1 :=div(ns1, 3);
-         e3 := e3+1;
-      end while;
-
-      while mod(ns1,5) == 0 loop
-         ns1 :=div(ns1, 5);
-         e5 :=e5 + 1;
-      end while;
-
-      success :=ns1 <= 1;
-      annotation (Documentation(revisions="<html>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> Nov. 29, 2015 </td>
-    <td valign=\"top\">
-     Initial version implemented by
-     Martin R. Kuhn and Martin Otter
-     (<a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>.</td></tr>
-</table>
-</html>",
-      info="<html>
-<h4>Syntax</h4>
-
-<blockquote><p>
-(success, e2, e3, e5) = <b>prime235Factorization</b>(n);
-</p></blockquote>
-
-<h4>Description</h4>
-<p>
-Compute the factorization of input Integer n in prime numbers 2, 3, and 5. If this is possible, success = true and
-e2 is the number of prime numbers2, e3 the number of prime numbers 3 and e5 the number of prime numbers 5.
-If this is not possible, success = false, and e2, e3, e5 are dummy values.
-</p>
-
-<h4>Example</h4>
-<blockquote><pre>(success, e2, e3, e5) = prime235Factorization(60)   // success=true, e2=2, e3=1, e5=1 (= 2^2*3^1*5^1)
-(success, e2, e3, e5) = prime235Factorization(7)    // success=false
-</pre></blockquote>
-</html>"));
-    end prime235Factorization;
-  annotation (Documentation(revisions="<html>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> Nov. 29, 2015 </td>
-    <td valign=\"top\">
-     Initial version implemented by
-     Martin R. Kuhn and Martin Otter
-     (<a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>.</td></tr>
-</table>
-</html>"));
-  end Internal;
-annotation (Documentation(info="<html>
-<p>
-This package provides functions to compute the Fast Fourier Transform (FFT).
-
-<p>
-For an example see <a href=\"modelica://Modelica.Math.FastFourierTransform.Examples.RealFFT1\">Examples.RealFFT1</a>
-where the following signal is computed during simulation
-</p>
-
-<pre>
-   y = 5 + 3*sin(2*pi*2) + 1.5*cos(2*pi*3)
-</pre>
-
-<p>
-the continuous-time signal y is sampled and the FFT is computed with a call to realFFT(f_max=4, f_resolution=0.2),
-resulting in:
-</p>
-
-<p><blockquote>
-<img src=\"modelica://Modelica/Resources/Images/Math/FFT1.png\">
-</blockquote></p>
-
-
-<h4>References</h4>
-
-<dl>
-<dt>Mark Borgerding (2010):</dt>
-<dd> <b>KissFFT, version 1.3.0</b>.
-     <a href=\"http://sourceforge.net/projects/kissfft/\">http://sourceforge.net/projects/kissfft/</a>.
-     <br>&nbsp;
-     </dd>
-
-<dt>James W. Cooley, John W. Tukey (1965):</dt>
-<dd> <b>An algorithm for the machine calculation of complex Fourier series</b>.
-     Math. Comput. 19: 297-301. doi:10.2307/2003354.
-     <br>&nbsp;
-     </dd>
-
-<dt>Martin R. Kuhn, Martin Otter, Tim Giese (2015):</dt>
-<dd> <b>Model Based Specifications in Aircraft Systems Design</b>.
-     Modelica 2015 Conference, Versailles, France,
-     pp. 491-500, Sept.23-25, 2015.
-     Download from:
-     <a href=\"http://www.ep.liu.se/ecp/118/053/ecp15118491.pdf\">http://www.ep.liu.se/ecp/118/053/ecp15118491.pdf</a>
-     </dd>
-</dl>
-</html>",
-      revisions="<html>
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><th>Date</th> <th align=\"left\">Description</th></tr>
-
-<tr><td valign=\"top\"> Nov. 29, 2015 </td>
-    <td valign=\"top\">
-     Initial version implemented by
-     Martin R. Kuhn and Martin Otter
-     (<a href=\"http://www.dlr.de/rmc/sr/en\">DLR Institute of System Dynamics and Control</a>.</td></tr>
-</table>
-</html>"), Icon(graphics={
-        Line(points={{-60,20},{-60,-80}}, color={95,95,95}),
-        Line(points={{-20,60},{-20,-80}}, color={95,95,95}),
-        Line(points={{20,40},{20,-80}}, color={95,95,95}),
-        Line(points={{60,-20},{60,-80}},color={95,95,95})}));
-end FastFourierTransform;
Index: Modelica/Math/package.order
===================================================================
--- Modelica/Math/package.order	(revision 9483)
+++ Modelica/Math/package.order	(working copy)
@@ -2,10 +2,6 @@
 BooleanVectors
 Matrices
 Nonlinear
-Random
-Distributions
-Special
-FastFourierTransform
 Icons
 isEqual
 isPowerOf2
Index: Modelica/Utilities/Examples.mo
===================================================================
--- Modelica/Utilities/Examples.mo	(revision 9483)
+++ Modelica/Utilities/Examples.mo	(working copy)
@@ -374,80 +374,6 @@
 </html>"), experiment(StopTime=1.01));
   end readRealParameterModel;
 
-  model WriteRealMatrixToFile
-    "Demonstrate usage of function Streams.writeRealMatrix"
-    extends Modelica.Icons.Example;
-    parameter Real A[3,2] = [11, 12;
-                             21, 22;
-                             31, 32] "Matrix stored in different formats on files";
-    output Boolean success1 "= true if writing to Test_RealMatrix_v4.mat is successful";
-    output Boolean success2 "= true if appending to Test_RealMatrix_v4.mat is successful";
-    output Boolean success3 "= true if writing to Test_RealMatrix_v6.mat is successful";
-    output Boolean success4 "= true if writing to Test_RealMatrix_v7.mat is successful";
-  equation
-    when initial() then
-       success1 = Modelica.Utilities.Streams.writeRealMatrix("Test_RealMatrix_v4.mat", "Matrix_A", A);
-       success2 = Modelica.Utilities.Streams.writeRealMatrix("Test_RealMatrix_v4.mat", "Matrix_B", A, append=true, format="4");
-       success3 = Modelica.Utilities.Streams.writeRealMatrix("Test_RealMatrix_v6.mat", "Matrix_A", A, format="6");
-       success4 = Modelica.Utilities.Streams.writeRealMatrix("Test_RealMatrix_v7.mat", "Matrix_A", A, format="7");
-    end when;
-
-    annotation (experiment(StopTime=0.1), Documentation(info="<html>
-<p>
-Example model that shows how to write a Real matrix in MATLAB MAT format on file
-using function <a href=\"modelica://Modelica.Utilities.Streams.writeRealMatrix\">writeRealMatrix</a>.
-<p>
-</html>"));
-  end WriteRealMatrixToFile;
-
-  model ReadRealMatrixFromFile
-    "Demonstrate usage of function Streams.readRealMatrix"
-    import Modelica.Utilities.Streams.print;
-    extends Modelica.Icons.Example;
-    parameter String file = Modelica.Utilities.Files.loadResource("modelica://Modelica/Resources/Data/Utilities/Test_RealMatrix_v4.mat") "File name of matrix"
-      annotation(Dialog(loadSelector(filter="MATLAB MAT files (*.mat)", caption="Open MATLAB MAT file")));
-    parameter String matrixName = "Matrix_A" "Matrix name in file";
-    final parameter Integer dim[2] = Modelica.Utilities.Streams.readMatrixSize(file1,matrixName) "Dimension of matrix";
-    final parameter Real A[:,:] = Modelica.Utilities.Streams.readRealMatrix(file1,matrixName1,dim1[1],dim1[2]) "Matrix data";
-
-    final parameter String file1 = Modelica.Utilities.Files.loadResource("modelica://Modelica/Resources/Data/Utilities/Test_RealMatrix_v4.mat") "File name of check matrix 1";
-    final parameter String file2 = Modelica.Utilities.Files.loadResource("modelica://Modelica/Resources/Data/Utilities/Test_RealMatrix_v6.mat") "File name of check matrix 2";
-    final parameter String file3 = Modelica.Utilities.Files.loadResource("modelica://Modelica/Resources/Data/Utilities/Test_RealMatrix_v7.mat") "File name of check matrix 3";
-    final parameter String matrixName1 = "Matrix_A" "Names of check matrices";
-    final parameter Integer dim1[2] = Modelica.Utilities.Streams.readMatrixSize(file1,matrixName1) "Dimensions of check matrix 1";
-    final parameter Integer dim2[2] = Modelica.Utilities.Streams.readMatrixSize(file2,matrixName1) "Dimensions of check matrix 2";
-    final parameter Integer dim3[2] = Modelica.Utilities.Streams.readMatrixSize(file3,matrixName1) "Dimensions of check matrix 3";
-    final parameter Real A1[:,:] = Modelica.Utilities.Streams.readRealMatrix(file1,matrixName1,dim1[1],dim1[2]) "Data of check matrix 1";
-    final parameter Real A2[:,:] = Modelica.Utilities.Streams.readRealMatrix(file2,matrixName1,dim2[1],dim2[2]) "Data of check matrix 2";
-    final parameter Real A3[:,:] = Modelica.Utilities.Streams.readRealMatrix(file3,matrixName1,dim3[1],dim3[2]) "Data of check matrix 3";
-    Real x(start=1, fixed=true) "Dummy state";
-  protected
-    constant Real eps = 10* Modelica.Constants.eps;
-  equation
-    assert(abs(A1[1,1] - 11) <= eps, "Resources/Data/Utilities/Test_RealMatrix_v4.mat not correctly loaded");
-    assert(abs(A2[1,1] - 11) <= eps, "Resources/Data/Utilities/Test_RealMatrix_v6.mat not correctly loaded");
-    assert(abs(A3[1,1] - 11) <= eps, "Resources/Data/Utilities/Test_RealMatrix_v7.mat not correctly loaded");
-
-    der(x) = -A[1,1]*x;
-    when initial() then
-       print("... Matrix " + matrixName + "[" + String(size(A,1)) + "," + String(size(A,2)) + "] read from file " + file);
-       print("...    " + matrixName + "[1,1] = " + String(A[1,1]));
-    end when;
-
-    annotation(experiment(StopTime=0.1), Documentation(info="<html>
-<p>
-Example model that shows how to read a Real matrix in MATLAB MAT format from file
-using functions
-<a href=\"modelica://Modelica.Utilities.Streams.readMatrixSize\">readMatrixSize</a> and
-<a href=\"modelica://Modelica.Utilities.Streams.readRealMatrix\">readRealMatrix</a>.
-<p>
-
-<p>
-Additionally, specific matrices from the supported file formats are loaded and it is checked
-whether the loaded matrices have the expected values.
-</p>
-</html>"));
-  end ReadRealMatrixFromFile;
   annotation (Documentation(info="<html>
 <p>
 This package contains quite involved examples that demonstrate how to
@@ -472,13 +398,6 @@
      is a test model to demonstrate the usage of \"readRealParameter\". The model
      contains 3 parameters that are read from file \"Modelica.Utilities/data/Examples_readRealParameters.txt\".<br>&nbsp;
      </li>
-<li> Model <a href=\"modelica://Modelica.Utilities.Examples.WriteRealMatrixToFile\">WriteRealMatrixToFile</a>
-     demonstrates the usage of function \"Streams.writeReaMatrix\" to store a matrix in various MATLAB MAT formats on file.<br>&nbsp;
-     </li>
-<li> Model <a href=\"modelica://Modelica.Utilities.Examples.ReadRealMatrixFromFile\">ReadRealMatrixFromFile</a>
-     demonstrates the usage of functions \"Streams.readMatrixSize\" and \"Streams.readRealMatrix\"
-     to read a matrix in various MATLAB MAT formats from file.
-     </li>
 </ul>
 </html>"));
 end Examples;
Index: Modelica/Utilities/Streams.mo
===================================================================
--- Modelica/Utilities/Streams.mo	(revision 9483)
+++ Modelica/Utilities/Streams.mo	(working copy)
@@ -169,153 +169,11 @@
 </html>"));
   end close;
 
-  function readMatrixSize "Read dimensions of a Real matrix from a MATLAB MAT file"
-    extends Modelica.Icons.Function;
-    input String fileName "File where external data is stored" annotation(Dialog(loadSelector(filter="MATLAB MAT files (*.mat)", caption="Open MATLAB MAT file")));
-    input String matrixName "Name / identifier of the 2D Real array on the file";
-    output Integer dim[2] "Number of rows and columns of the 2D Real array";
-    external "C" ModelicaIO_readMatrixSizes(fileName, matrixName, dim)
-    annotation(Library={"ModelicaIO", "ModelicaMatIO", "zlib"});
-    annotation(Documentation(info="<html>
-<h4>Syntax</h4>
-<blockquote><pre>
-dim = Streams.<b>readMatrixSize</b>(fileName, matrixName)
-</pre></blockquote>
-
-<h4>Description</h4>
-<p>
-Function <b>readMatrixSize</b>(..) opens the given MATLAB MAT file
-(in format v4, v6, v7, and if HDF is supported in the Modelica tool, also v7.3),
-and reads the dimensions of the given Real matrix.
-These dimensions are returned in the Integer vector dim.
-</p>
-
-<h4>Example</h4>
-<p>
-See <a href=\"modelica://Modelica.Utilities.Examples.ReadRealMatrixFromFile\">Examples.ReadRealMatrixFromFile</a>.
-</p>
-
-<h4>See also</h4>
-<p>
-<a href=\"modelica://Modelica.Utilities.Streams.readRealMatrix\">readRealMatrix</a>,
-<a href=\"modelica://Modelica.Utilities.Streams.writeRealMatrix\">writeRealMatrix</a>
-</p>
-</html>"));
-  end readMatrixSize;
-
-  function readRealMatrix "Read Real matrix from MATLAB MAT file"
-    extends Modelica.Icons.Function;
-    input String fileName "File where external data is stored" annotation(Dialog(loadSelector(filter="MATLAB MAT files (*.mat)", caption="Open MATLAB MAT file")));
-    input String matrixName "Name / identifier of the 2D Real array on the file";
-    input Integer nrow "Number of rows of the 2D Real array";
-    input Integer ncol "Number of columns of the 2D Real array";
-    input Boolean verboseRead = true
-      "= true: Print info message; = false: No info message";
-    output Real matrix[nrow, ncol] "2D Real array";
-    external "C" ModelicaIO_readRealMatrix(fileName, matrixName, matrix, size(matrix, 1), size(matrix, 2), verboseRead)
-    annotation(Library={"ModelicaIO", "ModelicaMatIO", "zlib"});
-    annotation(
-Documentation(info="<html>
-<h4>Syntax</h4>
-<blockquote><pre>
-matrix = Streams.<b>readRealMatrix</b>(fileName, matrixName, nrow, ncol, verboseRead)
-</pre></blockquote>
-
-<h4>Description</h4>
-<p>
-Function <b>readRealMatrix</b>(..) opens the given MATLAB MAT file
-(in format v4, v6, v7, and if HDF is supported in the Modelica tool, also v7.3),
-and reads the given matrix from this file. The dimensions of this matrix must first
-be inquired with function
-<a href=\"modelica://Modelica.Utilities.Streams.readMatrixSize\">readMatrixSize</a>
-and passed via arguments nrow and ncol to this function.
-</p>
-
-<h4>Example</h4>
-<p>
-See <a href=\"modelica://Modelica.Utilities.Examples.ReadRealMatrixFromFile\">Examples.ReadRealMatrixFromFile</a>.
-</p>
-
-<h4>See also</h4>
-<p>
-<a href=\"modelica://Modelica.Utilities.Streams.readMatrixSize\">readMatrixSize</a>,
-<a href=\"modelica://Modelica.Utilities.Streams.writeRealMatrix\">writeRealMatrix</a>
-</p>
-</html>"));
-  end readRealMatrix;
-
-  function writeRealMatrix "Write Real matrix to a MATLAB MAT file"
-    extends Modelica.Icons.Function;
-    input String fileName "File where external data is to be stored" annotation(Dialog(saveSelector(filter="MATLAB MAT files (*.mat)", caption="Save MATLAB MAT file")));
-    input String matrixName "Name / identifier of the 2D Real array on the file";
-    input Real matrix[:,:] "2D Real array";
-    input Boolean append = false "Append values to file";
-    input String format = "4" "MATLAB MAT file version: \"4\" -> v4, \"6\" -> v6, \"7\" -> v7"
-      annotation(choices(choice="4" "MATLAB v4 MAT file",
-                         choice="6" "MATLAB v6 MAT file",
-                         choice="7" "MATLAB v7 MAT file"));
-    output Boolean success "true if successful";
-    external "C" success = ModelicaIO_writeRealMatrix(fileName, matrixName, matrix, size(matrix, 1), size(matrix, 2), append, format)
-    annotation(Library={"ModelicaIO", "ModelicaMatIO", "zlib"});
-
-    annotation(__ModelicaAssociation_Impure=true,
-Documentation(info="<html>
-
-<h4>Syntax</h4>
-<blockquote><pre>
-success = Streams.<b>writeRealMatrix</b>(fileName, matrixName, matrix, append, format)
-</pre></blockquote>
-
-<h4>Description</h4>
-<p>
-Function <b>writeRealMatrix</b>(..) writes the given matrix to a new or an existing MATLAB MAT file
-(in format v4, v6, v7, and if HDF is supported in the Modelica tool, also v7.3).
-If <code>append = false</code> (= default), the file is newly created
-(or an existing file is deleted and re-created).
-If <code>append = true</code>, the matrix is included in an existing file or if the
-file does not yet exists this flag is ignored. If the file exists and
-<code>append = true</code>, argument format is ignored.
-</p>
-
-<p>
-Parameter <b>format</b> defines the format in which the values are stored on file.
-The following formats are supported:<br>&nbsp;
-</p>
-
-<table border=1 cellspacing=0 cellpadding=2>
-<tr><td>format = </td><td>Type of format</td></tr>
-<tr><td>\"4\"  </td><td>MATLAB MAT version v4</td></tr>
-<tr><td>\"6\"  </td><td>MATLAB MAT version v6</td></tr>
-<tr><td>\"7\"  </td><td>MATLAB MAT version v7</td></tr>
-<tr><td>\"7.3\"</td><td>MATLAB MAT version v7.3<br>
-                      (requires HDF support in the Modelica tool)</td></tr>
-</table>
-
-<p>
-The function returns <code>success = true</code> if the matrix was successfully written
-to file. Otherwise, an error message is printed and the function returns with
-<code>success = false</code>.
-</p>
-
-<h4>Example</h4>
-<p>
-See <a href=\"modelica://Modelica.Utilities.Examples.WriteRealMatrixToFile\">Examples.WriteRealMatrixToFile</a>.
-</p>
-
-<h4>See also</h4>
-<p>
-<a href=\"modelica://Modelica.Utilities.Streams.readMatrixSize\">readMatrixSize</a>,
-<a href=\"modelica://Modelica.Utilities.Streams.readRealMatrix\">readRealMatrix</a>
-</p>
-</html>"));
-  end writeRealMatrix;
   annotation (
     Documentation(info="<html>
 <h4>Library content</h4>
 <p>
 Package <b>Streams</b> contains functions to input and output strings
-to a message window or on files, as well as reading matrices from file
-and writing matrices to file. Note that a string is interpreted
 and displayed as html text (e.g., with print(..) or error(..))
 if it is enclosed with the Modelica html quotation, e.g.,
 </p>
@@ -357,12 +215,6 @@
       <td valign=\"top\"> Close file if it is still open. Ignore call if
            file is already closed or does not exist. </td>
   </tr>
-  <tr><td valign=\"top\"><a href=\"modelica://Modelica.Utilities.Streams.readMatrixSize\">readMatrixSize</a>(fileName, matrixName)</td>
-      <td valign=\"top\"> Read dimensions of a Real matrix from a MATLAB MAT file. </td></tr>
-  <tr><td valign=\"top\"><a href=\"modelica://Modelica.Utilities.Streams.readRealMatrix\">readRealMatrix</a>(fileName, matrixName, nrow, ncol)</td>
-      <td valign=\"top\"> Read a Real matrix from a MATLAB MAT file. </td></tr>
-  <tr><td valign=\"top\"><a href=\"modelica://Modelica.Utilities.Streams.writeRealMatrix\">writeRealMatrix</a>(fileName, matrixName, matrix, append, format)</td>
-      <td valign=\"top\"> Write Real matrix to a MATLAB MAT file. </td></tr>
 </table>
 <p>
 Use functions <b>scanXXX</b> from package
