/* The following code was generated by JFlex 1.4.3 on 8/12/09 5:53 PM */

/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
package org.jmodelica.generated.scanners;

import java.io.IOException;
import java.util.*;
import java.io.Reader;
import java.io.StringReader;

import org.eclipse.jface.text.IDocument;
import org.jmodelica.ide.helpers.DocumentReader;
import org.jmodelica.ide.helpers.BackwardsDocumentReader;
import org.jmodelica.ide.scanners.DocumentScanner;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/12/09 5:53 PM from the specification file
 * <tt>/home/philip/workspace/JModelicaIDE/flex/BackwardClassFinder.flex</tt>
 */
public final class BackwardClassFinder extends DocumentScanner {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 1024;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\5\2\0\1\11\22\0\1\12\1\0\1\6\4\0"+
    "\1\3\2\0\1\10\4\0\1\7\12\2\7\0\32\1\1\0\1\4"+
    "\2\0\1\1\1\0\1\21\1\17\1\14\1\31\1\24\1\30\1\33"+
    "\1\1\1\26\1\1\1\13\1\16\1\32\1\25\1\15\1\34\1\1"+
    "\1\22\1\20\1\23\1\27\3\1\1\35\1\1\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\6\1\7\2\4\0\1\2\7\0"+
    "\1\1\2\0\1\1\1\0\11\2\1\0\1\2\1\0"+
    "\1\1\2\0\2\1\3\0\10\2\1\3\1\0\1\1"+
    "\5\2\1\4\2\2\1\1\11\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\74\0\132\0\170\0\226\0\264"+
    "\0\322\0\360\0\u010e\0\u012c\0\u014a\0\u0168\0\u0186\0\u01a4"+
    "\0\36\0\u01c2\0\74\0\u01e0\0\u01fe\0\u01fe\0\u021c\0\u023a"+
    "\0\u0258\0\u0276\0\u0294\0\u02b2\0\u0294\0\u02d0\0\u02ee\0\u01c2"+
    "\0\u030c\0\u032a\0\u0348\0\u0366\0\u0384\0\u03a2\0\u03c0\0\u03de"+
    "\0\u03fc\0\u041a\0\132\0\u0438\0\u0438\0\u023a\0\226\0\u0456"+
    "\0\u0456\0\u02d0\0\u0474\0\u0492\0\u04b0\0\u04ce\0\u04ec\0\u050a"+
    "\0\u0528\0\u0546\0\u0564\0\u0582\0\u05a0\0\74\0\u05be\0\u0492"+
    "\0\u05dc\0\u05fa\0\u0618\0\u0636\0\u0654\0\74\0\u0672\0\u0690"+
    "\0\u06ae\0\u06cc\0\u06ea\0\u0708\0\u0726\0\u0744\0\u0762\0\u0780"+
    "\0\u079e\0\u07bc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int ZZ_TRANS [] = {
    1, 2, 3, 4, 1, 5, 6, 7, 1, 5, 
    8, 9, 2, 2, 10, 2, 11, 2, 12, 2, 
    13, 14, 2, 2, 2, 15, 2, 2, 2, 2, 
    16, 16, 16, 16, 16, -1, 16, 17, 16, -1, 
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    19, 19, 19, 20, 21, 22, 19, 23, 19, 24, 
    19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
    19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
    -1, -1, -1, -1, -1, 5, -1, -1, -1, 5, 
    5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    25, 25, 25, 25, 26, 27, 28, 29, 25, 30, 
    25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 
    25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 
    16, 16, 16, 16, 16, -1, 16, 31, 32, -1, 
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
    16, 16, 16, 16, 16, 5, 16, 17, 16, 5, 
    8, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 33, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    34, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 35, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 36, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 37, 38, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 39, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 40, 2, 
    2, 41, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 16, 16, 16, 16, -1, 16, 31, 16, -1, 
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
    19, 19, 19, 20, 19, 22, 19, 23, 19, 24, 
    19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
    19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
    16, 16, 16, 16, 42, -1, 16, 17, 16, -1, 
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
    24, 24, 24, 43, 44, 22, 24, 24, 24, 24, 
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
    19, 19, 19, 20, 19, 22, 19, 45, 19, 24, 
    19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
    19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
    24, 24, 24, 43, 24, 22, 24, 24, 24, 24, 
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
    25, 25, 25, 25, 25, 27, 28, 29, 25, 30, 
    25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 
    25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 
    16, 16, 16, 16, 46, -1, 16, 17, 16, -1, 
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
    30, 30, 30, 30, 47, 27, 48, 30, 30, 30, 
    30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 
    30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 
    25, 25, 25, 25, 25, 27, 28, 49, 25, 30, 
    25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 
    25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 
    30, 30, 30, 30, 30, 27, 48, 30, 30, 30, 
    30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 
    30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 
    32, 32, 32, 32, 32, 50, 32, 51, 52, 50, 
    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 53, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 54, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 55, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 2, 56, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 57, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 58, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 59, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 60, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    61, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    50, 50, 50, 50, 50, 50, 50, 50, 62, 50, 
    50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
    50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
    32, 32, 32, 32, 32, 50, 32, 63, 52, 50, 
    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
    32, 32, 32, 32, 32, 50, 32, 31, 52, 50, 
    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
    32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 64, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 65, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 66, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 67, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 68, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 2, 69, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 2, 70, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 71, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    50, 50, 50, 50, 50, 50, 50, 72, 62, 50, 
    50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
    50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 69, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 69, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 69, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    73, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 74, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 75, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    76, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 77, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 78, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 79, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 69, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 80, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 69, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 81, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 66, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    16, 2, 18, 16, 16, -1, 16, 17, 16, -1, 
    16, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 69, 2, 2, 2, 2, 2
  };

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\17\1\4\0\1\1\7\0\1\1\2\0\1\1"+
    "\1\0\11\1\1\0\1\1\1\0\1\1\2\0\2\1"+
    "\3\0\11\1\1\0\11\1\1\11\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[82];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private String target;
    private String last;
    private int count;
    
    public BackwardClassFinder() {
        this(new StringReader(""));
    }
    
    public int findIndent(IDocument document, int offset, String id) {
        
        yyreset(new BackwardsDocumentReader(document, offset));
        
        target = id;
        if (target != null)
            target = new StringBuilder(target).reverse().toString();
		
		count = target == null ? 1 : 0;
	
        try {
			return yylex();
		} catch (IOException e) {
			return -1;
		}
    }
 	
	public void reset(Reader reader) {
		reset(reader);
	}       



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BackwardClassFinder(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public BackwardClassFinder(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 96) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { last = yytext();
          }
        case 5: break;
        case 3: 
          { if (target == null || target.equals(last)) {   
  		++count;
      }
          }
        case 6: break;
        case 4: 
          { if (target == null || target.equals(last) ) {
	  	  count--;
	  	  if (count <= 0) {
			  return yychar; 
	  	  }
	  }
          }
        case 7: break;
        case 1: 
          { 
          }
        case 8: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return -1;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
