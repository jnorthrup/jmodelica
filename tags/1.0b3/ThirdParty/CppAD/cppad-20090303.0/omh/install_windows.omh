/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-08 Bradley M. Bell

CppAD is distributed under multiple licenses. This distribution is under
the terms of the 
                    Common Public License Version 1.0.

A copy of this license is included in the COPYING file of this distribution.
Please visit http://www.coin-or.org/CppAD/ for information on other licenses.
-------------------------------------------------------------------------- */

$begin InstallWindows$$
$spell
	Winzip
	gzip
	exp_apx
	GetStarted
	Dev
	cppad
	stdvector
	std
	ublas
	hpp
	adouble
	badiff
	usr
	cygdrive
	htm
	xml
	Dir
	xvzf
	gz
	workspace
	Makefile
	exe
	Cygwin
	Microsoft
	sln
	CppAD
	Adolc
	Fadbad
$$
$index free, install CppAD$$
$index install, windows CppAD$$
$index windows, CppAD install$$
$index CppAD, install windows$$

$section Windows Download and Test$$


$head Cygwin$$
If you are using Cygwin, or MinGW with MSYS, follow the 
$cref/unix install/InstallUnix/$$ instructions.

$head Download$$
$index CppAD, zip file$$
$index zip, CppAD file$$
$index download, windows$$
$index windows, download$$

$subhead Subversion$$
If you are familiar with subversion, you may want to follow
the more complicated $cref/subversion/$$ download instructions 
instead of the ones below.

$subhead Web Link$$
If you are not using the subversion download instructions,
sure you are reading the web based version of this documentation by
following the link
$href%http://www.coin-or.org/CppAD/Doc/installwindows.htm%web version%$$.
Then proceed with the instruction that appear below this point.

$subhead Unix Tar Files$$
The download files below were first archived with $code tar$$
and then compressed with $code gzip$$.
The ascii files are in Unix format; i.e., each line ends with a 
line feed (instead of a carriage return and line feed as is standard for
windows formatted files).
Visual Studio can handel this formatting just fine, but you may 
want to convert the format to the windows standard if you are using 
and editor that has trouble viewing the files in Unix format.
and then a line feed. 

$table
CPL License $pre  $$ $cnext $href%
http://www.coin-or.org/download/source/CppAD/cppad-20090303.0.cpl.tgz%
cppad-20090303.0.cpl.tgz%$$ 
$rnext
GPL License $pre  $$ $cnext $href%
http://www.coin-or.org/download/source/CppAD/cppad-20090303.0.gpl.tgz%
cppad-20090303.0.gpl.tgz%$$
$tend

The following steps will decompress and extract the files using
$href%http://www.winzip.com/index.htm%Winzip%$$ version 7.0
(other version of Winzip and other decompression programs will be similar).
$list number$$
Download your choice between these two licenses listed above and 
store the result in a file on disk.
$lnext
Open the file using Winzip (using $code All archives$$) as the file type
in the Open browser.
$lnext
Winzip will ask if it should decompress the file into a temporary folder
and open it. Respond by selecting the $code Yes$$ button.
$lnext
Now select the $code Extract$$ button from the main menu.
$lnext
Place the name of the directory were you want the distribution in the
$code Extract to$$ field and then select the $code Extract$$ button
in the pop-up dialog.
Winzip will create a subdirectory called $code cppad-20090303.0$$
where the files are placed.
$lend

$head Getting Started$$
$index GetStarted, windows$$
The following steps will build the $xref/get_started.cpp/$$ example.
Using Microsoft Visual C++, open the workspace 
$codep
	cppad-20090303.0\introduction\get_started\get_started.sln
$$
in Visual Studio and then select $code Build | Build get_started.exe$$.
Then in a Dos box, and in the cppad-20090303.0 directory,
execute the following command
$codep
	introduction\get_started\Debug\get_started
$$

$head Introduction$$
$index introduction, windows$$
The following steps will build the routines that verify the calculations
in the exp_apx calculations in the $cref/Introduction/$$ section.
Using Microsoft Visual C++, open the workspace 
$codep
	cppad-20090303.0\introduction\exp_apx\exp_apx.sln
$$ in Visual Studio.
Then select $code Build | Build exp_apx.exe$$.
Then in a Dos box, and in the cppad-20090303.0 directory,
execute the following command
$codep
	introduction\exp_apx\Debug\exp_apx
$$

$head Examples and Testing$$
$index example, windows$$
$index test, windows$$
The following steps will build an extensive set of examples
and correctness tests.
Using Microsoft Visual C++, open the workspace 
$codep
	cppad-20090303.0\example\example.sln
$$ in Visual Studio.
Then select $code Build | Build Example.exe$$.
Then in a Dos box, and in the cppad-20090303.0 directory,
execute the following command
$codep
	example\Debug\example
$$

$head More Correctness Testing$$
$index test more, windows$$
Using Microsoft Visual C++,
open the workspace 
$codep
	cppad-20090303.0\test_more\test_more.sln
$$
in Visual Studio and then select $code Build | Build test_more.exe$$.
Then in a Dos box, and in the cppad-20090303.0 directory,
execute the following command
$codep
	test_more\Debug\test_more
$$

$head Printing During Forward Mode$$
$index print, forward mode$$
$index forward, print$$
Using Microsoft Visual C++, open the workspace 
$codep
	cppad-20090303.0\print_for\print_for.sln
$$ in Visual Studio.
Then select $code Build | Build print_for.exe$$.
Then in a Dos box, and in the cppad-20090303.0 directory,
execute the following command
$codep
	print_for\Debug\print_for
$$

$head CppAD Speed Test$$
$index speed, cppad test$$
$index cppad, test speed$$
$index test, cppad speed$$
Using Microsoft Visual C++,
open the workspace 
$codep 
	cppad-20090303.0\speed\cppad\cppad.sln
$$ in Visual Studio.
Then select $code Build | Build cppad.exe$$.
Then in a Dos box, and in the cppad-20090303.0 directory,
execute the following commands
$codep
	speed\cppad\Debug\cppad correct 123
	speed\cppad\Debug\cppad speed 123
$$

$head Double Speed Test$$
$index speed, double test$$
$index double, test speed$$
$index test, double speed$$
Using Microsoft Visual C++,
open the workspace 
$codep
	cppad-20090303.0\speed\double\double.sln
$$ in Visual Studio.
Then select $code Build | Build double.exe$$.
Then in a Dos box, and in the cppad-20090303.0 directory,
execute the following commands
$codep
	speed\double\Debug\double correct 123
	speed\double\Debug\double speed 123
$$

$head Speed Utility Example$$
$index speed, utility example$$
$index example, speed utility$$
$index utility, speed example$$
Using Microsoft Visual C++,
open the workspace 
$code 
	cppad-20090303.0\speed\example\example.sln
$$ in Visual Studio.
Then select $code Build | Build example.exe$$.
Then in a Dos box, and in the cppad-20090303.0 directory,
execute the following command
$codep
	speed\example\Debug\example
$$

$end
