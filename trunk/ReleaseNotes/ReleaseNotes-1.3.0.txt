This document contains the release notes for JModelica.org 1.3.0.

Highlights:


1. Compilers

1.1. Modelica Compiler

1.1.1 Arrays

Slice operations are now supported, except in some situations in function. 

1.1.2 Redeclare

Redeclares as class elements are now supported.

1.1.3 Conditional components

Conditional components are now supported.

1.2. Optimica Compiler

All support mentioned for the Modelica compiler applies to the
Optimica compiler as well.

1.2.1 Support for the objectiveIntegrand class attribute. In order to
encode Lagrange cost functions of the type

\int_{t_0}^{t_f}L(.)dt,

the Optimica class attribute objectiveIntegrand is supported by the
Optimica compiler. The expression L may be utilized by optimization
algorithms providing dedicated support for Lagrange cost functions.

1.2.2 Support for minimum time problems. Optimization problems with
free initial and terminal times can now be solved by setting the free
attribute of the class attributes startTime and finalTime to true. The
Optimica compiler automatically translates the problem into a fixed
horizon problems with free parameters for the start en terminal times,
which in turn are used to rescale the time of the problem. 

Using this method, no changes are required to the optimization
algorithm, since a fixed horizon problem is solved.

2. JModelica.org Model Interface (JMI)

2.1 General

2.2 Optimization algorithm

2.2.1 Support for free dependent parameters in the collocation
optimization algorithm. In models containing parameter declarations
such as

parameter Real p1(free=true);
parameter Real p2 = p1;

the parameter p2 needs to be considered as being free in the
optimization problem, with the additional equality constraint

p2 = p1

included in the problem. 

2.2.2 Support for Lagrange cost functions. The new Optimica class
attribute objectiveIntegrand, see above, is supported by the
collocation optimization algorithm. The integral cost is approximated
by a Radau quadrature formula.

3. Assimulo

Support for simulation of an FMU (see below) using Assimulo. Simulation
of an FMU can either be done by using the high-level method *simulate* or
creating a model from the FMIModel class together with a problem class,
FMIODE which is then passed to CVode.

4. FMI compliance

Improved support for the Functional Mockup Interface (FMI) standard.
Support for importing an FMI model, FMU (Functional Mockup Unit). The 
import consist of loading the FMU into Python and connecting the models
C execution interface to Python. Note, strings are not currently supported.

5. XML model export

5.1 Support for the built-in function noEvent.


6. Python integration


7. Contributors to JModelica.org 1.3.0

Christian Andersson
Tove Bergdahl
Magnus Gäfvert
Roberto Parrotto
Jesper Mattsson
Johan Åkesson

Previous contributors:

Philip Nilsson
Jens Rantil
Philip Reuterswärd

