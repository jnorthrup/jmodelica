import java.lang.Math;

aspect StaticValue {
	
	syn FlatStaticValue FExp.value();	
	syn lazy FlatStaticValue FExp.staticValue();	
	syn FlatStaticValue FVariable.value();		
	syn lazy FlatStaticValue FVariable.staticValue();		

	eq FExp.value() {
		FTypePrefixOther theVariability = variability();
		if ((theVariability instanceof FParameter) ||
			(theVariability instanceof FConstant)) {
			return staticValue();
		} else {
			return noStaticValue();
		}
	}

	eq FVariable.value() {
		FTypePrefixOther theVariability = variability();
		if ((theVariability instanceof FParameter) ||
			(theVariability instanceof FConstant)) {
			return staticValue();
		} else {
			return noStaticValue();
		}
	}	

	eq FVariable.staticValue() {
		FPrimitiveType theType = getType();	
		if (hasBindingExp()) {
			return getBindingExp().staticValue();
		} else if (theType instanceof FRealType) {
			return new RealStaticValue(0.0);
		} else if (theType instanceof FIntegerType) {
			return new IntegerStaticValue(0);
		} else if (theType instanceof FStringType) {
			return new StringStaticValue("");
		} else if (theType instanceof FBooleanType) {
			return new BooleanStaticValue(false);
		} else {
			error("Unknown type " + theType + " + in variable " + getFQName());
			return brokenStaticValue();			
		}
	}	
	
	eq FExp.staticValue() {
		return brokenStaticValue();
	}
	
	eq FDer.staticValue() = new RealStaticValue(0.0);
	
	eq FNoExp.staticValue() = noStaticValue();
	
	eq FTimeExp.staticValue() = new RealStaticValue(0.0);
	
	eq FBooleanLitExpTrue.staticValue() = new BooleanStaticValue(true);
	eq FBooleanLitExpFalse.staticValue() = new BooleanStaticValue(false);	

	eq FRealLitExp.staticValue() {				
		String stringValue = getUNSIGNED_NUMBER();
		try {
			int val = Integer.parseInt(stringValue);
			return new IntegerStaticValue(val);			
		} catch(NumberFormatException formatException) {}
		try {
			double val = Double.parseDouble(stringValue);
			return new RealStaticValue(val);			
		} catch(NumberFormatException formatException) {}
		return brokenStaticValue();
	}

	eq FStringLitExp.staticValue() {
		return new StringStaticValue(getString());
	}

	int FBinExp.doIntegerOperation(int left, int right, String operator) {
		int retval = 0;
		if(operator.equals("+")) {
			retval = left + right;
		} else if (operator.equals("-")) {
			retval = left - right;
		} else if (operator.equals("*")) {
			retval = left * right;
		} else if (operator.equals("/")) {
			retval = left / right;
		} else if (operator.equals("^")) {
			retval = (int) java.lang.Math.pow((double) left,(double) right);
		} else {
			error("Unknown operator " + operator);
		}
		return retval;
	}

	double FBinExp.doDoubleOperation(double left, double right, String operator) {
		double retval = 0.0;
		if(operator.equals("+")) {
			retval = left + right;
		} else if (operator.equals("-")) {
			retval = left - right;
		} else if (operator.equals("*")) {
			retval = left * right;
		} else if (operator.equals("/")) {
			retval = left / right;
		} else if (operator.equals("^")) {
			retval = java.lang.Math.pow(left, right);
		} else {
			error("Unknown operator " + operator);
		}
		return retval;
	}	
	
	FlatStaticValue FBinExp.tryArithmeticOperation(String operator) {
		FlatStaticValue leftValue = getLeft().staticValue();		
		FlatStaticValue rightValue = getRight().staticValue();		
		FPrimitiveType leftPrimitive = getLeftPrimitive();
		FPrimitiveType rightPrimitive = getRightPrimitive();		
		if (leftPrimitive.equals(fIntegerType()) && 
			rightPrimitive.equals(fIntegerType())) {
				int left = ((IntegerStaticValue) leftValue).getValue();
				int right = ((IntegerStaticValue) rightValue).getValue();
				return new IntegerStaticValue(doIntegerOperation(left,right,operator));
		} else if (leftPrimitive.equals(fRealType())) {
				double left = ((RealStaticValue) leftValue).getValue();
				double right = 0.0;
				if (rightPrimitive.equals(fIntegerType())) {
					right = (double) ((IntegerStaticValue) rightValue).getValue();
				} else if (rightPrimitive.equals(fRealType())) {
					right = ((RealStaticValue) rightValue).getValue();	
				} else {
					return brokenStaticValue();				
				}
				return new RealStaticValue(doDoubleOperation(left,right,operator));			
		} else if (rightPrimitive.equals(fRealType())) {
				double right = ((RealStaticValue) rightValue).getValue();
				double left = 0.0;
				if (rightPrimitive.equals(fIntegerType())) {
					left = (double) ((IntegerStaticValue) leftValue).getValue();
				} else {
					return brokenStaticValue();				
				}
				return new RealStaticValue(doDoubleOperation(left,right,operator));		
		}
		return noStaticValue();
	}

	eq FSubExp.staticValue() {
		FlatStaticValue tryValue = tryArithmeticOperation("-");		
		if (tryValue.equals(noStaticValue())) {
			return brokenStaticValue();			
		} else {
			return tryValue;
		}
	}

	eq FMulExp.staticValue() {
		FlatStaticValue tryValue = tryArithmeticOperation("*");		
		if (tryValue.equals(noStaticValue())) {
			return brokenStaticValue();			
		} else {
			return tryValue;
		}
	}

	eq FDivExp.staticValue() {
		FlatStaticValue tryValue = tryArithmeticOperation("/");		
		if (tryValue.equals(noStaticValue())) {
			return brokenStaticValue();			
		} else {
			return tryValue;
		}
	}	

	eq FPowExp.staticValue() {
		FlatStaticValue tryValue = tryArithmeticOperation("^");		
		if (tryValue.equals(noStaticValue())) {
			return brokenStaticValue();			
		} else {
			return tryValue;
		}
	}	
	
	eq FAddExp.staticValue() {
		FlatStaticValue tryValue = tryArithmeticOperation("+");
		if (tryValue.equals(noStaticValue())) {
			FlatStaticValue leftValue = getLeft().staticValue();		
			FlatStaticValue rightValue = getRight().staticValue();		
			FPrimitiveType leftPrimitive = getLeftPrimitive();
			FPrimitiveType rightPrimitive = getRightPrimitive();					
			if (leftPrimitive.equals(fStringType()) &&
				   rightPrimitive.equals(fStringType())) {
				String left = ((StringStaticValue) leftValue).getValue();			
				String right = ((StringStaticValue) rightValue).getValue();						
				return new StringStaticValue(left + right);
			} else {
				return brokenStaticValue();
			}
		} else {
			return tryValue;
		}
	}
	
	eq FIdUseExp.staticValue() {
		FAbstractVariable variable = this.myFV();
		if (variable instanceof FVariable) {
			FVariable fVariable = (FVariable) variable;
			return(fVariable.staticValue());			
		} else {
			return brokenStaticValue();
		}
	}
	
}