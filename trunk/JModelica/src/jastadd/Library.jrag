import java.io.*;
import java.util.HashSet;

aspect Library {

/*
	class LibNodeException extends Exception {
	
	}
*/

	eq LibClassDecl.memberClass(String name) {
		HashSet set = new HashSet();
		set.addAll(super.memberClass(name));
		for (int i=0;i<getNumLibNode();i++) {
			if (getLibNode(i).getName().equals(name)) {
				set.add(getLibNode(i).getStoredDefinition().getElement(0));
			}
		}
		
		if (set.size()>0)
			return set;
		else
			return emptyHashSet();
	}

	eq LibClassDecl.numLocalClassDecl() = getNumClassDecl() + getNumLibNode();
	eq LibClassDecl.localClassDecl(int i) = 
		i<getNumClassDecl()? getClassDecl(i): 
		   (FullClassDecl)getLibNode(i-getNumClassDecl()).getStoredDefinition().getElement(0);

	eq LibClassDecl.getLibNode().lookupClass(String name) = genericLookupClass(name);
	eq LibClassDecl.getLibNode().lookupComponent(String name) = genericLookupComponent(name);

	syn lazy StoredDefinition LibNode.getStoredDefinition() {
		
		/* If structured
		 		a. Read all files
		 		b. Check for package.mo
		 		c. Parse package.mo
		 		d. Read all .mo files
		 		e. Add LibNodes to the LibClassDecl
		 		f. Return the LibClassDecl
		   If unstructured
		   		a. Parse the .mo file
		   		b. Return the resulting FullClassDecl  	 
		*/
	
		if (getStructured()) {
			String dirName = getFileName();
			try {
				File baseDir = new File(dirName);
				
				File[] allFiles = baseDir.listFiles();
				if (allFiles==null) {
					FullClassDecl fcd = new FullClassDecl();
					fcd.setName(new IdDecl("_ErrorClassDecl_in_lib"));
			 		StoredDefinition sd = new StoredDefinition(new Opt(), new List());
					sd.addElement(fcd);
                	return sd;
				} 
				
				boolean package_mo_present = false;
				for (int i=0;i<allFiles.length;i++) {
	   				if (allFiles[i].toString().length()>10)
	   					if (allFiles[i].toString().substring(allFiles[i].toString().length()-10).equals("package.mo"))
	   						package_mo_present = true;
	   			}
				
				if (package_mo_present) {
				    System.out.println("Reading file: " + dirName+"/package.mo...");
		   			SourceRoot sr = root().modelicaParser().parseFile(dirName+"/package.mo");
		   			FullClassDecl fcd = (FullClassDecl)sr.getProgram().getUnstructuredEntity(0).getElement(0);
		   			sr.getProgram().getUnstructuredEntity(0).setFileName(dirName+"/package.mo");
		   			LibClassDecl lcd = new LibClassDecl(fcd);
		   				   				   			
		   			/* Obtain a list of all files
	   				   get the corresponding package for each file
	   				   and add to list of TypeDefs */
	   			
	   				List libnodes = new List();
	   			
	   				File[] filesUnStructured = baseDir.listFiles(new UnStructuredEntriesFilenameFilter());
	   				debugPrint("Scanning directory: " + dirName);
	   				debugPrint(" Unstructured entries: ");
	   				for (int i=0;i<filesUnStructured.length;i++) {
	   					debugPrint("*** " + filesUnStructured[i].getName().substring(0,filesUnStructured[i].getName().length()-3));
	   					debugPrint("  "+filesUnStructured[i]);
   						libnodes.add(new LibNode(filesUnStructured[i].toString(),
	   				                         filesUnStructured[i].getName().substring(0,filesUnStructured[i].getName().length()-3),
	   				                         false));	
	   					
	   				}
	   				File[] dirs = baseDir.listFiles();
	   				debugPrint(" Structured entries: ");
		   			for (int i=0;i<dirs.length;i++) {
		   				if (dirs[i].isDirectory()){
		   					debugPrint("  " +dirs[i]);
		   					debugPrint("*** " + dirs[i].getName());
		   							   						   					
	   						// Check if the directory contains a package.mo
	   						// if not, do not add a LibNode
	   						File baseDir_tmp = new File(dirs[i].getAbsolutePath());			
							File[] allFiles_tmp = baseDir_tmp.listFiles();
							package_mo_present = false;
							for (int k=0;k<allFiles_tmp.length;k++) {
								debugPrint("   # " + allFiles_tmp[k].toString());
	   							if (allFiles_tmp[k].toString().length()>10)
	   								if (allFiles_tmp[k].toString().substring(allFiles_tmp[k].toString().length()-10).equals("package.mo"))
	   									package_mo_present = true;
	   						}
	   					
	   						if (package_mo_present) {
		   						libnodes.add(new LibNode(dirs[i].toString(),
		   				                         dirs[i].getName(),
		   				                         true));
							} else {
								debugPrint("*** " + dirs[i].getName() + " Not added: no package.mo present");
							}
						}
	   			
		   			}
						   			
					lcd.setLibNodeList(libnodes);
					sr.getProgram().getUnstructuredEntity(0).setElement(lcd,0);
	   				return sr.getProgram().getUnstructuredEntity(0);
	   			}
	   		} catch (Error e){
		    	System.out.println("In file: '"+ dirName+"/package.mo"+ "':");
				System.err.println(e.getMessage());
		        FullClassDecl fcd = new FullClassDecl();
				fcd.setName(new IdDecl("_ErrorClassDecl_in_lib"));
				StoredDefinition sd = new StoredDefinition(new Opt(), new List());
				sd.addElement(fcd);
                return sd;		        
	   		} catch (Exception e) {System.out.println(e.toString());
	   		                       e.printStackTrace();
	   		                       FullClassDecl fcd = new FullClassDecl();
					               fcd.setName(new IdDecl("_ErrorClassDecl_in_lib"));
				                   StoredDefinition sd = new StoredDefinition(new Opt(), new List());
				                   sd.addElement(fcd);
                                   return sd;		        
	   		                       }			
		} else {
		    try {
		    System.out.println("Reading file: " + getFileName() + "...");
			SourceRoot sr = root().modelicaParser().parseFile(getFileName());
			for (StoredDefinition sd : sr.getProgram().getUnstructuredEntitys()) {
				sd.setFileName(getFileName());
			}
			return sr.getProgram().getUnstructuredEntity(0);
			}catch (Error e){
		    	System.out.println("In file: '"+ getFileName()+ "':");
				System.err.println(e.getMessage());
		        FullClassDecl fcd = new FullClassDecl();
				fcd.setName(new IdDecl("_ErrorClassDecl_in_lib"));
				StoredDefinition sd = new StoredDefinition(new Opt(), new List());
				sd.addElement(fcd);
                return sd;		        
                }
		}
		return null;
	}
	
	public LibClassDecl.LibClassDecl(FullClassDecl fcd) {
		assignFields(fcd);            
	}
	
	public void LibClassDecl.assignFields(FullClassDecl fcd) {
		setVisibilityType(fcd.getVisibilityType());
		setEncapsulatedOpt(fcd.getEncapsulatedOpt());
		setPartialOpt(fcd.getPartialOpt());
		setRestriction(fcd.getRestriction());
		setName(fcd.getName());
		setRedeclareOpt(fcd.getRedeclareOpt());
		setFinalOpt(fcd.getFinalOpt());
		setInnerOpt(fcd.getInnerOpt());
		setOuterOpt(fcd.getOuterOpt());
		setReplaceableOpt(fcd.getReplaceableOpt());
		setConstrainingClauseOpt(fcd.getConstrainingClauseOpt());
	    setConstrainingClauseCommentOpt(fcd.getConstrainingClauseCommentOpt());
		setStringCommentOpt(fcd.getStringCommentOpt());
		setEquationList(fcd.getEquationList());
		setAlgorithmList(fcd.getAlgorithmList());
		setSuperList(fcd.getSuperList());
		setImportList(fcd.getImportList());
		setClassDeclList(fcd.getClassDeclList());
		setComponentDeclList(fcd.getComponentDeclList());
		setAnnotationList(fcd.getAnnotationList());
		setExternalClauseOpt(fcd.getExternalClauseOpt());
		setEndName(fcd.getEndName());		                     
	}
	
	eq LibClassDecl.getLibNode().enclosingClassDecl() = this; 	
	eq LibClassDecl.getLibNode().classNamePrefix() = classNamePrefix().equals("")?
                                                      name(): classNamePrefix() + "." + name();
                                                      
	public LibClassDecl FullClassDecl.createLibClassDecl() {
		return new LibClassDecl(this);
	}
	
	syn lazy List Program.getLibNodeList() {
		//LibNode ln =  new LibNode("/local/home/jakesson/Modelica_2_2_lite/Modelica","Modelica",true);
		LibNode ln =  new LibNode("/Users/jakesson/projects/ModelicaStandardLibrary/ModelicaStandardLibrary_v3/Modelica 3.0.1","Modelica",true);
		//LibNode ln =  new LibNode("/Users/jakesson/projects/P410-JModelicaIDE/examples/Modelica-2.2/Modelica","Modelica",true);
		return new List().add(ln);
	}
	
	static class UnStructuredEntriesFilenameFilter implements FilenameFilter {
	
			public boolean accept(File dir, String name) {
				//System.out.println(" * " +name);
				
				if (name.equals("package.mo"))
					return false;
					
				if (name.length()<=3)
					return false;
					 
				if (name.substring(name.length()-3,name.length()).equals(".mo")) {
					return true;
				} else { 
					return false;
				}	
			}
		
		}
	
}