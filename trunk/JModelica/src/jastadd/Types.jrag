aspect Types { 

   class Type {
      ArrayList<InstModification> env;
	
	  public boolean subType(Type t) {
	  	return false;
	  }

        public boolean superTypeComponentType(ComponentType t) {
          return false;
        }
        
        public boolean superTypeClassType(ClassType t) {
          return false;
        }
        
        public String name() {
          return getClass().getName();
        }
        
   }

	class ComponentType extends Type{
        ComponentDecl compDecl;
        
        public ComponentType(ComponentDecl compDecl, ArrayList<InstModification> env) {
	      this.compDecl = compDecl;
	      this.env = env;
		}
        
        public String toString() {
           StringBuffer str = new StringBuffer();
           str.append(compDecl.prettyPrint(""));
           str.append("\nEnv=");
           for (InstModification im : env) { 
	           str.append(im.getModification().prettyPrint("")+"\n");
	       }
           return str.toString();
         
        }
        
        public String name() {
           return compDecl.prettyPrint("");
        }
 
        
        public boolean subType(Type t) {
           return t.superTypeComponentType(this);
        }
        
        public boolean superTypeComponentType(ComponentType subType) {
           if (subType == this) return true;
           ComponentType superType = this;
                      
           if ((compDecl.myClass() instanceof PrimitiveClassDecl)) {
             if (subType.compDecl.myClass()== superType.compDecl.myClass())
             	return true;
           }  else if ((compDecl.myClass() instanceof FullClassDecl)) {
         	  for (ComponentDecl superTypeComponent : ((FullClassDecl)compDecl.myClass()).getComponentDecls()) {
           		  String cdName = superTypeComponent.name();
           		  HashSet set = subType.compDecl.myClass().memberComponent(cdName);
           	   if (set.size()!=1)
           	   	return false;
           	   ComponentDecl subTypeComponent = (ComponentDecl)set.iterator().next();	
           	   Type superTypeComponentType = type(superTypeComponent,superType.env);
           	   Type subTypeComponentType = type(subTypeComponent,subType.env);	
           	   if (!subTypeComponentType.subType(superTypeComponentType))
           	   	return false;
           	  }
           	}
           	
           return true;
        }
       
   		public Type type(ComponentDecl cd, ArrayList<InstModification> env) {
   		   	  	  	  	 
   		  ComponentDecl replacingComponent = cd; 
   		  	  	 
	   	  for (InstModification im : env) {
			if (im.getModification().matchRedeclare(cd.name())!=null) {
				replacingComponent = im.getModification().matchRedeclare(cd.name());
			    break;
			}
		  }
	     
	     ArrayList<InstModification> newEnv = new ArrayList<InstModification>();
	     
	     for (InstModification im : env) {
			Modification m = im.getModification().matchModification(cd.name());
			if (m!=null)
				newEnv.add(new InstModification(im.getInstNode(),m));
		}
	     
	     // Add modifications at the declaration to env
	     
	     return new ComponentType(replacingComponent,newEnv);   
   		
   		}
   
   }
   
	class ClassType extends Type{
	
		BaseClassDecl classDecl;
		
		public ClassType(BaseClassDecl classDecl, ArrayList<InstModification> env) {
	      this.classDecl = classDecl;
	      this.env = env;
		}

        public boolean subType(Type t) {
           return t.superTypeClassType(this);
        }
        
        public boolean superTypeClassType(ClassType t) {
           if (t == this) return true;
           return false;
           
        }

	
	   
	   /*
	   
	   public ArrayList<String> getMemberClassNames() {
	   		ArrayList<String> nameList = new ArrayList<String>();
	        for (ComponentDecl d : classDecl.getComponentDecls())
	        	nameList.add(d.name()); 
	        for (ClassDecl cd : classDecl.getClassDecls())
	        	nameList.add(cd.name()); 
            return nameList;
	   } 

       public ArrayList<String> getMemberComponentNames() {
	  
	  public ClassType getClassTypeOfComponent(String name) {
	  	 
	     // Find first component redeclare
         ComponentDecl replacingCD = retrieveReplacingDecl(name);
         if (replacingCD==null)
            replacingCD = classDecl.memberComponent(name);
	     
	     ArrayList<InstModification> newEnv = new ArrayList<InstModification>();
	     
	     for (InstModification im : env) {
			Modification m = im.getModification().matchModification(name);
			if (m!=null)
				newEnv.add(new InstModification(im.getInstNode(),m));
		}
	     
	     return new ClassType(replacingCD.myClassDecl(),newEnv);   
	      
	  }
	  
	  */
	    
	}

   

	public void InstReplacingComponent.typeCheck() {
	    ArrayList<InstModification> env = new ArrayList<InstModification>();
	    for (InstModification im : (List<InstModification>)myEnvironment(name())) {
	    	env.add(im);
	    }
		//ComponentType subType = new ComponentType(getComponentDecl(),env);
        ComponentType superType = new ComponentType(getOriginalDecl(),new ArrayList<InstModification>());
        for (InstModification im : (List<InstModification>)myEnvironment()) {
	   	 if (im.getModification().matchRedeclare(name())!=null) {
				ComponentType subType = new ComponentType(im.getModification().matchRedeclare(name()),env);
		        if (!subType.subType(superType))
        	        subType.compDecl.error("'" + subType.name()+ "'"+ " is not a subtype of " + "'"+superType.name()+"'");    
			}
	   }	
       
        	
        // Check subtype for ALL redeclarations in myEnvironment!!
        
        // If there is a constraining clause: type check this as well, taking
        // modifications intoaccount.		
        		
	}

	public String InstReplacingComponent.toString() {
	   StringBuffer str = new StringBuffer();
	   str.append("InstReplacingComponent:\n");
	   str.append(" Replacing decl: " + getComponentDecl().prettyPrint("") + "\n");
	   str.append(" Original decl:  " + getOriginalDecl().prettyPrint("") + "\n");
	   str.append(" myEnvironment():\n");
	   for (InstModification im : (List<InstModification>)myEnvironment()) {
	   	 str.append("  "+im.getModification().prettyPrint("")+"\n");
	   }
	   str.append(" mergedEnvironment():\n");
	   for (InstModification im : (List<InstModification>)getMergedEnvironments()) {
	   	 str.append("  "+im.getModification().prettyPrint("")+"\n");
	   }	
	   return str.toString();	
	}

	public String InstPrimitive.toString() {
	   StringBuffer str = new StringBuffer();
	   str.append("InstPrimitive:\n");
	   str.append(" Component decl: " + getComponentDecl().prettyPrint("") + "\n");
	   str.append(" myEnvironment():\n");
	   for (InstModification im : (List<InstModification>)myEnvironment()) {
	   	 str.append("  "+im.getModification().prettyPrint("")+"\n");
	   }
	   str.append(" mergedEnvironment():\n");
	   for (InstModification im : (List<InstModification>)getMergedEnvironments()) {
	   	 str.append("  "+im.getModification().prettyPrint("")+"\n");
	   }	
	   return str.toString();	
	}

	public String InstComposite.toString() {
	   StringBuffer str = new StringBuffer();
	   str.append("InstComposite:\n");
	   str.append(" Component decl: " + getComponentDecl().prettyPrint("") + "\n");
	   str.append(" myEnvironment():\n");
	   for (InstModification im : (List<InstModification>)myEnvironment()) {
	   	 str.append("  "+im.getModification().prettyPrint("")+"\n");
	   }
	   str.append(" mergedEnvironment():\n");
	   for (InstModification im : (List<InstModification>)getMergedEnvironments()) {
	   	 str.append("  "+im.getModification().prettyPrint("")+"\n");
	   }	
	   return str.toString();	
	}





}

aspect TypeErrorCheck {

 
  public void InstNode.collectErrors() {
	  nameCheck();
	  typeCheck();	  
	  for(InstNode n : getInstNodes()) {
		  n.collectErrors();
	  }
  }


}