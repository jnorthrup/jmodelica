abstract InstNode ::= /InstComponentDecl*/ /InstClassDecl*/ /InstExtends*/ /FAbstractEquation*/ /FQName/ /DynamicClassName:InstAccess*/; // /DynamicInst:InstNode*/ /DynamicInstConstraining:InstNode*/;
abstract InstRoot : InstNode ::= /FPrimitiveType*/;
InstClassRoot : InstRoot ::= <ClassDecl:ClassDecl>;
//InstFullClassDeclRoot :InstRoot ::= InstFullClassDecl;
InstProgramRoot : InstRoot ::= <Program:Program>
					           /UnknownInstClassDecl/
                               /UnknownInstComponentDecl/
                               /InstPredefinedType:InstClassDecl*/ 
                               /InstBuiltInType:InstClassDecl*/   
                               /InstBuiltInFunction:InstClassDecl*/;

abstract InstClassDecl: InstNode ::= <ClassDecl:ClassDecl>;
abstract InstBaseClassDecl : InstClassDecl ::=  /InstImport*/ [InstConstraining];
InstFullClassDecl : InstBaseClassDecl ::= ;
InstShortClassDecl : InstBaseClassDecl ::= ;
InstPrimitiveClassDecl : InstFullClassDecl;
InstBuiltInClassDecl : InstClassDecl ::=;
UnknownInstClassDecl : InstFullClassDecl;

InstReplacingFullClassDecl : InstFullClassDecl ::= <OriginalClassDecl:ClassDecl> /OriginalInstClass:InstClassDecl/ <IClassRedeclare:IClassRedeclare>;
InstReplacingShortClassDecl : InstShortClassDecl ::= <OriginalClassDecl:ClassDecl> /OriginalInstClass:InstClassDecl/ <IClassRedeclare:IClassRedeclare>;
InstReplacingPrimitiveClassDecl : InstReplacingFullClassDecl ::=;
 
abstract InstImport ::= PackageName:InstAccess <ImportClause:ImportClause>;
InstImportQualified : InstImport;
InstImportUnqualified : InstImport;
InstImportRename : InstImport;

abstract InstConstraining ::=  ClassName:InstAccess [IClassModification] /InstNode/;
InstConstrainingClass : InstConstraining ::= <BaseClassDecl:BaseClassDecl>;
InstConstrainingComponent : InstConstraining ::= <ComponentDecl:ComponentDecl> /DynamicClassName:InstAccess*/;

// The class to expand may differ from the declared class of the component due to 
// redeclaration of classes.
abstract InstComponentDecl : InstNode ::= ClassName:InstAccess <ComponentDecl:ComponentDecl> [IModification] [InstConstraining];
InstComposite : InstComponentDecl;
InstPrimitive : InstComponentDecl ;
InstBuiltIn : InstComponentDecl;
UnknownInstComponentDecl : InstComponentDecl;

InstReplacingComposite : InstComposite ::= <OriginalDecl:ComponentDecl> /OriginalInstComponent:InstComponentDecl/ <IComponentRedeclare:IComponentRedeclare>;
InstReplacingPrimitive : InstPrimitive ::= <OriginalDecl:ComponentDecl> /OriginalInstComponent:InstComponentDecl/ <IComponentRedeclare:IComponentRedeclare>;

InstExtends : InstNode ::= ClassName:InstAccess <ExtendsClause:ExtendsClause> [IClassModification];
InstExtendsShortClass : InstExtends ::=;
//InstReplacingExtendsShortClass : InstReplacingExtendsShortClass ::= <InstExtendsShortClass:InstExtendsShortClass>

// Accesses in the instance tree
abstract InstAccess ::= <ID>;
InstDot : InstAccess ::= Left:InstAccess Right:InstAccess;

InstParseAccess : InstAccess;// ::= [ArraySubscripts];
InstClassAccess : InstAccess;
InstAmbiguousAccess : InstAccess;// ::= [ArraySubscripts];

InstComponentAccess : InstAccess;// ::= [ArraySubscripts];

/*
Environment ::= InstModification*;
InstModification ::= <InstNode:InstNode> <Modification:Modification>;
InstCompleteModification : InstModification;
InstClassModification : InstModification;
InstValueModification : InstModification ::=;// /FExp/;
InstComponentModification : InstModification ::= ComponentName:InstAccess;
InstComponentRedeclare : InstModification ::= ComponentName:InstAccess;
InstClassRedeclare : InstModification ::= ClassName:InstAccess;
*/

// These nodes are used to create instance copies of modification trees intended for
// error checking.	
abstract IModification ::= <Modification:Modification>;
ICompleteModification : IModification ::= IClassModification [IValueModification];
IValueModification : IModification ::= /FExp/;

IClassModification : IModification ::= IArgument*;
abstract IArgument : IModification ::=;

abstract INamedModification : IArgument ::= Name:InstAccess;
abstract IElementModification : INamedModification ::= [IModification];
IComponentModification : IElementModification; 
abstract IElementRedeclare : INamedModification;
IClassRedeclare : IElementRedeclare ::= /InstClassDecl/;
IComponentRedeclare : IElementRedeclare ::= /InstComponentDecl/ /DynamicClassName:InstAccess*/;
	