aspect DumpTree {
/* 	
 	public void FullClassDecl.dumpTree(String indent) {
 		getImportList().dumpTree(indent);
 		super.dumpTree(indent);
 	}
 */
 
 
  	public void ASTNode.dumpTree(String indent) {
     	//debugPrint("*** ASTNode.dumpTree(): " + toString());
    	System.out.println(indent + dump() + " at line: " + beginLine());
    	for(int i = 0; i < getNumChild(); i++)
    		if (getChild(i) instanceof ASTNode)
	      		getChild(i).dumpTree(indent + "  ");
  	}
  
  	/**
  	 * 
  	 */
  	protected String ASTNode.dump() {
    	//debugPrint("*** ASTNode.dump(): " + toString());
    	String str = getClass().getName();
		return str.substring(str.lastIndexOf('.')+1);
  	}


	public void IdDecl.dumpTree(String indent) {
    	System.out.println(indent + dump() +": "+getID() + " at line: " + beginLine());
  	} 

 	public void ClassAccess.dumpTree(String indent) {
    	String s = indent + dump() +": "+getID() + " at line: " + beginLine()+ ", ClassDecl at: ";
    	if (myClassDecl().isUnknown())
    		s+="Unknown";
    	else
    		s+=	myClassDecl().beginLine();
    	
    	System.out.println(s);
  } 
  
   	public void ComponentAccess.dumpTree(String indent) {
    	String s = indent + dump() +": "+getID() + " at line: " + beginLine()+ ", ComponentDecl at: ";
    	if (myComponentDecl().isUnknown())
    		s+="Unknown";
    	else
    		s+=	myComponentDecl().beginLine();
    	System.out.println(s);
    	for(int i = 0; i < getNumChild(); i++)
      		getChild(i).dumpTree(indent + "  ");
    	
   } 
  
	public void Access.dumpTree(String indent) {
  		String s = indent + dump() +": "+qualifiedName() + " at line: " + beginLine();
  		System.out.println(s);
   	}
  
 
  public void Dot.dumpTree(String indent) {
  	super.dumpTree(indent);
  	getLeft().dumpTree(indent+" ");
  	getRight().dumpTree(indent+" ");
  }
 
  
 /*
 public void AmbiguousAccess.dumpTree(String indent) {
    String s = indent + dump() +": "+getID() + " at line: " + beginLine()+ ", ClassDecl at: ";
    if (myClass()==null)
    	s+="UnknownClass";
    else
    	s+=	myClass().beginLine();
    	s+=" Kind: ";
    	if (kind() == Kind.AMBIGUOUS_ACCESS) s+= "AMBIGUOUS_NAME";
    	
    System.out.println(s);
  } 
   
  public void ClassAccess.dumpTree(String indent) {
    String s = indent + dump() +": "+getID() + " at line: " + beginLine()+ 
               ", ClassDecl at: ";
               
    if (myClass() instanceof RealClass) 
    	s+="Real";
    else if (myClass()==null)
    	s+="UnknownDef (null)";
    else {
    	s+=	myClass().getName().beginLine() + " (" + myClass().getName().getID() + ")";
    }	
    System.out.println(s);
  } 

  public void ComponentAccess.dumpTree(String indent) {
  	//super.dumpTree("");
  	ComponentDecl decl = myDecl();
  	StringBuffer s = new StringBuffer();
    if (decl==null) {
  		s.append(": Undeclared");
  	} else {
  		s.append(": Declared at line "+decl.getName().getLine(decl.getName().getStart()));
  		//myDecl().dumpTree("");
  	}
    System.out.println(indent + dump() +": "+getID() +   " at line: " + beginLine() + s.toString());
    for(int i = 0; i < getNumChild(); i++)
      getChild(i).dumpTree(indent + "  ");
  } 
*/

 public void Opt.dumpTree(String indent) {
  	if (getNumChild()>0)
  		super.dumpTree(indent);
  }
  
  public void List.dumpTree(String indent) {
  	if (getNumChild()>0)
  		super.dumpTree(indent);
  }

  public void RealLitExp.dumpTree(String indent) {
  	System.out.println(indent+dump() + " " + getUNSIGNED_NUMBER());
  }

  public void FunctionCall.dumpTree(String indent) {
  	debugPrint("** FunctionCall.dumpTree");
  	super.dumpTree(indent);
  }

}




aspect DumpTreeBasic {
 
  public void ASTNode.dumpTreeBasic(String indent) {
    System.out.println(indent + dumpBasic() + " at line: " + getLine(getStart()));
    for(int i = 0; i < getNumChild(); i++) 
   		if (getChild(i) instanceof ASTNode)
      		getChild(i).dumpTreeBasic(indent + "  ");
  }
  
  
  public void IdDecl.dumpTreeBasic(String indent) {
  	System.out.println(indent + dumpBasic() + " at line: " + getLine(getStart()) + " decl name: " + getID());
  }
  
  public void Access.dumpTreeBasic(String indent) {
  	System.out.println(indent + dumpBasic() + " at line: " + getLine(getStart()) + " access name: " + getID());
  }
  
  public void Dot.dumpTreeBasic(String indent) {
  	for(int i = 0; i < getNumChild(); i++)
      getChild(i).dumpTreeBasic(indent + "  ");
  }
  
  public void Opt.dumpTreeBasic(String indent) {
  	if (getNumChild()>0)
  		super.dumpTreeBasic(indent);
  }
  
  public void List.dumpTreeBasic(String indent) {
  	if (getNumChild()>0)
  		super.dumpTreeBasic(indent);
  }
  
  public void RealLitExp.dumpTreeBasic(String indent) {
  	System.out.println(indent+dumpBasic() + " " + getUNSIGNED_NUMBER());
  }
	
  
  protected String ASTNode.dumpBasic() {
    String str = getClass().getName();
	return str.substring(str.lastIndexOf('.')+1);
  }

}

aspect FlatDumpTree {
/*
	public void FIdUse.dumpTree(String indent) {
		String s = indent + dump() +": " + name() + " at line: " + beginLine();
		System.out.println(s);
	}
	
	public void FIdDecl.dumpTree(String indent) {
		String s = indent + dump() +": " + name() + " at line: " + beginLine();
		System.out.println(s);
	}
	*/
	public void FQName.dumpTree(String indent) {
		debugPrint("FQName.dumpTree");
		String s = indent + dump() +": " + name() + " at line: " + beginLine();
		System.out.println(s);
		for(int i = 0; i < getNumChild(); i++)
      		getChild(i).dumpTree(indent + "  ");
	}
	
	
	
	public void FSubExp.dumpTree(String indent) {
		debugPrint("FSubExp.dumpTree, Left: "+
		            getLeftNoTransform().getClass().getName()+ " Right: "+
		            getRightNoTransform().getClass().getName());
		for(int i = 0; i < getNumChild(); i++)
      		getChild(i).dumpTree(indent + "  ");
	}
	
	
	public void FQNamePart.dumpTree(String indent) {
		String s = indent + dump() +": " + name() + " at line: " + beginLine();
		System.out.println(s);
		for(int i = 0; i < getNumChild(); i++)
      		getChild(i).dumpTree(indent + "  ");
    }
}