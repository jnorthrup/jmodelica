

	// superclass to all classes that perform the dispatch
	class Printer {
  		public void toString(ASTNode node, StringBuffer str, String indent, Object o) { 
  		}
	}

	// select first variant
	class PrettyPrinter extends Printer {
 		public void toString(ASTNode node, StringBuffer str, String indent, Object o) { 
 			node.prettyPrint(this, str, indent, o); 
 		}
	}
	
	// select second variant
	class DumpTreePrinter extends Printer {
		public void toString(ASTNode node, StringBuffer str, String indent, Object o) { 
 			node._dumpTree(this, str, indent, o); 
 		}
	}

aspect PrettyPrint {
	
	public void ASTNode._dumpTree(StringBuffer str, String indent) {
 		_dumpTree(new DumpTreePrinter(),str,indent,null);
	}

	public void ASTNode._dumpTree(StringBuffer str, String indent,Object o) {
 		_dumpTree(new DumpTreePrinter(),str,indent,o);
	}

	// dump node names
	public void ASTNode._dumpTree(Printer p, StringBuffer str, String indent, Object o) {
 		str.append(indent + getClass().getName() + "\n");
 		for(int i = 0; i < getNumChild(); i++)
   			p.toString(getChild(i),str,indent + " ",o); // distpatch through Printer
	}

	public String ASTNode.prettyPrint(String indent) {
		StringBuffer str = new StringBuffer();
		prettyPrint(str,indent,null);
		return str.toString();
	}

	public String ASTNode.prettyPrint(String indent,Object o) {
		StringBuffer str = new StringBuffer();
		prettyPrint(str,indent,o);
		return str.toString();
	}

	public void ASTNode.prettyPrint(StringBuffer str,String indent) {
 		prettyPrint(new PrettyPrinter(),str,indent,null);
	}


	public void ASTNode.prettyPrint(StringBuffer str,String indent, Object o) {
 		prettyPrint(new PrettyPrinter(),str,indent,o);
	}
	
	
	// firstPrint is default behavior for secondPrint
	public void ASTNode.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
 		//return _dumpTree(p,indent); // Create default behaviour
  		for(int i = 0; i < getNumChild(); i++)
   			p.toString(getChild(i),str,indent,o); // distpatch through Printer
	}
	
	public void Program.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		for (int i=0;i<getNumElement();i++)
 			p.toString(getElement(i),str,indent,o);
 			str.append(";\n");		
	}
	
	// specialize behavior for A
	
	
    public void ShortClassDecl.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
	    if (hasEncapsulated())
	    	str.append("encapsulated ");
	    if (hasPartial())
	    	str.append("partial ");
	    if (hasRedeclare())
	    	str.append("redeclare ");
	    if (hasFinal())
	    	str.append("final ");
	    if (hasInner())
	    	str.append("inner ");
	    if (hasOuter())
	    	str.append("outer ");
	    if (hasReplaceable())
	    	str.append("replaceable ");
	    
	    
	    str.append(indent + getRestriction().toString());
 		str.append(" " + getName().getID());
	    str.append(" = ");
	    str.append(getExtendsClauseShortClass().getSuper().name());
	    if (getExtendsClauseShortClass().hasArraySubscripts())
	    	p.toString(getExtendsClauseShortClass().getArraySubscripts(),str,indent+"  ",o);
	    if (getExtendsClauseShortClass().hasClassModification())
	    	p.toString(getExtendsClauseShortClass().getClassModification(),str,indent+"  ",o);
	    if (hasConstrainingClause())
	    	p.toString(getConstrainingClause(),str,indent+"  ",o);
	    
	}
	
	public void FullClassDecl.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
	    if (hasEncapsulated())
	    	str.append("encapsulated ");
	    if (hasPartial())
	    	str.append("partial "); 		
 	    if (hasRedeclare())
	    	str.append("redeclare ");
	    if (hasFinal())
	    	str.append("final ");
	    if (hasInner())
	    	str.append("inner ");
	    if (hasOuter())
	    	str.append("outer ");
	    if (hasReplaceable())
	    	str.append("replaceable ");
	    
 		
 		str.append(indent + getRestriction().toString());
 		str.append(" " + getName().getID() + "\n");

		
 		// Print all local classes
 		int numPubClass = 0;
// 		str.append(indent + "public\n");
 		for (int i=0;i<getNumClassDecl();i++)
 			if (((BaseClassDecl)getClassDecl(i)).isPublic()) {
 			 	numPubClass++;
	 			p.toString(getClassDecl(i),str,indent+"  ",o);
	 			str.append(";\n\n");
			}
			
		if (getNumClassDecl()-numPubClass>0) {	
	 		str.append(indent + "protected\n");
 			for (int i=0;i<getNumClassDecl();i++)
 				if (((BaseClassDecl)getClassDecl(i)).isProtected()) {
		 			p.toString(getClassDecl(i),str,indent+"  ",o);
		 			str.append(";\n\n");
		 		}
		}
			
		// Print all extends clauses
 		for (int i=0;i<getNumSuper();i++) {
 			p.toString(getSuper(i),str,indent+"  ",o);
 			str.append(";\n");
		} 			
			
 		// Print all components
 		int numPubComp = 0;
// 		str.append(indent + "public\n");
 		for (int i=0;i<getNumComponentDecl();i++)
 			if (getComponentDecl(i).isPublic()) {
 			 	numPubComp++;
	 			p.toString(getComponentDecl(i),str,indent+"  ",o);
	 			str.append(";\n");
			}
			
		if (getNumComponentDecl()-numPubComp>0) {	
	 		str.append(indent + "protected\n");
 			for (int i=0;i<getNumComponentDecl();i++)
 				if (getComponentDecl(i).isProtected()) {
		 			p.toString(getComponentDecl(i),str,indent+"  ",o);
		 			str.append(";\n");
			}
		}	
		
		if (getNumEquation()>0) {
			str.append(indent + "equation\n");
			for (int i=0;i<getNumEquation();i++) {
				str.append(indent + "  ");
				p.toString(getEquation(i),str,indent,o);
				str.append(";\n");
			}
		}
		
		str.append(indent + "end " + getName().getID());
	} 

	public void ComponentDecl.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append(indent);//+getVisibilityType().toString()+" ";
		
		if (hasRedeclare())
			str.append(getRedeclare().toString() + " ");
		if (hasFinal())
			str.append(getFinal().toString() + " ");
		if (hasInner())
			str.append(getInner().toString() + " ");
		if (hasOuter())
			str.append(getOuter().toString() + " ");
		if (hasReplaceable())
			str.append(getReplaceable().toString() + " ");	
		if (hasTypePrefixFlow())
			str.append(getTypePrefixFlow().toString() + " ");
		if (hasTypePrefixOther())
			str.append(getTypePrefixOther().toString() + " ");
		if (hasTypePrefixInputOutput())
			str.append(getTypePrefixInputOutput().toString() + " ");
		
		p.toString(getClassName(),str,indent,o);
		if (hasTypeArraySubscripts())
			p.toString(getTypeArraySubscripts(),str,indent,o);
		str.append(" " + getName().getID()); 
	    if (hasVarArraySubscripts())
			p.toString(getVarArraySubscripts(),str,indent,o);
		 p.toString(getModificationOpt(),str,indent,o);
				 
		if (hasConstrainingClause()) {
		  p.toString(getConstrainingClause(),str,indent,o);
		
		}		 

				    
	}

	public void ConstrainingClause.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
       str.append(" extends " + getAccess().name() +" ");
       if (hasClassModification())
	       p.toString(getClassModification(),str,indent,o);

	}

	public void ArraySubscripts.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		if (getNumSubscript()>0) {
			str.append("[");
			for (int i=0;i<getNumSubscript();i++) {
				p.toString(getSubscript(i),str,indent,o);
				if (i<getNumSubscript()-1)
					str.append(",");
			}
			str.append("]");
		}
	}

	public void ColonSubscript.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append(":");
	}
	
	public void ExpSubscript.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		p.toString(getExp(),str,indent,o);
	}

	public void RangeExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o) { 
		for (int i=0;i<getNumExp();i++) {
			p.toString(getExp(i),str,indent,o);
			if (i<getNumExp()-1)
				str.append(":");
		}
	}

	public void ExtendsClause.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append(indent + "extends ");
		p.toString(getSuper(),str,indent,o);
		p.toString(getClassModificationOpt(),str,indent,o);
	}

	public void CompleteModification.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		p.toString(getClassModification(),str,indent,o);
		if (hasValueModification())
		  p.toString(getValueModification(),str,indent,o);
	}
	
	public void ValueModification.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("=");
		p.toString(getExp(),str,indent,o);
	}
	
	public void ClassModification.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("(");
		for (int i=0;i<getNumArgument();i++) {
			p.toString(getArgument(i),str,indent,o);
			if (i<getNumArgument()-1)
				str.append(",");
		}
		str.append(")");
	}
	
	public void ElementModification.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		if (hasEach())
			str.append(getEach().toString() + " ");
		if (hasFinal())
		 	str.append(getFinal().toString() + " ");
		p.toString(getName(),str, indent,o);
		if (hasModification())
			p.toString(getModification(),str,indent,o);
	}


	public void ComponentRedeclare.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		if (hasEach())
			str.append(getEach().toString() + " ");
		if (hasFinal())
		 	str.append(getFinal().toString() + " ");
		p.toString(getComponentDecl(),str,indent,o);
		

	}

	public void ClassRedeclare.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		if (hasEach())
			str.append(getEach().toString() + " ");
		if (hasFinal())
		 	str.append(getFinal().toString() + " ");
		p.toString(getBaseClassDecl(),str,indent,o);
		

	}	

	public void Opt.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		if (getNumChild()>0)
			p.toString(getChild(0),str,indent,o);
	}

	public void Equation.prettyPrint(Printer p,StringBuffer str, String indent, Object o) {
		p.toString(getLeft(),str,indent,o);
		str.append(" = ");
		p.toString(getRight(),str,indent,o);
	}

	public void ConnectClause.prettyPrint(Printer p,StringBuffer str, String indent, Object o) {
		str.append("connect(");
		p.toString(getConnector1(),str,indent,o);
		str.append(",");
		p.toString(getConnector2(),str,indent,o);
		str.append(")");
	}
	
	public void AddExp.prettyPrint(Printer p,StringBuffer str, String indent, Object o) {
		p.toString(getLeft(),str,indent,o);
		if(!(getRight() instanceof NegExp)) 
			str.append("+");
		p.toString(getRight(),str,indent,o);
	}
		
	public void SubExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		p.toString(getLeft(),str,indent,o);
		str.append("-");
		if (getRight().isAddOrSub()) {
			str.append("(");
			p.toString(getRight(),str,indent,o);
			str.append(")");
		} else
			p.toString(getRight(),str,indent,o);
	}
		
	public void MulExp.prettyPrint(Printer p,StringBuffer str, String indent, Object o) {
		if (getLeft().isAddOrSub()) {
			str.append("(");
			p.toString(getLeft(),str,indent,o);
			str.append(")");
		} else
			p.toString(getLeft(),str,indent,o);	
		str.append("*");
		if (getRight().isAddOrSub()) {
			str.append("(");
			p.toString(getRight(),str,indent,o);
			str.append(")");
		} else
			p.toString(getRight(),str,indent,o);
	}
		
	public void DivExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o){
		if (getLeft().isAddOrSub()) {
			str.append("(");
			p.toString(getLeft(),str,indent,o);
			str.append(")");
		} else
			p.toString(getLeft(),str,indent,o);
		str.append("/");	
		str.append("(");
		p.toString(getRight(),str,indent,o);
		str.append(")");
	}
		
	public void PowExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o){
		if (!(getLeft().isPrimary())) {
			str.append("(");
			p.toString(getLeft(),str,indent,o);
			str.append(")");
		} else
			p.toString(getLeft(),str,indent,o);
		str.append("^");
		if (!(getRight().isPrimary())) {
			str.append("(");
			p.toString(getRight(),str,indent,o);
			str.append(")");
		} else
			p.toString(getRight(),str,indent,o);
	}
		
	public void NegExp.prettyPrint(Printer p,StringBuffer str, String indent, Object o){
		str.append("-");
		if (getExp().isAddOrSub()) {
			str.append("(");
			p.toString(getExp(),str,indent,o);
			str.append(")");
		} else
			p.toString(getExp(),str,indent,o);
	}
	
	public void RealLitExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append(getUNSIGNED_NUMBER());
	}
	
	public void TimeExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("time");
	}
		
	public void FunctionCall.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		p.toString(getName(),str,indent,o);
		str.append("("); 
		p.toString(getFunctionArgumentsOpt(),str,indent,o);
		str.append(")");
	}

	public void SumRedExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("sum("); 
		p.toString(getExp(),str,indent,o);
		str.append(" for ");
		str.append(getForIndex().getForIndexDecl().name());
		str.append(" in ");
		if (getForIndex().hasExp())
			p.toString(getForIndex().getExp(),str,indent,o);
		str.append(")");
	}


	public void SizeExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("size(");
		p.toString(getAccess(),str,"",o);
		str.append(",");
		p.toString(getDim(),str,"",o);
		str.append(")");
	}

	public void FunctionArguments.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		for (int i=0; i<getNumExp(); i++) {
			p.toString(getExp(i),str,indent,o);
			if (i<getNumExp()-1)
				str.append(",");
		}
	}
	
	public void ExpList.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		for (int i=0; i<getNumExp(); i++) {
			p.toString(getExp(i),str,indent,o);
			if (i<getNumExp()-1)
				str.append(",");
		}
	}

	public void Access.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append(getID());
	}
		
	public void Dot.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		p.toString(getLeft(),str,indent,o);
		str.append(".");
		p.toString(getRight(),str,indent,o);	
	}
	
	public void ComponentAccess.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append(getID());
		if (hasArraySubscripts())
			p.toString(getArraySubscripts(),str,indent,o);
	}
	
	public void StringLitExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("\"" + getSTRING() + "\"");
	}

	public void BooleanLitExpTrue.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("true");
	}

	public void BooleanLitExpFalse.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("false");
	}
	
	public void ArrayConstructor.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("{");
		p.toString(getFunctionArguments(),str,indent,o);
		str.append("}");
	}
	
	public void Matrix.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("[");
		for (int i=0;i<getNumExpList();i++) {
			p.toString(getExpList(i),str,indent,o);
			if (i<getNumExpList()-1)
				str.append(";");
		}
		str.append("]");
	}
	
	syn boolean Exp.isAddOrSub() = false;
	eq AddExp.isAddOrSub() = true;
	eq SubExp.isAddOrSub() = true;
	syn boolean Exp.isPrimary() = false;
	eq AccessExp.isPrimary() = true;
	eq RealLitExp.isPrimary() = true;

	public void LogBinExp.prettyPrint(Printer p,StringBuffer str, String indent, Object o) {
		//str.append("((");
		p.toString(getLeft(),str,indent,o);
		//str.append(")"+op()+"(");
		str.append(op());
		p.toString(getRight(),str,indent,o);
		//str.append("))");
	}
	
	syn String LogBinExp.op();
	eq LtExp.op() = "<";
	eq LeqExp.op() = "<=";
	eq GtExp .op() = ">";
	eq GeqExp.op() = ">=";
	eq EqExp.op() = "==";
	eq NeqExp.op() = "<>";
	eq OrExp.op() = " or ";
	eq AndExp.op() = " and ";
	
	public void NotExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("not ");
		p.toString(getExp(),str,indent,o);
	}


	syn String Redeclare.toString() = "redeclare";
	syn String Final.toString() = "final";
	syn String Inner.toString() = "inner";
	syn String Outer.toString() = "outer";
	syn String Replaceable.toString() = "replaceable";
	syn String TypePrefixFlow.toString() = "flow";
	syn String TypePrefixInputOutput.toString();
	eq Input.toString() = "input";
	eq Output.toString()= "output";
	syn String TypePrefixOther.toString();
	eq Parameter.toString() = "parameter";
	eq Discrete.toString() = "discrete";
	eq Constant.toString() = "constant";
	
	syn String FPrimitiveType.toString();
	eq FRealType.toString() = "Real";
	eq FIntegerType.toString() = "Integer";
	eq FStringType.toString() = "String";
	eq FBooleanType.toString() = "Boolean";	

}

aspect FlattPrettyPrint {
	
	public void FClass.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append(indent+"fclass "+ name() +"\n");
		for (int i=0;i<getNumFVariable();i++) {
			debugPrint("FClass.prettyPrint(): FVariable: " + getFVariable(i).name() + " is$Final: " + is$Final);
	  		p.toString(getFVariable(i),str,indent+" ",o);
	  		str.append(";\n");  
		}

		if (getNumFInitialEquation()>0)
			str.append(indent + "initial equation \n");
	    for (int j=0;j<getNumFInitialEquation();j++) {
			debugPrint("FClass.prettyPrint(): Equation nr: " + j);
	  		p.toString(getFInitialEquation(j),str, indent+" ",o);
			str.append(";\n");
		}
	
		
		str.append(indent + "equation \n");
	  	for (int i=0;i<getNumFEquationBlock();i++) {
			for (int j=0;j<getFEquationBlock(i).getNumFAbstractEquation();j++) {
				debugPrint("FClass.prettyPrint(): Equation nr: " + j);
	  			p.toString(getFEquationBlock(i).getFAbstractEquation(j),str, indent+" ",o);
				str.append(";\n");
			}
		}
  		str.append(indent);
  		str.append("end ");
  		str.append(name());
  		str.append(";\n");
	}

	public void FVariable.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		
			str.append(indent);
	    
			if (hasFTypePrefixOther()) {
				str.append(getFTypePrefixOther().toString());
				str.append(" ");
			}
			
			if (hasFTypePrefixInputOutput()) {
				str.append(getFTypePrefixInputOutput().toString());
				str.append(" ");
			}
			
			str.append(getType());
			str.append(" ");
			p.toString(getFQName(),str,"",o);
		
	    	getFAttributeList().prettyPrintFAttributeList(str,p,o);
	    	
	   if (hasBindingExp()) {
				str.append(" = ");
				FExp bindingExp = getBindingExp();
				p.toString(bindingExp,str,indent,o);
				
			}
	    	
	    if (hasFStringComment()) {
	    	str.append(" \"");
	    	str.append(getFStringComment().getComment());
	    	str.append("\"");
	    }
	    
	     if (hasBindingExp()) {
 		     FExp bindingExp = getBindingExp();
				FlatStaticValue value = bindingExp.value();
				if (value instanceof IntegerStaticValue) {
					IntegerStaticValue iValue = (IntegerStaticValue) value;
					str.append(" /*(" + iValue.getValue() + ")*/");
				} else if (value instanceof RealStaticValue) {
					RealStaticValue rValue = (RealStaticValue) value;
					str.append(" /*(" + rValue.getValue() + ")*/");					
				}
			}
	    
		
		}

	
	public void List.prettyPrintFAttributeList(StringBuffer str, Printer p, Object o) {
	
	    boolean attrSet = false;
	    	boolean firstAttr = true;
	    	
	    	for (int i=0;i<getNumChild();i++) {
	    		if (((FAttribute)getChild(i)).getAttributeSet()) {
					attrSet=true;
					break;
	 		   	}
	    	}
	    
	    	if (attrSet){
	    		str.append("(");
	    		for (int i=0;i<getNumChild();i++) {
	    
	    			if (((FAttribute)getChild(i)).getAttributeSet()) {
	
						if (!firstAttr)	
							str.append(",");
						p.toString(((FAttribute)getChild(i)),str,"",o);
						
						firstAttr = false;
	 		   		}
	    		}
	    		str.append(")");
	   		}
	
	}
	
    public void FAttribute.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
			
						if (hasFEach())
							str.append("each ");
						if (hasFFinal())
							str.append("final ");	
		    			str.append(getName().name());
		    			getFAttributeList().prettyPrintFAttributeList(str,p,o);
		    			if (hasValue()) {
		    				str.append(" = ");
	    					p.toString(getValue(),str,"",o);
						}
	}

    public void FQNamePart.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
    	str.append(getName());
		if (hasFArraySubscripts())
			p.toString(getFArraySubscripts(),str,indent,o);				    	
    }
    
    public void FQName.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		for (int i = 0; i < getNumFQNamePart(); i++) {
			p.toString(getFQNamePart(i),str,indent,o);
			if (i<getNumFQNamePart()-1)
				str.append(".");
		}    	
    }
    
    public void FArraySubscripts.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		if (getNumFSubscript()>0) {
			str.append("[");
			for (int i=0;i<getNumFSubscript();i++) {
				p.toString(getFSubscript(i),str,indent,o);
				if (i<getNumFSubscript()-1)
					str.append(",");
			}
			str.append("]");
		}
	}

	public void FColonSubscript.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append(":");
	}
	
	public void FExpSubscript.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		p.toString(getFExp(),str,indent,o);
	}

	public void FRangeExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o) { 
		for (int i=0;i<getNumFExp();i++) {
			p.toString(getFExp(i),str,indent,o);
			if (i<getNumFExp()-1)
				str.append(":");
		}
	}

	public void FEquation.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append(indent);
    	p.toString(getLeft(),str,indent,o);
   		str.append(" = ");
   		p.toString(getRight(),str,indent,o);
	}
	
	public void FAddExp.prettyPrint(Printer p,StringBuffer str, String indent, Object o) {
		p.toString(getLeft(),str,indent,o);
		if(!(getRight() instanceof FNegExp)) 
			str.append(" + ");
		p.toString(getRight(),str,indent,o);
	}
		
	public void FSubExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		p.toString(getLeft(),str,indent,o);
		str.append(" - ");
//		if (getRight().isAddOrSub()) {
			str.append("( ");
			p.toString(getRight(),str,indent,o);
			str.append(" )");
//		} else
//			p.toString(getRight(),str,indent,o);
	}
		
	public void FMulExp.prettyPrint(Printer p,StringBuffer str, String indent, Object o) {
		str.append("( ");
		p.toString(getLeft(),str,indent,o);
		str.append(" )");
		str.append(" * ");
		str.append("( ");
		p.toString(getRight(),str,indent,o);
		str.append(" )");
	}
		
	public void FDivExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o){
		str.append("( ");
		p.toString(getLeft(),str,indent,o);
		str.append(" )");
		str.append(" / ");	
		str.append("( ");
		p.toString(getRight(),str,indent,o);
		str.append(" )");
	}
		
	public void FPowExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o){
		if (!(getLeft().isPrimary())) {
			str.append("( ");
			p.toString(getLeft(),str,indent,o);
			str.append(" )");
		} else
			p.toString(getLeft(),str,indent,o);
		str.append(" ^ ");
		if (!(getRight().isPrimary())) {
			str.append("( ");
			p.toString(getRight(),str,indent,o);
			str.append(" )");
		} else
			p.toString(getRight(),str,indent,o);
	}
		
	public void FNegExp.prettyPrint(Printer p,StringBuffer str, String indent, Object o){
		str.append(" - ");
//		if (getFExp().isAddOrSub()) {
			str.append("( ");
			p.toString(getFExp(),str,indent,o);
			str.append(" )");
//		} else
//			p.toString(getFExp(),str,indent,o);
	}
	
	public void FLogBinExp.prettyPrint(Printer p,StringBuffer str, String indent, Object o) {
		p.toString(getLeft(),str,indent,o);
		str.append(op());
		p.toString(getRight(),str,indent,o);
	}
	
	syn String FLogBinExp.op();
	eq FLtExp.op() = " < ";
	eq FLeqExp.op() = " <= ";
	eq FGtExp .op() = " > ";
	eq FGeqExp.op() = " >= ";
	eq FEqExp.op() = " == ";
	eq FNeqExp.op() = " <> ";
	eq FOrExp.op() = " or ";
	eq FAndExp.op() = " and ";
	
	public void FNotExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("not ");
		p.toString(getFExp(),str,indent,o);
	}
	
	public void FIfExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		debugPrint("**************************** FIfExp.prettyPrint");
		str.append("(if ");
		p.toString(getIfExp(),str,indent,o);
		str.append(" then ");
		p.toString(getThenExp(),str,indent,o);
		str.append("\n ");
		for (int i=0;i<getNumFElseIfExp();i++) {
			p.toString(getFElseIfExp(i),str,indent,o);
			str.append("\n ");
		}
		str.append("else ");
		p.toString(getElseExp(),str,indent,o);		
		str.append(")");
	}
	
	public void FElseIfExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("elseif ");
		p.toString(getIfExp(),str,indent,o);
		str.append(" then ");
		p.toString(getThenExp(),str,indent,o);
	}
	
	public void FRealLitExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append(getUNSIGNED_NUMBER());
	}
	
	public void FTimeExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("time");
	}
	
	public void FStringLitExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("\"" + getString() + "\"");
	}

	public void FBooleanLitExpTrue.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("true");
	}

	public void FBooleanLitExpFalse.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("false");
	}
	
	public void FIdUse.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		debugPrint("FIdUse.prettyPrint(): " + name());
		str.append(name());
	}

	public void FIdUseQualified.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		debugPrint("FIdUseQualified.prettyPrint(): " + name());
		p.toString(getFQName(),str,"",o);		
	}	
		
	public void FDer.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		debugPrint("FDer.prettyPrint");
		str.append("der(");
		p.toString(getFIdUseExp(),str,indent,o);
		str.append(")");
	}
	
	public void FSumExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("sum(");
		p.toString(getFExp(),str,indent,o);
		str.append(")");
	}
	
	public void FScalar.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("scalar(");
		p.toString(getFExp(),str,indent,o);
		str.append(")");
	}
	
	public void FTranspose.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("transpose(");
		p.toString(getFExp(),str,indent,o);
		str.append(")");
	}
	
	public void FFunctionCall.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		debugPrint("FFunctionCall.prettyPrint:");
		str.append(getName().name());
		str.append("(");
		for (int i=0; i<getNumArgs(); i++) {
				p.toString(getArgs(i),str,"",o);
				if (i<getNumArgs()-1)
					str.append(",");
		}
		str.append(")");
	}
	
	public void FSumRedExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("sum("); 
		p.toString(getFExp(),str,indent,o);
		str.append(" for ");
		str.append(getFForIndex().getFIdDecl().name());
		str.append(" in ");
		if (getFForIndex().hasFExp())
			p.toString(getFForIndex().getFExp(),str,indent,o);
		str.append(")");
	}
	
	public void FForClauseE.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
	
		str.append(indent+"for ");
		str.append(getFForIndex(0).getFIdDecl().name());
		str.append(" in ");
		if (getFForIndex(0).hasFExp())
			p.toString(getFForIndex(0).getFExp(),str,indent,o);
		str.append(" loop\n");
		for (int j=0;j<getNumForEqns();j++) {
				//debugPrint("FClass.prettyPrint(): Equation nr: " + j);
	  			p.toString(getForEqns(j),str, indent+" ",o);
				str.append(";\n");
		}
		
		str.append(indent+"end loop");
	
	
	}
	
	public void FSizeExp.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("size(");
		p.toString(getFIdUseExp(),str,"",o);
		str.append(",");
		p.toString(getDim(),str,"",o);
		str.append(")");
	}
	
	public void FArrayConstructor.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("{");
		for (int i=0; i<getNumFExp(); i++) {
			p.toString(getFExp(i),str,indent,o);
			if (i<getNumFExp()-1)
				str.append(",");
		}
		str.append("}");
	}
	
	public void FMatrix.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		str.append("[");
		for (int i=0;i<getNumFExpList();i++) {
			p.toString(getFExpList(i),str,indent,o);
			if (i<getNumFExpList()-1)
				str.append(";");
		}
		str.append("]");
	}
	
	public void FExpList.prettyPrint(Printer p, StringBuffer str, String indent, Object o) {
		for (int i=0; i<getNumFExp(); i++) {
			p.toString(getFExp(i),str,indent,o);
			if (i<getNumFExp()-1)
				str.append(",");
		}
	}
	
	syn boolean FExp.isAddOrSub() = false;
	eq FAddExp.isAddOrSub() = true;
	eq FSubExp.isAddOrSub() = true;
	syn boolean FExp.isPrimary() = false;
	eq FIdUseExp.isPrimary() = true;
	eq FRealLitExp.isPrimary() = true;

	syn String FTypePrefixFlow.toString() = "flow";
	syn String FTypePrefixInputOutput.toString();
	eq FInput.toString() = "input";
	eq FOutput.toString()= "output";
	syn String FTypePrefixOther.toString();
	eq FParameter.toString() = "parameter";
	eq FDiscrete.toString() = "discrete";
	eq FConstant.toString() = "constant";
	eq FContinuous.toString() = "";	
	
	syn String Restriction.toString();
	eq Model.toString() = "model";
	eq Block.toString() = "block";
	eq MClass.toString() = "class";
	eq Connector.toString() = "connector";
	eq MType.toString() = "type";
	eq MPackage.toString() = "package";
	eq Function.toString() = "function";
	eq Record.toString() = "record";

    syn String ComponentDecl.toString() = prettyPrint("");
    syn String Access.toString() = prettyPrint("");
    syn String Modification.toString() = prettyPrint("");
}