aspect ErrorCheck {

	public boolean ASTNode.checkErrors(String className, ErrorManager em) {
		for(int i = 0; i < getNumChild(); i++)
     		if (getChild(i).checkErrors(className,em))
     			return true;
     	return false;
	}

	public void ASTNode.collectErrors(ErrorManager em) {
		nameCheck(em);
		for(int i = 0; i < getNumChild(); i++)
      		getChild(i).collectErrors(em);
	
	}

	public boolean FullClassDecl.checkErrors(String className, ErrorManager em) {
	   	if (className.equals(qualifiedName())) {
			collectErrors(em);
			return true;
		} else
			return getClassDeclList().checkErrors(className,em);
	} 	 
	
	boolean FullClassDecl.errorChecked = false;
  	public void FullClassDecl.collectErrors(ErrorManager em) {
    	debugPrint("ErrorChecking: " + qualifiedName());
    	if (!errorChecked) {
    	errorChecked = true;
    	getEquationList().collectErrors(em);
    	getAlgorithmList().collectErrors(em);
    	getSuperList().collectErrors(em);
    	getImportList().collectErrors(em);
    	getComponentDeclList().collectErrors(em);
    	debugPrint("ErrorChecking: " + qualifiedName() + ": done with components");
    	if (!(getName().getID().equals(getEndName())))
    		error(em,"The declaration and end names of a class should be the same");
  		}
  	}
	
	
	public void ComponentDecl.collectErrors(ErrorManager em) {
		super.collectErrors(em);
		if (getClassName().myClassDecl()!=null) {
			debugPrint("ComponentDecl.collectErrors:  "  + prettyPrint("") + ": " + getClassName().myClassDecl().qualifiedName());
			getClassName().myClassDecl().collectErrors(em);
		}
	}
	
	
	// add an error msg associated with a certain context
  	protected void ASTNode.error(ErrorManager em, String s) {
    	em.postError(fileName(),beginLine(),beginColumn(),s);
  	}
	
   // Don't error check annotation
   public void Annotation.collectErrors(ErrorManager em) {}
	
	public class ErrorManager {
		ArrayList errors;
		
		public ErrorManager() {
	  		errors = new ArrayList();
	  	}
	
		public int getNumErrors() {
			return errors.size();
		}
	
		public void postError(CompilationError err) {
			errors.add(err);
		}

	    public void postError(String fName, int beginLine, int endLine, String msg) {
	       errors.add(new CompilationError(fName,beginLine,endLine,msg));
	    }
	
		public void printErrors() {
			java.util.Collections.sort(errors);
			System.out.println(errors.size() + " errors detected...");
			int i;
			for (i=0;i<errors.size();i++)
				((CompilationError)errors.get(i)).print();
		}
		
		public void printErrors(StringBuffer str) {
			java.util.Collections.sort(errors);
			str.append(errors.size() + " errors detected...\n");
			int i;
			for (i=0;i<errors.size();i++)
				((CompilationError)errors.get(i)).print(str);
		}
		
		
	}

    public class CompilationError implements Comparable{
    
    	public String fName = "";
    	public int beginLine = 0;
    	public int beginColumn = 0;
    	public String mess = "";
    	
    	public CompilationError(String fName, int beginLine, int beginColumn, String mess) {
    	
    		this.fName = fName;
    		this.beginLine = beginLine;
    		this.beginColumn = beginColumn;
    		this.mess = mess;
    	
    	}
    	
    	public int compareTo(Object o) {
    		CompilationError err = (CompilationError)o;
    		if (this.fName.compareTo(err.fName)<0)
    			return -1;
    		else if (this.fName.compareTo(err.fName)>0)
    			return 1;
    		if (this.beginLine<err.beginLine)
    			return -1;
    		else if (this.beginLine>err.beginLine)
    			return 1;
    		else 
    			if (this.beginColumn<err.beginColumn)
    				return -1;
    			else if (this.beginColumn>err.beginColumn)
    				return 1;
    			else
    				return 0;
    	}
    
    	public String getErrorStr() {
    		String errMsg = "";
    		errMsg += "In file '" + fName + "':\n";
    		errMsg += "Error at line " + beginLine;
    		errMsg += ", column " + beginColumn + " :\n";
			errMsg += "  " + mess + "\n";    		
    		return errMsg;
    	}
    
    	public void print() {
    		System.out.println(getErrorStr());
    	}

		public void print(StringBuffer str){
			str.append(getErrorStr());
		}
    }









}