import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.ArrayList;

aspect FlatAPI {

    syn int FClass.numReals() = reals().size();
	coll Collection<FVariable> FClass.reals() 
	  [new LinkedHashSet<FVariable>()] with add root FlatRoot;
	FVariable contributes
 		this when isReal()
	to FClass.reals() for myFClass();

    syn int FClass.numIntegers() = integers().size();
	coll Collection<FVariable> FClass.integers() 
	  [new LinkedHashSet<FVariable>()] with add root FlatRoot;
	FVariable contributes
 		this when isInteger()
	to FClass.integers() for myFClass();

    syn int FClass.numBooleans() = booleans().size();
	coll Collection<FVariable> FClass.booleans() 
	  [new LinkedHashSet<FVariable>()] with add root FlatRoot;
	FVariable contributes
 		this when isBoolean()
	to FClass.booleans() for myFClass();

    syn int FClass.numStrings() = strings().size();
	coll Collection<FVariable> FClass.strings() 
	  [new LinkedHashSet<FVariable>()] with add root FlatRoot;
	FVariable contributes
 		this when isString()
	to FClass.strings() for myFClass();

    syn int FClass.numIndependentConstants() = independentConstants().size();
	coll Collection<FVariable> FClass.independentConstants() 
	  [new LinkedHashSet<FVariable>()] with add root FlatRoot;
	FVariable contributes
 		this when isIndependentConstant()
	to FClass.independentConstants() for myFClass();

	syn int FClass.numIndependentRealConstants() = independentRealConstants().size();
	syn lazy Collection<FVariable> FClass.independentRealConstants() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(independentConstants());
      set.retainAll(reals());
      return set;
     }

	syn int FClass.numIndependentIntegerConstants() = independentIntegerConstants().size();
	syn lazy Collection<FVariable> FClass.independentIntegerConstants() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(independentConstants());
      set.retainAll(integers());
      return set;
     }

	syn int FClass.numIndependentBooleanConstants() = independentBooleanConstants().size();
	syn lazy Collection<FVariable> FClass.independentBooleanConstants() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(independentConstants());
      set.retainAll(booleans());
      return set;
     }

	syn int FClass.numIndependentStringConstants() = independentStringConstants().size();
	syn lazy Collection<FVariable> FClass.independentStringConstants() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(independentConstants());
      set.retainAll(strings());
      return set;
     }

	// TODO: Is there such a thing as a dependent constant??
    syn int FClass.numDependentConstants() = dependentConstants().size();
	coll Collection<FVariable> FClass.dependentConstants() 
	  [new LinkedHashSet<FVariable>()] with add root FlatRoot;
	FVariable contributes
 		this when false
	to FClass.dependentConstants() for myFClass();

	syn int FClass.numDependentRealConstants() = dependentRealConstants().size();
	syn lazy Collection<FVariable> FClass.dependentRealConstants() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(dependentConstants());
      set.retainAll(reals());
      return set;
     }

	syn int FClass.numDependentIntegerConstants() = dependentIntegerConstants().size();
	syn lazy Collection<FVariable> FClass.dependentIntegerConstants() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(dependentConstants());
      set.retainAll(integers());
      return set;
     }

	syn int FClass.numDependentBooleanConstants() = dependentBooleanConstants().size();
	syn lazy Collection<FVariable> FClass.dependentBooleanConstants() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(dependentConstants());
      set.retainAll(booleans());
      return set;
     }

	syn int FClass.numDependentStringConstants() = dependentStringConstants().size();
	syn lazy Collection<FVariable> FClass.dependentStringConstants() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(dependentConstants());
      set.retainAll(strings());
      return set;
     }
	

    syn int FClass.numIndependentParameters() = independentParameters().size();
	coll Collection<FVariable> FClass.independentParameters() 
	  [new LinkedHashSet<FVariable>()] with add root FlatRoot;
	FVariable contributes
 		this when isIndependentParameter()
	to FClass.independentParameters() for myFClass();

	syn int FClass.numIndependentRealParameters() = independentRealParameters().size();
	syn lazy Collection<FVariable> FClass.independentRealParameters() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(independentParameters());
      set.retainAll(reals());
      return set;
     }

	syn int FClass.numIndependentIntegerParameters() = independentIntegerParameters().size();
	syn lazy Collection<FVariable> FClass.independentIntegerParameters() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(independentParameters());
      set.retainAll(integers());
      return set;
     }

	syn int FClass.numIndependentBooleanParameters() = independentBooleanParameters().size();
	syn lazy Collection<FVariable> FClass.independentBooleanParameters() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(independentParameters());
      set.retainAll(booleans());
      return set;
     }

	syn int FClass.numIndependentStringParameters() = independentStringParameters().size();
	syn lazy Collection<FVariable> FClass.independentStringParameters() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(independentParameters());
      set.retainAll(strings());
      return set;
     }


    syn int FClass.numDependentParameters() = dependentParameters().size();
	coll Collection<FVariable> FClass.dependentParameters() 
	  [new LinkedHashSet<FVariable>()] with add root FlatRoot;
	FVariable contributes
 		this when isDependentParameter()
	to FClass.dependentParameters() for myFClass();

	syn int FClass.numDependentRealParameters() = dependentRealParameters().size();
	syn lazy Collection<FVariable> FClass.dependentRealParameters() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(dependentParameters());
      set.retainAll(reals());
      return set;
     }

	syn int FClass.numDependentIntegerParameters() = dependentIntegerParameters().size();
	syn lazy Collection<FVariable> FClass.dependentIntegerParameters() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(dependentParameters());
      set.retainAll(integers());
      return set;
     }

	syn int FClass.numDependentBooleanParameters() = dependentBooleanParameters().size();
	syn lazy Collection<FVariable> FClass.dependentBooleanParameters() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(dependentParameters());
      set.retainAll(booleans());
      return set;
     }

	syn int FClass.numDependentStringParameters() = dependentStringParameters().size();
	syn lazy Collection<FVariable> FClass.dependentStringParameters() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(dependentParameters());
      set.retainAll(strings());
      return set;
     }

    syn int FClass.numDifferentiatedRealVariables() = differentiatedRealVariables().size();
	coll Collection<FVariable> FClass.differentiatedRealVariables() 
	  [new LinkedHashSet<FVariable>()] with add root FlatRoot;
	FDer contributes
 		(FVariable)getFIdUseExp().myFV() when
 		!getFIdUseExp().myFV().isUnknown()
	to FClass.differentiatedRealVariables() for myFClass();

    syn int FClass.numVariables() = variables().size();
	coll Collection<FVariable> FClass.variables() 
	  [new LinkedHashSet<FVariable>()] with add root FlatRoot;
	FVariable contributes
 		this when  !isParameter() && !isConstant()
	to FClass.variables() for myFClass();
	
	syn int FClass.numRealVariables() = realVariables().size();
	syn lazy Collection<FVariable> FClass.realVariables() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(variables());
      set.retainAll(reals());
      return set;
     }

	syn int FClass.numIntegerVariables() = integerVariables().size();
	syn lazy Collection<FVariable> FClass.integerVariables() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(variables());
      set.retainAll(integers());
      return set;
     }

	syn int FClass.numBooleanVariables() = booleanVariables().size();
	syn lazy Collection<FVariable> FClass.booleanVariables() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(variables());
      set.retainAll(booleans());
      return set;
     }

	syn int FClass.numStringVariables() = stringVariables().size();
	syn lazy Collection<FVariable> FClass.stringVariables() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(variables());
      set.retainAll(strings());
      return set;
     }
	
    syn int FClass.numAlgebraicVariables() = algebraicVariables().size();
	syn lazy Collection<FVariable> FClass.algebraicVariables() { 
	  LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
  	  set.addAll(variables());
  	  set.removeAll(differentiatedRealVariables());
  	  set.removeAll(inputs());
  /*
      for (FVariable fv : getFVariables()) {
      	if (!fv.isParameter() && !fv.isConstant() && !fv.isInput() && 
      	  !differentiatedRealVariables().contains(fv)) {
      		set.add(fv);
      	}
      }
    */
      return set;
	}
	
    syn int FClass.numAlgebraicRealVariables() = algebraicRealVariables().size();
	syn lazy Collection<FVariable> FClass.algebraicRealVariables() { 
	  LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
	  set.addAll(algebraicVariables());
	  set.retainAll(reals());
      return set;
	}

    syn int FClass.numAlgebraicIntegerVariables() = algebraicIntegerVariables().size();
	syn lazy Collection<FVariable> FClass.algebraicIntegerVariables() { 
	  LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
	    set.addAll(algebraicVariables());
	    set.retainAll(integers());
      return set;
	}

    syn int FClass.numAlgebraicBooleanVariables() = algebraicBooleanVariables().size();
	syn lazy Collection<FVariable> FClass.algebraicBooleanVariables() { 
	  LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
	    set.addAll(algebraicVariables());
	    set.retainAll(booleans());
      return set;
	}

    syn int FClass.numAlgebraicStringVariables() = algebraicStringVariables().size();
	syn lazy Collection<FVariable> FClass.algebraicStringVariables() { 
	  LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
	    set.addAll(algebraicVariables());
	    set.retainAll(strings());
      return set;
	}

    syn int FClass.numVariablesWithBindingExp() = variablesWithBindingExp().size();
	coll Collection<FVariable> FClass.variablesWithBindingExp() 
	  [new LinkedHashSet<FVariable>()] with add root FlatRoot;
	FVariable contributes
 		this when !isParameter() && !isConstant() &&
 		  hasBindingExp()
	to FClass.variablesWithBindingExp() for myFClass();

	syn int FClass.numRealVariablesWithBindingExp() = realVariablesWithBindingExp().size();
	syn lazy Collection<FVariable> FClass.realVariablesWithBindingExp() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(variablesWithBindingExp());
      set.retainAll(reals());
      return set;
     }

	syn int FClass.numIntegerVariablesWithBindingExp() = integerVariablesWithBindingExp().size();
	syn lazy Collection<FVariable> FClass.integerVariablesWithBindingExp() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(variablesWithBindingExp());
      set.retainAll(integers());
      return set;
     }

	syn int FClass.numBooleanVariablesWithBindingExp() = booleanVariablesWithBindingExp().size();
	syn lazy Collection<FVariable> FClass.booleanVariablesWithBindingExp() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(variablesWithBindingExp());
      set.retainAll(booleans());
      return set;
     }

	syn int FClass.numStringVariablesWithBindingExp() = stringVariablesWithBindingExp().size();
	syn lazy Collection<FVariable> FClass.stringVariablesWithBindingExp() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(variablesWithBindingExp());
      set.retainAll(strings());
      return set;
     }
     
    syn int FClass.numInputs() = inputs().size();
	coll Collection<FVariable> FClass.inputs() 
	  [new LinkedHashSet<FVariable>()] with add root FlatRoot;
	FVariable contributes
 		this when isInput()
	to FClass.inputs() for myFClass();

	syn int FClass.numRealInputs() = realInputs().size();
	syn lazy Collection<FVariable> FClass.realInputs() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(inputs());
      set.retainAll(reals());
      return set;
     }

	syn int FClass.numIntegerInputs() = integerInputs().size();
	syn lazy Collection<FVariable> FClass.integerInputs() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(inputs());
      set.retainAll(integers());
      return set;
     }

	syn int FClass.numBooleanInputs() = booleanInputs().size();
	syn lazy Collection<FVariable> FClass.booleanInputs() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(inputs());
      set.retainAll(booleans());
      return set;
     }

	syn int FClass.numStringInputs() = stringInputs().size();
	syn lazy Collection<FVariable> FClass.stringInputs() {
      LinkedHashSet<FVariable> set = new LinkedHashSet<FVariable>();
      set.addAll(inputs());
      set.retainAll(strings());
      return set;
     }



    syn int FClass.numEquations() = equations().size();
	syn ArrayList<FAbstractEquation> FClass.equations() {
		ArrayList<FAbstractEquation> l = new ArrayList<FAbstractEquation>();
		for (FEquationBlock b : getFEquationBlocks()) {
			for (FAbstractEquation e : b.getFAbstractEquations()) {
				l.add(e);
			}
		}
		return l;
	}
	
	syn int FClass.numInitialEquations() = initialEquations().size(); 
	syn ArrayList<FAbstractEquation> FClass.initialEquations() {
		ArrayList<FAbstractEquation> l = new ArrayList<FAbstractEquation>();
		for (FAbstractEquation e : getFInitialEquations()) {
			l.add(e);
		}
		return l;
	}
	
/*	

	coll Collection<FVariable> FClass.structuralParameters() [new LinkedHashSet<FVariable>()] with add root FlatRoot;
	FIdUseExp contributes
		(FVariable)myFV() when inArraySubscripts()
	to FClass.structuralParameters() for myFClass();

	coll Collection<FEquation> FVariable.variableIncidence() [new LinkedHashSet<FEquation>()] with add root FlatRoot;
    FIdUseExp contributes
		myFEquation() when inFEquation()
	to FVariable.variableIncidence() for (FVariable)myFV();
	
	syn lazy ArrayList<Collection> FClass.variableIncidence() {
		ArrayList<Collection> l = new ArrayList<Collection>();
		for (FVariable fv : variables()) {
           l.add(fv.variableIncidence());
       } 
		return l;
	
	}
	
	inh boolean FExp.inFEquation();
	eq FEquation.getChild().inFEquation()=true;
	eq Root.getChild().inFEquation()=false;
	
	inh FEquation FExp.myFEquation();
	eq FEquation.getChild().myFEquation()=this;
	eq Root.getChild().myFEquation()=null;
*/	
	inh FClass FVariable.myFClass();
	inh FClass FExp.myFClass();
	eq FClass.getChild().myFClass() = this;
	eq Root.getChild().myFClass() = null; 

	syn lazy boolean FVariable.isIndependentConstant() = isConstant();
	syn lazy boolean FVariable.isDependentConstant() = false;
	syn lazy boolean FVariable.isIndependentParameter() = isParameter() &&
 		  (hasBindingExp()? getBindingExp().isConstantExp(): 
 		  (startAttributeSet()? startAttribute().isConstantExp(): true));
	syn lazy boolean FVariable.isDependentParameter() = isParameter() &&
 		  (hasBindingExp()? getBindingExp().isParameterExp(): 
 		  (startAttributeSet()? startAttribute().isParameterExp(): false));
	syn lazy boolean FVariable.isDifferentiatedVariable() = 
	  myFClass().differentiatedRealVariables().contains(this);
	syn lazy boolean FVariable.isAlgebraicVariable() = 
	  myFClass().algebraicRealVariables().contains(this);
}

aspect FlatCausality {

	syn boolean FTypePrefixInputOutput.inputCausality() = false;
	eq FInput.inputCausality() = true;	
	syn boolean FTypePrefixInputOutput.outputCausality() = false;
	eq FOutput.outputCausality() = true;	
	
    syn boolean FVariable.isInput() = 
      hasFTypePrefixInputOutput()? getFTypePrefixInputOutput().inputCausality(): false;    
    syn boolean FVariable.isOutput() = 
      hasFTypePrefixInputOutput()? getFTypePrefixInputOutput().outputCausality(): false;

}

aspect FlatTypes {

	syn boolean FVariable.isReal() = getType() instanceof FRealType;
	syn boolean FVariable.isInteger() = getType() instanceof FIntegerType;	
	syn boolean FVariable.isBoolean() = getType() instanceof FBooleanType;
	syn boolean FVariable.isString() = getType() instanceof FStringType;
	
}

aspect Attributes {


	syn lazy FExp FVariable.startAttribute() {
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("start")) {
				return a.hasValue()? a.getValue(): null;
			}
		}
		return null;
	}
	
	syn lazy boolean FVariable.startAttributeSet() {
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("start")) {
				return a.getAttributeSet();
			}
		}
		return false;
	}
}

aspect VariableNumbering {
	/*
	syn int FVariable.variableIndex() 
*/


}


aspect FlatDiagnostics {

	syn String FClass.diagnostics() {
		StringBuffer str = new StringBuffer();
		str.append("Diagnostics for flattened class " + name() + "\n");

		str.append("Number of independent constants:              " + 
		  numIndependentConstants() + "\n");
		str.append("  Number of Real independent constants:       " + 
		  numIndependentRealConstants() + "\n");
		str.append("  Number of Integer independent constants:    " + 
		  numIndependentIntegerConstants() + "\n");
		str.append("  Number of Boolean independent constants:    " + 
		  numIndependentBooleanConstants() + "\n");
		str.append("  Number of String independent constants:     " + 
		  numIndependentStringConstants() + "\n");

		str.append("Number of dependent constants:                " + 
		  numDependentConstants() + "\n");
		str.append("  Number of Real dependent constants:         " + 
		  numDependentRealConstants() + "\n");
		str.append("  Number of Integer dependent constants:      " + 
		  numDependentIntegerConstants() + "\n");
		str.append("  Number of Boolean dependent constants:      " + 
		  numDependentBooleanConstants() + "\n");
		str.append("  Number of String dependent constants:       " + 
		  numDependentStringConstants() + "\n");

		str.append("Number of independent parameters:             " + 
		  numIndependentParameters() + "\n");
		str.append("  Number of Real independent parameters:      " + 
		  numIndependentRealParameters() + "\n");
		str.append("  Number of Integer independent parameters:   " + 
		  numIndependentIntegerParameters() + "\n");
		str.append("  Number of Boolean independent parameters:   " + 
		  numIndependentBooleanParameters() + "\n");
		str.append("  Number of String independent parameters:    " + 
		  numIndependentStringParameters() + "\n");
		  		  
		str.append("Number of dependent parameters:               " + 
		  numDependentParameters() + "\n");
		str.append("  Number of Real dependent parameters:        " + 
		  numDependentRealParameters() + "\n");
		str.append("  Number of Integer dependent parameters:     " + 
		  numDependentIntegerParameters() + "\n");
		str.append("  Number of Boolean dependent parameters:     " + 
		  numDependentBooleanParameters() + "\n");
		str.append("  Number of String dependent parameters:      " + 
		  numDependentStringParameters() + "\n");
		  
		  
		str.append("Number of differentiated variables:           " + 
		  numDifferentiatedRealVariables() + "\n"); 
		  
		str.append("Number of inputs:                             " + 
		  numInputs() + "\n");
		str.append("  Number of Real inputs:                      " + 
		  numRealInputs() + "\n");
		str.append("  Number of Integer inputs:                   " + 
		  numIntegerInputs() + "\n");
		str.append("  Number of Boolean inputs:                   " + 
		  numBooleanInputs() + "\n");
		str.append("  Number of String inputs:                    " + 
		  numStringInputs() + "\n");
		
		str.append("Number of variables :                         " + 
		  numVariables() + "\n");
		str.append("  Number of Real variables:                   " + 
		  numRealVariables() + "\n");
		str.append("  Number of Integer variables:                " + 
		  numIntegerVariables() + "\n");
		str.append("  Number of Boolean variables:                " + 
		  numBooleanVariables() + "\n");
		str.append("  Number of String variables:                 " + 
		  numStringVariables() + "\n");
		
		str.append("Number of algebraic variables :               " + 
		  numAlgebraicVariables() + "\n");
		str.append("  Number of Real algebraic variables:         " + 
		  numAlgebraicRealVariables() + "\n");
		str.append("  Number of Integer algebraic variables:      " + 
		  numAlgebraicIntegerVariables() + "\n");
		str.append("  Number of Boolean algebraic variables:      " + 
		  numAlgebraicBooleanVariables() + "\n");
		str.append("  Number of String algebraic variables:       " + 
		  numAlgebraicStringVariables() + "\n");

		
		str.append("Number of equations:                          " + 
		  numEquations() + "\n");
		
		str.append("Number of variables with binding expression:  " + 
		  numVariablesWithBindingExp() + "\n");
		str.append("  Number of Real variables with binding exp:  " + 
		  numRealVariablesWithBindingExp() + "\n");
		str.append("  Number of Integer variables binding exp:    " + 
		  numIntegerVariablesWithBindingExp() + "\n");
		str.append("  Number of Boolean variables binding exp:    " + 
		  numBooleanVariablesWithBindingExp() + "\n");
		str.append("  Number of String variables binding exp:     " + 
		  numStringVariablesWithBindingExp() + "\n");
		
		
		
		str.append("Total number of equations:                    " + 
		  (numEquations()+numVariablesWithBindingExp()) + "\n");
		
		
		
		str.append("Number of initial equations:                  " + 
		  numInitialEquations() + "\n");
		  
		str.append("\n");
		str.append("Independent constants: {");
		int i = 0;
		for (FVariable fv : independentConstants()) {
			str.append(fv.name());
			if (i<numIndependentConstants()-1) {
				str.append(", ");
			}
			i++;
		}
		str.append("}\n");  
		str.append("Dependent constants: {");
		i = 0;
		for (FVariable fv : dependentConstants()) {
			str.append(fv.name());
			if (i<numDependentConstants()-1) {
				str.append(", ");
			}
			i++;
		}
		str.append("}\n");  
		str.append("Independent parameters: {");
		i = 0;
		for (FVariable fv : independentParameters()) {
			str.append(fv.name());
			if (i<numIndependentParameters()-1) {
				str.append(", ");
			}
			i++;
		}
		str.append("}\n");  
		str.append("Dependent parameters: {");
		i = 0;
		for (FVariable fv : dependentParameters()) {
			str.append(fv.name());
			if (i<numDependentParameters()-1) {
				str.append(", ");
			}
			i++;
		}
		str.append("}\n");  
		str.append("Differentiated variables: {");
		i = 0;
		for (FVariable fv : differentiatedRealVariables()) {
			str.append(fv.name());
			if (i<numDifferentiatedRealVariables()-1) {
				str.append(", ");
			}
			i++;
		}
		str.append("}\n");  
		str.append("Algebraic variables: {");
		i = 0;
		for (FVariable fv : algebraicRealVariables()) {
			str.append(fv.name());
			if (i<numAlgebraicRealVariables()-1) {
				str.append(", ");
			}
			i++;
		}
		str.append("}\n");  
		str.append("Input variables: {");
		i = 0;
		for (FVariable fv : inputs()) {
			str.append(fv.name());
			if (i<numInputs()-1) {
				str.append(", ");
			}
			i++;
		}
		str.append("}\n");  


		return str.toString();
	}






}