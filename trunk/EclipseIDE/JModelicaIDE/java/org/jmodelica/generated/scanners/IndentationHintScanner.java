/* The following code was generated by JFlex 1.4.3 on 4/12/10 12:37 PM */

/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package org.jmodelica.generated.scanners;

import java.util.*;
import java.io.StringReader;
import java.io.IOException;
import org.jmodelica.ide.editor.ModelicaAnchorList;
import org.jmodelica.ide.editor.Indent;


/**
 * Scanner which pushes indentation anchors, used to indent the 
 * source code. 
 *
 * @author philip
 */


public final class IndentationHintScanner {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int QIDENT = 12;
  private static final int LINEBEGIN = 2;
  private static final int COMMENT_LINEBEGIN = 8;
  private static final int ANNOTATION = 14;
  private static final int STRING = 10;
  private static final int ANNOTATION_LINEBEGIN = 16;
  private static final int YYINITIAL = 0;
  private static final int END = 4;
  private static final int COMMENT = 6;
  private static final int CLASS = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  8, 
     9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\17\1\0\1\20\1\16\22\0\1\20\1\0\1\5"+
    "\4\0\1\3\1\46\1\45\1\43\4\0\1\42\12\2\1\0\1\44"+
    "\1\0\1\40\1\0\1\6\1\0\32\1\1\0\1\4\2\0\1\1"+
    "\1\0\1\7\1\10\1\23\1\34\1\27\1\11\1\36\1\26\1\32"+
    "\1\1\1\24\1\21\1\33\1\12\1\22\1\35\1\41\1\13\1\30"+
    "\1\14\1\31\1\15\1\25\1\1\1\37\1\1\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\10\0\1\2\1\1\1\3\1\4\5\1"+
    "\2\5\6\1\1\2\1\6\17\7\1\10\1\3\5\10"+
    "\1\1\6\10\1\11\1\12\1\3\1\1\1\12\1\1"+
    "\2\13\1\1\2\14\1\1\1\15\1\1\1\16\1\1"+
    "\1\17\2\20\1\1\1\21\1\22\1\23\1\24\1\25"+
    "\1\2\2\25\21\1\1\0\1\26\1\0\1\10\1\0"+
    "\21\10\2\0\1\27\1\30\1\31\1\0\3\1\1\32"+
    "\10\1\1\33\10\1\3\10\1\11\17\10\4\1\2\0"+
    "\6\1\1\0\7\1\17\10\2\1\1\0\1\34\2\0"+
    "\5\1\1\0\6\1\14\10\12\1\1\35\11\10\11\1"+
    "\10\10\4\1\2\0\1\1\4\10\2\0\3\1\14\0"+
    "\3\10\14\0\1\36\2\1\17\0\1\36\2\10\17\0"+
    "\1\1\5\0\1\32\13\0\1\10\103\0\1\35\52\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[482];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01ad\0\u01ad\0\u01fb"+
    "\0\u0222\0\u0249\0\u0270\0\u0297\0\u02be\0\u01ad\0\u02e5\0\u030c"+
    "\0\u0333\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u01ad\0\u01ad\0\u01d4"+
    "\0\u01fb\0\u0222\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c"+
    "\0\u0333\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444"+
    "\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c"+
    "\0\u05a3\0\u05ca\0\u05f1\0\u01ad\0\u01ad\0\u0618\0\u063f\0\u03cf"+
    "\0\u01ad\0\u0666\0\u01ad\0\u068d\0\u01ad\0\u06b4\0\u06db\0\u01ad"+
    "\0\u0702\0\u01ad\0\u0729\0\u01ad\0\u0750\0\u01ad\0\u0777\0\u01ad"+
    "\0\u01ad\0\u01ad\0\u079e\0\u01ad\0\u07c5\0\u07ec\0\u0813\0\u083a"+
    "\0\u0861\0\u0888\0\u08af\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972"+
    "\0\u0999\0\u09c0\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa"+
    "\0\u0ad1\0\u01ad\0\u041d\0\u01ad\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d"+
    "\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5"+
    "\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f\0\u0618\0\u0db6"+
    "\0\u01ad\0\u01ad\0\u01ad\0\u0813\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52"+
    "\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a"+
    "\0\u0fb1\0\u0fd8\0\u0fff\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2"+
    "\0\u0ad1\0\u10e9\0\u1110\0\u1137\0\u03f6\0\u115e\0\u1185\0\u11ac"+
    "\0\u11d3\0\u11fa\0\u1221\0\u1248\0\u126f\0\u1296\0\u12bd\0\u12e4"+
    "\0\u130b\0\u1332\0\u1359\0\u1380\0\u13a7\0\u13ce\0\u13f5\0\u141c"+
    "\0\u1443\0\u146a\0\u1491\0\u14b8\0\u14df\0\u1506\0\u152d\0\u1554"+
    "\0\u157b\0\u15a2\0\u15c9\0\u15f0\0\u1617\0\u163e\0\u1665\0\u168c"+
    "\0\u16b3\0\u16da\0\u1701\0\u1728\0\u174f\0\u1776\0\u179d\0\u17c4"+
    "\0\u17eb\0\u1812\0\u1839\0\u1860\0\u1887\0\u18ae\0\u18d5\0\u18fc"+
    "\0\u1923\0\u194a\0\u01ad\0\u1971\0\u1998\0\u19bf\0\u19e6\0\u1a0d"+
    "\0\u1a34\0\u1a5b\0\u1a82\0\u1aa9\0\u1ad0\0\u1af7\0\u1b1e\0\u1b45"+
    "\0\u1b6c\0\u1b93\0\u1bba\0\u1be1\0\u1c08\0\u1c2f\0\u1c56\0\u1c7d"+
    "\0\u1ca4\0\u1ccb\0\u1cf2\0\u1d19\0\u1d40\0\u1d67\0\u1d8e\0\u1db5"+
    "\0\u1ddc\0\u1e03\0\u1e2a\0\u1e51\0\u1e78\0\u1e9f\0\u1ec6\0\u01d4"+
    "\0\u1eed\0\u1f14\0\u1f3b\0\u1f62\0\u1f89\0\u1fb0\0\u1fd7\0\u1ffe"+
    "\0\u2025\0\u204c\0\u2073\0\u209a\0\u20c1\0\u20e8\0\u210f\0\u2136"+
    "\0\u215d\0\u2184\0\u21ab\0\u21d2\0\u21f9\0\u2220\0\u2247\0\u226e"+
    "\0\u2295\0\u22bc\0\u22e3\0\u230a\0\u2331\0\u2358\0\u237f\0\u23a6"+
    "\0\u23cd\0\u23f4\0\u241b\0\u2442\0\u2469\0\u2490\0\u24b7\0\u24de"+
    "\0\u2505\0\u252c\0\u2553\0\u257a\0\u25a1\0\u25c8\0\u25ef\0\u2616"+
    "\0\u263d\0\u2664\0\u268b\0\u26b2\0\u26d9\0\u2700\0\u2727\0\u274e"+
    "\0\u2775\0\u279c\0\u27c3\0\u27ea\0\u2811\0\u2838\0\u285f\0\u2886"+
    "\0\u28ad\0\u28d4\0\u28fb\0\u2922\0\u2949\0\u01d4\0\u2970\0\u2997"+
    "\0\u29be\0\u29e5\0\u2a0c\0\u2a33\0\u2a5a\0\u2a81\0\u2aa8\0\u2acf"+
    "\0\u2af6\0\u2b1d\0\u2b44\0\u2b6b\0\u2b92\0\u2bb9\0\u2be0\0\u03f6"+
    "\0\u2c07\0\u2c2e\0\u2c55\0\u2c7c\0\u2ca3\0\u2cca\0\u2cf1\0\u2d18"+
    "\0\u2d3f\0\u2d66\0\u2d8d\0\u2db4\0\u2ddb\0\u2e02\0\u2e29\0\u2e50"+
    "\0\u2e77\0\u2e9e\0\u2ec5\0\u2eec\0\u2f13\0\u2f3a\0\u2f61\0\u146a"+
    "\0\u2f88\0\u2faf\0\u2fd6\0\u2ffd\0\u3024\0\u304b\0\u3072\0\u3099"+
    "\0\u30c0\0\u30e7\0\u310e\0\u3135\0\u315c\0\u3183\0\u31aa\0\u31d1"+
    "\0\u31f8\0\u321f\0\u3246\0\u326d\0\u3294\0\u32bb\0\u32e2\0\u3309"+
    "\0\u3330\0\u3357\0\u337e\0\u33a5\0\u33cc\0\u33f3\0\u341a\0\u3441"+
    "\0\u3468\0\u348f\0\u34b6\0\u34dd\0\u3504\0\u352b\0\u3552\0\u3579"+
    "\0\u35a0\0\u35c7\0\u35ee\0\u3615\0\u363c\0\u3663\0\u368a\0\u36b1"+
    "\0\u36d8\0\u36ff\0\u3726\0\u374d\0\u3774\0\u379b\0\u37c2\0\u37e9"+
    "\0\u3810\0\u3837\0\u385e\0\u3885\0\u38ac\0\u38d3\0\u38fa\0\u3921"+
    "\0\u3948\0\u396f\0\u3996\0\u39bd\0\u39e4\0\u3a0b\0\u3a32\0\u3a59"+
    "\0\u3a80\0\u3aa7\0\u3ace\0\u3af5\0\u3b1c\0\u3b43\0\u3b6a\0\u01ad"+
    "\0\u3b91\0\u3bb8\0\u3bdf\0\u3c06\0\u3c2d\0\u3c54\0\u3c7b\0\u3ca2"+
    "\0\u3cc9\0\u3cf0\0\u3d17\0\u3d3e\0\u3d65\0\u3d8c\0\u3db3\0\u3dda"+
    "\0\u3e01\0\u3e28\0\u3e4f\0\u3e76\0\u3e9d\0\u3ec4\0\u3eeb\0\u3f12"+
    "\0\u3f39\0\u3f60\0\u3f87\0\u3fae\0\u3fd5\0\u3ffc\0\u4023\0\u404a"+
    "\0\u4071\0\u4098\0\u40bf\0\u40e6\0\u410d\0\u4134\0\u415b\0\u4182"+
    "\0\u41a9\0\u41d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[482];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\1\14\1\16\1\14\1\17\1\14\1\20"+
    "\1\21\1\22\1\15\1\23\1\24\1\15\1\25\1\26"+
    "\1\14\2\15\1\27\1\15\1\30\1\15\1\31\2\15"+
    "\1\32\1\33\1\15\1\34\2\15\1\14\1\15\1\35"+
    "\1\14\1\36\2\14\1\37\1\40\1\37\1\16\1\37"+
    "\1\17\1\37\1\41\1\42\1\43\1\40\1\44\1\45"+
    "\1\40\1\46\1\26\1\37\2\40\1\47\1\40\1\50"+
    "\1\40\1\51\2\40\1\52\1\53\1\40\1\54\2\40"+
    "\1\37\1\40\1\55\4\37\1\14\1\56\1\14\1\57"+
    "\1\14\1\17\1\14\1\60\1\61\1\62\1\56\1\63"+
    "\1\64\1\56\3\65\2\56\1\66\1\56\1\67\1\56"+
    "\1\70\2\56\1\71\1\72\1\56\1\73\2\56\1\14"+
    "\1\56\1\35\1\14\1\74\2\14\1\75\1\15\1\75"+
    "\1\76\1\75\1\17\1\75\1\77\6\15\3\65\17\15"+
    "\1\75\1\15\1\100\4\75\16\101\1\102\1\103\23\101"+
    "\1\104\3\101\16\105\3\65\22\105\1\106\3\105\4\101"+
    "\1\107\1\110\10\101\1\111\33\101\1\112\1\113\11\101"+
    "\1\111\35\101\1\114\10\101\1\115\1\116\22\101\1\117"+
    "\2\101\1\120\1\121\16\122\3\65\24\122\1\123\1\122"+
    "\1\124\1\125\5\124\7\125\1\126\2\127\17\125\1\124"+
    "\1\125\5\124\50\0\2\15\4\0\7\15\3\0\17\15"+
    "\1\0\1\15\6\0\2\15\4\0\3\15\1\130\3\15"+
    "\3\0\1\131\16\15\1\0\1\15\6\0\2\15\4\0"+
    "\7\15\3\0\1\132\16\15\1\0\1\15\6\0\2\15"+
    "\4\0\7\15\3\0\1\15\1\133\6\15\1\134\6\15"+
    "\1\0\1\15\6\0\2\15\4\0\7\15\3\0\6\15"+
    "\1\135\10\15\1\0\1\15\6\0\2\15\4\0\7\15"+
    "\3\0\16\15\1\136\1\0\1\15\24\0\1\26\30\0"+
    "\2\15\4\0\7\15\3\0\1\137\1\140\15\15\1\0"+
    "\1\15\6\0\2\15\4\0\7\15\3\0\5\15\1\141"+
    "\11\15\1\0\1\15\6\0\2\15\4\0\3\15\1\142"+
    "\3\15\3\0\17\15\1\0\1\143\6\0\2\15\4\0"+
    "\3\15\1\144\3\15\3\0\17\15\1\0\1\15\6\0"+
    "\2\15\4\0\7\15\3\0\1\15\1\145\15\15\1\0"+
    "\1\15\6\0\2\15\4\0\1\146\3\15\1\147\2\15"+
    "\3\0\10\15\1\150\6\15\1\0\1\15\47\0\1\151"+
    "\1\152\4\0\2\56\4\0\7\56\3\0\17\56\1\0"+
    "\1\56\5\0\3\153\1\154\1\155\42\153\1\0\2\56"+
    "\4\0\3\56\1\156\3\56\3\0\1\157\16\56\1\0"+
    "\1\56\6\0\2\56\4\0\7\56\3\0\1\160\16\56"+
    "\1\0\1\56\6\0\2\56\4\0\7\56\3\0\1\56"+
    "\1\161\6\56\1\162\6\56\1\0\1\56\6\0\2\56"+
    "\4\0\7\56\3\0\6\56\1\163\10\56\1\0\1\56"+
    "\6\0\2\56\4\0\7\56\3\0\16\56\1\164\1\0"+
    "\1\56\23\0\3\65\27\0\2\56\4\0\7\56\3\0"+
    "\1\165\1\166\15\56\1\0\1\56\6\0\2\56\4\0"+
    "\7\56\3\0\5\56\1\167\11\56\1\0\1\56\6\0"+
    "\2\56\4\0\3\56\1\170\3\56\3\0\17\56\1\0"+
    "\1\171\6\0\2\56\4\0\3\56\1\172\3\56\3\0"+
    "\17\56\1\0\1\56\6\0\2\56\4\0\7\56\3\0"+
    "\1\56\1\173\15\56\1\0\1\56\6\0\2\56\4\0"+
    "\1\174\3\56\1\175\2\56\3\0\10\56\1\176\6\56"+
    "\1\0\1\56\5\0\3\177\1\101\1\200\42\177\1\0"+
    "\2\15\4\0\3\15\1\130\3\15\3\0\17\15\1\0"+
    "\1\15\24\0\1\103\71\0\1\201\46\0\1\202\10\0"+
    "\2\101\60\0\1\101\32\0\1\101\62\0\1\116\72\0"+
    "\1\203\50\0\1\123\2\0\2\125\4\0\7\125\3\0"+
    "\17\125\1\0\1\125\6\0\1\125\5\0\7\125\1\204"+
    "\1\127\1\204\17\125\1\0\1\125\6\0\1\125\5\0"+
    "\7\125\3\204\17\125\1\0\1\125\6\0\2\15\4\0"+
    "\3\15\1\205\3\15\3\0\17\15\1\0\1\15\6\0"+
    "\2\15\4\0\7\15\3\0\15\15\1\206\1\15\1\0"+
    "\1\15\6\0\2\15\4\0\7\15\3\0\1\15\1\207"+
    "\15\15\1\0\1\15\6\0\2\15\4\0\4\15\1\210"+
    "\2\15\3\0\17\15\1\0\1\15\6\0\2\15\4\0"+
    "\3\15\1\211\3\15\3\0\17\15\1\0\1\15\6\0"+
    "\2\15\4\0\7\15\3\0\2\15\1\212\11\15\1\213"+
    "\2\15\1\0\1\15\6\0\2\15\4\0\7\15\3\0"+
    "\14\15\1\214\2\15\1\0\1\15\6\0\2\15\4\0"+
    "\1\215\6\15\3\0\17\15\1\0\1\15\6\0\2\15"+
    "\4\0\3\15\1\216\3\15\3\0\17\15\1\0\1\15"+
    "\6\0\2\15\4\0\7\15\3\0\6\15\1\217\10\15"+
    "\1\0\1\15\6\0\2\15\4\0\7\15\3\0\2\15"+
    "\1\220\10\15\1\221\3\15\1\0\1\15\6\0\2\15"+
    "\4\0\7\15\3\0\10\15\1\222\6\15\1\0\1\15"+
    "\6\0\2\15\4\0\7\15\3\0\11\15\1\223\5\15"+
    "\1\0\1\15\6\0\2\15\4\0\7\15\3\0\13\15"+
    "\1\224\3\15\1\0\1\15\6\0\2\15\4\0\4\15"+
    "\1\225\2\15\3\0\2\15\1\226\14\15\1\0\1\15"+
    "\6\0\2\15\4\0\7\15\3\0\1\15\1\227\15\15"+
    "\1\0\1\15\6\0\2\15\4\0\1\15\1\230\5\15"+
    "\3\0\17\15\1\0\1\15\5\0\16\151\1\231\1\101"+
    "\27\151\3\0\13\153\32\0\2\56\4\0\3\56\1\232"+
    "\3\56\3\0\17\56\1\0\1\56\6\0\2\56\4\0"+
    "\7\56\3\0\15\56\1\233\1\56\1\0\1\56\6\0"+
    "\2\56\4\0\7\56\3\0\1\56\1\234\15\56\1\0"+
    "\1\56\6\0\2\56\4\0\4\56\1\235\2\56\3\0"+
    "\17\56\1\0\1\56\6\0\2\56\4\0\3\56\1\236"+
    "\3\56\3\0\17\56\1\0\1\56\6\0\2\56\4\0"+
    "\7\56\3\0\2\56\1\237\11\56\1\240\2\56\1\0"+
    "\1\56\6\0\2\56\4\0\7\56\3\0\14\56\1\241"+
    "\2\56\1\0\1\56\6\0\2\56\4\0\1\242\6\56"+
    "\3\0\17\56\1\0\1\56\6\0\2\56\4\0\3\56"+
    "\1\243\3\56\3\0\17\56\1\0\1\56\6\0\2\56"+
    "\4\0\7\56\3\0\6\56\1\244\10\56\1\0\1\56"+
    "\6\0\2\56\4\0\7\56\3\0\2\56\1\245\10\56"+
    "\1\235\3\56\1\0\1\56\6\0\2\56\4\0\7\56"+
    "\3\0\10\56\1\246\6\56\1\0\1\56\6\0\2\56"+
    "\4\0\7\56\3\0\11\56\1\247\5\56\1\0\1\56"+
    "\6\0\2\56\4\0\7\56\3\0\13\56\1\250\3\56"+
    "\1\0\1\56\6\0\2\56\4\0\4\56\1\251\2\56"+
    "\3\0\2\56\1\252\14\56\1\0\1\56\6\0\2\56"+
    "\4\0\7\56\3\0\1\56\1\253\15\56\1\0\1\56"+
    "\6\0\2\56\4\0\1\56\1\254\5\56\3\0\17\56"+
    "\1\0\1\56\10\0\13\177\32\0\2\15\4\0\7\15"+
    "\3\0\1\15\1\255\15\15\1\0\1\15\6\0\2\15"+
    "\4\0\7\15\3\0\1\15\1\256\15\15\1\0\1\15"+
    "\6\0\2\15\4\0\7\15\3\0\2\15\1\257\14\15"+
    "\1\0\1\15\6\0\1\260\1\15\1\261\3\0\7\260"+
    "\3\262\17\260\1\0\1\260\6\0\2\15\4\0\7\15"+
    "\3\0\2\15\1\263\14\15\1\0\1\15\6\0\2\15"+
    "\4\0\7\15\3\0\1\15\1\264\15\15\1\0\1\15"+
    "\6\0\2\15\4\0\7\15\3\0\1\265\16\15\1\0"+
    "\1\15\6\0\2\15\4\0\7\15\3\0\6\15\1\210"+
    "\10\15\1\0\1\15\6\0\2\15\4\0\7\15\3\0"+
    "\7\15\1\266\7\15\1\0\1\15\6\0\2\15\4\0"+
    "\3\15\1\267\3\15\3\0\17\15\1\0\1\15\6\0"+
    "\2\15\4\0\3\15\1\210\3\15\3\0\17\15\1\0"+
    "\1\15\6\0\2\15\4\0\1\270\6\15\3\0\17\15"+
    "\1\0\1\15\6\0\2\15\4\0\7\15\3\271\17\15"+
    "\1\0\1\15\6\0\2\15\4\0\1\272\6\15\3\0"+
    "\17\15\1\0\1\15\6\0\2\15\4\0\5\15\1\273"+
    "\1\15\3\0\17\15\1\0\1\15\6\0\2\15\4\0"+
    "\7\15\3\0\6\15\1\274\10\15\1\0\1\15\6\0"+
    "\2\15\4\0\5\15\1\275\1\15\3\0\17\15\1\0"+
    "\1\15\6\0\2\15\4\0\7\15\3\0\3\15\1\276"+
    "\13\15\1\0\1\15\6\0\2\15\4\0\5\15\1\277"+
    "\1\15\3\0\17\15\1\0\1\15\6\0\2\15\4\0"+
    "\7\15\3\0\1\300\16\15\1\0\1\15\6\0\2\56"+
    "\4\0\7\56\3\0\1\56\1\301\15\56\1\0\1\56"+
    "\6\0\2\56\4\0\7\56\3\0\1\56\1\302\15\56"+
    "\1\0\1\56\6\0\2\56\4\0\7\56\3\0\2\56"+
    "\1\303\14\56\1\0\1\56\6\0\2\56\4\0\7\56"+
    "\3\0\2\56\1\304\14\56\1\0\1\56\6\0\2\56"+
    "\4\0\7\56\3\0\1\56\1\305\15\56\1\0\1\56"+
    "\6\0\2\56\4\0\7\56\3\0\1\306\16\56\1\0"+
    "\1\56\6\0\2\56\4\0\7\56\3\0\6\56\1\235"+
    "\10\56\1\0\1\56\6\0\2\56\4\0\7\56\3\0"+
    "\7\56\1\307\7\56\1\0\1\56\6\0\2\56\4\0"+
    "\3\56\1\310\3\56\3\0\17\56\1\0\1\56\6\0"+
    "\2\56\4\0\3\56\1\235\3\56\3\0\17\56\1\0"+
    "\1\56\6\0\2\56\4\0\1\311\6\56\3\0\17\56"+
    "\1\0\1\56\6\0\2\56\4\0\1\304\6\56\3\0"+
    "\17\56\1\0\1\56\6\0\2\56\4\0\5\56\1\312"+
    "\1\56\3\0\17\56\1\0\1\56\6\0\2\56\4\0"+
    "\7\56\3\0\6\56\1\313\10\56\1\0\1\56\6\0"+
    "\2\56\4\0\5\56\1\314\1\56\3\0\17\56\1\0"+
    "\1\56\6\0\2\56\4\0\7\56\3\0\3\56\1\315"+
    "\13\56\1\0\1\56\6\0\2\56\4\0\5\56\1\316"+
    "\1\56\3\0\17\56\1\0\1\56\6\0\2\56\4\0"+
    "\7\56\3\0\1\317\16\56\1\0\1\56\6\0\2\15"+
    "\4\0\5\15\1\320\1\15\3\0\17\15\1\0\1\15"+
    "\6\0\2\15\4\0\4\15\1\321\2\15\3\0\17\15"+
    "\1\0\1\15\6\0\2\15\4\0\7\15\3\0\3\15"+
    "\1\210\13\15\1\0\1\15\6\0\2\260\4\0\7\260"+
    "\3\322\17\260\1\323\1\260\5\0\3\261\1\322\1\324"+
    "\42\261\1\0\1\325\1\0\1\261\3\0\7\325\3\262"+
    "\17\325\1\0\1\325\6\0\2\15\4\0\5\15\1\326"+
    "\1\15\3\0\17\15\1\0\1\15\6\0\2\15\4\0"+
    "\4\15\1\327\2\15\3\0\17\15\1\0\1\15\6\0"+
    "\2\15\4\0\1\330\6\15\3\0\17\15\1\0\1\15"+
    "\6\0\2\15\4\0\7\15\3\0\7\15\1\210\7\15"+
    "\1\0\1\15\6\0\2\15\4\0\7\15\3\0\6\15"+
    "\1\331\10\15\1\0\1\15\6\0\2\15\4\0\7\15"+
    "\3\0\14\15\1\332\2\15\1\0\1\15\23\0\3\271"+
    "\11\0\1\333\15\0\2\15\4\0\5\15\1\334\1\15"+
    "\3\0\17\15\1\0\1\15\6\0\2\15\4\0\7\15"+
    "\3\0\11\15\1\335\5\15\1\0\1\15\6\0\2\15"+
    "\4\0\7\15\3\0\1\210\16\15\1\0\1\15\6\0"+
    "\2\15\4\0\7\15\3\0\11\15\1\336\5\15\1\0"+
    "\1\15\6\0\2\15\4\0\1\337\6\15\3\0\17\15"+
    "\1\0\1\15\6\0\2\15\4\0\7\15\3\0\6\15"+
    "\1\340\10\15\1\0\1\15\6\0\2\15\4\0\7\15"+
    "\3\0\11\15\1\341\5\15\1\0\1\15\6\0\2\56"+
    "\4\0\5\56\1\342\1\56\3\0\17\56\1\0\1\56"+
    "\6\0\2\56\4\0\4\56\1\343\2\56\3\0\17\56"+
    "\1\0\1\56\6\0\2\56\4\0\7\56\3\0\3\56"+
    "\1\235\13\56\1\0\1\56\6\0\2\56\4\0\5\56"+
    "\1\344\1\56\3\0\17\56\1\0\1\56\6\0\2\56"+
    "\4\0\4\56\1\345\2\56\3\0\17\56\1\0\1\56"+
    "\6\0\2\56\4\0\1\346\6\56\3\0\17\56\1\0"+
    "\1\56\6\0\2\56\4\0\7\56\3\0\7\56\1\235"+
    "\7\56\1\0\1\56\6\0\2\56\4\0\7\56\3\0"+
    "\6\56\1\347\10\56\1\0\1\56\6\0\2\56\4\0"+
    "\7\56\3\0\14\56\1\350\2\56\1\0\1\56\6\0"+
    "\2\56\4\0\7\56\3\0\11\56\1\351\5\56\1\0"+
    "\1\56\6\0\2\56\4\0\7\56\3\0\1\235\16\56"+
    "\1\0\1\56\6\0\2\56\4\0\7\56\3\0\11\56"+
    "\1\352\5\56\1\0\1\56\6\0\2\56\4\0\1\353"+
    "\6\56\3\0\17\56\1\0\1\56\6\0\2\56\4\0"+
    "\7\56\3\0\6\56\1\354\10\56\1\0\1\56\6\0"+
    "\2\56\4\0\7\56\3\0\11\56\1\355\5\56\1\0"+
    "\1\56\6\0\2\15\4\0\1\356\6\15\3\0\17\15"+
    "\1\0\1\15\6\0\2\15\4\0\7\15\3\0\11\15"+
    "\1\357\5\15\1\0\1\15\23\0\3\322\17\0\1\323"+
    "\11\0\13\261\32\0\2\325\4\0\7\325\3\322\17\325"+
    "\1\323\1\325\6\0\2\15\4\0\7\15\3\0\11\15"+
    "\1\360\5\15\1\0\1\15\6\0\2\15\4\0\7\15"+
    "\3\0\13\15\1\210\3\15\1\0\1\15\6\0\2\15"+
    "\4\0\7\15\3\0\2\15\1\361\14\15\1\0\1\15"+
    "\6\0\2\15\4\0\7\15\3\0\2\15\1\362\14\15"+
    "\1\0\1\15\6\0\2\15\4\0\7\15\3\0\7\15"+
    "\1\363\7\15\1\0\1\15\16\0\1\101\36\0\2\15"+
    "\4\0\7\15\3\0\11\15\1\364\5\15\1\0\1\15"+
    "\6\0\2\15\4\0\1\365\6\15\3\0\17\15\1\0"+
    "\1\15\6\0\2\15\4\0\1\366\6\15\3\0\17\15"+
    "\1\0\1\15\6\0\2\15\4\0\7\15\3\0\15\15"+
    "\1\214\1\15\1\0\1\15\6\0\2\15\4\0\7\15"+
    "\3\0\2\15\1\367\14\15\1\0\1\15\6\0\2\15"+
    "\4\0\7\15\3\0\2\15\1\370\14\15\1\0\1\15"+
    "\6\0\2\56\4\0\1\371\6\56\3\0\17\56\1\0"+
    "\1\56\6\0\2\56\4\0\7\56\3\0\11\56\1\372"+
    "\5\56\1\0\1\56\6\0\2\56\4\0\7\56\3\0"+
    "\11\56\1\373\5\56\1\0\1\56\6\0\2\56\4\0"+
    "\7\56\3\0\13\56\1\235\3\56\1\0\1\56\6\0"+
    "\2\56\4\0\7\56\3\0\2\56\1\374\14\56\1\0"+
    "\1\56\6\0\2\56\4\0\7\56\3\0\2\56\1\375"+
    "\14\56\1\0\1\56\6\0\2\56\4\0\7\56\3\0"+
    "\7\56\1\376\7\56\1\0\1\56\6\0\2\56\4\0"+
    "\1\377\6\56\3\0\17\56\1\0\1\56\6\0\2\56"+
    "\4\0\1\u0100\6\56\3\0\17\56\1\0\1\56\6\0"+
    "\2\56\4\0\7\56\3\0\15\56\1\241\1\56\1\0"+
    "\1\56\6\0\2\56\4\0\7\56\3\0\2\56\1\u0101"+
    "\14\56\1\0\1\56\6\0\2\56\4\0\7\56\3\0"+
    "\2\56\1\235\14\56\1\0\1\56\6\0\2\15\4\0"+
    "\5\15\1\u0102\1\15\3\0\17\15\1\0\1\15\6\0"+
    "\2\15\4\0\5\15\1\u0103\1\15\3\0\17\15\1\0"+
    "\1\15\6\0\2\15\4\0\7\15\3\0\1\15\1\217"+
    "\15\15\1\0\1\15\6\0\2\15\4\0\7\15\3\0"+
    "\6\15\1\u0104\10\15\1\0\1\15\6\0\2\15\4\0"+
    "\5\15\1\u0105\1\15\3\0\17\15\1\0\1\15\6\0"+
    "\2\15\4\0\7\15\3\0\10\15\1\u0106\6\15\1\0"+
    "\1\15\6\0\2\15\4\0\7\15\3\0\1\15\1\u0107"+
    "\15\15\1\0\1\15\6\0\2\15\4\0\7\15\3\0"+
    "\1\u0108\16\15\1\0\1\15\6\0\2\15\4\0\7\15"+
    "\3\0\1\u0109\16\15\1\0\1\15\6\0\2\15\4\0"+
    "\5\15\1\u010a\1\15\3\0\17\15\1\0\1\15\6\0"+
    "\2\56\4\0\5\56\1\u010b\1\56\3\0\17\56\1\0"+
    "\1\56\6\0\2\56\4\0\5\56\1\u010c\1\56\3\0"+
    "\17\56\1\0\1\56\6\0\2\56\4\0\7\56\3\0"+
    "\1\56\1\244\15\56\1\0\1\56\6\0\2\56\4\0"+
    "\7\56\3\0\6\56\1\u010d\10\56\1\0\1\56\6\0"+
    "\2\56\4\0\5\56\1\u010e\1\56\3\0\17\56\1\0"+
    "\1\56\6\0\2\56\4\0\7\56\3\0\10\56\1\u010f"+
    "\6\56\1\0\1\56\6\0\2\56\4\0\7\56\3\0"+
    "\1\u0110\16\56\1\0\1\56\6\0\2\56\4\0\7\56"+
    "\3\0\1\u0111\16\56\1\0\1\56\6\0\2\56\4\0"+
    "\5\56\1\u0112\1\56\3\0\17\56\1\0\1\56\6\0"+
    "\2\15\4\0\7\15\3\0\11\15\1\u0113\5\15\1\0"+
    "\1\15\6\0\2\15\4\0\7\15\3\0\5\15\1\u0114"+
    "\11\15\1\0\1\15\6\0\2\15\4\0\1\u0115\6\15"+
    "\3\0\17\15\1\0\1\15\6\0\2\15\4\0\7\15"+
    "\3\0\1\15\1\133\15\15\1\0\1\15\6\0\2\15"+
    "\4\0\7\15\3\0\1\u0116\16\15\1\0\1\15\6\0"+
    "\2\15\4\0\3\15\1\370\3\15\3\0\17\15\1\0"+
    "\1\15\6\0\2\15\4\0\7\15\3\u0117\17\15\1\0"+
    "\1\15\6\0\2\15\4\0\7\15\3\u0118\17\15\1\0"+
    "\1\15\6\0\2\15\4\0\7\15\3\0\6\15\1\u0119"+
    "\10\15\1\0\1\15\6\0\2\56\4\0\7\56\3\0"+
    "\11\56\1\u011a\5\56\1\0\1\56\6\0\2\56\4\0"+
    "\7\56\3\0\5\56\1\u011b\11\56\1\0\1\56\6\0"+
    "\2\56\4\0\1\u011c\6\56\3\0\17\56\1\0\1\56"+
    "\6\0\2\56\4\0\7\56\3\0\1\56\1\161\15\56"+
    "\1\0\1\56\6\0\2\56\4\0\7\56\3\0\1\u011d"+
    "\16\56\1\0\1\56\6\0\2\56\4\0\7\56\3\u011e"+
    "\17\56\1\0\1\56\6\0\2\56\4\0\7\56\3\u011f"+
    "\17\56\1\0\1\56\6\0\2\56\4\0\7\56\3\0"+
    "\6\56\1\345\10\56\1\0\1\56\6\0\2\15\4\0"+
    "\7\15\3\0\1\15\1\u0120\15\15\1\0\1\15\6\0"+
    "\2\15\4\0\7\15\3\0\12\15\1\370\4\15\1\0"+
    "\1\15\6\0\2\15\4\0\1\15\1\u0121\5\15\3\0"+
    "\17\15\1\0\1\15\6\0\2\15\4\0\1\u0122\6\15"+
    "\3\0\17\15\1\0\1\15\14\0\1\u0123\6\0\3\u0117"+
    "\6\0\1\u0124\5\0\1\u0125\21\0\1\u0126\1\u0127\1\0"+
    "\1\u0128\1\u0129\1\0\3\u0118\2\0\1\u012a\1\0\1\u012b"+
    "\1\0\1\u012c\3\0\1\u012d\1\0\1\u012e\12\0\2\15"+
    "\4\0\7\15\3\0\13\15\1\370\3\15\1\0\1\15"+
    "\6\0\2\56\4\0\7\56\3\0\1\56\1\u012f\15\56"+
    "\1\0\1\56\6\0\2\56\4\0\7\56\3\0\12\56"+
    "\1\235\4\56\1\0\1\56\6\0\2\56\4\0\1\56"+
    "\1\u0130\5\56\3\0\17\56\1\0\1\56\6\0\2\56"+
    "\4\0\1\u0131\6\56\3\0\17\56\1\0\1\56\14\0"+
    "\1\u0132\6\0\3\u011e\6\0\1\u0133\5\0\1\u0134\21\0"+
    "\1\u0135\1\u0136\1\0\1\u0137\1\u0138\1\0\3\u011f\2\0"+
    "\1\u0139\1\0\1\u013a\1\0\1\u013b\3\0\1\u013c\1\0"+
    "\1\u013d\12\0\2\15\4\0\3\15\1\u013e\3\15\3\0"+
    "\17\15\1\0\1\15\6\0\2\15\4\0\7\15\3\0"+
    "\1\u013f\16\15\1\0\1\15\6\0\2\15\4\0\5\15"+
    "\1\u0140\1\15\3\0\17\15\1\0\1\15\26\0\1\u0141"+
    "\66\0\1\u0142\20\0\1\u0143\15\0\1\u0144\36\0\1\u0145"+
    "\47\0\1\u0146\6\0\1\u0147\44\0\1\u0148\56\0\1\u0149"+
    "\30\0\1\u014a\1\u014b\52\0\1\u014c\32\0\1\u014d\56\0"+
    "\1\u014e\33\0\1\u014f\40\0\2\56\4\0\3\56\1\u0150"+
    "\3\56\3\0\17\56\1\0\1\56\6\0\2\56\4\0"+
    "\7\56\3\0\1\u0151\16\56\1\0\1\56\6\0\2\56"+
    "\4\0\5\56\1\u0152\1\56\3\0\17\56\1\0\1\56"+
    "\26\0\1\u0153\66\0\1\u0154\20\0\1\u0155\15\0\1\u0156"+
    "\36\0\1\u0157\47\0\1\u0158\6\0\1\u0159\44\0\1\u015a"+
    "\56\0\1\u015b\30\0\1\u015c\1\u015d\52\0\1\u015e\32\0"+
    "\1\u015f\56\0\1\u0160\33\0\1\u0161\40\0\2\15\4\0"+
    "\7\15\3\0\6\15\1\u0109\10\15\1\0\1\15\6\0"+
    "\2\15\4\0\7\15\3\0\6\15\1\u0162\10\15\1\0"+
    "\1\15\43\0\1\u0163\41\0\1\u0164\37\0\1\u0165\34\0"+
    "\1\u0166\60\0\1\u0167\37\0\1\u0168\45\0\1\u0169\57\0"+
    "\1\u016a\11\0\1\u016b\46\0\1\u016c\20\0\1\u016d\51\0"+
    "\1\u016e\63\0\1\u016f\42\0\1\u0170\57\0\1\u0171\25\0"+
    "\1\u0172\7\0\1\u0173\24\0\2\56\4\0\7\56\3\0"+
    "\6\56\1\u0111\10\56\1\0\1\56\6\0\2\56\4\0"+
    "\7\56\3\0\6\56\1\u0174\10\56\1\0\1\56\43\0"+
    "\1\u0175\41\0\1\u0176\37\0\1\u0177\34\0\1\u0178\60\0"+
    "\1\u0179\37\0\1\74\45\0\1\u017a\57\0\1\u017b\11\0"+
    "\1\u017c\46\0\1\u017d\20\0\1\u017e\51\0\1\u017f\63\0"+
    "\1\u0180\42\0\1\u0181\57\0\1\u0182\25\0\1\u0183\7\0"+
    "\1\u0184\24\0\2\15\4\0\7\15\3\0\13\15\1\u0109"+
    "\3\15\1\0\1\15\27\0\1\u0185\33\0\1\u0186\53\0"+
    "\1\u0187\53\0\1\u0188\50\0\1\u0189\46\0\1\u018a\45\0"+
    "\1\u018b\45\0\1\u018c\54\0\1\u0168\47\0\1\u018d\30\0"+
    "\1\u018e\46\0\1\u0168\43\0\1\u018f\66\0\1\u0190\33\0"+
    "\1\u0191\56\0\1\u0192\23\0\2\56\4\0\7\56\3\0"+
    "\13\56\1\u0111\3\56\1\0\1\56\27\0\1\u0193\33\0"+
    "\1\u0194\53\0\1\u0195\53\0\1\u0196\50\0\1\u0197\46\0"+
    "\1\u0194\45\0\1\u0198\45\0\1\u0199\54\0\1\74\47\0"+
    "\1\u019a\30\0\1\u019b\46\0\1\74\43\0\1\u019c\66\0"+
    "\1\u019d\33\0\1\u019e\56\0\1\u019f\35\0\1\u01a0\47\0"+
    "\1\u01a1\61\0\1\u01a2\51\0\1\u01a3\40\0\1\u0168\36\0"+
    "\1\u01a4\45\0\1\u01a5\42\0\1\u01a6\67\0\1\u0168\45\0"+
    "\1\u01a7\54\0\1\u01a8\32\0\1\u0168\57\0\1\u01a9\23\0"+
    "\1\u01aa\52\0\1\u01ab\47\0\1\u01ac\61\0\1\u01ad\51\0"+
    "\1\u01ae\40\0\1\74\35\0\1\u01af\42\0\1\u01b0\67\0"+
    "\1\74\45\0\1\u01b1\54\0\1\u01b2\32\0\1\74\57\0"+
    "\1\u01b3\23\0\1\u01b4\71\0\1\u01b5\46\0\1\u01b6\37\0"+
    "\1\u01b7\46\0\1\u01b8\55\0\1\u01b9\50\0\1\u0168\35\0"+
    "\1\u01ba\46\0\1\u01bb\53\0\1\u01bc\25\0\1\u01bd\75\0"+
    "\1\u016c\42\0\1\u01be\46\0\1\u01bf\37\0\1\u01c0\46\0"+
    "\1\74\57\0\1\74\35\0\1\u01c1\46\0\1\u01c2\53\0"+
    "\1\u01c3\25\0\1\u01c4\75\0\1\u017d\24\0\1\u01c5\54\0"+
    "\1\u01c6\40\0\1\u01c7\54\0\1\u016f\53\0\1\u01c8\33\0"+
    "\1\u01c9\63\0\1\u01ca\36\0\1\u01cb\41\0\1\u01cc\54\0"+
    "\1\u0180\40\0\1\u01cd\61\0\1\u01ce\33\0\1\u01cf\63\0"+
    "\1\u01d0\36\0\1\u01d1\53\0\1\u01d2\32\0\1\u01b8\63\0"+
    "\1\u01d3\26\0\1\u01d4\61\0\1\u0146\45\0\1\u01d5\43\0"+
    "\3\u0118\54\0\1\u01d6\47\0\1\u01af\26\0\1\u01d7\61\0"+
    "\1\u0158\45\0\1\u01d8\43\0\3\u011f\61\0\1\u01b8\47\0"+
    "\1\u01b8\22\0\1\u01d9\45\0\1\u01da\72\0\1\74\23\0"+
    "\1\u01db\45\0\1\u01dc\60\0\1\u01dd\41\0\1\u01de\53\0"+
    "\1\u01df\41\0\1\u01e0\61\0\1\u01cb\46\0\1\u01e1\46\0"+
    "\1\u01d1\46\0\1\u01e2\53\0\1\u01cb\46\0\1\u01d1\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16887];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\10\0\1\11\1\1\2\11\6\1\1\11"+
    "\7\1\2\11\34\1\2\11\3\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\3\11\1\1\1\11\24\1\1\0"+
    "\1\11\1\0\1\11\1\0\21\1\2\0\3\11\1\0"+
    "\54\1\2\0\6\1\1\0\30\1\1\0\1\11\2\0"+
    "\5\1\1\0\73\1\2\0\5\1\2\0\3\1\14\0"+
    "\3\1\14\0\3\1\17\0\3\1\17\0\1\1\5\0"+
    "\1\1\13\0\1\1\103\0\1\11\52\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[482];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public IndentationHintScanner() {
        this(new StringReader(""));
    }
    
    public ModelicaAnchorList analyze(String text) {
		
		yyreset(new StringReader(text));
		
		ancs = new ModelicaAnchorList();
	
		annotation_paren_level = 0;
		last_state = YYINITIAL;
		
		try {
			yylex();
		} catch (IOException e) { }
		
		return ancs;
	}
	
	/* scanner state variables */
	public ModelicaAnchorList ancs;
	int annotation_paren_level;	
	int last_state;
	


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public IndentationHintScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public IndentationHintScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 116) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { ancs.beginLine(yychar);
  					  yybegin(YYINITIAL);
          }
        case 31: break;
        case 29: 
          { ancs.addSink(yychar, "class", Indent.SAME);
          }
        case 32: break;
        case 22: 
          { ancs.beginSection(yychar + 2, yychar, Indent.COMMENT, "comment");
  				      last_state = yystate(); 
  				      yybegin(COMMENT_LINEBEGIN);
          }
        case 33: break;
        case 2: 
          { yybegin(YYINITIAL);
          }
        case 34: break;
        case 18: 
          { annotation_paren_level++; 
  					  
  					  if(annotation_paren_level==1)
  				        ancs.beginSection(yychar, yychar, new Indent.AnnotationParen(1), "paren");
  				      else 
  				        ancs.annotationParen(yychar, annotation_paren_level);
          }
        case 35: break;
        case 12: 
          { ancs.addAnchor(yychar+1, yychar, Indent.SAME); 
  					  yybegin(COMMENT);
          }
        case 36: break;
        case 5: 
          { yybegin(LINEBEGIN);
          }
        case 37: break;
        case 4: 
          { ancs.beginSection(yychar + 1, yychar, Indent.UNCHANGED, "string");     
  					  last_state = yystate(); 
  					  yybegin(STRING);
          }
        case 38: break;
        case 23: 
          { ancs.popPast("comment", yychar); 
  					  yybegin(last_state);
          }
        case 39: break;
        case 21: 
          { yypushback(1); yybegin(YYINITIAL);
          }
        case 40: break;
        case 27: 
          { ancs.addSink(yychar, "class", Indent.SAME);
  					  ancs.addAnchor(yychar + yylength(), yychar, Indent.INDENT);
  					  yybegin(END);
          }
        case 41: break;
        case 11: 
          { yybegin(COMMENT_LINEBEGIN);
          }
        case 42: break;
        case 7: 
          { yypushback(1); yybegin(LINEBEGIN);
          }
        case 43: break;
        case 19: 
          { yypushback(1); 
					  yybegin(ANNOTATION);
          }
        case 44: break;
        case 15: 
          { ancs.beginSection(yychar+1, yychar, Indent.UNCHANGED, "string");
					  last_state = yystate();
					  yybegin(STRING);
          }
        case 45: break;
        case 9: 
          { yypushback(yylength()); yybegin(YYINITIAL);
          }
        case 46: break;
        case 20: 
          { ancs.addSink(yychar, "paren", 
						new Indent.AnnotationParen(annotation_paren_level - yylength())); 
					  yypushback(yylength()	);
					  yybegin(ANNOTATION);
          }
        case 47: break;
        case 16: 
          { yybegin(ANNOTATION_LINEBEGIN);
          }
        case 48: break;
        case 14: 
          { ancs.popPast("qident", yychar + yylength()); 
  					  yybegin(YYINITIAL);
          }
        case 49: break;
        case 13: 
          { ancs.popPast("string", yychar + yylength());
  					  yybegin(last_state);
          }
        case 50: break;
        case 10: 
          { ancs.popPast("class", yychar + yylength()); 
  					  yybegin(YYINITIAL);
          }
        case 51: break;
        case 28: 
          { ancs.addAnchor(yychar, yychar, Indent.SAME);
          }
        case 52: break;
        case 6: 
          { ancs.completeStatement(yychar + 1);
          }
        case 53: break;
        case 26: 
          { ancs.addAnchor(yychar, yychar, Indent.SAME); 
  					  ancs.beginSection(yychar + yylength(), yychar, Indent.INDENT, "class");
  					  yybegin(CLASS);
          }
        case 54: break;
        case 25: 
          { ancs.beginSection(yychar+2, yychar, Indent.COMMENT, "comment");
					  last_state = yystate();
					  yybegin(COMMENT_LINEBEGIN);
          }
        case 55: break;
        case 17: 
          { annotation_paren_level--;
  					  ancs.annotationParen(yychar+1, annotation_paren_level);
  					  if (annotation_paren_level == 0) { 
	  					    ancs.popPast("paren", yychar+1);
  							ancs.popPast("annotation", yychar+1);
  							yybegin(YYINITIAL); 
  					  }
          }
        case 56: break;
        case 30: 
          { ancs.beginSection(yychar + yylength(), yychar, Indent.INDENT, "annotation");
  					  yybegin(ANNOTATION);
          }
        case 57: break;
        case 24: 
          { ancs.addSink(yychar, "comment", Indent.SAME); // match comment end delim to start delim if alone on line
  					  ancs.popPast("comment", yychar); 
  					  yybegin(last_state);
          }
        case 58: break;
        case 3: 
          { ancs.beginSection(yychar + 1, yychar, Indent.UNCHANGED, "qident");
  					  yybegin(QIDENT);
          }
        case 59: break;
        case 1: 
          { 
          }
        case 60: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
