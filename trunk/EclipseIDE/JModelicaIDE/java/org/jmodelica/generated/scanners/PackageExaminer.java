/* The following code was generated by JFlex 1.4.3 on 10/6/09 6:59 PM */

/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
package org.jmodelica.generated.scanners;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.io.StringReader;

import org.jmodelica.ide.helpers.Library;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/6/09 6:59 PM from the specification file
 * <tt>/home/philip/workspace/JModelicaIDE/flex/PackageExaminer.flex</tt>
 */
public final class PackageExaminer {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 1024;

  /** lexical states */
  private static final int WITHIN = 4;
  private static final int ANNOTATION = 8;
  private static final int YYINITIAL = 0;
  private static final int INPACKAGE = 6;
  private static final int VERSION = 10;
  private static final int PACKAGE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\10\1\0\1\11\1\7\22\0\1\11\1\0\1\47"+
    "\4\0\1\51\1\36\1\37\1\42\1\6\1\40\1\6\1\3\1\43"+
    "\12\2\1\40\1\41\1\45\1\44\1\46\2\0\4\1\1\5\25\1"+
    "\1\40\1\50\1\40\1\40\1\1\1\0\1\16\1\22\1\24\1\13"+
    "\1\4\1\27\1\32\1\33\1\23\1\1\1\35\1\17\1\31\1\12"+
    "\1\25\1\20\1\1\1\15\1\26\1\14\1\21\1\52\1\30\1\1"+
    "\1\34\1\1\1\40\1\0\1\40\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\0\2\2\1\1\4\2\1\3\1\2"+
    "\1\4\1\5\1\2\20\1\2\2\1\6\1\7\1\1"+
    "\3\2\6\0\1\3\3\0\1\4\1\1\1\0\12\1"+
    "\4\0\1\1\1\0\1\10\1\0\2\2\1\0\1\1"+
    "\1\0\1\7\12\1\2\2\1\6\11\1\2\2\6\1"+
    "\1\2\1\11\4\1\1\12\6\1\2\0\1\13\1\1"+
    "\2\0\1\14\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\u0102\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0102\0\u0387"+
    "\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u01d9"+
    "\0\u04df\0\u050a\0\u0535\0\u0560\0\u0102\0\u0102\0\u058b\0\u05b6"+
    "\0\u05e1\0\u060c\0\u0637\0\u0662\0\u0204\0\u068d\0\u025a\0\u06b8"+
    "\0\u0102\0\u06e3\0\u02b0\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba"+
    "\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912"+
    "\0\u093d\0\u0535\0\u0968\0\u0560\0\u0993\0\u09be\0\u05b6\0\u0102"+
    "\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0331\0\u02db\0\u0ac0"+
    "\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18"+
    "\0\u0c43\0\u0c6e\0\u0c99\0\u02db\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45"+
    "\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d"+
    "\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u012d\0\u0fca"+
    "\0\u0ff5\0\u1020\0\u104b\0\u012d\0\u1076\0\u10a1\0\u10cc\0\u10f7"+
    "\0\u1122\0\u114d\0\u1178\0\u11a3\0\u0102\0\u11ce\0\u11f9\0\u1224"+
    "\0\u02db\0\u124f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int ZZ_TRANS [] = {
    6, 7, 6, 6, 7, 7, 6, 8, 8, 8, 
    7, 7, 7, 7, 7, 7, 9, 7, 7, 7, 
    7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 
    6, 6, 6, 6, 6, 11, 6, 6, 6, 6, 
    6, 12, 7, 6, 13, 6, 6, 13, 13, 6, 
    8, 8, 8, 13, 13, 13, 13, 13, 13, 13, 
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
    13, 13, 13, 6, 6, 6, 6, 6, 11, 6, 
    6, 6, 6, 6, 14, 13, 6, 15, 6, 6, 
    15, 15, 6, 8, 8, 8, 15, 15, 15, 15, 
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
    15, 15, 15, 15, 15, 15, 6, 6, 6, 16, 
    6, 11, 6, 6, 6, 6, 6, 17, 15, 6, 
    18, 19, 20, 21, 18, 22, 8, 8, 8, 18, 
    18, 23, 24, 25, 18, 26, 18, 27, 18, 28, 
    18, 18, 29, 18, 30, 18, 18, 18, 18, 22, 
    22, 22, 22, 22, 31, 32, 33, 32, 34, 6, 
    35, 18, 6, 18, 19, 20, 18, 18, 22, 8, 
    8, 8, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 36, 37, 22, 22, 22, 31, 32, 33, 
    32, 34, 6, 35, 38, 6, 6, 6, 6, 6, 
    6, 6, 8, 8, 8, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
    11, 6, 6, 6, 39, 6, 6, 6, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 7, 7, -1, 7, 7, -1, -1, -1, 
    -1, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, 
    -1, 8, 8, 8, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 
    -1, 7, 7, -1, -1, -1, -1, 7, 7, 7, 
    7, 40, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 
    -1, 7, 7, -1, 7, 7, -1, -1, -1, -1, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 41, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 42, 43, -1, 
    -1, -1, -1, -1, -1, -1, 44, 44, 44, 44, 
    44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
    44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
    44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
    44, 44, 44, 44, 44, 44, 45, 6, 44, -1, 
    13, 13, -1, 13, 13, -1, -1, -1, -1, 13, 
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
    13, 13, 13, 13, 13, 13, 13, 13, 13, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 13, 46, 46, 46, 46, 46, 46, 46, 46, 
    46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 
    46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 
    46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 
    46, 46, 47, 48, 46, -1, 15, 15, 49, 15, 
    15, -1, -1, -1, -1, 15, 15, 15, 15, 15, 
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
    15, 15, 15, 15, 15, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 15, 50, 50, 
    50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
    50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
    50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
    50, 50, 50, 50, 50, 50, 50, 50, 51, 52, 
    50, -1, 18, 18, -1, 18, 18, -1, -1, -1, 
    -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 18, -1, -1, 19, 53, 54, 54, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 18, 18, -1, 18, 18, -1, -1, -1, -1, 
    55, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 18, -1, 18, 18, -1, 18, 18, -1, 
    -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 56, 18, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 18, -1, 18, 18, -1, 
    57, 18, -1, -1, -1, -1, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, 
    18, 18, -1, 18, 18, -1, -1, -1, -1, 58, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 18, -1, 18, 18, -1, 18, 18, -1, -1, 
    -1, -1, 18, 18, 18, 18, 59, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 18, -1, 18, 18, -1, 18, 
    18, -1, -1, -1, -1, 18, 18, 18, 18, 18, 
    60, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 18, -1, 18, 
    18, -1, 18, 18, -1, -1, -1, -1, 18, 18, 
    18, 18, 18, 61, 18, 18, 18, 18, 18, 62, 
    18, 18, 18, 18, 18, 18, 18, 18, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    18, -1, 18, 18, -1, 18, 18, -1, -1, -1, 
    -1, 18, 18, 18, 18, 18, 18, 18, 63, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 18, -1, 18, 18, -1, 18, 18, 
    -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 64, 18, 18, 18, 18, 
    18, 18, 18, 18, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 22, -1, 22, -1, 
    -1, -1, -1, 65, 65, 65, 65, 65, 65, 65, 
    65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 
    65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 
    65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 
    65, 65, 22, 66, 65, 65, 67, 67, 67, 67, 
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 
    67, 67, 67, 67, 67, 67, 68, 22, 67, -1, 
    18, 18, -1, 69, 18, -1, -1, -1, -1, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 18, 70, 70, 70, 70, 70, 70, 70, 70, 
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 
    70, 71, 72, 70, 70, -1, 7, 7, -1, 7, 
    7, -1, -1, -1, -1, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 73, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 7, -1, 7, 
    7, -1, 7, 7, -1, -1, -1, -1, 7, 7, 
    74, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    7, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
    42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
    42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
    42, 42, 42, 42, 42, 75, 42, 42, 42, 42, 
    42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 
    43, 22, 76, 43, 43, 43, 43, 43, 43, 43, 
    43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 
    43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 
    43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 
    44, 44, 44, 44, 44, -1, 44, 44, 44, 44, 
    44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
    44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
    44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 
    46, 46, 46, 46, 46, 46, 46, 46, -1, 46, 
    46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 
    46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 
    46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 
    46, 46, 46, -1, 15, -1, -1, 15, 15, -1, 
    -1, -1, -1, 15, 15, 15, 15, 15, 15, 15, 
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
    15, 15, 15, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 50, 15, 50, 50, 50, 50, 
    50, 50, 50, 50, -1, 50, 50, 50, 50, 50, 
    50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
    50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
    50, 50, 50, 50, 50, 50, 50, 50, 50, -1, 
    -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 53, -1, 54, 54, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, 
    -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 
    18, -1, 18, 18, -1, -1, -1, -1, 18, 78, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    18, -1, 18, 18, -1, 18, 18, -1, -1, -1, 
    -1, 18, 18, 18, 18, 18, 18, 79, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 18, -1, 18, 18, -1, 18, 18, 
    -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 80, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 18, -1, 18, 18, 
    -1, 18, 18, -1, -1, -1, -1, 81, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 
    -1, 18, 18, -1, 18, 18, -1, -1, -1, -1, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    82, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 18, -1, 18, 18, -1, 18, 18, -1, 
    -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 83, 18, 18, 18, 18, 18, 
    18, 18, 18, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 18, -1, 18, 18, -1, 
    18, 18, -1, -1, -1, -1, 18, 18, 18, 18, 
    84, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, 
    18, 18, -1, 18, 18, -1, -1, -1, -1, 85, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 18, -1, 18, 18, -1, 18, 18, -1, -1, 
    -1, -1, 86, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 18, -1, 18, 18, -1, 18, 
    18, -1, -1, -1, -1, 18, 87, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 18, 65, 65, 
    65, 65, 65, 65, 65, 65, -1, 65, 65, 65, 
    65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 
    65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 
    65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 
    65, 67, 67, 67, 67, 67, 67, 67, 67, -1, 
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 
    67, 67, 67, 67, -1, 18, 18, -1, 18, 18, 
    -1, -1, -1, -1, 18, 18, 18, 88, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 18, 70, 70, 70, 
    70, 70, 70, 70, 70, -1, 70, 70, 70, 70, 
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 
    70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 
    -1, 7, 7, -1, 7, 7, -1, -1, -1, -1, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 89, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 7, -1, 7, 7, -1, 7, 7, -1, 
    -1, -1, -1, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    90, 7, 7, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 7, 42, 42, 42, 42, 
    42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
    42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
    42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
    75, 22, 42, 42, 42, 42, 42, 42, 42, -1, 
    -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 18, 18, -1, 91, 18, -1, -1, 
    -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 18, -1, 18, 18, -1, 18, 
    18, -1, -1, -1, -1, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 92, 18, 18, 18, 
    18, 18, 18, 18, 18, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 18, -1, 18, 
    18, -1, 18, 18, -1, -1, -1, -1, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 93, 
    18, 18, 18, 18, 18, 18, 18, 18, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    18, -1, 18, 18, -1, 18, 18, -1, -1, -1, 
    -1, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    94, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 18, -1, 18, 18, -1, 18, 18, 
    -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 95, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 18, -1, 18, 18, 
    -1, 18, 18, -1, -1, -1, -1, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 96, 
    18, 18, 18, 18, 18, 18, 18, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 
    -1, 18, 18, -1, 18, 18, -1, -1, -1, -1, 
    97, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 18, -1, 18, 18, -1, 18, 18, -1, 
    -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 98, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 18, -1, 18, 18, -1, 
    99, 18, -1, -1, -1, -1, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, 
    18, 18, -1, 18, 18, -1, -1, -1, -1, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 100, 18, 18, 18, 18, 18, 18, 18, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 18, -1, 7, 7, -1, 7, 7, -1, -1, 
    -1, -1, 7, 7, 7, 7, 101, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 7, -1, 7, 7, -1, 7, 
    7, -1, -1, -1, -1, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 102, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 7, -1, 18, 
    18, -1, 18, 18, -1, -1, -1, -1, 18, 18, 
    18, 103, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    18, -1, 18, 18, -1, 18, 18, -1, -1, -1, 
    -1, 18, 18, 104, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 18, -1, 18, 18, -1, 18, 18, 
    -1, -1, -1, -1, 18, 18, 18, 18, 105, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 18, -1, 18, 18, 
    -1, 18, 18, -1, -1, -1, -1, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 91, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 
    -1, 18, 18, -1, 18, 18, -1, -1, -1, -1, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 91, 18, 18, 18, 18, 18, 18, 18, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 18, -1, 18, 18, -1, 106, 18, -1, 
    -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 18, -1, 18, 18, -1, 
    18, 18, -1, -1, -1, -1, 18, 18, 107, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, 
    18, 18, -1, 18, 18, -1, -1, -1, -1, 18, 
    18, 18, 18, 18, 91, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 18, -1, 18, 18, -1, 18, 18, -1, -1, 
    -1, -1, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 108, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 18, -1, 7, 7, -1, 7, 
    7, -1, -1, -1, -1, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 109, 7, 7, 7, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 7, -1, 7, 
    7, -1, 7, 7, -1, -1, -1, -1, 110, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    7, -1, 18, 18, -1, 18, 18, -1, -1, -1, 
    -1, 18, 91, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 18, -1, 18, 18, -1, 18, 18, 
    -1, -1, -1, -1, 18, 18, 18, 18, 111, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 18, -1, 18, 18, 
    -1, 18, 18, -1, -1, -1, -1, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 79, 18, 18, 18, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 
    -1, 18, 18, -1, 18, 18, -1, -1, -1, -1, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    112, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 18, -1, 18, 18, -1, 18, 18, -1, 
    -1, -1, -1, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 113, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 18, -1, 18, 18, -1, 
    18, 18, -1, -1, -1, -1, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 114, 18, 18, 
    18, 18, 18, 18, 18, 18, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, 
    7, 7, -1, 115, 7, -1, -1, -1, -1, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
    7, 7, 7, 7, 7, 7, 7, 7, 7, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 7, -1, 18, 18, -1, 18, 18, -1, -1, 
    -1, -1, 18, 18, 116, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 18, -1, 18, 18, -1, 18, 
    18, -1, -1, -1, -1, 18, 18, 117, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 18, -1, 18, 
    18, -1, 18, 18, -1, -1, -1, -1, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 118, 
    18, 18, 18, 18, 18, 18, 18, 18, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    18, -1, 18, 18, -1, 18, 18, -1, -1, -1, 
    -1, 119, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 18, -1, 18, 18, -1, 18, 18, 
    -1, -1, -1, -1, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 120, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 18, -1, 18, 18, 
    -1, 18, 18, -1, -1, -1, -1, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 121, 18, 
    18, 18, 18, 18, 18, 18, 18, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 
    -1, 18, 18, -1, 18, 18, -1, -1, -1, -1, 
    91, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 18, -1, 18, 18, -1, 18, 18, -1, 
    122, 122, 122, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, -1, -1, -1, -1, -1, 123, 124, 
    -1, -1, -1, -1, -1, 18, -1, 18, 18, -1, 
    18, 18, -1, -1, -1, -1, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 125, 18, 18, 
    18, 18, 18, 18, 18, 18, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, 
    18, 18, -1, 18, 18, -1, -1, -1, -1, 18, 
    18, 18, 91, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 18, -1, -1, -1, -1, -1, -1, -1, 122, 
    122, 122, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 123, 124, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 126, 
    127, -1, -1, -1, -1, -1, -1, -1, -1, 18, 
    18, -1, 18, 18, -1, -1, -1, -1, 128, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
    18, 18, 18, 18, 18, 18, 18, 18, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    18, 126, 126, 126, 126, 126, 126, 126, 126, 126, 
    126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 
    126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 
    126, 126, 126, 126, 126, 129, 126, 126, 126, 126, 
    126, 126, 126, 126, 127, 127, 127, 127, 127, 127, 
    127, 122, 122, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 
    127, 127, 127, 127, 127, 127, 127, 126, 126, 126, 
    126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 
    126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 
    126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 
    126, 129, 122, 126, 126, 126, 126, 126, 126, 126
  };

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\1\0\1\11\11\1\1\11\5\1\1\11"+
    "\15\1\2\11\4\1\6\0\1\11\3\0\2\1\1\0"+
    "\12\1\4\0\1\1\1\0\1\11\1\0\2\1\1\0"+
    "\1\1\1\0\54\1\2\0\1\11\1\1\2\0\1\1"+
    "\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private Library lib;
	private int level;
	
    public PackageExaminer() {
        this(new StringReader(""));
    }
    
    public Library examine(String path) throws FileNotFoundException {
    	StringBuilder filePath = new StringBuilder(path);
    	if (!path.endsWith(File.separator))
    		filePath.append(File.separator);
    	filePath.append("Modelica" + File.separator + "package.mo");
    	FileReader reader = new FileReader(filePath.toString());
    	lib = new Library();
    	lib.path = path;
    	lib.name = "";
    	lib.version = new Library.Version("");
		yyreset(reader);	
        try {
			yylex();
		} catch (IOException e) {
		}
		return lib;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PackageExaminer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PackageExaminer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { return 0;
          }
        case 13: break;
        case 11: 
          { if (level == 1) yybegin(VERSION);
          }
        case 14: break;
        case 10: 
          { yybegin(PACKAGE);
          }
        case 15: break;
        case 7: 
          { level--;
          }
        case 16: break;
        case 3: 
          { level = 0; lib.name += yytext(); yybegin(INPACKAGE);
          }
        case 17: break;
        case 4: 
          { lib.name = yytext(); yybegin(YYINITIAL);
          }
        case 18: break;
        case 9: 
          { yybegin(WITHIN);
          }
        case 19: break;
        case 12: 
          { if (level == 0) yybegin(ANNOTATION);
          }
        case 20: break;
        case 6: 
          { level++;
          }
        case 21: break;
        case 8: 
          { lib.version = new Library.Version(yytext().replace('"', ' ').trim()); return 0;
          }
        case 22: break;
        case 5: 
          { yybegin(YYINITIAL);
          }
        case 23: break;
        case 1: 
          { 
          }
        case 24: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return 0;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
