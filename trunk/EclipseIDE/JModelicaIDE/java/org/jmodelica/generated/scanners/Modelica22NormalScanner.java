/* The following code was generated by JFlex 1.4.3 on 4/12/10 12:37 PM */

/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
package org.jmodelica.generated.scanners;

import java.io.Reader;
import java.io.StringReader;

import org.eclipse.jface.text.IDocument;
import org.eclipse.jface.text.rules.IToken;
import org.eclipse.jface.text.rules.Token;

import org.jmodelica.ide.scanners.HilightScanner;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/12/10 12:37 PM from the specification file
 * <tt>/home/philip/workspace/JModelicaIDE/flex/Modelica22Normal.flex</tt>
 */
public final class Modelica22NormalScanner extends HilightScanner {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 2048;

  /** lexical states */
  private static final int COMMENT_ONE_LINE = 4;
  private static final int YYINITIAL = 0;
  private static final int COMMENTSTATE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\10\1\0\1\7\1\7\22\0\1\7\1\0\1\44"+
    "\4\0\1\45\1\0\1\0\1\37\1\6\1\0\1\6\1\3\1\40"+
    "\12\2\1\0\1\0\1\42\1\41\1\43\1\44\1\0\4\1\1\5"+
    "\25\1\1\0\1\46\1\0\1\0\1\1\1\0\1\11\1\23\1\16"+
    "\1\22\1\4\1\31\1\30\1\36\1\15\1\1\1\24\1\17\1\21"+
    "\1\12\1\13\1\27\1\35\1\25\1\20\1\14\1\32\1\47\1\34"+
    "\1\33\1\26\1\1\1\0\1\0\1\0\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\30\1\1\3\2\0\1\1\1\0"+
    "\10\1\1\4\5\1\1\4\22\1\1\5\2\0\1\6"+
    "\1\7\1\0\43\1\1\4\62\1\1\4\14\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0398"+
    "\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488\0\u04b0\0\u04d8"+
    "\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618"+
    "\0\240\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708\0\u0730"+
    "\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0870"+
    "\0\u0898\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0"+
    "\0\u09d8\0\170\0\u0410\0\u0a00\0\170\0\170\0\360\0\u0a28"+
    "\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u0b68"+
    "\0\u0b90\0\u0bb8\0\u0be0\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8"+
    "\0\u0cd0\0\u0cf8\0\u0d20\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8"+
    "\0\u0e10\0\u0e38\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28"+
    "\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u1068"+
    "\0\u1090\0\u10b8\0\u10e0\0\u1108\0\u1130\0\u1158\0\u1180\0\u11a8"+
    "\0\u11d0\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8"+
    "\0\u1310\0\u1338\0\u1360\0\u1388\0\u13b0\0\u13d8\0\u1400\0\u1428"+
    "\0\u1450\0\u1478\0\u14a0\0\u14c8\0\u14f0\0\u1518\0\u1540\0\u1568"+
    "\0\u1590\0\u15b8\0\u15e0\0\u1608\0\u1630\0\u1658\0\u1680\0\u16a8"+
    "\0\u16d0\0\u16f8\0\u1720\0\u1748\0\u1770\0\u1798\0\u17c0\0\u17e8"+
    "\0\u1810\0\u1838\0\u1860\0\u1888\0\u18b0\0\u18d8\0\u1900\0\u1928"+
    "\0\u1950\0\u1978";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int ZZ_TRANS [] = {
    3, 4, 5, 6, 7, 4, 3, 8, 8, 9, 
    10, 11, 12, 13, 14, 15, 4, 16, 17, 18, 
    4, 19, 4, 20, 4, 21, 4, 4, 22, 4, 
    4, 3, 23, 24, 25, 24, 3, 26, 3, 4, 
    27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
    27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
    27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
    27, 28, -1, 27, 27, 27, 27, 27, 29, 27, 
    2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, -1, 5, 30, 31, 31, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 32, 
    33, 4, 4, 4, 4, 34, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 35, 4, 36, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, -1, -1, -1, -1, -1, -1, 8, 8, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    37, 4, 4, 4, 4, 38, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 39, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 40, 4, 4, 4, 4, 41, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 42, 4, 4, 4, 4, 4, 4, 
    4, 43, 44, 4, 4, 4, 4, 4, 4, 4, 
    45, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    46, 4, 4, 4, 4, 4, 4, 47, 4, 4, 
    4, 4, 4, 4, 4, 40, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 48, 4, 4, 4, 49, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 50, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 51, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 52, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 53, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 54, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 55, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 56, 4, 4, 4, 4, 57, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 58, 
    4, 59, 4, 60, 4, 61, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 62, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 63, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    64, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 65, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 3, -1, 3, -1, -1, -1, -1, 
    66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 
    66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 
    66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 
    66, 66, 66, 66, 66, 66, 66, 3, 67, 66, 
    27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
    27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
    27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
    27, -1, -1, 27, 27, 27, 27, 27, -1, 27, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, 
    69, 69, 69, 69, 69, 69, 69, 69, -1, 69, 
    69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
    69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
    69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
    -1, -1, 30, -1, 31, 31, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 6, -1, -1, -1, 70, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 71, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 72, 4, 4, 4, 40, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 73, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 74, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 75, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    76, 4, 4, 4, 4, 4, 4, 4, 40, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 77, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 40, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 78, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 79, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 79, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 79, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 80, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    81, 4, 4, 82, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 83, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 84, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    85, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 86, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 87, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 88, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 89, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 90, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 91, 4, 92, 4, 4, 4, 93, 4, 
    4, 4, 4, 94, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 95, 4, 4, 4, 4, 4, 
    4, 96, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 97, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 98, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 99, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 40, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    100, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 101, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    102, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 103, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 80, 4, -1, -1, -1, 4, 
    4, 4, 4, 104, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 
    66, -1, 66, -1, -1, -1, -1, -1, -1, 66, 
    -1, 66, -1, -1, -1, 66, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 66, 66, 66, 66, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    40, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 105, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 106, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 107, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 108, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 109, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 110, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 59, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 83, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 40, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 59, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 111, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 39, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 112, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    113, 4, 4, 4, 4, 4, 114, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 115, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 40, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 116, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 117, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 118, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 119, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 120, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 121, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 122, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    123, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 124, 
    4, 4, 111, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 125, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 126, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 79, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 116, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 40, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 108, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    127, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 79, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 128, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 129, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 130, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    131, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 60, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 132, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 75, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 133, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 100, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 39, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 134, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 135, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 40, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 40, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 136, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    40, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 80, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 137, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 138, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 139, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 140, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 141, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 142, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 143, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 80, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 144, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 40, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    45, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 115, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 145, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 146, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 147, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 148, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 149, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 150, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 40, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 151, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 152, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 79, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 153, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 154, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 40, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 155, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 80, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 156, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 157, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    39, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 158, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 79, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 159, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 160, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 81, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 161, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 162, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    163, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 59, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 164, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 79, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 165, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 137, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 154, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 40, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    166, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 104, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 167, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 168, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 169, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4, 
    -1, 4, 4, -1, 4, 4, -1, -1, -1, 4, 
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
    4, 4, 40, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, -1, -1, 4
  };

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\1\1\11\30\1\2\0\1\1\1\0"+
    "\41\1\1\11\2\0\2\11\1\0\143\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int start;
    
    public Modelica22NormalScanner() {
        this(new StringReader(""));
    }
    
    public IToken nextToken() {
        try {
            return nextTokenInternal();
        } catch (java.io.IOException e) {
            return Token.EOF;
        }
    }

    public int getTokenLength() {
    	return yylength();
    }

    public int getTokenOffset() {
    	return start + yychar;
    }

    public void setRange(IDocument document, int offset, int length) {
        start = offset;
    	reset(document, offset, length);	
    }
    
    protected void reset(Reader r) {
        yyreset(r);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Modelica22NormalScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Modelica22NormalScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private IToken nextTokenInternal() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return KEYWORD;
          }
        case 8: break;
        case 3: 
          { System.out.println("HERE!" + yytext()); return COMMENT;
          }
        case 9: break;
        case 7: 
          { return COMMENT;
          }
        case 10: break;
        case 1: 
          { return NORMAL;
          }
        case 11: break;
        case 5: 
          { yybegin(COMMENT_ONE_LINE); return COMMENT_BOUNDARY;
          }
        case 12: break;
        case 2: 
          { yybegin(YYINITIAL); System.out.println("!@!@!" + yytext()); return COMMENT;
          }
        case 13: break;
        case 6: 
          { yybegin(YYINITIAL); return COMMENT_BOUNDARY;
          }
        case 14: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return Token.EOF;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
