/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import org.jmodelica.ide.helpers.Util;

aspect Util {
	
	inh lazy StoredDefinition ASTNode.getDefinition();
	eq StoredDefinition.getChild(int index).getDefinition() = this;
	eq InstNode.getInstClassDecl(int index).getDefinition() = 
			getInstClassDecl(index).getClassDecl().getDefinition();
	eq InstNode.getInstComponentDecl(int index).getDefinition() = 
			getInstComponentDecl(index).getComponentDecl().getDefinition();
 
	
	public ArrayList<T> List.toArrayList() {
	    ArrayList a = new ArrayList();
	    for (T t : this)
	        a.add(t);
	    return a;
	}
	
   public ArrayList<T> List.retainAll(Iterable<?> col) {
        java.util.List<?> list = Util.fromIterable(col);
        ArrayList<T> tmp = toArrayList();
        tmp.retainAll(list);
        return tmp;
    }
	
	// Add a isKnown() method. I hate double negating things! :)
	
	public boolean InstClassDecl.isKnown() {
	    return !isUnknown();
	}
	
	public boolean InstComponentDecl.isKnown() {
	    return !isUnknown();
	}
	
}