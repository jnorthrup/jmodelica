/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
import java.util.ArrayList;
import org.eclipse.jface.text.Position;
import org.jmodelica.folding.CharacterPosition;

aspect ModelicaFolding {
	
	protected ArrayList<Position> Annotation.makeFoldingPosition() {
		int start = getBeginOffset() + 1;
		int end = getEndOffset();
		int length = end - start + 1;
		ArrayList<Position> list = new ArrayList<Position>(1);
    	if (start > 0 && length > 0) 
	    	list.add(new CharacterPosition(start, length));
    	return list;
    }

//    eq FullClassDecl.hasFolding() = true;
    eq Annotation.hasFolding() = true;
    eq Annotation.foldingPositions(IDocument document) = makeFoldingPosition();
    
    /*
     * Avoid loading libraries.
     */
	refine Folding eq ASTNode.foldingPositions(IDocument document) {
		ArrayList list = new ArrayList();
		if (isError())
			return list;
		if (hasFolding()) {
			try {
				int lineStart = ASTNode.getLine(getStart());
				int lineEnd = ASTNode.getLine(getEnd());
				int nbrOfLines = document.getNumberOfLines();
				int startOffset = document.getLineOffset(lineStart > 1 ? lineStart - 1 : 0);
				int endOffset = document.getLineOffset(lineEnd < nbrOfLines ? lineEnd : lineEnd - 1);
				int foldLength = endOffset - startOffset;
				if ((lineEnd - lineStart) > 0) {
					list.add(new Position(startOffset, foldLength));
				}
			} catch (BadLocationException e) {
				e.printStackTrace();
			}
		}
		for (int i = 0; i < getNumChildNoTransform(); i++) {
			list.addAll(getChildNoTransform(i).foldingPositions(document));
		}
		return list;
	}
	
	// TODO: Don't traverse entire tree, prune at nodes where we know folds can't occur. Can remove refine then as well.
    
}