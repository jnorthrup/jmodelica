/*
Copyright (C) 2009 Modelon AB

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import java.io.PrintStream;
import java.io.ByteArrayOutputStream;
import java.util.ArrayList;

aspect CCodeGen {
	
	class CPrettyPrinter extends Printer {
		
		public CPrettyPrinter() {
			super("    ");
		}
		
 		public void toString(ASTNode node, PrintStream str, String indent, Object o) { 
 			node.prettyPrint_C(this, str, indent, o); 
 		}
  		
  		public String op(FBinExp e) { return e.op_C(); }
	}
	
	static CPrettyPrinter ASTNode.printer_C = new CPrettyPrinter();
	
	public String ASTNode.prettyPrint_C(String indent) {
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		PrintStream str = new PrintStream(os);
		prettyPrint_C(str,indent,null);
		return os.toString();
	}

	public String ASTNode.prettyPrint_C(String indent,Object o) {
		ByteArrayOutputStream os = new ByteArrayOutputStream();	
		PrintStream str = new PrintStream(os);
		prettyPrint_C(str,indent,o);
		return os.toString();
	}

	public void ASTNode.prettyPrint_C(PrintStream str,String indent) {
 		prettyPrint_C(printer_C, str, indent, null);
	}

	public void ASTNode.prettyPrint_C(PrintStream str,String indent, Object o) {
 		prettyPrint_C(printer_C, str, indent, o);
	}
	
	public void ASTNode.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		prettyPrint(p,str,indent,o);
		/*for(int i = 0; i < getNumChild(); i++)
   			p.toString(getChild(i),str,indent,o); // distpatch through Printer
	    */
	}
	
	public void FDotPowExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		str.print("pow(");
		p.toString(getLeft(),str,indent,o); 
		str.print(",");
		p.toString(getRight(),str,indent,o);
		str.print(")");
	}
	
	public void FMinMaxExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		str.print("jmi_" + builtInName() + "(");
		p.toString(getX(), str, indent, o); 
		str.print(", ");
		p.toString(getY(), str, indent, o);
		str.print(")");
	}
		
	public void FDerExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		str.print(myFV().name_C());
	}
	
	public void FIdUseExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		if (isArray() && keepAsArray())
			str.print(getFIdUse().name_C());
		else
			p.toString(getFIdUse(), str, indent, o);
	}
	
	syn String FIdUse.name_C() = myFV().name_C();
	
	inh boolean FIdUse.isAssignUse();
	eq InstNode.getChild().isAssignUse()          = false;
	eq FClass.getChild().isAssignUse()            = false;
	eq FIdUseExp.getChild().isAssignUse()         = false;
	eq FFunctionCallLeft.getChild().isAssignUse() = true;
	eq FAssignStmt.getChild().isAssignUse()       = true;
	
	public void FIdUse.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		myFV().genUse_C(p, str, o, getFQName().getLastFArraySubscripts(), isAssignUse());
	}
	
	public void AbstractFVariable.genUse_C(Printer p, PrintStream str, Object o, FArraySubscripts fas, boolean assign) {
		str.print(name_C());
	}
	
	public void FFunctionArray.genUse_C(Printer p, PrintStream str, Object o, FArraySubscripts fas, boolean assign) {
		str.print("jmi_array_");
		str.print(assign ? "ref_" : "val_");
		str.print(ndims());
		str.print("(");
		str.print(name_C());
		str.print(", ");
		if (fas != null)
			p.toString(fas.getFSubscripts(), str, "", o);
		str.print(")");
	}
	
	public void FFunctionCall.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		boolean exp = functionCallIsExp();
		if (!exp)
			str.print(indent);
		str.print(getName().funcNameUnderscore(exp ? SUFFIX_EXP : SUFFIX_DEF));
		str.print("(");
		String sep = "";
		for (FExp arg : getArgs()) {
			str.print(sep);
			arg.genArgument_C(p, str, indent, o);
			sep = ", ";
		}
		if (!exp) {
			int tot = myOutputs().size();
			int lefts = myLefts().size();
			for (int i = 0; i < tot; i++) {
				str.print(sep);
				if (i < lefts)
					myLefts().get(i).genArgument_C(str);
				else
					str.print("NULL");
				sep = ", ";
			}
		}
		str.print(")");
	}
	
	public String FunctionReturnDefinition.getDeclaredType_C() {
		if (outputs.size() > 0) 
			return outputs.get(0).type_C();
		else
			return "void";
	}
	
	public void FunctionReturnDefinition.printReturnForExp_C(PrintStream str, String indent) {
		str.print(indent);
		str.print("return");
		if (outputs.size() > 0) { 
			str.print(" ");
			str.print(outputs.get(0).name_C());
		}
		str.print(";\n");
	}
	
	public void FunctionReturnDefinition.printDeclarationForExp_C(Printer p, PrintStream str, String indent, Object o) {
		if (outputs.size() > 0) 
			p.toString(outputs.get(0), str, indent, o);
	}
	
	public void FunctionReturnDefinition.printReturnWrite_C(PrintStream str, String indent) {
		for (FFunctionVariable v : outputs) 
			v.printReturnWrite_C(str, indent);
	}
	
	public static final String FFunctionDecl.SUFFIX_DEF = "def";
	public static final String FFunctionDecl.SUFFIX_EXP = "exp";
	public static final String FFunctionCall.SUFFIX_DEF = FFunctionDecl.SUFFIX_DEF;
	public static final String FFunctionCall.SUFFIX_EXP = FFunctionDecl.SUFFIX_EXP;
	
	private void FFunctionDecl.prettyPrintHead_C(Printer p, PrintStream str, String indent, Object o, 
			String type, String suffix, boolean returnArgs) {
		str.print(indent);
		str.print(type);
		str.print(" ");
		str.print(getFQName().funcNameUnderscore(suffix));
		str.print("(");
		String sep = "";
		for (FFunctionVariable v : myInputs()) {
			str.print(sep);
			v.printArgument_C(str);
			sep = ", ";
		}
		if (returnArgs) {
			for (FFunctionVariable v : myOutputs()) {
				str.print(sep);
				v.printReturnArgument_C(str);
				sep = ", ";
			}
		}
		str.print(")");
	}
	
	private void FFunctionDecl.prettyPrintWrappedCall_C(PrintStream str, String indent) {
		str.print(indent);
		str.print(getFQName().funcNameUnderscore(SUFFIX_DEF));
		str.print("(");
		String sep = "";
		for (FFunctionVariable v : myInputs()) {
			str.print(sep);
			str.print(v.name_C());
			sep = ", ";
		}
		if (myOutputs().size() > 0) {
			str.print(sep);
			str.print("&");
			str.print(myOutputs().get(0).name_C());
			for (int i = myOutputs().size() - 1; i > 0; i--)
				str.print(", NULL");
		}
		str.print(");\n");
	}
	
	public void FFunctionDecl.genHeader_C(PrintStream str, String indent) {
		prettyPrintHead_C(printer_C, str, indent, null, "void", SUFFIX_DEF, true);
		str.print(";\n");
    	if (generateExpFunction()) {
    		String type = returnDefinition().getDeclaredType_C();
			prettyPrintHead_C(printer_C, str, indent, null, type, SUFFIX_EXP, false);
			str.print(";\n");
    	}
	}
	
	public void FFunctionDecl.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		String next = p.indent(indent);
		// Print definition
		prettyPrintHead_C(p, str, indent, o, "void", SUFFIX_DEF, true);
		str.print(" {\n");
		for (FFunctionVariable ffv : myNonInputs())
			p.toString(ffv, str, next, o);
		for (FFunctionVariable ffv : myOutputs())
			ffv.printNullOutputReplacement_C(str, next);
    	p.toString(getFAlgorithmBlockOpt(), str, next, o);
    	str.print(indent);
    	str.print("}\n\n");
    	
    	// Print wrapper for expressions
    	if (generateExpFunction()) {
	    	String type = returnDefinition().getDeclaredType_C();
			prettyPrintHead_C(p, str, indent, o, type, SUFFIX_EXP, false);
			str.print(" {\n");
			returnDefinition().printDeclarationForExp_C(p, str, next, o);
			prettyPrintWrappedCall_C(str, next);
			returnDefinition().printReturnForExp_C(str, next);
	    	str.print(indent);
	    	str.print("}\n\n");
    	}
	}
	
	/**
	 * \brief Check if we need to generate a wrapper for expressions for this function.
	 */
	syn boolean FFunctionDecl.generateExpFunction() = hasOutputs() && !isArray();
	
	syn String AbstractFVariable.name_C() = null;
	eq FVariable.name_C()         = isForIndex() ? 
			                        nameUnderscore() + "_i" :
			                        '_' + nameUnderscore() + '_' + variableIndex();
	eq FFunctionVariable.name_C() = nameUnderscore() + "_v";
	eq FFunctionArray.name_C()    = nameUnderscore() + "_a";
	
	syn String FFunctionVariable.nameReturn_C() = getFQName().nameUnderscore() + "_r";
	syn String FFunctionArray.nameReturn_C()    = name_C();
	// TODO: Delegate to Type to support other types than Real
	syn String FFunctionVariable.type_C() = "jmi_ad_var_t";
	eq FFunctionArray.type_C()            = "jmi_array_t*";
	syn String FFunctionVariable.typeReturn_C() = type_C() + "*";
	eq FFunctionArray.typeReturn_C()            = type_C();
	
	public void FFunctionVariable.printReturnArgument_C(PrintStream str) {
		str.print(typeReturn_C());
		str.print(" ");
		str.print(nameReturn_C());
	}
	
	public void FFunctionVariable.printReturnWrite_C(PrintStream str, String indent) {
		str.print(indent);
		str.print("if (");
		str.print(nameReturn_C());
		str.print(" != NULL) *");
		str.print(nameReturn_C());
		str.print(" = ");
		str.print(name_C());
		str.print(";\n");
	}
	
	public void FFunctionArray.printReturnWrite_C(PrintStream str, String indent) {}
	
	public void FFunctionVariable.printArgument_C(PrintStream str) {
		str.print(type_C());
		str.print(" ");
		str.print(name_C());
	}
	
	public void FFunctionVariable.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		str.print(indent);
		str.print(type_C());
		str.print(" ");
		str.print(name_C());
		str.print(";\n");
	}
	
	public void FFunctionArray.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		if (!isOutput())
			size().printArrayDecl_C(str, indent, name_C());
	}
	
	public void FFunctionVariable.printNullOutputReplacement_C(PrintStream str, String indent) {}
	
	public void FFunctionArray.printNullOutputReplacement_C(PrintStream str, String indent) {
		String name = name_C() + 'r';
		size().printArrayDecl_C(str, indent, name);
		str.print(indent);
		str.print("if (");
		str.print(name_C());
		str.print(" == NULL) ");
		str.print(name_C());
		str.print(" = ");
		str.print(name);
		str.print(";\n");
	}
	
	public void Size.printArrayDecl_C(PrintStream str, String indent, String name) {
		str.print(indent);
		str.print("JMI_ARRAY_DECL(");
		str.print(name);
		str.print(", ");
		str.print(numElements());
		str.print(", ");
		str.print(toUnclosedString());
		str.print(");\n");
	}
	
	public void FAlgorithmBlock.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		p.toString(getFStatements(), str, indent, o);
	}
	
	public void FFunctionCallStmt.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		genTempArrays_C(printer_C, str, indent, null);
		str.print(indent);
		p.toString(getCall(), str, "", o);
		str.print(";\n");
	}

	public void FAssignStmt.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		genTempArrays_C(printer_C, str, indent, null);
		str.print(indent);
		p.toString(getLeft(), str, indent, o);
		str.print(" = ");
		p.toString(getRight(), str, indent, o);
		str.print(";\n");
	}
	
	public void FReturnStmt.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		returnDefinition().printReturnWrite_C(str, indent);
		str.print(indent);
		str.print("return;\n");
	}
	
	public void FIfWhenStmt.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		for (FIfWhenClause clause : getFIfWhenClauses())
			clause.getTest().genTempArrays_C(printer_C, str, indent, null);
		str.print(indent);
		getFIfWhenClauses().prettyPrintWithSep(p, str, indent, o, indent + "} else ");
		prettyPrintElse_C(p, str, indent, o);
		str.print(indent);
		str.print("}\n");
	}
	
	protected void FIfWhenStmt.prettyPrintElse_C(Printer p, PrintStream str, String indent, Object o) {}
	
	protected void FIfStmt.prettyPrintElse_C(Printer p, PrintStream str, String indent, Object o) {
		if (getNumElseStmt() > 0) {
			str.print(indent);
			str.print("} else {\n");
			p.toString(getElseStmts(), str, p.indent(indent), o);
		}
	}
	
	public void FIfWhenClause.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		str.print("if (");
		p.toString(getTest(), str, indent, o);
		str.print(") {\n");
		p.toString(getFStatements(), str, p.indent(indent), o);
	}
	
	public void FWhileStmt.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		getTest().genTempArrays_C(printer_C, str, indent, null);
		str.print(indent);
		str.print("while (");
		p.toString(getTest(), str, "", o);
		str.print(") {\n");
		p.toString(getWhileStmts(), str, p.indent(indent), o);
		str.print("}\n");		
	}
	
	public void FForStmt.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		getIndex().genTempArrays_C(printer_C, str, indent, null);
		getIndex().printForArrayDecl_C(p, str, indent, o);
		str.print(indent);
		str.print("for (");
		p.toString(getIndex(), str, indent, o);
		str.print(") {\n");
		getIndex().printForArrayNext_C(p, str, p.indent(indent), o);
		p.toString(getForStmts(), str, p.indent(indent), o);
		str.print(indent);		
		str.print("}\n");		
	}
	
	public void FForIndex.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		if (hasFExp()) 
			getFExp().printForIndex_C(p, str, indent, o, getFVariable().name_C());
	}
	
	public void FForIndex.printForArrayDecl_C(Printer p, PrintStream str, String indent, Object o) {
		if (needsForArray()) {
			str.print(indent);
			str.print("jmi_ad_var_t ");
			str.print(getFVariable().name_C());
			str.print("a[] = { ");
			getFExp().getArray().getFExps().prettyPrintWithSep(p, str, indent, o, ", ");
			str.print(" };\n");
		}
	}
	
	public void FForIndex.printForArrayNext_C(Printer p, PrintStream str, String indent, Object o) {
		if (needsForArray()) {
			String name = getFVariable().name_C();
			str.print(indent);
			str.print("jmi_ad_var_t ");
			str.print(name);
			str.print(" = ");
			str.print(name);
			str.print("a[");
			str.print(name);
			str.print("i];\n");
		}
	}
	
	syn boolean FForIndex.needsForArray() = hasFExp() && getFExp().needsForArray();
	syn boolean FExp.needsForArray()      = true;
	eq FRangeExp.needsForArray()          = false;
	
	public void FRangeExp.printForIndex_C(Printer p, PrintStream str, String indent, Object o, String name) {
		boolean hasStep = getNumFExp() > 2;
		str.print("jmi_ad_var_t ");
		str.print(name);
		str.print(" = ");
		p.toString(getFExp(0), str, indent, o);
		str.print("; ");
		str.print(name);
		str.print(" <= ");
		p.toString(getFExp(hasStep ? 2 : 1), str, indent, o);
		str.print("; ");
		str.print(name);
		str.print(" += ");
		if (hasStep) 
			p.toString(getFExp(1), str, indent, o);
		else
			str.print("1");
	}
	
	public void FExp.printForIndex_C(Printer p, PrintStream str, String indent, Object o, String name) {
		str.print("int ");
		str.print(name);
		str.print("i = 0; ");
		str.print(name);
		str.print("i < ");
		str.print(size().numElements());
		str.print("; ");
		str.print(name);
		str.print("i++");
	}
	
	public void FSizeExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		getFExp().prettyPrintSize_C(p, str, indent, o, dimension());
	}
	
	public void FExp.prettyPrintSize_C(Printer p, PrintStream str, String indent, Object o, int dim) {}
	
	public void FIdUseExp.prettyPrintSize_C(Printer p, PrintStream str, String indent, Object o, int dim) {
		str.print("jmi_array_size(");
		str.print(getFIdUse().name_C());
		str.print(", ");
		str.print(dim);
		str.print(")");
	}
	
	syn String FBinExp.op_C() = op();
	eq FDotAddExp.op_C() = " + ";
	eq FDotSubExp.op_C() = " - ";
	eq FDotMulExp.op_C() = " * ";
	eq FDotDivExp.op_C() = " / ";

	public void FDotDivExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		str.print("jmi_divide(");
		p.toString(getLeft(),str,indent,o);
		str.print(","); 
		p.toString(getRight(),str,indent,o);
		str.print(","); 
		str.print("\"Divide by zero: "+prettyPrint("")+"\")");
	}
	
	syn String FBoolBinExp.macroC() = "ERROR_IN_CONDITIONAL_EXPRESSION";
	eq FEqExp.macroC() = "COND_EXP_EQ";
	eq FLtExp.macroC() = "COND_EXP_LT";
	eq FLeqExp.macroC() = "COND_EXP_LE";
	eq FGtExp.macroC() = "COND_EXP_GT";
	eq FGeqExp.macroC() = "COND_EXP_GE";
	
	public void FIfExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		
		int end_parenthesis = 1;
		
		str.print("(COND_EXP_EQ(");
		p.toString(getIfExp(),str,indent,o);
		str.print(",AD_WRAP_LITERAL(1),");
		p.toString(getThenExp(),str,indent,o);
		str.print(",");
		for (FElseIfExp el_if : getFElseIfExps()) {
			end_parenthesis++;

			str.print("(COND_EXP_EQ(");
			p.toString(el_if.getIfExp(),str,indent,o);
			str.print(",AD_WRAP_LITERAL(1),");
			p.toString(el_if.getThenExp(),str,indent,o);
			str.print(",");			
		}
		p.toString(getElseExp(),str,indent,o);
		for (int i=0;i<end_parenthesis*2;i++) {
			str.print(")");
		}
	}
	
	public void FAbsExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		str.print("jmi_abs(");
		p.toString(getFExp(), str, indent, o);
		str.print(")");
	}

	public void FNoEventExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		p.toString(getFExp(),str,indent,o);
	}
	
	public void FBoolBinExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		
		if (inNoEventExp()) {
			str.append(macroC()+"(");
			p.toString(getLeft(),str,indent,o);
			str.append(",");
			p.toString(getRight(),str,indent,o);
			str.append(",AD_WRAP_LITERAL(1),AD_WRAP_LITERAL(0))");
		} else {
			if (inEquationSection()) {
				str.append("_sw");
				str.append("("+relExpInEquationsIndex()+")");
			} else {
				str.append("_sw_init");
				str.append("("+relExpInInitialEquationsIndex()+")");
			}
		}

	}
			 	
	public void FRealLitExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		if (inIfCondition()) str.print("AD_WRAP_LITERAL(");
		str.print(getUNSIGNED_NUMBER());
		if (inIfCondition()) str.print(")");
	}

	public void FIntegerLitExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		if (inIfCondition()) str.print("AD_WRAP_LITERAL(");
		str.print(getUNSIGNED_INTEGER());
		if (inIfCondition()) str.print(")");
	}
	
	public void FBooleanLitExpTrue.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		str.print("JMI_TRUE");
	}
	
	public void FBooleanLitExpFalse.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		str.print("JMI_FALSE");
	}
	
	public void ASTNode.genTempArrays_C(Printer p, PrintStream str, String indent, Object o) {
		for (ASTNode node : this)
			node.genTempArrays_C(p, str, indent, o);
	}
	
	public void FExp.genTempArrays_C(Printer p, PrintStream str, String indent, Object o) {
		if (isArray() && !size().isUnknown())
			getArray().genTempArrays_C(p, str, indent, o);
		else
			super.genTempArrays_C(p, str, indent, o);
	}
	
	public void FFunctionCall.genTempArrays_C(Printer p, PrintStream str, String indent, Object o) {
		getArgs().genTempArrays_C(p, str, indent, o);
		for (FExp arg : getArgs()) 
			if (arg.isArray() && !arg.keepAsArray()) 
				arg.genTempInputArray_C(p, str, indent, o);
	}
	
	public void FFunctionCallLeft.genTempArrays_C(Printer p, PrintStream str, String indent, Object o) {
		if (hasFExp())
			getFExp().genTempOutputArray_C(p, str, indent, o);
	}
	
	syn lazy String FExp.tempArrayName_C() {
		return "tmp_array_" + nextTempArrayNbr();
	}
	
	private int FClass.nextTempArrayNbr        = 1;
	private int FFunctionDecl.nextTempArrayNbr = 1;
	
	inh int FExp.nextTempArrayNbr();
	eq InstNode.getChild().nextTempArrayNbr()      = 0;
	eq FClass.getChild().nextTempArrayNbr()        = nextTempArrayNbr++;
	eq FFunctionDecl.getChild().nextTempArrayNbr() = nextTempArrayNbr++;
	
	public void FExp.genTempInputArray_C(Printer p, PrintStream str, String indent, Object o) {
		String name = tempArrayName_C();
		size().printArrayDecl_C(str, indent, name);
		String pre = indent + "jmi_array_ref_" + ndims() + "(" + name;
		Array arr = getArray();
		for (Index i : arr.indices()) {
			str.print(pre);
			i.printWithPrefix_C(str, ", ");
			str.print(") = ");
			p.toString(arr.get(i), str, indent, o);
			str.print(";\n");
		}
	}
	
	public void Index.printWithPrefix_C(PrintStream str, String prefix) {
		for (int i : index) {
			str.print(prefix);
			str.print(i);
		}
	}
	
	public void FExp.genTempOutputArray_C(Printer p, PrintStream str, String indent, Object o) {}
	
	public void FArray.genTempOutputArray_C(Printer p, PrintStream str, String indent, Object o) {
		size().printArrayDecl_C(str, indent, tempArrayName_C());
	}
	
	
	public void FAbstractEquation.genResidual_C(int i, String indent, PrintStream str) {}
	
	public void FEquation.genResidual_C(int i, String indent, PrintStream str) {
		genTempArrays_C(printer_C, str, indent, null);
		str.print(indent + "(*res)[" + i + "] = ");
		getRight().prettyPrint_C(str,"");
		str.print(" - (");
		getLeft().prettyPrint_C(str,"");
		str.print(");\n");
	}
	
	public void FFunctionCallEquation.genResidual_C(int i, String indent, PrintStream str) {
		genTempArrays_C(printer_C, str, indent, null);
		for (FFunctionCallLeft l : getLefts()) {
			l.setBaseIndex(i);
			l.genTempVar_C(indent, str);
		}
		getCall().prettyPrint_C(str, indent);
		str.print(";\n");
		for (FFunctionCallLeft l : getLefts())
			l.genWriteBack_C(indent, str);
	}
	
	private int FFunctionCallLeft.equationIndex = -1;
	public void FFunctionCallLeft.setBaseIndex(int i) {
		equationIndex = i + myIndex();
	}
	syn String FFunctionCallLeft.name_C() {
		if (equationIndex >= 0 && !getFExp().isArray()) {
			StringBuilder b = new StringBuilder();
			b.append("tmp_var_");
			b.append(equationIndex);
			return b.toString();
		} else if (equationIndex < 0 || getFExp().keepAsArray()) {
			return ((FIdUseExp) getFExp()).getFIdUse().name_C();
		} else {
			return getFExp().tempArrayName_C();
		}
	}
	// TODO: Delegate to output (FFunctionVariable) to support other types than Real
	syn String FFunctionCallLeft.type_C() = "jmi_ad_var_t";
	
	public void FFunctionCallLeft.genTempVar_C(String indent, PrintStream str) {
		if (hasFExp() && !getFExp().isArray()) {
			str.print(indent);
			str.print(type_C());
			str.print(" ");
			str.print(name_C());
			str.print(";\n");
		}
	}
	
	public void FFunctionCallLeft.genArgument_C(PrintStream str) {
		if (hasFExp()) {
			if (!getFExp().isArray())
				str.print("&");
			str.print(name_C());
		} else {
			str.print("NULL");
		}
	}
	
	public void FFunctionCallLeft.genWriteBack_C(String indent, PrintStream str) {
		if (hasFExp()) {
			if (getFExp().isArray()) {
				int ei = equationIndex;
				Array arr = getFExp().getArray();
				String name = name_C();
				for (Index i : arr.indices()) {
					String access = String.format("jmi_array_val_%d(%s, %s)", arr.ndims(), name, i.toUnclosedString());
					arr.get(i).genWriteBack_C(indent, str, access, ei++);
				}
			} else {
				getFExp().genWriteBack_C(indent, str, name_C(), equationIndex);
			}
		}
	}
	
	public void FExp.genWriteBack_C(String indent, PrintStream str, String name, int index) {
		str.print(indent);
		str.print("(*res)[");
		str.print(index);
		str.print("] = ");
		str.print(name);
		str.print(" - (");
		prettyPrint_C(str, "");
		str.print(");\n");
	}
	
	public void FExp.genArgument_C(Printer p, PrintStream str, String indent, Object o) {
		if (isArray() && !keepAsArray())
			str.print(tempArrayName_C());
		else
			p.toString(this, str, indent, o);
	}

	public void FBoolBinExp.genResidual_C(int i, String indent, PrintStream str) {
		str.print(indent + "(*res)[" + i + "] = ");
		getRight().prettyPrint_C(str,"");
		str.print(" - (");
		getLeft().prettyPrint_C(str,"");
		str.print(");\n");
	}	

	public void FGtExp.genResidual_C(int i, String indent, PrintStream str) {
		str.print(indent + "(*res)[" + i + "] = ");
		getLeft().prettyPrint_C(str,"");
		str.print(" - (");
		getRight().prettyPrint_C(str,"");
		str.print(");\n");
	}	

	public void FGeqExp.genResidual_C(int i, String indent, PrintStream str) {
		str.print(indent + "(*res)[" + i + "] = ");
		getLeft().prettyPrint_C(str,"");
		str.print(" - (");
		getRight().prettyPrint_C(str,"");
		str.print(");\n");
	}	
	
	public void FRealVariable.genStartAttributeResidual_C(int i, String indent, PrintStream str) {
		str.print(indent + "(*res)[" + i + "] = ");
		if (startAttributeSet()) {
			startAttributeExp().prettyPrint_C(str,"");
		} else {
			str.print("0.0");
		}
		str.print(" - ");
		str.print(name_C());
		str.print(";\n");
	}

	
	
}


