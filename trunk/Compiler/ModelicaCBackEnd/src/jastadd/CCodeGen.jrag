/*
Copyright (C) 2009 Modelon AB

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import java.io.PrintStream;
import java.io.ByteArrayOutputStream;
import java.util.ArrayList;

aspect CCodeGen {
	
	class CPrettyPrinter extends Printer {
 		public void toString(ASTNode node, PrintStream str, String indent, Object o) { 
 			node.prettyPrint_C(this, str, indent, o); 
 		}
  		
  		public String op(FBinExp e) { return e.op_C(); }
	}
	
	static CPrettyPrinter ASTNode.printer_C = new CPrettyPrinter();
	
	public String ASTNode.prettyPrint_C(String indent) {
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		PrintStream str = new PrintStream(os);
		prettyPrint_C(str,indent,null);
		return os.toString();
	}

	public String ASTNode.prettyPrint_C(String indent,Object o) {
		ByteArrayOutputStream os = new ByteArrayOutputStream();	
		PrintStream str = new PrintStream(os);
		prettyPrint_C(str,indent,o);
		return os.toString();
	}

	public void ASTNode.prettyPrint_C(PrintStream str,String indent) {
 		prettyPrint_C(printer_C, str, indent, null);
	}

	public void ASTNode.prettyPrint_C(PrintStream str,String indent, Object o) {
 		prettyPrint_C(printer_C, str, indent, o);
	}
	
	public void ASTNode.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		prettyPrint(p,str,indent,o);
		/*for(int i = 0; i < getNumChild(); i++)
   			p.toString(getChild(i),str,indent,o); // distpatch through Printer
	    */
	}
	
	public void FDotPowExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		str.print("pow(");
		p.toString(getLeft(),str,indent,o); 
		str.print(",");
		p.toString(getRight(),str,indent,o);
		str.print(")");
	}
	
	public void FMinMaxExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		str.print("jmi_" + builtInName() + "(");
		p.toString(getX(), str, indent, o); 
		str.print(", ");
		p.toString(getY(), str, indent, o);
		str.print(")");
	}
		
	public void FDerExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		str.print("_"+nameUnderscore()+"_");
	}
	
	public void FIdUseExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		p.toString(getFIdUse(), str, indent, o);
	}
	
	syn String FIdUse.name_C() = myFV().name_C();
	
	inh boolean FIdUse.isAssignUse();
	eq InstNode.getChild().isAssignUse()          = false;
	eq FClass.getChild().isAssignUse()            = false;
	eq FIdUseExp.getChild().isAssignUse()         = false;
	eq FFunctionCallLeft.getChild().isAssignUse() = true;
	eq FAssignStmt.getChild().isAssignUse()       = true;
	
	public void FIdUse.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		myFV().genUse_C(p, str, o, getFQName().getLastFArraySubscripts(), isAssignUse());
	}
	
	public void AbstractFVariable.genUse_C(Printer p, PrintStream str, Object o, FArraySubscripts fas, boolean assign) {
		str.print(name_C());
	}
	
	public void FFunctionArray.genUse_C(Printer p, PrintStream str, Object o, FArraySubscripts fas, boolean assign) {
		str.print("jmi_array_");
		str.print(assign ? "ref_" : "val_");
		str.print(ndims());
		str.print("(");
		str.print(name_C());
		str.print(", ");
		p.toString(fas.getFSubscripts(), str, "", o);
		str.print(")");
	}
	
	public void FFunctionCall.genOpenCall_C(Printer p, PrintStream str, String indent, Object o, String suffix) {
		str.print(indent);
		str.print(getName().funcNameUnderscore(suffix));
		str.print("(");
		getArgs().prettyPrintWithSep(p, str, "", o, ", ");		
	}
	
	public void FFunctionCall.genDefinitionCallEnd_C(PrintStream str, int nDoneOutputs) {
		String arg = (nDoneOutputs == 0 && getNumArg() == 0) ? "NULL" : ", NULL";
		for (int i = myFFunctionDecl().myOutputs().size(); i > nDoneOutputs; i--) {
			str.print(arg);
			arg = ", NULL";
		}
	}
	
	public void FFunctionCall.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		boolean exp = functionCallIsExp();
		if (!exp)
			str.print(indent);
		str.print(getName().funcNameUnderscore(exp ? suffixExpression() : suffixDefinition()));
		str.print("(");
		getArgs().prettyPrintWithSep(p, str, "", o, ", ");		
		if (!exp) {
			String sep = (getNumArg() == 0) ? "" : ", ";
			int tot = myFFunctionDecl().myOutputs().size();
			int lefts = myLefts().size();
			for (int i = 0; i < tot; i++) {
				str.print(sep);
				if (i < lefts)
					myLefts().get(i).genArgument_C(str);
				else
					str.print("NULL");
				sep = ", ";
			}
		}
		str.print(")");
	}
	
	public String FunctionReturnDefinition.getDeclaredType_C() {
		if (outputs.size() > 0) 
			return outputs.get(0).type_C();
		else
			return "void";
	}
	
	public void FunctionReturnDefinition.printReturnForExp_C(PrintStream str, String indent) {
		str.print(indent);
		str.print("return");
		if (outputs.size() > 0) { 
			str.print(" ");
			str.print(outputs.get(0).name_C());
		}
		str.print(";\n");
	}
	
	public void FunctionReturnDefinition.printDeclarationForExp_C(Printer p, PrintStream str, String indent, Object o) {
		if (outputs.size() > 0) { 
			str.print(indent);
			p.toString(outputs.get(0), str, "", null);
			str.print(";\n");
		}
	}
	
	public void FunctionReturnDefinition.printReturnWrite_C(PrintStream str, String indent) {
		for (FFunctionVariable v : outputs) 
			v.printReturnWrite_C(str, indent);
	}
	
	private void FFunctionDecl.prettyPrintHead_C(Printer p, PrintStream str, String indent, Object o, 
			String type, String suffix, boolean returnArgs) {
		str.print(indent);
		str.print(type);
		str.print(" ");
		str.print(getFQName().funcNameUnderscore(suffix));
		str.print("(");
		prettyPrintWithSep(myInputs(), p, str, "", o, ", ");
		String sep = myInputs().size() > 0 ? ", " : "";
		if (returnArgs) {
			for (FFunctionVariable v : myOutputs()) {
				str.print(sep);
				v.printReturnArgument_C(str);
				sep = ", ";
			}
		}
		str.print(")");
	}
	
	private void FFunctionDecl.prettyPrintWrappedCall_C(PrintStream str, String indent) {
		str.print(indent);
		str.print(getFQName().funcNameUnderscore(suffixDefinition()));
		str.print("(");
		String sep = "";
		for (FFunctionVariable v : myInputs()) {
			str.print(sep);
			str.print(v.name_C());
			sep = ", ";
		}
		if (myOutputs().size() > 0) {
			str.print(sep);
			str.print("&");
			str.print(myOutputs().get(0).name_C());
			for (int i = myOutputs().size() - 1; i > 0; i--)
				str.print(", NULL");
		}
		str.print(");\n");
	}
	
	public void FFunctionDecl.genHeader_C(PrintStream str, String indent) {
		prettyPrintHead_C(printer_C, str, indent, null, "void", suffixDefinition(), true);
		str.print(";\n");
    	String type = returnDefinition().getDeclaredType_C();
		prettyPrintHead_C(printer_C, str, indent, null, type, suffixExpression(), false);
		str.print(";\n");
	}
	
	public void FFunctionDecl.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		String next = indent + "   ";
		// Print definition
		prettyPrintHead_C(p, str, indent, o, "void", suffixDefinition(), true);
		str.print(" {\n");
		prettyPrintWithIndent(myNonInputs(), p, str, next, o, ";");
    	p.toString(getFAlgorithmBlockOpt(), str, next, o);
    	str.print(indent);
    	str.print("}\n\n");
    	
    	// Print wrapper for expressions
    	String type = returnDefinition().getDeclaredType_C();
		prettyPrintHead_C(p, str, indent, o, type, suffixExpression(), false);
		str.print(" {\n");
		returnDefinition().printDeclarationForExp_C(p, str, next, o);
		prettyPrintWrappedCall_C(str, next);
		returnDefinition().printReturnForExp_C(str, next);
    	str.print(indent);
    	str.print("}\n\n");
	}
	
	syn String AbstractFVariable.name_C() = null;
	eq FVariable.name_C()         = "_" + getFQName().nameUnderscore() + "_";
	eq FFunctionVariable.name_C() = getFQName().nameUnderscore() + "_v";
	eq FFunctionArray.name_C()    = getFQName().nameUnderscore() + "_a";
	
	syn String FFunctionVariable.nameReturn_C() = getFQName().nameUnderscore() + "_r";
	syn String FFunctionArray.nameReturn_C()    = name_C();
	// TODO: Delegate to Type to support other types than Real
	syn String FFunctionVariable.type_C() = "jmi_ad_var_t";
	syn String FFunctionArray.type_C()    = "jmi_array_t";
	
	public void FFunctionVariable.printReturnArgument_C(PrintStream str) {
		str.print(type_C());
		str.print("* ");
		str.print(nameReturn_C());
	}
	
	public void FFunctionVariable.printReturnWrite_C(PrintStream str, String indent) {
		str.print("if (");
		str.print(nameReturn_C());
		str.print(" != NULL) *");
		str.print(nameReturn_C());
		str.print(" = ");
		str.print(name_C());
		str.print(";\n");
		str.print(indent);
	}
	
	public void FFunctionArray.printReturnWrite_C(PrintStream str, String indent) {}
	
	public void FFunctionVariable.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		str.print(type_C());
		str.print(" ");
		str.print(name_C());
		if (hasBindingExp() && !isInput()) {
			str.print(" = ");
			p.toString(getBindingExp(), str, "", o);
		}
	}
	
	public void FFunctionArray.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		str.print("JMI_ARRAY_DECL(");
		str.print(name_C());
		str.print(", ");
		str.print(size().numElements());
		str.print(", { ");
		str.print(size().toUnclosedString());
		str.print(" })");
	}
	
	public void FAlgorithmBlock.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		getFStatements().prettyPrintWithIndent(p, str, indent, o);
	}
	
	public void FFunctionCallStmt.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		p.toString(getCall(), str, "", o);
		str.print(";");
	}

	public void FAssignStmt.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		p.toString(getLeft(), str, indent, o);
		str.print(" = ");
		p.toString(getRight(), str, indent, o);
		str.print(";");
	}
	
	public void FReturnStmt.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		returnDefinition().printReturnWrite_C(str, indent);
		str.print("return;");
	}
	
	public void FIfWhenStmt.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		getFIfWhenClauses().prettyPrintWithSep(p, str, indent, o, indent + "} else ");
		prettyPrintElse_C(p, str, indent, o);
		str.print(indent);
		str.print("}");
	}
	
	protected void FIfWhenStmt.prettyPrintElse_C(Printer p, PrintStream str, String indent, Object o) {}
	
	protected void FIfStmt.prettyPrintElse_C(Printer p, PrintStream str, String indent, Object o) {
		if (getNumElseStmt() > 0) {
			str.print(indent);
			str.print("} else {\n");
			getElseStmts().prettyPrintWithIndent(p, str, indent + "    ", o);
		}
	}
	
	public void FIfWhenClause.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		str.print("if (");
		p.toString(getTest(), str, indent, o);
		str.print(") {\n");
		getFStatements().prettyPrintWithIndent(p, str, indent + "    ", o);
	}
	
	public void FForStmt.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		str.print("for (");
		p.toString(getIndex(), str, indent, o);
		str.print(") {\n");
		getForStmts().prettyPrintWithIndent(p, str, indent + "    ", o);
		str.print("}");		
	}
	
	// Very limited test implementation
	public void FForIndex.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		String type = "jmi_ad_var_t";
		String name = getFVariable().nameUnderscore();
		
		if (hasFExp()) {
			if (getFExp() instanceof FRangeExp) {
				FRangeExp re = (FRangeExp) getFExp();
				boolean hasStep = re.getNumFExp() > 2;
				str.print(type);
				str.print(" ");
				str.print(name);
				str.print(" = ");
				p.toString(re.getFExp(0), str, indent, o);
				str.print("; ");
				str.print(name);
				str.print(" <= ");
				p.toString(re.getFExp(hasStep ? 2 : 1), str, indent, o);
				str.print("; ");
				str.print(name);
				str.print(" += ");
				if (hasStep) 
					p.toString(re.getFExp(1), str, indent, o);
				else
					str.print("1");
			}
		}
	}
	
	public void FWhileStmt.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		str.print("while (");
		p.toString(getTest(), str, "", o);
		str.print(") {\n");
		getWhileStmts().prettyPrintWithIndent(p, str, indent + "    ", o);
		str.print("}");		
	}
	
	syn String FBinExp.op_C() = op();
	eq FDotAddExp.op_C() = " + ";
	eq FDotSubExp.op_C() = " - ";
	eq FDotMulExp.op_C() = " * ";
	eq FDotDivExp.op_C() = " / ";

	public void FDotDivExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		str.print("jmi_divide(");
		p.toString(getLeft(),str,indent,o);
		str.print(","); 
		p.toString(getRight(),str,indent,o);
		str.print(","); 
		str.print("\"Divide by zero: "+prettyPrint("")+"\")");
	}
	
	syn String FBoolBinExp.macroC() = "ERROR_IN_CONDITIONAL_EXPRESSION";
	eq FEqExp.macroC() = "COND_EXP_EQ";
	eq FLtExp.macroC() = "COND_EXP_LT";
	eq FLeqExp.macroC() = "COND_EXP_LE";
	eq FGtExp.macroC() = "COND_EXP_GT";
	eq FGeqExp.macroC() = "COND_EXP_GE";
	
	public void FIfExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		
		int end_parenthesis = 1;
		
		str.print("(COND_EXP_EQ(");
		p.toString(getIfExp(),str,indent,o);
		str.print(",AD_WRAP_LITERAL(1),");
		p.toString(getThenExp(),str,indent,o);
		str.print(",");
		for (FElseIfExp el_if : getFElseIfExps()) {
			end_parenthesis++;

			str.print("(COND_EXP_EQ(");
			p.toString(el_if.getIfExp(),str,indent,o);
			str.print(",AD_WRAP_LITERAL(1),");
			p.toString(el_if.getThenExp(),str,indent,o);
			str.print(",");			
		}
		p.toString(getElseExp(),str,indent,o);
		for (int i=0;i<end_parenthesis*2;i++) {
			str.print(")");
		}
	}	

	public void FNoEventExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		p.toString(getFExp(),str,indent,o);
	}
	
	public void FBoolBinExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		
		if (inNoEventExp()) {
			str.append(macroC()+"(");
			p.toString(getLeft(),str,indent,o);
			str.append(",");
			p.toString(getRight(),str,indent,o);
			str.append(",AD_WRAP_LITERAL(1),AD_WRAP_LITERAL(0))");
		} else {
			str.append("_sw");
			str.append("("+relExpInEquationsIndex()+")");
		}

	}
			 	
	public void FRealLitExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		if (inIfCondition()) str.print("AD_WRAP_LITERAL(");
		str.print(getUNSIGNED_NUMBER());
		if (inIfCondition()) str.print(")");
	}

	public void FIntegerLitExp.prettyPrint_C(Printer p, PrintStream str, String indent, Object o) {
		if (inIfCondition()) str.print("AD_WRAP_LITERAL(");
		str.print(getUNSIGNED_INTEGER());
		if (inIfCondition()) str.print(")");
	}
	
	public void FAbstractEquation.genResidual_C(int i, String indent, PrintStream str) {}
	
	public void FEquation.genResidual_C(int i, String indent, PrintStream str) {
		str.print(indent + "(*res)[" + i + "] = ");
		getRight().prettyPrint_C(str,"");
		str.print(" - (");
		getLeft().prettyPrint_C(str,"");
		str.print(");\n");
	}
	
	public void FFunctionCallEquation.genResidual_C(int i, String indent, PrintStream str) {
		for (FFunctionCallLeft l : getLefts()) {
			l.setBaseIndex(i);
			l.genTempVar_C(indent, str);
		}
		getCall().prettyPrint_C(str, indent);
		str.print(";\n");
		for (FFunctionCallLeft l : getLefts())
			l.genWriteBack_C(indent, str);
	}
	
	private int FFunctionCallLeft.equationIndex = -1;
	public void FFunctionCallLeft.setBaseIndex(int i) {
		equationIndex = i + myIndex();
	}
	syn String FFunctionCallLeft.name_C() {
		if (equationIndex >=  0) {
			StringBuilder b = new StringBuilder();
			b.append("tmp_var_");
			b.append(equationIndex);
			return b.toString();
		} else {
			return getFIdUse().name_C();
		}
	}
	// TODO: Delegate to output (FFunctionVariable) to support other types than Real
	syn String FFunctionCallLeft.type_C() = "jmi_ad_var_t";
	
	public void FFunctionCallLeft.genTempVar_C(String indent, PrintStream str) {
		if (hasFIdUse()) {
			str.print(indent);
			str.print(type_C());
			str.print(" ");
			str.print(name_C());
			str.print(";\n");
		}
	}
	
	public void FFunctionCallLeft.genArgument_C(PrintStream str) {
		if (hasFIdUse()) {
			str.print("&");
			str.print(name_C());
		} else {
			str.print("NULL");
		}
	}
	
	public void FFunctionCallLeft.genWriteBack_C(String indent, PrintStream str) {
		if (hasFIdUse()) {
			str.print(indent);
			str.print("(*res)[");
			str.print(equationIndex);
			str.print("] = ");
			str.print(name_C());
			str.print(" - (");
			getFIdUse().prettyPrint_C(str, "");
			str.print(");\n");
		}
	}

	public void FBoolBinExp.genResidual_C(int i, String indent, PrintStream str) {
		str.print(indent + "(*res)[" + i + "] = ");
		getRight().prettyPrint_C(str,"");
		str.print(" - (");
		getLeft().prettyPrint_C(str,"");
		str.print(");\n");
	}	

	public void FGtExp.genResidual_C(int i, String indent, PrintStream str) {
		str.print(indent + "(*res)[" + i + "] = ");
		getLeft().prettyPrint_C(str,"");
		str.print(" - (");
		getRight().prettyPrint_C(str,"");
		str.print(");\n");
	}	

	public void FGeqExp.genResidual_C(int i, String indent, PrintStream str) {
		str.print(indent + "(*res)[" + i + "] = ");
		getLeft().prettyPrint_C(str,"");
		str.print(" - (");
		getRight().prettyPrint_C(str,"");
		str.print(");\n");
	}	
	
	public void FRealVariable.genStartAttributeResidual_C(int i, String indent, PrintStream str) {
		str.print(indent + "(*res)[" + i + "] = ");
		if (startAttributeSet()) {
			startAttributeExp().prettyPrint_C(str,"");
		} else {
			str.print("0.0");
		}
		str.print(" - ");
		str.print("_"+nameUnderscore()+"_");
		str.print(";\n");
	}

	
	
}


