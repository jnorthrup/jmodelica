/*
Copyright (C) 2016 Modelon AB

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect StepPrinter {
    
    public abstract class CodePrinter extends Printer {
        public abstract class StepPrinter {
            public abstract void print(ASTNode n, CodeStream str, String indent);
            public abstract void printIO(FExp n, CodeStream str, String indent);
            public void print(CodeStream str, String s) {
                
            }
        }
        
        public StepPrinter DeclStep  = new DeclCodePrinter();
        public StepPrinter PreStep   = new PreCodePrinter();
        public StepPrinter ExecStep  = new ExecuteCodePrinter();
        public StepPrinter PostStep  = new PostCodePrinter();
        
        class DeclCodePrinter extends StepPrinter {
            @Override
            public void print(ASTNode n, CodeStream str, String indent) {
                CodePrinter.this.printVarDecls(n, str, indent);
            }
            @Override
            public void printIO(FExp n, CodeStream str, String indent) {
                CodePrinter.this.printIODecl(n, str, indent);
            }
        }
        
        class PreCodePrinter extends StepPrinter {
            @Override
            public void print(ASTNode n, CodeStream str, String indent) {
                CodePrinter.this.printPreSteps(n, str, indent);
            }
            @Override
            public void printIO(FExp n, CodeStream str, String indent) {
                CodePrinter.this.printIOPre(n, str, indent);
            }
        }
        
        class ExecuteCodePrinter extends StepPrinter {
            @Override
            public void print(ASTNode n, CodeStream str, String indent) {
                CodePrinter.this.print(n, str, indent);
            }
            @Override
            public void printIO(FExp n, CodeStream str, String indent) {
                CodePrinter.this.printIOExec(n, str, indent);
            }
            
            @Override
            public void print(CodeStream str, String s) {
                str.print(s);
            }
        }
        
        class PostCodePrinter extends StepPrinter {
            @Override
            public void print(ASTNode n, CodeStream str, String indent) {
                CodePrinter.this.printPostSteps(n, str, indent);
            }
            @Override
            public void printIO(FExp n, CodeStream str, String indent) {
                
            }
        }
    }
    
    public class CodePrinter {
        public abstract void printIODecl(FExp n, CodeStream str, String indent);
        public abstract void printIOPre(FExp n, CodeStream str, String indent);
        public abstract void printIOExec(FExp n, CodeStream str, String indent);
    }
    
    public void FExp.genTempArg(CodePrinter.StepPrinter p, CodeStream str, String indent) {
        p.printIO(this, str, indent);
    }
}