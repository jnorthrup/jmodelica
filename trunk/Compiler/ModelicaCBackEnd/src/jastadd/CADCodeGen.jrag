/*
Copyright (C) 2009 Modelon AB

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import java.io.PrintStream;
import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.HashSet;

aspect CADCodeGen {
	
	class CADPrettyPrinter extends Printer {
		
		public CADPrettyPrinter() {
			super("    ");
		}
		
 		public void print(ASTNode node, PrintStream str, String indent) {
 			node.prettyPrint_CAD(this, str, indent); 
 		}
  		
  		public String op(FBinExp e) { return e.op_C(); }
	}
	
	static CADPrettyPrinter ASTNode.printer_CAD = new CADPrettyPrinter();
	
	public String ASTNode.prettyPrint_CAD(String indent) {
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		PrintStream str = new PrintStream(os);
		prettyPrint_CAD(str,indent);
		return os.toString();
	}

	public void ASTNode.prettyPrint_CAD(PrintStream str, String indent) {
 		prettyPrint_CAD(printer_CAD, str, indent);
	}

	// Default implementation is to use the standard C printer
	public void ASTNode.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
 		prettyPrint_C(p, str, indent);
	}
	
	public void FTimeExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
			str.print(this.adVarName());
			str.print(" = _time;\n");
			
			str.print(this.adDerName());
			str.print(" = " + getSeedName() + "[jmi->offs_t];\n");
	}
	
	syn String FIdUseExp.adVarName() = 
		inFunction() ? getFIdUse().toString_var_CAD(printer_C) : this.prettyPrint_C("");
	
	syn String FIdUseExp.adDerName() =
		inFunction() ? getFIdUse().toString_der_CAD(printer_C) : (variability().lessOrEqual(fParameter()) || !getFIdUse().myFV().isReal()) ? "AD_WRAP_LITERAL(0)" :  getSeedName() + "[jmi_get_index_from_value_ref(" + this.myFV().valueReference() + ")-jmi->offs_real_dx]";
		
	//functions.. modified and added
	public void FIdUseExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {}
	
	syn String FIdUse.name_var_CAD() = toString_var_CAD(printer_C);
	
	syn String FIdUse.name_der_CAD() = toString_der_CAD(printer_C);
	
	syn String FIdUse.toString_var_CAD(Printer p) {
		String type = myFV().funcArrayType(isAssignUse());
		if (myFV().inRecord() && inFunction()) {
			return myRecordFV().genRecordUse_C(p, getFQName(), type);
		} else{
			return myFV().genUse_var_CAD(p, getFQName().getLastFArraySubscripts(), type);
		}
	}
	
	syn String FIdUse.toString_der_CAD(Printer p) {
		String type = myFV().funcArrayType(isAssignUse());
		if (myFV().inRecord() && inFunction()) {
			return myRecordFV().genRecordUse_C(p, getFQName(), type);
		} else{
			return myFV().genUse_der_CAD(p, getFQName().getLastFArraySubscripts(), type);
		}
	}
	
	public String AbstractFVariable.genUse_var_CAD(Printer p, FArraySubscripts fas, String type) {
		return name_var_CAD();
	}
	
	public String AbstractFVariable.genUse_der_CAD(Printer p, FArraySubscripts fas, String type) {
		return name_der_CAD();
		
	}
	
	public String FFunctionArray.genUse_var_CAD(Printer p, FArraySubscripts fas, String type) {
		if (fas == null)
			return name_C();
		else
			return fas.genFunctionArrayUse_var_CAD(p, name_var_CAD(), type);
	}
	
	public String FFunctionArray.genUse_der_CAD(Printer p, FArraySubscripts fas, String type) {
		if (fas == null)
			return name_C();
		else
			return fas.genFunctionArrayUse_der_CAD(p, name_der_CAD(), type);
	}
	
	public String FArraySubscripts.genFunctionArrayUse_var_CAD(Printer p, String name, String type) {
		ByteArrayOutputStream os = new ByteArrayOutputStream();	
		PrintStream str = new PrintStream(os);
		str.print("jmi_array_");
		str.print(type);
		str.print("_");
		str.print(getNumFSubscript());
		str.print("(");
		str.print(name);
		str.print(", ");
		getFSubscripts().prettyPrint_CAD(p, str, "");
		str.print(")");
		return os.toString();
	}
	
	public void FSubscript.prettyPrint_CAD(Printer p, PrintStream str, String indent){
		this.getChild(0).prettyPrint_C(p,str,indent);
	}
	
	public String FArraySubscripts.genFunctionArrayUse_der_CAD(Printer p, String name, String type) {
		ByteArrayOutputStream os = new ByteArrayOutputStream();	
		PrintStream str = new PrintStream(os);
		str.print("jmi_array_");
		str.print(type);
		str.print("_");
		str.print(getNumFSubscript());
		str.print("(");
		str.print(name);
		str.print(", ");
		getFSubscripts().prettyPrint_CAD(p, str, "");
		str.print(")");
		return os.toString();
	}
	
	//Default implementation, use prettyPrint_C instead for literals instead. 
	
	public void FLitExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {}
	
	//Elementary functions
	/* Generate AD-code for every elementary function, this.adVarName()  
	 * is a String that corresponds to this variable name. And get getFExp() 
	 * corresponds to its child node.
	 * 
	 * AD-code is printed recursively, hence AD-code for its child node is printed
	 * on the first line.
	 * 
	 * For binary functions getLeft() and getRight() is used instead of getFExp()
	 */
	
	public void FSinExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {		
			p.print(getFExp(),str,indent);
			str.print(this.adVarName());
			str.print(" = sin(");
			str.print(getFExp().adVarName());
			str.print(");");
			str.print("\n");
			
			str.print(this.adDerName());
			str.print(" = ");
			str.print(getFExp().adDerName());
			str.print(" * cos(");
			str.print(getFExp().adVarName());
			str.print(");\n");		
	}
	
	public void FCosExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {		
			p.print(getFExp(),str,indent);
			str.print(this.adVarName());
			str.print(" = cos(");
			str.print(getFExp().adVarName());
			str.print(");");
			str.print("\n");
			
			str.print(this.adDerName());
			str.print(" = ");
			str.print(getFExp().adDerName());
			str.print(" * -sin(");
			str.print(getFExp().adVarName());
			str.print(");\n");		
	}
	
	public void FTanExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {		
			p.print(getFExp(),str,indent);
			str.print(this.adVarName());
			str.print(" = tan(");
			str.print(getFExp().adVarName());
			str.print(");");
			str.print("\n");
			
			str.print(this.adDerName());
			str.print(" = ");
			str.print(getFExp().adDerName());
			str.print(" * 1/(cos(");
			str.print(getFExp().adVarName());
			str.print(")*cos(");
			str.print(getFExp().adVarName());
			str.print("));\n");		
	}
	
	public void FAsinExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {		
			p.print(getFExp(),str,indent);
			str.print(this.adVarName());
			str.print(" = asin(");
			str.print(getFExp().adVarName());
			str.print(");");
			str.print("\n");
			
			str.print(this.adDerName());
			str.print(" = ");
			str.print(getFExp().adDerName());
			str.print(" * 1/(sqrt(1 -");
			str.print(getFExp().adVarName());
			str.print("*");
			str.print(getFExp().adVarName());
			str.print("));\n");		
	}
	
	public void FAcosExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {		
			p.print(getFExp(),str,indent);
			str.print(this.adVarName());
			str.print(" = acos(");
			str.print(getFExp().adVarName());
			str.print(");");
			str.print("\n");
			
			str.print(this.adDerName());
			str.print(" = -");
			str.print(getFExp().adDerName());
			str.print(" * 1/(sqrt(1 -");
			str.print(getFExp().adVarName());
			str.print("*");
			str.print(getFExp().adVarName());
			str.print("));\n");		
	}
	
	public void FAtanExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {		
			p.print(getFExp(),str,indent);
			str.print(this.adVarName());
			str.print(" = atan(");
			str.print(getFExp().adVarName());
			str.print(");");
			str.print("\n");
			
			str.print(this.adDerName());
			str.print(" = ");
			str.print(getFExp().adDerName());
			str.print(" * 1/(1 +");
			str.print(getFExp().adVarName());
			str.print("*");
			str.print(getFExp().adVarName());
			str.print(");\n");		
	}
	
	public void FAtan2Exp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {		
			p.print(getFExp(),str,indent);
			p.print(getY(),str,indent);
			str.print(this.adVarName());
			str.print(" = atan2(");
			str.print(getFExp().adVarName());
			str.print(",");
			str.print(getY().adVarName());
			str.print(");\n");
			
			str.print(this.adDerName());
			str.print(" = (");
			
			str.print(getFExp().adDerName());
			str.print(" * ");
			str.print(getY().adVarName());
			str.print(" - ");
			str.print(getFExp().adVarName());
			str.print(" * ");
			str.print(getY().adDerName());
			str.print(" ) / ( ");
			str.print(getY().adVarName());
			str.print("*");
			str.print(getY().adVarName());
			
			str.print(" + ");
			str.print(getFExp().adVarName());
			str.print("*");
			str.print(getFExp().adVarName());
			
			str.print(");\n");
			
	}
	
	public void FSinhExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {		
			p.print(getFExp(),str,indent);
			str.print(this.adVarName());
			str.print(" = sinh(");
			str.print(getFExp().adVarName());
			str.print(");");
			str.print("\n");
			
			str.print(this.adDerName());
			str.print(" = ");
			str.print(getFExp().adDerName());
			str.print(" * cosh(");
			str.print(getFExp().adVarName());
			str.print(");\n");		
	}
	
	public void FCoshExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {		
			p.print(getFExp(),str,indent);
			str.print(this.adVarName());
			str.print(" = cosh(");
			str.print(getFExp().adVarName());
			str.print(");");
			str.print("\n");
			
			str.print(this.adDerName());
			str.print(" = ");
			str.print(getFExp().adDerName());
			str.print(" * sinh(");
			str.print(getFExp().adVarName());
			str.print(");\n");		
	}
	
	public void FTanhExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {		
			p.print(getFExp(),str,indent);
			str.print(this.adVarName());
			str.print(" = tanh(");
			str.print(getFExp().adVarName());
			str.print(");");
			str.print("\n");
			
			str.print(this.adDerName());
			str.print(" = ");
			str.print(getFExp().adDerName());
			str.print(" * (1 - tanh(");
			str.print(getFExp().adVarName());
			str.print(") * tanh(");
			str.print(getFExp().adVarName());
			str.print("));\n");		
	}
	
	public void FLogExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
			p.print(getFExp(),str,indent);
			str.print(this.adVarName());
			str.print(" = log(");
			str.print(getFExp().adVarName());
			str.print(");\n");
			
			str.print(this.adDerName());
			str.print(" = ");
			str.print(getFExp().adDerName());
			str.print(" * 1/(");
			str.print(getFExp().adVarName());
			str.print(");\n");
	}
	
	public void FLog10Exp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
			p.print(getFExp(),str,indent);
			str.print(this.adVarName());
			str.print(" = log10(");
			str.print(getFExp().adVarName());
			str.print(");\n");
			
			str.print(this.adDerName());
			str.print(" = ");
			str.print(getFExp().adDerName());
			str.print(" * log10(exp(1))*1/(");
			str.print(getFExp().adVarName());
			str.print(");\n");
	}
	
	
	public void FExpExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
			p.print(getFExp(),str,indent);
			str.print(this.adVarName());
			str.print(" = exp(");
			str.print(getFExp().adVarName());
			str.print(");\n");
			
			str.print(this.adDerName());
			str.print(" = ");
			str.print(getFExp().adDerName());
			str.print(" * exp(");
			str.print(getFExp().adVarName());
			str.print(");\n");
	}
	
	public void FPowExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
			p.print(getLeft(),str,indent);
			p.print(getRight(),str,indent);
			str.print(this.adVarName());
			str.print(" = pow(");
			str.print(getLeft().adVarName());
			str.print(" , ");
			str.print(getRight().adVarName());
			
			str.print(");\n");
			
			str.print("if(");
			str.print(getLeft().adVarName());
			str.print("== 0){\n");
			str.print(this.adDerName());
			str.print("=0;\n} else{\n");
	
			str.print(this.adDerName());
			str.print(" = ");
			str.print(this.adVarName());
			str.print(" * (");
			str.print(getRight().adDerName());
			str.print(" * log(jmi_abs(");
			str.print(getLeft().adVarName());
			str.print(")) + ");
			str.print(getRight().adVarName());
			str.print(" * ");
			str.print(getLeft().adDerName());
			str.print(" / ");
			str.print(getLeft().adVarName());
			str.print(");\n}\n");
	}
	
	public void FSqrtExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
			p.print(getFExp(),str,indent);
			str.print(this.adVarName());
			str.print(" = sqrt(");
			str.print(getFExp().adVarName());
			str.print(");\n");
			
			
			str.print(this.adDerName());
			str.print(" = ");
			str.print(getFExp().adDerName());
			str.print(" * 1/(2*sqrt(");
			str.print(getFExp().adVarName());
			str.print("));\n");
	}
	
	public void FDivExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
			p.print(getLeft(),str,indent);
			p.print(getRight(),str,indent);
			str.print(this.adVarName());
			str.print(" = ");
			str.print(getLeft().adVarName());
			str.print(" / ");
			str.print(getRight().adVarName());
			str.print(";\n");
			
			str.print(this.adDerName());
			str.print(" = (");
			str.print(getLeft().adDerName());
			str.print(" * ");
			str.print(getRight().adVarName());
			str.print(" - ");
			str.print(getLeft().adVarName());
			str.print(" * ");
			str.print(getRight().adDerName());
			str.print(" ) / ( ");
			str.print(getRight().adVarName());
			str.print(" * ");
			str.print(getRight().adVarName());
			str.print(");\n");
			
	}
	
	public void FMulExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
			p.print(getLeft(),str,indent);
			p.print(getRight(),str,indent);
			str.print(this.adVarName());
			str.print(" = ");
			str.print(getLeft().adVarName());
			str.print(" * ");
			str.print(getRight().adVarName());
			str.print(";\n");
			
			str.print(this.adDerName());
			str.print(" = (");
			str.print(getLeft().adDerName());
			str.print(" * ");
			str.print(getRight().adVarName());
			str.print(" + ");
			str.print(getLeft().adVarName());
			str.print(" * ");
			str.print(getRight().adDerName());
			str.print(");\n");
			
	}
	
	public void FAddExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
			p.print(getLeft(),str,indent);
			p.print(getRight(),str,indent);
			str.print(this.adVarName());
			str.print(" = ");
			str.print(getLeft().adVarName());
			str.print(" + ");
			str.print(getRight().adVarName());
			str.print(";\n");
			
			str.print(this.adDerName());
			str.print(" = ");
			str.print(getLeft().adDerName());
			str.print(" + ");
			str.print(getRight().adDerName());
			str.print(";\n");
	}
	
	public void FSubExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
			p.print(getLeft(),str,indent);
			p.print(getRight(),str,indent);
			str.print(this.adVarName());
			str.print(" = ");
			str.print(getLeft().adVarName());
			str.print(" - ");
			str.print(getRight().adVarName());
			str.print(";\n");
			
			str.print(this.adDerName());
			str.print(" = ");
			str.print(getLeft().adDerName());
			str.print(" - ");
			str.print(getRight().adDerName());
			str.print(";\n");
	}
	
	public void FAbsExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
			p.print(getFExp(),str,indent);
			str.print(this.adVarName());
			str.print(" = jmi_abs(");
			str.print(getFExp().adVarName());
			str.print(");\n");
			
			str.print("if(");
			str.print(getFExp().adVarName());
			str.print(" < 0){\n    ");
			str.print(this.adDerName());
			str.print(" = -");
			str.print(getFExp().adDerName());
			str.print(";\n}");
			
			str.print("else {\n    ");
			str.print(this.adDerName());
			str.print(" = ");
			str.print(getFExp().adDerName());
			str.print(";\n}\n");
	}
	
	public void FNegExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
			p.print(getFExp(),str,indent);
			str.print(this.adVarName());
			str.print(" = -");
			str.print(getFExp().adVarName());
			str.print(";\n");
			
			str.print(this.adDerName());
			str.print(" = -");
			str.print(getFExp().adDerName());
			str.print(";\n");
	}
	
	 /*
	 *If expressions
	 * 
	 */
	public void FNoEventExp.prettyPrint_CAD(Printer p, PrintStream str, String indent){
		// If no event occurs, the value of the derivative 
		// and the variable are just passed on..
		p.print(getFExp(), str, indent);
		str.print(adVarName());
		str.print(" = ");
		str.print(getFExp().adVarName());
		str.print(";\n");
		str.print(adDerName());
		str.print(" = ");
		str.print(getFExp().adDerName());
		str.print(";\n");
	}
	
	public void FIfExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
		
		//Print AD-code for the then resp. else expressions
		p.print(getThenExp(),str,indent);
		p.print(getElseExp(),str,indent);
		
		//Couple the print AD-code to the conditions
		str.format(" %s = COND_EXP_EQ(", adVarName());
		getIfExp().prettyPrint_C(str, indent);
		str.format(", JMI_TRUE, %s, %s);\n", getThenExp().adVarName(), getElseExp().adVarName());
		
		str.format(" %s = COND_EXP_EQ(", adDerName());
		getIfExp().prettyPrint_C(str, indent);
		str.format(", JMI_TRUE, %s, %s);\n", getThenExp().adDerName(), getElseExp().adDerName());
	}
	
	/*
	 * Generate AD-code for one residual equation
	 */
	public void FAbstractEquation.genResidual_CAD(int i, String indent, PrintStream str) {}
	
	public void FEquation.genResidual_CAD(int i, String indent, PrintStream str) {
		genTempVars_C(printer_C, str, indent);
		getRight().prettyPrint_CAD(str,"    ");
		getLeft().prettyPrint_CAD(str,"    ");
		
		str.print("(*res)[");
		str.print(i);
		str.print("] = ");
		str.print(getRight().adVarName());
		str.print(" - ");
		str.print(getLeft().adVarName());
		str.print(";\n");
		
		str.print("(*dF)[");
		str.print(i);
		str.print("]  = ");
		str.print(getRight().adDerName());
		str.print(" - ");
		str.print(getLeft().adDerName());
		str.print(";\n");
	}
	
	//Methods to handle blocks starts here
	
	public void AbstractEquationBlock.genBlockResidualFunction_CAD(int block_counter, boolean inInit, String indent, PrintStream str) {
	} 
	
	public void EquationBlock.genBlockResidualFunction_CAD(int block_counter, boolean inInit, String indent, PrintStream str) {
		str.print("static int dae_" + (inInit? "init_": "") + "block_dir_der_"+block_counter+"(jmi_t* jmi, jmi_real_t* x, jmi_real_t* dx,jmi_real_t* residual, jmi_real_t* dRes, int evaluation_mode) {\n");
		int i = 0;
		for (FAbstractEquation e : equations()){
			e.genTempForFunc_CAD(i, indent, str, null);
			i += e.numScalarEquations();
		}
		genVarDecls_CAD(str, indent);
		str.print("\njmi_real_t** res = &residual;\n");
		str.print("jmi_real_t** dF = &dRes;\n");
		str.print("jmi_real_t** dz;\n");
		
		str.print("  if (evaluation_mode == JMI_BLOCK_EVALUATE){\n");
		str.print("      dz = jmi->dz_seed;\n");
		// Loop over all active variables and write the values in x to the z vector
		int var_counter = 0;
		for (FVariable fv : activeVariables()) {
			str.print("    (*dz)[ jmi_get_index_from_value_ref(" + fv.valueReference() + ")-jmi->offs_real_dx] = dx[" + var_counter + "];\n");
			var_counter++;
		}
		str.print("  } else if (evaluation_mode == JMI_BLOCK_EVALUATE_WITH_STATE){\n");
		str.print("      dz = jmi->dz_seed;\n");
		// Loop over all active variables and write the values in x to the z vector
		var_counter = 0;
		for (FVariable fv : activeVariables()) {
			str.print("    " + fv.name_C() + " = x["+var_counter+"];\n");
			str.print("    (*dz)[ jmi_get_index_from_value_ref(" + fv.valueReference() + ")-jmi->offs_real_dx] = dx[" + var_counter + "];\n");
			var_counter++;
		}
		
		str.print("  } else if (evaluation_mode == JMI_BLOCK_EVALUATE_INACTIVE || evaluation_mode == JMI_BLOCK_WRITE_BACK){\n");
		str.print("      dz = jmi->dv;\n");
		str.print("  } else{\n");
		str.print("  return -1;\n}\n");
		str.print("  if (evaluation_mode==JMI_BLOCK_INITIALIZE) {\n");
		var_counter = 0;
		// Loop over all active variables and write their value to x	
		for (FVariable fv : activeVariables()) {
			str.print("    x["+var_counter+"] = " + fv.name_C() + ";\n");
			var_counter++;
		}
		str.print("  } else if (evaluation_mode==JMI_BLOCK_EVALUATE || evaluation_mode==JMI_BLOCK_EVALUATE_INACTIVE || evaluation_mode==JMI_BLOCK_EVALUATE_WITH_STATE) {\n");
		
		// Write AD-code
		int equation_counter = 0;
		for (FAbstractEquation e : equations()) {
			//Generate AD-code for the unsolved expression
			e.genResidual_CAD(equation_counter,indent,str);				
			equation_counter += e.numScalarEquations();
		}
		//Reset seed vector
		for (FVariable fv : activeVariables()) {
			str.print("    (*dz)[jmi_get_index_from_value_ref(" + fv.valueReference() + ")-jmi->offs_real_dx] = 0;\n");
		}
		str.print("   }else if (evaluation_mode == JMI_BLOCK_WRITE_BACK) {\n");
		var_counter = 0;
		//Code that stores the evaluated dz
		for (FVariable fv : activeVariables()) {
			str.print("    (*dz)[jmi_get_index_from_value_ref(" + fv.valueReference() + ")-jmi->offs_real_dx] = -(*dF)[" + var_counter + "];\n");
			var_counter++;
		}
		str.print("  } else{\nreturn -1;\n}\n");
		
		str.print("  return 0;\n}\n\n");
	}
	
	public void AbstractEquationBlock.genBlock_CAD(int i, boolean inInitial, String indent, PrintStream str){}
	
	//Code that is printed in model_ode_derivatives, calls two functions that solves both z and dz resp.
	public void EquationBlock.genBlock_CAD(int i, boolean inInitial, String indent, PrintStream str) {	
		if (inInitial) {
			// Assuming that the model has been evaluated prior to Jacobian evaluation, no iteration is needed here
			//str.print(indent + "jmi_kinsol_solve(jmi->dae_init_block_residuals[" + i +"]);\n");
			str.print(indent + "jmi_ode_unsolved_block_dir_der(jmi, jmi->dae_init_block_residuals[" + i +"]);\n");
		} else {
			// Assuming that the model has been evaluated prior to Jacobian evaluation, no iteration is needed here
			//str.print(indent + "jmi_kinsol_solve(jmi->dae_block_residuals[" + i +"]);\n");
			str.print(indent + "jmi_ode_unsolved_block_dir_der(jmi, jmi->dae_block_residuals[" + i +"]);\n");
		}	
	}
	
	public void TornEquationBlock.genBlock_CAD(int i, boolean inInitial, String indent, PrintStream str) {	
		if (inInitial) {
			// Assuming that the model has been evaluated prior to Jacobian evaluation, no iteration is needed here
			//str.print(indent + "jmi_kinsol_solve(jmi->dae_init_block_residuals[" + i +"]);\n");
			str.print(indent + "jmi_ode_unsolved_block_dir_der(jmi, jmi->dae_init_block_residuals[" + i +"]);\n");
		} else {
			// Assuming that the model has been evaluated prior to Jacobian evaluation, no iteration is needed here
			//str.print(indent + "jmi_kinsol_solve(jmi->dae_block_residuals[" + i +"]);\n");
			str.print(indent + "jmi_ode_unsolved_block_dir_der(jmi, jmi->dae_block_residuals[" + i +"]);\n");
		}	
	}
	
	public void SolvedFunctionCallEquationBlock.genBlock_CAD(int i, boolean inInitial, String indent, PrintStream str) {
		if (!functionCallEquation.getCall().isIgnored()) {
			functionCallEquation.genFuncCall_CAD(i, "", str);
		}
	}
	
	public void SolvedScalarEquationBlock.genBlock_CAD(int i, boolean inInitial, String indent, PrintStream str) {	
		eqn.genSolvedBlock_CAD(fv,indent,str);
	}
	
	public void FAbstractEquation.genSolvedBlock_CAD(FVariable v, String indent, PrintStream str) {}

	//Print AD-code for solved block in model_ode_derivatives
	public void FEquation.genSolvedBlock_CAD(FVariable v, String indent, PrintStream str) {
		if(v.isReal()){
			solution(v.name()).prettyPrint_CAD(str,indent);
			str.print(indent + v.name_C() + " = " + solution(v.name()).adVarName() + ";\n");
			str.print(indent + "(*dz)[jmi_get_index_from_value_ref(" + v.valueReference() + ")-jmi->offs_real_dx] =" +  solution(v.name()).adDerName() + ";\n");
		}else{
			this.genSolvedBlock_C(v, indent, str);
		}
	}
	
	public void FIdUseExp.genVarDeclsRedundantCheck_CAD(PrintStream str, Set<String> vars) {}
	
	public void FLitExp.genVarDeclsRedundantCheck_CAD(PrintStream str, Set<String> vars) {}
	
	public void ASTNode.genVarDeclsRedundantCheck_CAD(PrintStream str, Set<String> vars){
		for(ASTNode n: this){
			n.genVarDeclsRedundantCheck_CAD(str,vars);
		}
	}
	
	public void FExp.genVarDeclsRedundantCheck_CAD(PrintStream str, Set<String> vars){
		if (vars.contains(this.adVarName())){
			super.genVarDeclsRedundantCheck_CAD(str,vars);
			return;
		}
		vars.add(this.adVarName());
		if(this.adVarName().contains("v")){
		str.print("\n");
		str.print("jmi_ad_var_t ");
		str.print(this.adVarName()+";\n");
		str.print("jmi_ad_var_t ");
		str.print(this.adDerName()+";\n");
		}
		super.genVarDeclsRedundantCheck_CAD(str,vars);
	}
	

	//Tornblock, works in similar way as the above given EquationBlock.genBlockResidulFunction_CAD
	public void TornEquationBlock.genBlockResidualFunction_CAD(int block_counter, boolean inInit, String indent, PrintStream str) {
		str.print("static int dae_" + (inInit? "init_": "") + "block_dir_der_"+block_counter+"(jmi_t* jmi, jmi_real_t* x, jmi_real_t* dx,jmi_real_t* residual, jmi_real_t* dRes, int evaluation_mode) {\n");
		int i = 0;
		HashSet<String> hs = new HashSet<String>();
		for (FAbstractEquation e : equations()){
			e.genTempForFunc_CAD(i, indent, str, hs);
			i += e.numScalarEquations();
		}
		
		for (AbstractEquationBlock aeb : solvedBlocks) {
			aeb.genVarDecls_CAD(str, indent);
		}
		hs.clear();
		for (AbstractEquationBlock aeb : unsolvedBlocks) {
			for(FAbstractEquation e : aeb.equations()){
				e.genVarDeclsRedundantCheck_CAD(str, hs);
			}
		}
		
		str.print("  jmi_real_t** res = &residual;\n");
		str.print("  jmi_real_t** dF = &dRes;\n");
		str.print("  jmi_real_t** dz;\n");
		str.print("  if (evaluation_mode == JMI_BLOCK_EVALUATE){\n");
		str.print("      dz = jmi->dz_seed;\n");
		// Loop over all active variables and write the values in x to the z vector
		int var_counter = 0;
		for (FVariable fv : activeVariables()) {
			//str.print("    " + fv.name_C() + " = x["+var_counter+"];\n");
			str.print("    (*dz)[ jmi_get_index_from_value_ref(" + fv.valueReference() + ")-jmi->offs_real_dx] = dx[" + var_counter + "];\n");
			var_counter++;
		}
		str.print("  } else if (evaluation_mode == JMI_BLOCK_EVALUATE_WITH_STATE){\n");
		str.print("      dz = jmi->dz_seed;\n");
		// Loop over all active variables and write the values in x to the z vector
		var_counter = 0;
		for (FVariable fv : activeVariables()) {
			str.print("    " + fv.name_C() + " = x["+var_counter+"];\n");
			str.print("    (*dz)[ jmi_get_index_from_value_ref(" + fv.valueReference() + ")-jmi->offs_real_dx] = dx[" + var_counter + "];\n");
			var_counter++;
		}
		
		str.print("  } else if (evaluation_mode == JMI_BLOCK_EVALUATE_INACTIVE || evaluation_mode == JMI_BLOCK_WRITE_BACK){\n");
		str.print("      dz = jmi->dv;\n");
		str.print("  } else{\n");
		str.print("  return -1;\n}\n");
		str.print("  if (evaluation_mode==JMI_BLOCK_INITIALIZE) {\n");
		var_counter = 0;
		// Loop over all active variables and write their value to x	
		for (FVariable fv : activeVariables()) {
			str.print("    x["+var_counter+"] = " + fv.name_C() + ";\n");
			var_counter++;
		}
		str.print("  } else if (evaluation_mode==JMI_BLOCK_EVALUATE || evaluation_mode==JMI_BLOCK_EVALUATE_INACTIVE || evaluation_mode==JMI_BLOCK_EVALUATE_WITH_STATE) {\n");
		
		// Generate dy_i seeds from solved equations and variables
		for (AbstractEquationBlock aeb : solvedBlocks) {
			aeb.genBlockResidualFunctionBeforeEqns_CAD(indent, str);
		}
		// AD-code for residual equations
		int equation_counter = 0;
		for (FAbstractEquation e : unsolvedEquations()) {
			e.genResidual_CAD(equation_counter,indent,str);				
			equation_counter += e.numScalarEquations();
		}
		// Reset seed-vector
		for (FVariable fv : activeVariables()) {
			str.print("    (*dz)[jmi_get_index_from_value_ref(" + fv.valueReference() + ")-jmi->offs_real_dx] = 0;\n");
		}
		str.print("   }else if(evaluation_mode==JMI_BLOCK_WRITE_BACK){\n");
		var_counter = 0;
		for (FVariable fv : activeVariables()) {
			str.print("    (*dz)[jmi_get_index_from_value_ref(" + fv.valueReference() + ")-jmi->offs_real_dx] = -(*dF)[" + var_counter + "];\n");
			//str.print("    (*(jmi->dz))[jmi_get_index_from_value_ref(" + fv.valueReference() + ")-jmi->offs_real_dx] = -(*dF)[" + var_counter + "];\n");
			var_counter++;
		}
		str.print("  } else{\nreturn -1;\n}\n");
		
		str.print("  return 0;\n}\n\n");
		
	}
	
	public void AbstractEquationBlock.genBlockResidualFunctionBeforeEqns_CAD(String indent, PrintStream str) {
	}
	
	public void SolvedFunctionCallEquationBlock.genBlockResidualFunctionBeforeEqns_CAD(String indent, PrintStream str) {
		genBlock_CAD(0, false, indent, str);
	}
	
	public void SolvedScalarEquationBlock.genBlockResidualFunctionBeforeEqns_CAD(String indent, PrintStream str) {
		genBlock_CAD(0, false, indent, str);
	}

	public ArrayList<ASTNode> AbstractEquationBlock.blockResidualNodes_CAD() {
		ArrayList<ASTNode> res = new ArrayList<ASTNode>(activeVariables());
		res.addAll(equations());
		return res;
	}
	
	public ArrayList<ASTNode> TornEquationBlock.blockResidualNodes_CAD() {
		ArrayList<ASTNode> res = new ArrayList<ASTNode>(activeVariables());
		res.addAll(equations());
		return res;
	}
	
	
	// Methods to handle temporary variables for functioncalls inside BLT.blocks start here
	public void FFunctionCallLeft.genWriteBackInFunc_CAD(PrintStream str, String indent){
		if (hasFExp()) {
			getFExp().genWriteBackInFunc_var_CAD(str, indent, name_var_CAD(), equationIndex);
			getFExp().genWriteBackInFunc_der_CAD(str, indent, name_der_CAD(),equationIndex);
		}
	}
	
	
	public void FExp.genWriteBackInFunc_var_CAD(PrintStream str, String indent, String name, int index) {
		str.print(indent);
		str.print(adVarName());
		str.print(" = ");
		str.print(name+";\n");
	}
	
	
	public void FExp.genWriteBackInFunc_der_CAD(PrintStream str, String indent, String name, int index) {
		str.print(adDerName());
		str.print(" = ");
		str.print(name+";\n");
	}
	
	
	public void FFunctionCallEquation.genTempForFunc_CAD(int i, String indent, PrintStream str,HashSet<String> hs) {
		if (!getCall().isIgnored()) {
			for (FFunctionCallLeft l : getLefts()) {
				if(hs!=null){
					if(!hs.contains(l.name_var_CAD())){
						l.setBaseIndex(i);
						l.genTempVar_var_CAD(indent, str);
						l.genTempVar_der_CAD(indent,str);
						hs.add(l.name_var_CAD());
					}
				} else {
					l.setBaseIndex(i);
					l.genTempVar_var_CAD(indent, str);
					l.genTempVar_der_CAD(indent,str);
				}
				
			}
		}
		super.genTempForFunc_CAD(i,indent,str,hs);
	}
	
	public void ASTNode.genTempForFunc_CAD(int i, String indent, PrintStream str,HashSet<String> hs) {
		for(ASTNode n: this){
			n.genTempForFunc_CAD(i,indent,str,hs);
		}
	}

	protected void AbstractEquationBlock.genVarDecls_CAD(PrintStream str, String indent) {
		for (ASTNode n : blockResidualNodes_CAD()) {
			n.genVarDecls_CAD(ASTNode.printer_CAD, str, indent);
		}
	}
	
	protected void SolvedScalarEquationBlock.genVarDecls_CAD(PrintStream str, String indent) {
		solution().genVarDecls_CAD(ASTNode.printer_CAD, str, indent);
	}
	
	public void FFunctionCallEquation.genFuncCall_CAD(int i, String indent, PrintStream str) {
		if (!getCall().isIgnored()) {
			getCall().prettyPrint_CAD(str, indent);
			str.print(";\n");
			for (FFunctionCallLeft l : getLefts()){
				l.setBaseIndex(i);
				l.genWriteBackInFunc_CAD(str, indent);
			}
		}
		super.genFuncCall_CAD(i,indent,str);
	}
	
	public void ASTNode.genFuncCall_CAD(int i, String indent, PrintStream str) {
		for(ASTNode n: this){
			n.genFuncCall_CAD(i,indent,str);
		}
	}
	
	/*
	 * Used to generate function call statements, i.e. <outs> = f(<ins>), size(outs) >= 2 
	 */
	public void BLT.genFuncDecls_CAD(PrintStream str, String indent) {
		int i = 0;
		for (AbstractEquationBlock eb : getAllBlocks()){
			for (FAbstractEquation e : eb.equations()){
				e.genFuncCall_CAD(i, indent, str);
				i += e.numScalarEquations();
			}
		}
	}
	
	public void BLT.genSolvedVarDecls_CAD(PrintStream str, String indent) {
		int i = 0;
		for (AbstractEquationBlock eb : getAllBlocks()){
			if(eb.isSolvable()){
				eb.genVarDecls_CAD(str, indent);
			}
		}
		for (AbstractEquationBlock eb : getAllBlocks()){
			if(eb.isSolvable()){
				for (FAbstractEquation e : eb.equations()){
					e.genTempForFunc_CAD(i, "", str,null);
					i += e.numScalarEquations();
				}
			}
		}
	}
	
	
	public void BLT.genVarDecls_CAD(PrintStream str, String indent) {
		int i = 0;
		for (AbstractEquationBlock eb : getAllBlocks()){
			eb.genVarDecls_CAD(str, indent);
		}
		for (AbstractEquationBlock eb : getAllBlocks()){
			for (FAbstractEquation e : eb.equations()){
				e.genTempForFunc_CAD(i, "", str,null);
				i += e.numScalarEquations();
			}
		}
	}
	
	
	public void BLT.genOdeDerivativeBlocks_CAD(PrintStream str) {
		int block_counter = 0;
		for (AbstractEquationBlock block : this) {
			block.genBlock_CAD(block_counter,false,"  ",str); 
            if (!block.isSolvable()) {
				block_counter++;
            }
		}
	}
	
	public void StructuredBLT.genOdeDerivativeBlocks_CAD(PrintStream str) {
		int block_counter = 0;
		str.append("/*********** ODE section ***********/\n");	
		// Loop over all derivatives
		for (AbstractEquationBlock eb : getOdeBlocks()) {
			eb.genBlock_CAD(block_counter,false,"  ",str);
			block_counter += eb.isSolvable()? 0: 1; 		
		}
		str.append("/*********** Real outputs **********/\n");	
		for (AbstractEquationBlock eb : getRealOutputBlocks()) {
			eb.genBlock_CAD(block_counter,false,"  ",str);
			block_counter += eb.isSolvable()? 0: 1; 		
		}
		str.append("/*** Integer and boolean outputs ***/\n");	
		for (AbstractEquationBlock eb : getIntegerBooleanOutputBlocks()) {
			eb.genBlock_CAD(block_counter,false,"  ",str);
			block_counter += eb.isSolvable()? 0: 1; 	
		}
		str.append("/********* Other variables *********/\n");	
		for (AbstractEquationBlock eb : getOtherBlocks()) {
			eb.genBlock_CAD(block_counter,false,"  ",str);
			block_counter += eb.isSolvable()? 0: 1; 		
		}
	}
	
	//Methods to handle function calls starts here
	
	
	public void FFunctionCallEquation.genResidual_CAD(int i, String indent, PrintStream str) {
		if (!getCall().isIgnored()) {
			genTempVars_CAD(printer_C, str, indent);
			for (FFunctionCallLeft l : getLefts()){
				l.setBaseIndex(i);
			}
			getCall().prettyPrint_CAD(str, indent);
			str.print(";\n");
			for (FFunctionCallLeft l : getLefts()){
				l.genWriteBack_CAD(str, indent);
			}
// TODO: Should this be added? Updates the variables assigned in the function calls. 			
//			for (FFunctionCallLeft l : getLefts()){
//				l.genWriteBackInFunc_CAD(str, indent);
//			}
		}
	}
	
	public void ASTNode.genTempVars_CAD(Printer p, PrintStream str, String indent) {
		for (ASTNode node : this){
			node.genTempVars_CAD(p, str, indent);
		}
	}
	
	public void FFunctionCall.genTempVars_CAD(Printer p, PrintStream str, String indent) {
		getArgs().genTempVars_CAD(p, str, indent);
		for (FExp arg : getArgs()) 
			arg.genTempInputs_CAD(p, str, indent);
	}
	
	
	public void FExp.genTempVars_CAD(Printer p, PrintStream str, String indent) {
		if (isArray() && !size().isUnknown()){
			getArray().genTempVars_CAD(p, str, indent);
		} else{
			super.genTempVars_C(p, str, indent);
		}
	}
	
	public void FFunctionCallLeft.genTempVars_CAD(Printer p, PrintStream str, String indent) {
		if (hasFExp())
			getFExp().genTempOutputs_CAD(p, str, indent);
	}

	public void FExp.genTempOutputs_CAD(Printer p, PrintStream str, String indent) {}
	
	public void FArray.genTempOutputs_CAD(Printer p, PrintStream str, String indent) {
		type().printInit_C(p, str, indent, tempName_var_CAD(), this);
		type().printInit_C(p, str, indent, tempName_der_CAD(), this);
	}
	
	
	public void ASTNode.genVarDecls_CAD(Printer p, PrintStream str, String indent) {
		for (ASTNode node : this)
			node.genVarDecls_CAD(p, str, indent);
	}
	
	public void FFunctionCallLeft.genVarDecls_CAD(Printer p, PrintStream str, String indent) {
		super.genVarDecls_CAD(p, str, indent);
		if (hasFExp())
			getFExp().genTempOutputDecls_CAD(p, str, indent);
	}
	
	public void FIdUseExp.genVarDecls_CAD(Printer p, PrintStream str, String indent) {}
	
	public void FLitExp.genVarDecls_CAD(Printer p, PrintStream str, String indent) {}
	
	public void FExp.genVarDecls_CAD(Printer p, PrintStream str, String indent) {
		str.print("\n");
		str.print("jmi_ad_var_t ");
		str.print(this.adVarName()+";\n");
		str.print("jmi_ad_var_t ");
		str.print(this.adDerName()+";\n");
		super.genVarDecls_CAD(p, str, indent);
	}
	
	public void FFunctionCall.genVarDecls_CAD(Printer p, PrintStream str, String indent) {
		super.genVarDecls_CAD(p, str, indent);
		for (FExp arg : getArgs()) 
			arg.genTempInputDecls_CAD(p, str, indent);
	}
	
	public void FFunctionVariable.genVarDecls_CAD(Printer p, PrintStream str, String indent) {
		if (!isInput()) {
			String suffix = (isOutput() && isComposite()) ? C_SUFFIX_NULL : "";
			printDeclOrInit_C(p, str, indent, name_var_CAD() + suffix, true);
			printDeclOrInit_C(p, str, indent, name_der_CAD() + suffix, true);
		}
	}

	public void FExp.genTempOutputDecls_CAD(Printer p, PrintStream str, String indent) {}
	
	public void FArray.genTempOutputDecls_CAD(Printer p, PrintStream str, String indent) {
		type().printDecl_C(p, str, indent, tempName_var_CAD(), this);
		type().printDecl_C(p, str, indent, tempName_der_CAD(), this);
	}
	
	public void FExp.genTempInputDecls_CAD(Printer p, PrintStream str, String indent) {
		if (isComposite() && !keepAsArray()) {
			type().printDecl_C(p, str, indent, tempName_var_CAD(), this);
			type().printDecl_C(p, str, indent, tempName_der_CAD(), this);
		}
	}
	
	syn lazy String FExp.tempName_var_CAD() {
		return "tmp_var_" + nextTempNbr_var_CAD();
	}
	
	syn lazy String FExp.tempName_der_CAD() {
		return "tmp_der_" + nextTempNbr_der_CAD();
	}
	
	private int FClass.tmpNbr_var = 0;
	
	public int FClass.nextTempNbr_var_CAD() {
		return tmpNbr_var++;
	}
	
	syn lazy int FExp.nextTempNbr_var_CAD() = myFClass().nextTempNbr_var_CAD();
	
	private int FClass.tmpNbr_der = 0;
	
	public int FClass.nextTempNbr_der_CAD() {
		return tmpNbr_der++;
	}
	
	syn lazy int FExp.nextTempNbr_der_CAD() = myFClass().nextTempNbr_der_CAD();
	
	public void FExp.genTempInputs_CAD(Printer p, PrintStream str, String indent) {
		if (isComposite() && !keepAsArray()) {
			String name = tempName_var_CAD();
			type().printInit_C(p, str, indent, name, this);
			type().genTempInputAssigns_var_CAD(p, str, indent, name, this);
			name = tempName_der_CAD();
			type().printInit_C(p, str, indent, name, this);
			type().genTempInputAssigns_der_CAD(p, str, indent, name, this);
		}
	}
	
	public void FType.genTempInputAssigns_var_CAD(
			Printer p, PrintStream str, String indent, String name, FExp exp) {
		if (isArray()) {
			String type = isRecord() ? C_ARRAY_RECORD : C_ARRAY_REFERENCE;
			String pre = "jmi_array_" + type + "_" + ndims() + "(" + name + ", ";
			Array arr = exp.getArray();
			for (Index i : arr.indices()) {
				String cellName = pre + i.toUnclosedString() + ")";
				genTempInputCellAssigns_var_CAD(p, str, indent, cellName, arr.get(i));
			}
		} else {
			genTempInputCellAssigns_var_CAD(p, str, indent, name, exp);
		}
	}
	
	public void FType.genTempInputCellAssigns_var_CAD(
			Printer p, PrintStream str, String indent, String name, FExp exp) {
		printer_CAD.print(exp, str, indent);
		str.print(indent + name + " = " + exp.adVarName() + ";\n");
	}
	
	public void FType.genTempInputAssigns_der_CAD(
			Printer p, PrintStream str, String indent, String name, FExp exp) {
		if (isArray()) {
			String type = isRecord() ? C_ARRAY_RECORD : C_ARRAY_REFERENCE;
			String pre = "jmi_array_" + type + "_" + ndims() + "(" + name + ", ";
			Array arr = exp.getArray();
			for (Index i : arr.indices()) {
				String cellName = pre + i.toUnclosedString() + ")";
				genTempInputCellAssigns_der_CAD(p, str, indent, cellName, arr.get(i));
			}
		} else {
			genTempInputCellAssigns_der_CAD(p, str, indent, name, exp);
		}
	}
	
	public void FType.genTempInputCellAssigns_der_CAD(
			Printer p, PrintStream str, String indent, String name, FExp exp) {
		str.print(indent + name + " = ");
		str.print(exp.adDerName() + ";\n");
	}
	
	syn String FFunctionCallLeft.name_var_CAD() {
		// TODO: use getFExp().tempName_C() instead of first case as well?
		if (equationIndex >= 0 && !getFExp().isComposite()) {
			return getFExp().tempName_var_CAD();
		} else if (equationIndex < 0 || getFExp().keepAsArray()) {
			return ((FIdUseExp) getFExp()).getFIdUse().name_var_CAD();
		} else {
			return getFExp().tempName_var_CAD();
		}
	}
	
	// TODO: Declare in genVarDecls_C instead
	public void FFunctionCallLeft.genTempVar_var_CAD(String indent, PrintStream str) {
		if (hasFExp() && !getFExp().isComposite()) {
			str.print(indent);
			str.print(type_C());
			str.print(" ");
			str.print(name_var_CAD());
			str.print(";\n");
		}
	}
	
	syn String FFunctionCallLeft.name_der_CAD() {
		// TODO: use getFExp().tempName_C() instead of first case as well?
		if (equationIndex >= 0 && !getFExp().isComposite()) {
			return getFExp().tempName_der_CAD();
		} else if (equationIndex < 0 || getFExp().keepAsArray()) {
			return ((FIdUseExp) getFExp()).getFIdUse().name_der_CAD();
		} else {
			return getFExp().tempName_der_CAD();
		}
	}
	
	// TODO: Declare in genVarDecls_C instead
	public void FFunctionCallLeft.genTempVar_der_CAD(String indent, PrintStream str) {
		if (hasFExp() && !getFExp().isComposite()) {
			str.print(indent);
			str.print(type_C());
			str.print(" ");
			str.print(name_der_CAD());
			str.print(";\n");
		}
	}
	
	public void FFunctionCall.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
		boolean exp = functionCallIsExp();
		
		str.print(getName().funcNameUnderscore("der_AD"));
		str.print("(");
		String sep = "";
		for (FExp arg : getArgs()) {
			str.print(sep);
			arg.genArgument_var_CAD(p, str, indent);
			sep = ", ";
		}
		for (FExp arg : getArgs()) {
			str.print(sep);
			arg.genArgument_der_CAD(p, str, indent);
			sep = ", ";
		}
		if (!exp){
			int tot = myOutputs().size();
			int lefts = myLefts().size();
			for (int i = 0; i < tot; i++) {
				str.print(sep);
				if (i < lefts)
					myLefts().get(i).genArgument_var_CAD(str);
				else
					str.print("NULL");
				sep = ", ";
			}
			for (int i = 0; i < tot; i++) {
				str.print(sep);
				if (i < lefts)
					myLefts().get(i).genArgument_der_CAD(str);
				else
					str.print("NULL");
				sep = ", ";
			}
			str.print(")");
		} else{
			// Check if the function has several outputs, if so we should only use
			// the first output.
			if(myOutputs().size() <= 1){
				str.print(",&" + this.adVarName() + ", &" + this.adDerName() + ");\n");
			} else {
				Boolean var = true;
				for(int i = 1; i <= 2; i++){
					for(int j = 1; j <= myOutputs().size(); j++){
						if(j==1){
							if(var){
								str.print(",&" + this.adVarName());	
							} else {
								str.print(",&" + this.adDerName());
							}
						} else {
							str.print(", NULL");
						}
					}
					var = false;
				}
				str.print(");\n");
			}
		}
	}
	
	public void FFunctionCallLeft.genArgument_var_CAD(PrintStream str) {
		if (hasFExp()) {
			if (!getFExp().isComposite())
				str.print("&");
			str.print(name_var_CAD());
		} else {
			str.print("NULL");
		}
	}
	
	public void FFunctionCallLeft.genArgument_der_CAD(PrintStream str) {
		if (hasFExp()) {
			if (!getFExp().isComposite())
				str.print("&");
			str.print(name_der_CAD());
		} else {
			str.print("NULL");
		}
	}
	
	public void FExp.genArgument_var_CAD(Printer p, PrintStream str, String indent) {
		if (isComposite() && !keepAsArray()){
			str.print(tempName_var_CAD());
		} else{
			try {
				FIdUseExp e = (FIdUseExp)this;
				str.print(e.adVarName());
			} catch (java.lang.ClassCastException e) {
				this.prettyPrint_C(p, str, indent);
			}
		}
	}
	
	public void FExp.genArgument_der_CAD(Printer p, PrintStream str, String indent) {
		if (isComposite() && !keepAsArray()){
			str.print(tempName_der_CAD());
		} else{
			try {
				FIdUseExp e = (FIdUseExp)this;
				str.print(e.adDerName());
			} catch (java.lang.ClassCastException e) {
				this.prettyPrint_C(p, str, indent);
			}
		}
	}
	
	public void FFunctionCallLeft.genWriteBack_CAD(PrintStream str, String indent) {
		if (hasFExp()) 
			getFExp().type().genWriteBack_var_CAD(str, indent, name_var_CAD(), getFExp(), equationIndex);
			getFExp().type().genWriteBack_der_CAD(str, indent, name_der_CAD(), getFExp(), equationIndex);
	}
	
	public void FType.genWriteBack_var_CAD(PrintStream str, String indent, String name, FExp exp, int index) {
		if (isArray()) {
			String type = isRecord() ? C_ARRAY_RECORD : C_ARRAY_VALUE;
			String pre = String.format("jmi_array_%s_%d(%s, ", type, ndims(), name);
			Array arr = exp.getArray();
			for (Index i : arr.indices()) {
				String cellName = pre + i.toUnclosedString() + ")";
				genCellWriteBack_var_CAD(str, indent, cellName, arr.get(i), index++);
			}
		} else {
			genCellWriteBack_var_CAD(str, indent, name, exp, index);
		}
	}
	
	public void FType.genWriteBack_der_CAD(PrintStream str, String indent, String name, FExp exp, int index) {
		if (isArray()) {
			String type = isRecord() ? C_ARRAY_RECORD : C_ARRAY_VALUE;
			String pre = String.format("jmi_array_%s_%d(%s, ", type, ndims(), name);
			Array arr = exp.getArray();
			for (Index i : arr.indices()) {
				String cellName = pre + i.toUnclosedString() + ")";
				genCellWriteBack_der_CAD(str, indent, cellName, arr.get(i), index++);
			}
		} else {
			genCellWriteBack_der_CAD(str, indent, name, exp, index);
		}
	}
	
	public void FType.genCellWriteBack_var_CAD(PrintStream str, String indent, String name, FExp exp, int index) {
		exp.genWriteBack_var_CAD(str, indent, name, index);
	}
	
	public void FType.genCellWriteBack_der_CAD(PrintStream str, String indent, String name, FExp exp, int index) {
		exp.genWriteBack_der_CAD(str, indent, name, index);
	}
	
	public void FExp.genWriteBack_var_CAD(PrintStream str, String indent, String name, int index) {
		str.print(indent);
		str.print("(*res)[");
		str.print(index);
		str.print("] = ");
		str.print(name);
		str.print(" - (");
		str.print(adVarName());
		str.print(");\n");
	}
	
	
	public void FExp.genWriteBack_der_CAD(PrintStream str, String indent, String name, int index) {
		str.print(indent);
		str.print("(*dF)[");
		str.print(index);
		str.print("] = ");
		str.print(name);
		str.print(" - (");
		str.print(adDerName());
		str.print(");\n");
	}
	
	//Methods to handle If clauses starts here
	//This is incomplete works only for the most simple cases
	public void FIfWhenStmt.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
		for (FIfWhenClause clause : getFIfWhenClauses())
			clause.getTest().genTempVars_C(p, str, indent);
		str.print(indent);
		getFIfWhenClauses().prettyPrintWithSep(p, str, indent, indent + "} else ");
		prettyPrintElse_CAD(p, str, indent);
		str.print(indent);
		str.print("}\n");
	}
	
	protected void FIfWhenStmt.prettyPrintElse_CAD(Printer p, PrintStream str, String indent) {}
	
	protected void FIfStmt.prettyPrintElse_CAD(Printer p, PrintStream str, String indent) {
		if (getNumElseStmt() > 0) {
			str.print(indent);
			str.print("} else {\n");
			p.print(getElseStmts(), str, p.indent(indent));
		}
	}
	
	public void FIfWhenClause.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
		str.print("if (");
		p.print(getTest(), str, indent);
		str.print(") {\n");
		p.print(getFStatements(), str, p.indent(indent));
	}
	
	
	//Methods to handle while loops starts here
	//This is incomplete and works only for the most simple cases
	public void FWhileStmt.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
		getTest().genTempVars_C(p, str, indent);
		str.print(indent);
		str.print("while (");
		getTest().prettyPrint_CAD(p,str,indent);
		str.print(") {\n");
		p.print(getWhileStmts(), str, p.indent(indent));
		str.print("}\n");		
	}
	
	public void FRelExp.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
		if (inNoEventExp()) {
			str.print(macro_C()+"(");
			str.print(getLeft().adVarName());
			str.print(", ");
			str.print(getRight().adVarName());
			str.print(relIsInverted_C() ? ", JMI_FALSE, JMI_TRUE)" : ", JMI_TRUE, JMI_FALSE)");
		} else {
			if (inEquationSection()) {
				str.print("_sw");
				str.print("(" + relExpInEquationsIndex() + ")");
			} else {
				str.print("_sw_init");
				str.print("(" + relExpInInitialEquationsIndex() + ")");
			}
		}
	}
	
	//Methods to handle for-loops in functions starts here
	//This is incomplete and works only for the most simple cases
	public void FForStmt.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
		getIndex().genTempVars_C(p, str, indent);
		getIndex().printForArrayDecl_CAD(p, str, indent);
		str.print(indent);
		str.print("for (");
		p.print(getIndex(), str, indent);
		str.print(") {\n");
		getIndex().printForArrayNext_C(p, str, p.indent(indent));
		p.print(getForStmts(), str, p.indent(indent));
		str.print(indent);		
		str.print("}\n");		
	}
	
	public void FForIndex.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
		if (hasFExp()) 
			getFExp().printForIndex_CAD(p, str, indent, getFVariable().name_C());
	}
	
	// TODO: Declare in genVarDecls_CAD instead
	public void FForIndex.printForArrayDecl_CAD(Printer p, PrintStream str, String indent) {
		if (needsForArray()) {
			str.print(indent);
			str.print(getFVariable().name_C());
			str.print("a[] = { ");
			getFExp().getArray().getFExps().prettyPrintWithSep(p, str, indent, ", ");
			str.print(" };\n");
		}
	}
	
	// TODO: Declare in genVarDecls_CAD instead
	public void FForIndex.printForArrayNext_CAD(Printer p, PrintStream str, String indent) {
		if (needsForArray()) {
			String name = getFVariable().name_C();
			str.print(indent);
			str.print(name);
			str.print(" = ");
			str.print(name);
			str.print("a[");
			str.print(name);
			str.print("i];\n");
		}
	}
	
	public void FRangeExp.printForIndex_CAD(Printer p, PrintStream str, String indent, String name) {
		str.print(name);
		str.print(" = ");
		getFExp(0).prettyPrint_C(p,str,indent);
		str.print("; ");
		str.print(name);
		str.print(" <= ");
		getFExp(hasStep() ? 2 : 1).prettyPrint_C(p,str,indent);
		str.print("; ");
		str.print(name);
		str.print(" += ");
		if (hasStep()) 
			getFExp(1).prettyPrint_C(p,str,indent);
		else
			str.print("1");
	}
	
	public void FExp.printForIndex_CAD(Printer p, PrintStream str, String indent, String name) {
		str.print("int ");
		str.print(name);
		str.print("i = 0; ");
		str.print(name);
		str.print("i < ");
		str.print(size().numElements());
		str.print("; ");
		str.print(name);
		str.print("i++");
	}
	
	//Methods to handle functions starts here.
	public void FReturnStmt.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
		str.print("\n");
	}
	
	public void FAlgorithmBlock.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
		p.print(getFStatements(), str, indent);
	}
	
	public void FAssignStmt.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
		genTempVars_C(p, str, indent);
		p.print(getRight(), str, indent); 
		
		str.print(getLeft().toString_var_CAD(p));
		str.print(" = ");
		str.print(getRight().adVarName());
		str.print(";\n");
		
		str.print(getLeft().toString_der_CAD(p));
		str.print(" = ");
		str.print(getRight().adDerName());
		str.print(";\n");
	}
	
	public void FFunctionDecl.genHeader_CAD(PrintStream str, String indent) {
		prettyPrintHead_CAD(printer_C, str, indent, "void", "der_AD", true);
		str.print(";\n");
	}
	
	public void FFunctionDecl.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
		String next = p.indent(indent);
		// Print definition
		prettyPrintHead_CAD(p, str, indent, "void", "der_AD", true);
		str.print(" {\n");
		str.print(next + "JMI_DYNAMIC_INIT()\n");
		genVarDecls_CAD(p, str, p.indent(indent));
		for (FFunctionVariable ffv : myNonInputs())
			p.print(ffv, str, indent);
		for (FFunctionVariable ffv : myOutputs())
			ffv.printNullOutputReplacement_CAD(p, str, next);
    	p.print(getFAlgorithmBlock(), str, next);
    	str.print(indent);
    	returnDefinition().printReturnWrite_CAD(str, indent);
		// TODO: Check if there are any dynamic declarations first
		str.print(indent + "JMI_DYNAMIC_FREE()\n");
		str.print(indent + "return;\n");
    	str.print("}\n\n");
	}
	
	public void FFunctionArray.prettyPrint_CAD(Printer p, PrintStream str, String indent) {
		if (!isOutput()) {
			printDeclOrInit_C(p, str, indent, name_var_CAD(), false);
			printDeclOrInit_C(p, str, indent, name_der_CAD(), false);
		}
	}
	
	public void FFunctionVariable.printNullOutputReplacement_CAD(Printer p, PrintStream str, String indent) {
		if (isComposite()) {
			String name_var_CAD = name_var_CAD();
			String name_var_r = name_var_CAD + C_SUFFIX_NULL;
			String next = p.indent(indent);
			str.print(indent + "if (" + name_var_CAD + " == NULL) {\n");
			printDeclOrInit_C(p, str, next, name_var_r, false);
			str.print(next + name_var_CAD + " = " + name_var_r + ";\n");
			str.print(indent + "}\n");
			
			String name_der_CAD = name_der_CAD();
			String name_der_r = name_der_CAD + C_SUFFIX_NULL;
			str.print(indent + "if (" + name_der_CAD + " == NULL) {\n");
			printDeclOrInit_C(p, str, next, name_der_r, false);
			str.print(next + name_der_CAD + " = " + name_der_r + ";\n");
			str.print(indent + "}\n");
		}
	}
	
	
	//Return from functions
	
	public void FunctionReturnDefinition.printReturnWrite_CAD(PrintStream str, String indent) {
		for (FFunctionVariable v : outputs) 
			v.printReturnWrite_CAD(str, indent);
	}
	
	public void FFunctionVariable.printReturnWrite_CAD(PrintStream str, String indent) {
		if (!isRecord()) {
			str.print(indent);
			str.print("if (");
			str.print(nameReturn_var_CAD());
			str.print(" != NULL) *");
			str.print(nameReturn_var_CAD());
			str.print(" = ");
			str.print(name_var_CAD());
			str.print(";\n");
			str.print(indent);
			str.print("if (");
			str.print(nameReturn_der_CAD());
			str.print(" != NULL) *");
			str.print(nameReturn_der_CAD());
			str.print(" = ");
			str.print(name_der_CAD());
			str.print(";\n");
		}
	}
	
	public void FFunctionArray.printReturnWrite_CAD(PrintStream str, String indent) {}
	
	//end returns from functions
	
	//Function declarations and headers
	private void FFunctionDecl.prettyPrintHead_CAD(Printer p, PrintStream str, String indent, 
			String type, String suffix, boolean returnArgs) {
		str.print(indent);
		str.print(type);
		str.print(" ");
		str.print(getFQName().funcNameUnderscore(suffix));
		str.print("(");
		String sep = "";
		for (FFunctionVariable v : myInputs()) {
			str.print(sep);
			v.printArgument_var_CAD(str);
			sep = ", ";
		}
		for (FFunctionVariable v : myInputs()) {
			str.print(sep);
			v.printArgument_der_CAD(str);
			sep = ", ";
		}
		if (returnArgs) {
			for (FFunctionVariable v : myOutputs()) {
				str.print(sep);
				v.printReturnArgument_var_CAD(str);
				sep = ", ";
			}
		}
		if (returnArgs) {
			for (FFunctionVariable v : myOutputs()) {
				str.print(sep);
				v.printReturnArgument_der_CAD(str);
				sep = ", ";
			}
		}
		str.print(")");
	}
	
	public void FFunctionVariable.printArgument_var_CAD(PrintStream str) {
		str.print(type_C());
		str.print(" ");
		str.print(name_var_CAD());
	}
	
	public void FFunctionVariable.printArgument_der_CAD(PrintStream str) {
		str.print(type_C());
		str.print(" ");
		str.print(name_der_CAD());
	}
	
	public void FFunctionVariable.printReturnArgument_var_CAD(PrintStream str) {
		str.print(typeReturn_C());
		str.print(" ");
		str.print(nameReturn_var_CAD());
	}
	
	public void FFunctionVariable.printReturnArgument_der_CAD(PrintStream str) {
		str.print(typeReturn_C());
		str.print(" ");
		str.print(nameReturn_der_CAD());
	}
	
	syn lazy String AbstractFVariable.name_var_CAD() = name_C();
	syn lazy String AbstractFVariable.name_der_CAD() = "0";
	
	eq FFunctionVariable.name_var_CAD() = nameUnderscore() + "_var_" + C_SUFFIX_VARIABLE;
	eq FFunctionArray.name_var_CAD()    = nameUnderscore() + "_var_" + C_SUFFIX_ARRAY;
	eq FFunctionVariable.name_der_CAD() = nameUnderscore() + "_der_" + C_SUFFIX_VARIABLE;
	eq FFunctionArray.name_der_CAD()    = nameUnderscore() + "_der_" + C_SUFFIX_ARRAY;
	
	syn String FFunctionVariable.nameReturn_var_CAD() = 
		isRecord() ? name_var_CAD() : (getFQName().nameUnderscore() + "_var_" + C_SUFFIX_RETURN);
	syn String FFunctionArray.nameReturn_var_CAD()    = name_var_CAD();
	
	syn String FFunctionVariable.nameReturn_der_CAD() = 
		isRecord() ? name_der_CAD() : (getFQName().nameUnderscore() + "_der_" + C_SUFFIX_RETURN);
	syn String FFunctionArray.nameReturn_der_CAD()    = name_der_CAD();
	
	//end functions
	
	private int FClass.adIndex = 0;
	
	//Assign a unique AD-index for each node that is printed
	public int FClass.nextADIndex() {
		return adIndex++;
	}
	
	
	syn lazy int FExp.adIndex() = myFClass().nextADIndex();
	
	syn String FExp.adVarName() = "v_" + adIndex();
	
	syn String FExp.adDerName() = "d_" + adIndex();
	
	//Use prettyPrint_C for literals
	syn String FLitExp.adVarName() = this.prettyPrint_C("");
	
	//The derivative of a constant or literal is 0
	syn String FLitExp.adDerName() = "AD_WRAP_LITERAL(0)";
	
	//Different vector name depending on ODE or DAE
	syn String FExp.getSeedName() = "(*dz)";
	
}