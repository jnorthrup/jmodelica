/*
Copyright (C) 2009 Modelon AB

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/** \file CGenerator.java
*  \brief CGenerator class.
*/

import java.io.*;

public class CADGenerator extends CGenerator {

	/**
	 * Constructor.
	 * 
	 * @param expPrinter Printer object used to generate code for expressions.
	 * @param escapeCharacter Escape characters used to decode tags.
	 * @param fclass An FClass object used as a basis for the code generation.
	 */
	public CADGenerator(Printer expPrinter, char escapeCharacter,
			FClass fclass) {
		super(expPrinter, escapeCharacter, fclass);
	}

	class DAETag_C_equationResidualDirectionalDerivative extends DAETag {
		
		public DAETag_C_equationResidualDirectionalDerivative(AbstractGenerator myGenerator, 
		  FClass fclass) {
			super("C_DAE_equation_directional_derivative","C: equation residuals",
			  myGenerator,fclass);
		}
	
		public void generate(PrintStream genPrinter) {
			if (fclass.root().options.getBooleanOption("generate_dae_jacobian")) {
				int i=0;
				for (FAbstractEquation e : fclass.equations()) {
					e.genResidual_CAD(i,INDENT,genPrinter);				
					i += e.numScalarEquations();
				}
			}
		}	
	}
	
	/**
	 * Generates CAD headers for Modelica functions.
	 */
	class DAETag_CAD_function_headers extends DAETag {
		
		public DAETag_CAD_function_headers(AbstractGenerator myGenerator, FClass fclass) {
			super("CAD_function_headers","C: CAD function headers representing Modelica functions",
			  myGenerator,fclass);
		}

		public void generate(PrintStream genPrinter) {
			if (fclass.root().options.getBooleanOption("generate_dae_jacobian")){
				for (FFunctionDecl func : fclass.getFFunctionDecls()){
					func.genHeader_CAD(genPrinter, "");
				}
			}
		}
	}
	
	/**
	 * Generates definitions for Modelica functions.
	 */
	class DAETag_CAD_functions extends DAETag {
		
		public DAETag_CAD_functions(AbstractGenerator myGenerator, FClass fclass) {
			super("CAD_functions","C: CAD functions representing Modelica functions",
			  myGenerator,fclass);
		}

		public void generate(PrintStream genPrinter) {
			if (fclass.root().options.getBooleanOption("generate_dae_jacobian")){
				for (FFunctionDecl func : fclass.getFFunctionDecls()){
					func.prettyPrint_CAD(genPrinter, "");
				}
			}
		}
	}
	
	/**
	 * Generates AD-code for BLT blocks
	 */
	class DAETag_CAD_dae_blocks_residual_functions extends DAETag {
		
		public DAETag_CAD_dae_blocks_residual_functions(AbstractGenerator myGenerator, FClass fclass) {
			super("CAD_dae_blocks_residual_functions","C: CAD functions for the DAE BLT block jacobians",
			  myGenerator,fclass);
		}

		public void generate(PrintStream genPrinter) {
			if (fclass.root().options.getBooleanOption("generate_ode_jacobian")) {
				int block_counter = 0;
				for (AbstractEquationBlock block : fclass.getDAEStructuredBLT().getAllBlocks()) {
				 	block.genBlockResidualFunction_CAD(block_counter,false,"  ",genPrinter); 
				  	if (!block.isSolvable()) {
				  		block_counter++;
				  	}				  
				}
			}
		}
	}
	
	/**
	 * Generates AD-code for BLT blocks (DAE initialization system)
	 */
	class DAETag_CAD_dae_init_blocks_residual_functions extends DAETag {
		
		public DAETag_CAD_dae_init_blocks_residual_functions(AbstractGenerator myGenerator, FClass fclass) {
			super("CAD_dae_init_blocks_residual_functions","C: CAD functions for the DAE BLT block jacobians",
			  myGenerator,fclass);
		}

		public void generate(PrintStream genPrinter) {
			if (fclass.root().options.getBooleanOption("generate_ode_jacobian")) {
				int block_counter = 0;
				for (AbstractEquationBlock block : fclass.getDAEInitBLT()) {
					block.genBlockResidualFunction_CAD(block_counter,true,"  ",genPrinter); 
				  	if (!block.isSolvable()) {
				  		block_counter++;
				  	}
				}
				
			}
		}
	}
	
	/**
	 * Generates code for adding BLT AD-blocks 
	 */
	class DAETag_CAD_dae_add_blocks_residual_functions extends DAETag {
		
		public DAETag_CAD_dae_add_blocks_residual_functions(AbstractGenerator myGenerator, FClass fclass) {
			super("CAD_dae_add_blocks_residual_functions","C: Add the DAE AD-block functions to the JMI struct",
			  myGenerator,fclass);
		}

		public void generate(PrintStream genPrinter) {
			if (fclass.root().options.getBooleanOption("generate_ode_jacobian")) {
			
				int block_counter = 0;
				for (AbstractEquationBlock block : fclass.getDAEStructuredBLT().getAllBlocks()) {
				    if (!block.isSolvable()) {
						genPrinter.print(" jmi_dae_add_equation_block(*jmi,dae_block_" + 
							block_counter + "," + "dae_block_dir_der_" + block_counter + ","+ block.activeVariables().size() + "," + 
							block_counter + " );\n");
						block_counter++;
					}
				}
			}
		}
	}
	
	/**
	 * Generates code for adding BLT AD-blocks 
	 */
	class DAETag_CAD_dae_init_add_blocks_residual_functions extends DAETag {
		
		public DAETag_CAD_dae_init_add_blocks_residual_functions(AbstractGenerator myGenerator, FClass fclass) {
			super("CAD_dae_init_add_blocks_residual_functions","C: Add the DAE initialization AD-block functions to the JMI struct",
			  myGenerator,fclass);
		}

		public void generate(PrintStream genPrinter) {
			if (fclass.root().options.getBooleanOption("generate_ode_jacobian")) {
				int block_counter = 0;
				for (AbstractEquationBlock block : fclass.getDAEInitBLT()) {
				    if (!block.isSolvable()) {
						genPrinter.print(" jmi_dae_init_add_equation_block(*jmi,dae_init_block_" + 
							block_counter + "," + "dae_init_block_dir_der_" + block_counter + "," + block.activeVariables().size() + "," + 
							block_counter + ");\n");
						block_counter++;
					}
				}
			}
		}
	}
	
	/**
	 * Generates code for solving the BLT blocks using CAD
	 */
	class DAETag_CAD_ode_derivatives extends DAETag {
		
		public DAETag_CAD_ode_derivatives(AbstractGenerator myGenerator, FClass fclass) {
			super("CAD_ode_derivatives","C: Compute derivatives of the ODE",
			  myGenerator,fclass);
		}

		public void generate(PrintStream genPrinter) {
			if (fclass.root().options.getBooleanOption("generate_ode_jacobian")) {
				genPrinter.print("  jmi_real_t** dz = jmi->dv;\n");
				genPrinter.print("  jmi_real_t** dv = jmi->dv;\n");
				fclass.getDAEStructuredBLT().genOdeDerivativeBlocks_CAD(genPrinter);
			}
		}
	}

	/**
	 * Generates code for solving the BLT blocks in the initialization system using CAD
	 */
	class DAETag_CAD_ode_initialization extends DAETag {
		
		public DAETag_CAD_ode_initialization(AbstractGenerator myGenerator, FClass fclass) {
			super("CAD_ode_initialization","C: Solve the initialization system",
			  myGenerator,fclass);
		}

		public void generate(PrintStream genPrinter) {
			if (fclass.root().options.getBooleanOption("generate_ode_jacobian")) {
				//genPrinter.print(INDENT + "model_ode_guards(jmi);\n");
				genPrinter.print("  jmi_real_t** dz = jmi->dv;\n");
				genPrinter.print("  jmi_real_t** dv = jmi->dv;\n");
				//genPrinter.print("  memcpy((*dz), (*dv), (jmi->n_v)*sizeof(jmi_real_t));\n");			
				int block_counter = 0;
				for (AbstractEquationBlock block : fclass.getDAEInitBLT()) {
					block.genBlock_CAD(block_counter,true,"  ",genPrinter);                                        
                    if (!block.isSolvable()) {
						block_counter++;
                    }
				}
			}
		}
	}
	
	class DAETag_C_equationSparsity extends DAETag {
		
		public DAETag_C_equationSparsity(AbstractGenerator myGenerator, 
		  FClass fclass) {
			super("C_DAE_equation_sparsity","C: DAE equation sparsity",
			  myGenerator,fclass);
		}
	
		public void generate(PrintStream genPrinter) {
			if (fclass.root().options.getBooleanOption("generate_dae_jacobian")) {
			    
			    int dae_n_nz = fclass.freeParametersEquationSparsity_n_nz()+
			        fclass.derivativeVariablesEquationSparsity_n_nz() + 
			    	fclass.differentiatedRealVariablesEquationSparsity_n_nz() +
			    	fclass.realInputsEquationSparsity_n_nz() +
			    	fclass.algebraicRealVariablesEquationSparsity_n_nz();

				genPrinter.print("static const int CAD_dae_real_p_opt_n_nz = ");
				genPrinter.print(fclass.freeParametersEquationSparsity_n_nz());
				genPrinter.print(";\n");			     
				genPrinter.print("static const int CAD_dae_real_dx_n_nz = ");
				genPrinter.print(fclass.derivativeVariablesEquationSparsity_n_nz());
				genPrinter.print(";\n");
				genPrinter.print("static const int CAD_dae_real_x_n_nz = ");
				genPrinter.print(fclass.differentiatedRealVariablesEquationSparsity_n_nz());
				genPrinter.print(";\n");
				genPrinter.print("static const int CAD_dae_real_u_n_nz = ");
				genPrinter.print(fclass.realInputsEquationSparsity_n_nz());
				genPrinter.print(";\n");
				genPrinter.print("static const int CAD_dae_real_w_n_nz = ");
				genPrinter.print(fclass.algebraicRealVariablesEquationSparsity_n_nz());
				genPrinter.print(";\n");
			     
			    genPrinter.print("static int CAD_dae_n_nz = " + dae_n_nz + ";\n");
			     
			    ArrayList<Integer>[] sp_p_opt = fclass.freeParametersEquationSparsity();
				ArrayList<Integer>[] sp_dx = fclass.derivativeVariablesEquationSparsity();
				ArrayList<Integer>[] sp_x = fclass.differentiatedRealVariablesEquationSparsity();
				ArrayList<Integer>[] sp_u = fclass.realInputsEquationSparsity();
				ArrayList<Integer>[] sp_w = fclass.algebraicRealVariablesEquationSparsity();
				
				StringBuffer str_row = new StringBuffer();
				StringBuffer str_col = new StringBuffer();	
				
				str_row.append("static const int CAD_dae_nz_rows[" + dae_n_nz + "] = {");
				str_col.append("static const int CAD_dae_nz_cols[" + dae_n_nz + "] = {");


				int ind = 0;
				int col_offs = 0;
				for (int j=0; j<fclass.numFreeParameters(); j++) {
					for (int k=0; k<sp_p_opt[j].size(); k++) {
						str_row.append(sp_p_opt[j].get(k).intValue());
						str_col.append(j + col_offs);
						if (ind<dae_n_nz-1) {
							str_row.append(",");
							str_col.append(",");
						}
						ind ++;
					}
				}

				col_offs += fclass.numFreeParameters();
				for (int j=0; j<fclass.numDerivativeVariables(); j++) {
					for (int k=0; k<sp_dx[j].size(); k++) {
						str_row.append(sp_dx[j].get(k).intValue());
						str_col.append(j + col_offs);
						if (ind<dae_n_nz-1) {
							str_row.append(",");
							str_col.append(",");
						}
						ind ++;
					}
				}

				col_offs += fclass.numDerivativeVariables();
				for (int j=0; j<fclass.numDifferentiatedRealVariables(); j++) {
					for (int k=0; k<sp_x[j].size(); k++) {
						str_row.append(sp_x[j].get(k).intValue());
						str_col.append(j + col_offs);
						if (ind<dae_n_nz-1) {
							str_row.append(",");
							str_col.append(",");
						}
						ind ++;
					}
				}

				col_offs += fclass.numDifferentiatedRealVariables();
				for (int j=0; j<fclass.numRealInputs(); j++) {
					for (int k=0; k<sp_u[j].size(); k++) {
						str_row.append(sp_u[j].get(k).intValue());
						str_col.append(j + col_offs);
						if (ind<dae_n_nz-1) {
							str_row.append(",");
							str_col.append(",");
						}
						ind ++;
					}
				}

				col_offs += fclass.numRealInputs();
				for (int j=0; j<fclass.numAlgebraicRealVariables(); j++) {
					for (int k=0; k<sp_w[j].size(); k++) {
						str_row.append(sp_w[j].get(k).intValue());
						str_col.append(j + col_offs);
						if (ind<dae_n_nz-1) {
							str_row.append(",");
							str_col.append(",");
						}
						ind ++;
					}
				}

				str_row.append("};\n");
				str_col.append("};\n");	
				
				genPrinter.print(str_row.toString());
				genPrinter.print(str_col.toString());				
				
			} else {
			 	genPrinter.print("static int CAD_dae_n_nz = 1;\n");
				genPrinter.print("static const int CAD_dae_nz_rows[1] = {-1};\n");
				genPrinter.print("static const int CAD_dae_nz_cols[1] = {-1};\n");
			}
		}
	
	}

}

