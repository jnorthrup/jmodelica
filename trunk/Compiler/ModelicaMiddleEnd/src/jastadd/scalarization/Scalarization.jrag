/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.HashMap;
import java.util.Map;
import java.util.Collections;

aspect Scalarization {

    public abstract class Scalarizer {
        
        private List vars;
        private List clauses;
        private ForNames forNames;
        private Map<String,FExp> indexMap;
        private FTypePrefixVariability variability;
        
        public Scalarizer(List vars, List clauses, Map<String,FExp> indexMap, ForNames forNames, FTypePrefixVariability variability) {
            this.vars = vars;
            this.clauses = clauses;
            this.indexMap = indexMap;
            this.forNames = forNames;
            this.variability = variability;
        }
        
        public void add(ASTNode clause) {
            clauses.add(clause);
        }
        
        public void add(FAbstractVariable fv) {
            vars.add(fv);
        }
        
        public List getVars() {
            return vars;
        }
        
        public List getClauses() {
            return clauses;
        }
        
        public Map<String,FExp> map() {
            return indexMap;
        }
        
        public ForNames getNames() {
            return forNames;
        }
        
        public void createForLoops(List<FStatement> inner, FExp exp) {
            forNames.createForLoops(clauses, inner, exp);
        }
        
        public void createForLoops(FAssignableExp left, FExp right, FExp exp) {
            List<FStatement> l = new List<FStatement>();
            l.add(new FAssignStmt(left, right));
            createForLoops(l, exp);
        }
        
        public abstract void createScalarizedFunctionCallClause(FExp left, FFunctionCall right);
        public abstract void add(FExp left, FExp right);
        
        public void add(List v) {
            vars.addAll(v);
        }
        
        public void addTempVar(FType type, String name) {
            type.createTempFVariables(getVars(), new FQNameString(name), variability);
        }
        
        public void addTempVar(FExp source) {
            addTempVar(source.type(), source.tempVarName());
        }
        
        public abstract<T extends Scalarizer> T block(List clauses);
        public abstract<T extends Scalarizer> T block(List vars, List clauses);
        
        public FTypePrefixVariability getVariability() {
            return variability;
        }
        
        private boolean wb = false;
        public void setWriteBack(boolean wb) {
            this.wb = wb;
        }
        public boolean getWriteBack() {
            return wb;
        }
        
        public static class Variable {
            
            public Scalarizer.Equation si;
            public Scalarizer.Equation sp;
            public Scalarizer.Equation sc;
            
            public Variable(List vars, List iEqus, List pEqus, List equs) {
                si = new Scalarizer.Equation(vars, iEqus, ASTNode.fInitialParameter());
                sp = new Scalarizer.Equation(vars, pEqus, ASTNode.fFixedParameter());
                sc = new Scalarizer.Equation(vars, equs,  ASTNode.fContinuous());
            }
            
            public Scalarizer.Equation select(FTypePrefixVariability variability) {
                if (variability.fixedParameterOrLess()) {
                    return sp;
                } else if (variability.parameterOrLess()) {
                    return si;
                } else {
                    return sc;
                }
            }
        }
        
        public static class Equation extends Scalarizer {
            
            public Equation(List vars, List equs, FTypePrefixVariability variability) {
                this(vars, equs, new HashMap<String,FExp>(), new ForNames(), variability);
            }
            
            public Equation(List vars, List equs, Map<String,FExp> indexMap, ForNames forNames, FTypePrefixVariability variability) {
                super(vars, equs, indexMap, forNames, variability);
            }
            
            public Scalarizer.Equation block(List clauses) {
                return block(getVars(), clauses);
            }
            
            public Scalarizer.Equation block(List vars, List clauses) {
                return new Equation(vars, clauses, map(), getNames(), getVariability());
            }
            
            public void add(FExp left, FExp right) {
				// TODO: Not 100% correct, should be equation.setLocationOf(...)
                add(left.setLocationOf(new FEquation(left, right)));
            }
            
            public void createScalarizedFunctionCallClause(FExp left, FFunctionCall right) {
                right.getArgs().createArrayTemporaries(this);
                right.useTempVar = true;
                List lefts = new List().add(new FFunctionCallLeft(new Opt(left.scalarize(this))));
                add(new FFunctionCallEquation(lefts, right.scalarizeFunction(map())));
            }
            
            @Override
            public void addTempVar(FExp source) {
                super.addTempVar(source);
                source.notifyIfWhenEquationsOfTemporaryVar();
            }
        }
        
        public Scalarizer.Algorithm algorithm(List<FStatement> stmts) {
            return new Algorithm(getVars(), stmts, map(), getNames(), false, variability);
        }
        
        public static Scalarizer.Algorithm function(List<FFunctionVariable> vars, List<FStatement> stmts) {
            return new Algorithm(vars, stmts, new HashMap<String,FExp>(), new ForNames(), true, ASTNode.fDiscrete());
        }
        
        public static class Algorithm extends Scalarizer {
            private boolean func;
            
            public Algorithm(List vars, List clauses, Map<String,FExp> indexMap, ForNames forNames, boolean func, FTypePrefixVariability variability) {
                super(vars, clauses, indexMap, forNames, variability);
                this.func = func;
            }
            
            public Scalarizer.Algorithm block(List clauses) {
                return block(getVars(), clauses);
            }
            
            public Scalarizer.Algorithm block(List vars, List clauses) {
                return new Algorithm(vars, clauses, map(), getNames(), func, getVariability());
            }
            
            public void add(FExp left, FExp right) {
                add(new FAssignStmt((FAssignableExp)left, right));
            }
            
            public void createScalarizedFunctionCallClause(FExp left, FFunctionCall right) {
                right.getArgs().createArrayTemporaries(this);
                right.useTempVar = true;
                List lefts = new List().add(new FFunctionCallLeft(new Opt(left.scalarize(this))));
                add(new FFunctionCallStmt(lefts, right.scalarizeFunction(map())));
            }
            
            @Override
            public void addTempVar(FType type, String name) {
                if (!getWriteBack()) {
                    if (func) {
                        type = type.treeCopy();
                        FFunctionVariable v = type.isArray() ?
                                new FFunctionArray(type, name) :
                                new FFunctionVariable(type, name);
                        if (type.isArray()) {
                            FInitArrayStmt stmt = new FInitArrayStmt(new FIdUseExp(name));
                            add(stmt);
                            type.scalarizeInitArray(this, stmt);
                        }
                        add(v);
                    } else {
                        super.addTempVar(type, name);
                    }
                }
            }
            
            public void addTempVar(FAssignStmt source) {
                FType type = source.getLeft().size().isUnknown() ? source.getLeft().type() : source.getRight().type();
                addTempVar(type, source.tempVarName());
            }
        }
    }
    
    syn List<FAbstractEquation> FTypePrefixVariability.selectEquations(List<FAbstractEquation> iEqus,
            List<FAbstractEquation> pEqus, List<FAbstractEquation> equs) = equs;
    eq FParameter.selectEquations(List<FAbstractEquation> iEqus,
            List<FAbstractEquation> pEqus, List<FAbstractEquation> equs) = pEqus;
    eq FInitialParameter.selectEquations(List<FAbstractEquation> iEqus,
            List<FAbstractEquation> pEqus, List<FAbstractEquation> equs) = iEqus;
    
	/**
	 * Flag indicating if a variable is scalarized.
	 */
	boolean FQName.scalarized = false;

	/**
	 * Flag indicating if a flat class is scalarized.
	 */
	boolean FClass.scalarized = false;
	
	syn boolean FVariable.isScalarized() = getFQName().isScalarized();
	syn boolean FQName.isScalarized() = scalarized;

    public class FClass {
        /**
         * Scalarize all variables and equations in the flat model.
         */
        public class scalarize extends Transformation {
            public void perform() {
                List<FVariable> vars = new List<FVariable>();
                scalarizeVars(vars);
                replaceScalarizedVars(vars);
                scalarizeFuncs();
                scalarizeTypes();
                scalarizeAttributes();
                getConnectionSetManager().scalarize();
                scalarized = true;
                scalarizationCleanup();
                scalarizationErrorCheck();
            }
        }
    }
    
    /**
     * Scalarize variable declarations and equations.
     */
    protected void FClass.scalarizeVars(List<FVariable> vars) {
        List<FAbstractEquation> iEqus = new List<FAbstractEquation>();
        List<FAbstractEquation> pEqus = new List<FAbstractEquation>();
        List<FAbstractEquation> equs = new List<FAbstractEquation>();
        
        Scalarizer.Variable sv = new Scalarizer.Variable(vars, iEqus, pEqus, equs);
        
        FAbstractEquation.scalarizeList(sv.sc, getFAbstractEquations());
        FAbstractEquation.scalarizeList(sv.si, getFInitialEquations());
        FAbstractEquation.scalarizeList(sv.sp, getFParameterEquations());
        
        for (FVariable fv : getFVariables()) {
            fv.scalarize(sv);
        }
        
        setFAbstractEquationList(equs);
        setFInitialEquationList(iEqus);
        setFParameterEquationList(pEqus);
    }
    
    protected void FClass.replaceScalarizedVars(List<FVariable> vars) {
        setFVariableList(vars);
    }
    
	protected void FClass.scalarizeFuncs() {
		for (FFunctionDecl f : getFFunctionDecls()) 
			f.scalarize();
	}
	
    /**
     * Handles scalarization of the FAttributes that are declared in the FClass
     */
    private void FClass.scalarizeAttributes() {
        List<FAttribute> attrs = new List<FAttribute>();
        for (FAttribute a : getFAttributes())
            a.scalarize(attrs, Index.NULL, Collections.<String,FExp>emptyMap());
        setFAttributeList(attrs);
    }
	
	/**
	 * Scalarize type declarations by removing array-valued attributes. 
	 * They have been copied to the variables when the variables were scalarized. 
	 */
	protected void FClass.scalarizeTypes() {
		for (FDerivedType t : getFDerivedTypes())
			t.removeArrayValuedAttributes();
	}
	
	/**
	 * Removing all array-valued attributes. 
	 */
	public void FDerivedType.removeArrayValuedAttributes() {
		List<FAttribute> list = new List<FAttribute>();
		for (FAttribute a : getFAttributes())
			if (!a.removeArrayValuedAttributes())
				list.add(a);
		setFAttributeList(list);
	}
	
	/**
	 * Removing all array-valued attributes.
	 * 
	 * @return  true if the attribute should be removed
	 */
	public boolean FAttribute.removeArrayValuedAttributes() {
		boolean keep = false;
		List<FAttribute> list = null;
		if (getNumFAttribute() > 0) {
			list = new List<FAttribute>();
			for (FAttribute a : getFAttributes())
				if (!a.removeArrayValuedAttributes())
					list.add(a);
			keep = list.getNumChild() > 0;
		}
		if (hasValue()) {
			if (getValue().isArray()) {
				if (keep)
					setValueOpt(new Opt());
			} else {
				keep = true;
			}
		}
		if (keep && list != null)
			setFAttributeList(list);
		return !keep;
	}

    protected void FClass.scalarizationCleanup() {
        flush();  // Must flush before traversing
    }
    
    public static void FAbstractEquation.scalarizeList(Scalarizer.Equation s, List<FAbstractEquation> fromList) {
        for (FAbstractEquation ae : fromList) {
            ae.scalarize(s);
        }
    }
    
    /**
     * Scalarize the FVariable and put all scalarized variables in the
     * list vars.
     */
    public void FVariable.scalarize(Scalarizer.Variable s) {
        try {
            if (size().isZero())
                return;
            createArrayTemporaries(s);
            doScalarize(s);
        } catch (ModelicaException e) {
            throw e;
        } catch (Exception e) {
            throw new org.jmodelica.util.exceptions.InternalCompilerError("Exception caught while scalarizing component'" + name() + "'", e);
        }
    }
    
    public void FVariable.doScalarize(Scalarizer.Variable s) {
        Scalarizer.Equation se = s.select(variability());
        for (Index i : indices()) {
            createScalarFVariable(se, i);
        }
    }
    
    @Override
    public void FRecordVariable.doScalarize(Scalarizer.Variable s) {
        scalarRecordFVariables(s, new ScalarizingVariableInstance(this));
    }
    
    public void FVariable.createArrayTemporaries(Scalarizer.Variable s) {
        if (hasBindingExp()) {
            getBindingExp().createArrayTemporaries(s.select(variability()));
        }
        for (FAttribute fab : getFAttributes()) {
            fab.createArrayTemporaries(s, variability(), type());
        }
    }
    
    public void FAttribute.createArrayTemporaries(Scalarizer.Variable s, FTypePrefixVariability variability, FType type) {
        type = type.componentType(name());
        if (type.isUnknown()) {
            variability = ASTNode.fParameter();
        } else {
            variability = variability.component(name());
        }
        if (hasValue()) {
            getValue().createArrayTemporaries(s.select(variability));
        }
        for (FAttribute fab : getFAttributes()) {
            fab.createArrayTemporaries(s, variability, type);
        }
    }
	
	/**
	 * Create a scalar FVariable for a single cell or an already scalar FVariable.
	 * 
	 * @param i  the Index of the cell to create an FVariable for. Should be Index.NULL for 
	 *           already scalar FVariables.
	 */
    protected FVariable FVariable.createScalarFVariable(Scalarizer.Equation s, Index i) {
		// Create new variable and copy fields that should be same
		FVariable fv = createEmptyNode();
		fv.setFVisibilityType((FVisibilityType) getFVisibilityType().fullCopy());
		fv.setFTypePrefixVariability(getFTypePrefixVariability().fullCopy());
		if (hasFTypePrefixInputOutput())
			fv.setFTypePrefixInputOutput((FTypePrefixInputOutput) getFTypePrefixInputOutput().fullCopy());
		if (hasFStringComment())
			fv.setFStringComment(getFStringComment().fullCopy());

        fv.setFQName(scalarizeVariableName(i));

        // Scalarize binding expressions
        if (hasBindingExp()) {
            FExp bexp = getBindingExp().cell(i).scalarize(s);
            if (keepBExp(variability(), getBindingExp())) {
                fv.setBindingExp(bexp);
            } else {
                s.add(setLocationOf(new FIdUseExp(scalarizeVariableUse(i))), bexp);
            }
        }

		// Iterate over all attributes and scalarize.
        List<FAttribute> attrs = new List<FAttribute>();
        attrs.addAll(fv.getFAttributes());
        for (FAttribute a : getFAttributes()) {
            a.scalarize(attrs, i, Collections.<String,FExp>emptyMap());
        }
        fv.setFAttributeList(attrs);
		fv.setDerivedType(getDerivedType());
		fv.addArrayAttributesFromType(i, myFDerivedType());

		fv.setLocation(this);
		
        s.add(fv);
        return fv;
	}

    /**
     * Create an FQName for the scalarized variable.
     * Separate method for extensibility.
     */
    protected FQName FVariable.scalarizeVariableName(Index i) {
        String name = getFQName().name();
        if (i.ndims() > 0) {
            name = name + i;
        }
        return new FQNameString(name);
    }

    /**
     * Create an FQName for the scalarized binding equation.
     * Separate method for extensibility.
     */
    protected FQName FVariable.scalarizeVariableUse(Index i) {
        return scalarizeVariableName(i);
    }

    @Override
    protected FExternalObjectVariable FExternalObjectVariable.createScalarFVariable(Scalarizer.Equation s, Index i) {
        FExternalObjectVariable fex = (FExternalObjectVariable) super.createScalarFVariable(s, i);
		fex.setConstructor(getConstructor().fullCopy());
		return fex;
	}
	
    @Override
    protected FEnumVariable FEnumVariable.createScalarFVariable(Scalarizer.Equation s, Index i) {
        FEnumVariable fv = (FEnumVariable) super.createScalarFVariable(s, i);
		fv.setEnum(getEnum().fullCopy());
		return fv;
	}
	
	/**
	 * Copy any attributes with array values from type, selecting the scalar value corresponding 
	 * to the given index. 
	 */
	protected void FVariable.addArrayAttributesFromType(Index i, FDerivedType t) {
        if (t != null && i != Index.NULL) {
            for (FAttribute a : t.getFAttributes()) {
                List<FAttribute> attrs = new List<FAttribute>();
                attrs.addAll(getFAttributes());
                a.addArrayAttributesTo(i, attrs);
                setFAttributeList(attrs);
            }
        }
	}
	
	/**
	 * Copy any attributes with array values to the given list, selecting the scalar value corresponding 
	 * to the given index. 
	 * 
	 * @return  true if any attribute was added to the list 
	 */
	protected boolean FAttribute.addArrayAttributesTo(Index i, List<FAttribute> list) {
		FAttribute match = findMatching(list, getName().name());
		if (match != null) {
			list = match.getFAttributes();
			for (FAttribute a : getFAttributes())
				a.addArrayAttributesTo(i, list);
			return false;
		}
		
		boolean isArray = hasValue() && getValue().isArray();
		boolean add = isArray;
		List<FAttribute> subList = null;
		if (add || getNumFAttribute() > 0) {
			subList = new List<FAttribute>();
			for (FAttribute a : getFAttributes())
				add = a.addArrayAttributesTo(i, subList) || add;
		}
		if (add) {
			FAttribute res = new FAttribute(getType().fullCopy(), getName().fullCopy(), new Opt(), 
					getAttributeSet(), getLevel(), getFEachOpt().fullCopy(), getFFinalOpt().fullCopy(), subList);
			if (hasValue()) {
				FExp val = getValue();
				if (isArray) {
					if (val.ndims() < i.ndims())
						i = i.subIndex(i.ndims() - val.ndims());
					val = val.getArray().get(i);
				}
				res.setValue(val.scalarize(Collections.<String,FExp>emptyMap()));
			}
			list.add(res);
		}
		return add;
	}
	
    /**
     * Generate scalar FVariables for this record or record component.
     * 
     * @param s Scalarization visitor
     * @param bes        Instance representation of this variable
     */
    public void FVariable.scalarRecordFVariables(Scalarizer.Variable s, ScalarizingVariableInstance bes) {
        try {
            for (Index i : bes.indices(this)) {
                scalarRecordCellFVariables(s, bes.create(s, i));
            }
        } catch (ModelicaException e) {
            throw e;
        } catch (Exception e) {
            throw new org.jmodelica.util.exceptions.InternalCompilerError("Exception caught while scalarizing component'" + bes.name() + "'", e);
        }
    }
    
    public String ScalarizingVariableInstance.name() {
        return name.toString();
    }
    
    /**
     * Generate scalar FVariables for a single array cell of this record or record component.
     * 
     * @param s Scalarization visitor
     * @param bes        Instance representation of this variable
     * @param i          the index of this scalar variable in an array, or Index.NULL for scalar components
     */
    public void FVariable.scalarRecordCellFVariables(Scalarizer.Variable s, ScalarizingVariableInstance bes) {
        bes.createScalarized(s, this);
    }
    
    public void FRecordVariable.scalarRecordCellFVariables(Scalarizer.Variable s, ScalarizingVariableInstance bes) {
        for (FVariable comp : myFRecordDecl().getFVariables()) {
            comp.scalarRecordFVariables(s, bes.create(s, comp));
        }
    }
    
    /**
     * Check if this FExp is in an binding exp that will still be a binding exp after scalarization 
     */
    inh boolean FExp.inKeptBExp();
    eq Root.getChild().inKeptBExp() = false;
    eq FVariable.getBindingExp().inKeptBExp() = keepBExp(variability(), getBindingExp());
    
    /**
     * Check if this FVariable should have a binding exp after scalarization
     */
    syn boolean FVariable.keepBExp(FTypePrefixVariability variability, FExp bexp) = variability.knownParameterOrLess() || isString() || (variability.parameterVariability() && bexp.isIndependentParameterExp());
    
    /**
     * Lightweight representation of an FVariable used to scalarize record variables.
     */
    public class ScalarizingVariableInstance {
        
        private FTypePrefixVariability variability; 
        
        // Binding expression
        private FExp bExp;
        
        // (Mapped) attributes of this variable
        private Map<String, FAttribute> mattrs; 
        
        // Full name of this variable
        private String name;
        
        // input/output prefix of top-level variable
        private Opt<FTypePrefixInputOutput> inputOutput;
        
        private Index index;
        
        private ScalarizingVariableInstance(String name, Map<String, FAttribute> mattrs, FExp be,
                FTypePrefixVariability variability, Opt<FTypePrefixInputOutput> inputOutput, Index i)  {
            bExp = be;
            this.name = name;
            index = i;
            this.mattrs = mattrs;
            this.variability = variability;
            this.inputOutput = inputOutput;
        }
        
        private ScalarizingVariableInstance(String name, List<FAttribute> attrs, FExp be,
                FTypePrefixVariability variability, Opt<FTypePrefixInputOutput> inputOutput, Index i)  {
            this(name, ScalarizingVariableInstance.mapped(attrs), be, variability, inputOutput, i);
        }
        
        public ScalarizingVariableInstance(FVariable fv) {
            this(fv.name(), fv.getFAttributes(),
                    fv.hasBindingExp() ? fv.getBindingExp().dynamicFExp(fv.getBindingExp().scalarize(Collections.<String,FExp>emptyMap())) : null,
                    fv.variability(), fv.getFTypePrefixInputOutputOpt(), Index.NULL);
        }
        
        private static Map<String, FAttribute> mapped(List<FAttribute> as) {
            Map<String, FAttribute> m;
            if (as != null && as.getNumChild() > 0) {
                m = new LinkedHashMap<String, FAttribute>();
                for (FAttribute a : as) {
                    m.put(a.name(), a);
                }
            } else {
                m = Collections.<String, FAttribute>emptyMap();
            }
            return m;
        }
        
        public Indices indices(FVariable comp) {
            FAttribute sa = mattrs.get(FAttribute.SIZE);
            if (sa != null && sa.hasValue()) {
                return Indices.create(new MutableSize(sa.getValue().splitArrayExp(index)));
            } else {
                return comp.indices();
            }
        }
        
        public ScalarizingVariableInstance create(Scalarizer.Variable s, Index i) {
            FExp nbexp = bExp;
            Index ti = index.expand(i);
            if (nbexp != null && nbexp.isArray()) {
                Index ni = ti.subIndex(ti.ndims() - nbexp.ndims());
                nbexp = nbexp.getArray().get(ni);
            }
            return new ScalarizingVariableInstance(i.ndims() > 0 ? name + i : name, mattrs, nbexp, variability,
                    inputOutput, ti);
        }
        
        public ScalarizingVariableInstance create(Scalarizer.Variable s, FVariable comp) {
            String cName = comp.name();
            
            FTypePrefixVariability nv = variability.component(cName);
            
            List<FAttribute> attrs = null;
            FAttribute a = mattrs.get(cName);
            if (a != null) {
                attrs = a.getFAttributes();
            }
            
            FExp nbexp = bExp;
            if (nbexp == null) {
                if (a != null) {
                    nbexp = a.getValue();
                }
                if (nbexp != null) {
                    nbexp = nbexp.dynamicFExp(nbexp.scalarize(Collections.<String,FExp>emptyMap()));
                }
            } else {
                nbexp = nbexp.component(cName);
            }
            
            return new ScalarizingVariableInstance(name + "." + cName, attrs, nbexp, nv, inputOutput, index);
        }
        
        public void createScalarized(Scalarizer.Variable s, FVariable comp) {
            Scalarizer.Equation se = s.select(variability);
            Index cell = index.subIndex(index.ndims() - comp.ndims());
            FVariable fv = comp.copyForName(name, cell);
            Map<String,FExp> im = Collections.<String,FExp>emptyMap();
            if (bExp != null) {
                if (comp.keepBExp(variability, bExp)) {
                    fv.setBindingExp(bExp);
                } else {
                    se.add(new FIdUseExp(name), bExp);
                    fv.setBindingExpOpt(new Opt());
                }
            } else {
                fv.setBindingExpOpt(new Opt());
            }
            fv.setFTypePrefixVariability(variability);
            fv.setFTypePrefixInputOutputOpt(inputOutput.treeCopy());
            List<FAttribute> attrs = new List<FAttribute>();
            for (FAttribute attr : mattrs.values()) {
                attr.scalarize(attrs, index, Collections.<String,FExp>emptyMap());
            }
            fv.setFAttributeList(attrs);
            fv.addArrayAttributesFromType(cell, comp.myFDerivedType());
            se.add(fv);
        }
    }
    
	/**
	 * Create a copy of the variable with a specific name.
	 * 
	 * The new variable is marked as scalarized, and if it refers to a specific cell in an array, 
	 * then attributes are updated accordingly.
	 */
    public FVariable FVariable.copyForName(String name, Index cell) {
		FVariable fv = createEmptyNode();
        fv.setFQName(new FQNameString(name));
		fv.getFQName().scalarized = true;
		fv.setFVisibilityType(getFVisibilityType().fullCopy());
		fv.setFTypePrefixVariability(getFTypePrefixVariability().fullCopy());
		if (hasFTypePrefixInputOutput())
			fv.setFTypePrefixInputOutput(getFTypePrefixInputOutput().fullCopy());
		fv.setDerivedType(getDerivedType());
		if (hasBindingExp())
			fv.setBindingExp(getBindingExp().fullCopy());
		if (hasFStringComment())
			fv.setFStringComment(getFStringComment().fullCopy());
		
		for (FAttribute a : getFAttributes())
			if (!a.isInternal())
                fv.addFAttribute(a.copyForCell(cell));
		return fv;
	}

    public FEnumVariable FEnumVariable.copyForName(String name, Index cell) {
        FEnumVariable fv = (FEnumVariable) super.copyForName(name, cell);
		fv.setEnum(getEnum().fullCopy());
		return fv;
	}
    
    public FExternalObjectVariable FExternalObjectVariable.copyForName(String name, Index cell) {
        FExternalObjectVariable fv = (FExternalObjectVariable) super.copyForName(name, cell);
        fv.setConstructor(getConstructor().fullCopy());
        return fv;
    }
    
	/**
	 * Create a copy of the attibute with dimensions removed from all array expressions according 
	 * to an index.
	 */
	public FAttribute FAttribute.copyForCell(Index i) {
        if (i == Index.NULL)
			return fullCopy();
		FAttribute res = createEmptyNode();
		res.setType(getType().fullCopy());
		res.setName(getName().fullCopy());
        res.setLevel(getLevel());
		if (hasValue()) {
			FExp val = getValue();
			if (val.ndims() < i.ndims() || isInternal())
				val = val.scalarize(Collections.<String,FExp>emptyMap());
			else
				val = val.dynamicFExp(val.splitArrayExp(i).unboundCopy()).scalarize(Collections.<String,FExp>emptyMap());
			res.setValue(val);
		}
		res.setAttributeSet(getAttributeSet());
		if (hasFEach())
			res.setFEach(getFEach().fullCopy());
		if (hasFFinal())
			res.setFFinal(getFFinal().fullCopy());
		for (FAttribute a : getFAttributes())
			res.addFAttribute(a.copyForCell(i));
		return res;
	}
	
    public void FAttribute.scalarize(List<FAttribute> attrs, Index i, Map<String,FExp> indexMap) {
        if (!name().equals(FAttribute.SIZE)) {
            scalarizeInternal(attrs, i, indexMap);
        }
    }
    /**
     * Scalarize the attribute, picking out the specific element from an array 
     *        expression or removing "each".
     */
    public FAttribute FAttribute.scalarizeInternal(List<FAttribute> attrs, Index i, Map<String,FExp> indexMap) {
        FAttribute attr = createEmptyNode();
        List<FAttribute> l = new List<FAttribute>();
        for (FAttribute a : getFAttributes()) {
            a.scalarize(l, i, indexMap);
        }
        attr.setFAttributeList(l);
        attr.setType(getType().fullCopy());
        attr.setName(getName().fullCopy());
        attr.setAttributeSet(getAttributeSet());
        attr.setLevel(getLevel());
        attr.setFFinalOpt(getFFinalOpt().fullCopy());
        if (hasValue()) 
            attr.setValue(scalarizeValue(i, indexMap));
        attrs.add(attr);
        return attr;
    }
	
    @Override
    public void FAnnotationAttribute.scalarize(List<FAttribute> attrs, Index i, Map<String,FExp> indexMap) {
        if (i.ndims() == 0)
            scalarize(attrs, indexMap);
        else
            scalarizeInternal(attrs, i, indexMap);
    }
    /**
     * Scalarize the attribute and create multiple instances for non-scalar
     * attributes.
     * An attribute is scalarized if it has no value and all its child
     * attributes have value and are of the same size.
     */
    public void FAttribute.scalarize(List<FAttribute> attrs, Map<String,FExp> indexMap) {
        if (hasValue()) {
            scalarizeInternal(attrs, Index.NULL, indexMap);
        } else {
            Size size = null;
            boolean keepScalar = false;
            for (FAttribute attr : getFAttributes()) {
                if (!attr.hasValue())
                    keepScalar = true;
                else if (size == null)
                    size = attr.getValue().size();
                else if (!attr.hasFEach() && !attr.getValue().size().equals(size))
                    keepScalar = true;
            }
            if (size == null || keepScalar)
                size = Size.SCALAR;
            for (Index i : Indices.create(size)) {
                scalarizeInternal(attrs, i, indexMap);
            }
        }
    }

    /**
     * Scalarize the value of this attribute, picking out the specific element from an array 
     * expression.
     * 
     * Returns null if attribute has no value.
     */
    public FExp FAttribute.scalarizeValue(Index i, Map<String,FExp> indexMap) {
        if (!hasValue()) 
            return null;
        if (i.ndims() > getValue().ndims()) {
            i = i.subIndex(i.ndims() - getValue().ndims());
        }
        return getValue().cell(i).scalarize(indexMap);
    }
    
    syn FExp FIdTempExp.scalarize(Map<String,FExp> indexMap) =
            indexNames == null ? fullCopy() : createUseFas(name());
    
    /*
     * Attributes for creating FTempIdExps and function temps.
     */
    syn FIdTempExp FExp.tempExp() = tempExp(indexNames);
    syn FIdTempExp FExp.tempExp(String name) = new FIdTempExp(new FIdUse(tempFQName(name)));
    syn FIdTempExp FExp.tempExp(FArraySubscripts fas) = new FIdTempExp(new FIdUse(tempVarName(),fas));
    syn FIdTempExp FExp.tempExp(FExp[] subs) {
        if (subs != null && subs.length > 0) {
            List<FSubscript> l = new List<FSubscript>();
            for (FExp e : subs) {
                l.add(new FExpSubscript(e.fullCopy()));
            }
            FArraySubscripts fas = new FArraySubscripts(l);
            return tempExp(fas);
        } else {
            return tempExp(tempVarName());
        }
    }
    
    public FQName FExp.tempFQName(String name) {
        FQName fqn = new FQNameString(name);
        if (expandWithIterExp())
            fqn = fqn.copyAndAddFas(collectIterExpSubscripts());
        return fqn;
    }
    
    /**
     * Check if this expression, when generating temporary uses and variables,
     * should consider any surrounding FIterExp indices. 
     */
    syn boolean FExp.expandWithIterExp() = false;
    inh boolean FFunctionCall.expandWithIterExp();
    inh boolean FIterExp.expandWithIterExp();
    eq Root.getChild().expandWithIterExp()       = false;
    eq FStatement.getChild().expandWithIterExp() = false;
    eq FEquation.getChild().expandWithIterExp()  = false;
    eq FIterExp.getFExp().expandWithIterExp()    = !size().isUnknown() || expandWithIterExp();
    
    /**
     * Stores FSubscripts to be uses by <code>scalarize()</code>
     */
    public FExp[] FExp.indexNames = null;
    public FExp FColonSubscript.indexName = null;
    
    public FIdUseExp FIdUseExp.createUseFas(String name) {
        if (indexNames != null && indexNames.length > 0) {
            return new FIdUseExp(name, createIndexNameFas());
        } else {
            return new FIdUseExp(name);
        }
    }
    
    public FArraySubscripts FIdUseExp.createIndexNameFas() {
        List<FSubscript> l = new List<FSubscript>();
        for (FExp e : indexNames) {
            l.add(new FExpSubscript(e.fullCopy()));
        }
        return new FArraySubscripts(l);
    }
    
    public List<FAttribute> FAbstractEquation.scalarizeAttributeList(Index i, Map<String,FExp> indexMap) {
        List<FAttribute> scalarized = new List<FAttribute>();
        for (FAttribute a : getFAttributes()) 
            a.scalarize(scalarized, i, indexMap);
        return scalarized;
    }
	
    public void FAbstractEquation.scalarize(Scalarizer.Equation s) {}
	
	/**
	 * Scalarize equation and put all resulting equations in list eqns.
	 */
    @Override
    public void FEquation.scalarize(Scalarizer.Equation s) {
		//log.debug("FEquation.scalarize() " + ndims());
        if (size().isZero())
            return;
        
        createArrayTemporaries(s);
		if (ndims()==0) {
			/*
			 * If the equation is of dimension 0, i.e, already scalar,
			 * the equations is "scalarized" into a simple equation where
			 * e.g. built in functions are replaced by elementary operations.
			 */
			
            List<FAttribute> attrs = scalarizeAttributeList(Index.NULL, s.map());
            createScalarFEquations(s, attrs, getLeft(), getRight());
		} else if (ndims() > 0) {
			/*
			 * If the expression is an array expression, then the FExp.getArray()
			 * element is used to generate scalar equations.
			 */
			// Iterate over array elements and create scalarized equation for each
			for (Index i : indices()) {
                List<FAttribute> attrs = scalarizeAttributeList(i, s.map());
                createScalarFEquations(s, attrs, getLeft().getArray().get(i), getRight().getArray().get(i));
			}
		} else {
			throw new UnsupportedOperationException("Bad equation: ndims() for equation '" + 
					this + "' returned " + ndims()); 
		}
	}
	
    @Override
    public void FAlgorithm.scalarize(Scalarizer.Equation s) {
		List<FStatement> stmts = new List<FStatement>();
        FStatement.scalarizeStmtList(s.algorithm(stmts), getFStatements());
        s.add(new FAlgorithm(stmts));
	}
	
	/**
	 * Scalarize left and right expressions and create new scalar equations.
	 */
    public void FEquation.createScalarFEquations(Scalarizer.Equation s, List<FAttribute> attrs, FExp left, FExp right) {
        if (left.inferType().isRecord()) {
            left.inferType().scalarRecordClauses(s, new FQNameEmpty(), left, right);
        } else {
            s.add(this.setLocationOf(new FEquation(attrs, left.scalarize(s), right.scalarize(s))));
        }
	}
	
	// TODO: Introduce parameter object?
	/**
	 * Generate scalar clauses for this record or record component.
	 * 
     * @param s         Scalarization visitor
	 * @param suffix    add this as a suffix to the name of the uppermost record in uses
	 * @param left      the left expression from the original equation
	 * @param right     the right expression from the original equation
	 */
    public void FType.scalarRecordClauses(Scalarizer s, FQName suffix, FExp left, FExp right) {
        left = left.scalarRecordFExp(s.map(), suffix);
        right = right.scalarRecordFExp(s.map(), suffix);
        s.add(left, right);
    }
    
    @Override
    public void FRecordType.scalarRecordClauses(Scalarizer s, FQName suffix, FExp left, FExp right) {
        for (FRecordComponentType comp : getComponents()) {
            FQName next = suffix.copyAndAppend(comp.getName()).asFQNameFull();
            comp.getFType().scalarRecordComponentClauses(s, next, left, right);
        }
    }
    
	/**
	 * Generate scalar clauses for this record component.
	 * 
     * @param s         Scalarization visitor
	 * @param suffix    add this as a suffix to the name of the uppermost record in uses
	 * @param left      the left expression from the original equation
	 * @param right     the right expression from the original equation
	 */
    public void FType.scalarRecordComponentClauses(Scalarizer s, FQName suffix, FExp left, FExp right) {
		if (isArray()) {
			FQNameFull fullSuffix = suffix.copyAsFQNameFull();
			Indices ind = null;
            if (!size().isUnknown())
				ind = indices(); 
			else  // TODO: This is calculated each time - introduce some kind of lazy attribute?
                ind = left.dynamicFExp(left.scalarRecordFExp(s.map(), suffix)).indices();
			for (Index i : ind) {
				fullSuffix.addFArraySubscripts(i.createFArraySubscripts());
                scalarRecordClauses(s, fullSuffix, left, right);
			}
		} else {
            scalarRecordClauses(s, suffix, left, right);
		}
	}
	
	/**
	 * Create an FExp that represents a specific scalar component of this record.
	 * 
	 * @param indexMap  translations for indices in the expressions
	 * @param suffix    the suffix to add to a use of the record to access the specific component
	 */
    public FExp FExp.scalarRecordFExp(Map<String,FExp> indexMap, String suffix) {
        return scalarRecordFExp(indexMap, new FQNameString(suffix));
    }
    
    public FExp FExp.scalarRecordFExp(Map<String,FExp> indexMap, FQName suffix) {
        if (useTempVar) {
            return dynamicFExp(tempExp()).scalarRecordFExp(indexMap, suffix);
        }
        return scalarize(indexMap);
    }
    
    public FExp FRecordConstructor.scalarRecordFExp(Map<String,FExp> indexMap, FQName suffix) {
        return suffix.scalarRecordFExpForCon(indexMap, this);
    }
    
    public FExp FNoEventExp.scalarRecordFExp(Map<String,FExp> indexMap, FQName suffix) {
        return createNode(getFExp().scalarRecordFExp(indexMap, suffix));
    }
    
    public FExp FIfExp.scalarRecordFExp(Map<String,FExp> indexMap, FQName suffix) {
        FIfExp res = new FIfExp();
        res.setIfExp(getIfExp().scalarize(indexMap));
        res.setThenExp(getThenExp().scalarRecordFExp(indexMap, suffix));
        res.setElseExp(getElseExp().scalarRecordFExp(indexMap, suffix));
        return res;
    }
    
    public FExp FIdUseExp.scalarRecordFExp(Map<String,FExp> indexMap, FQName suffix) {
      FQName fqn = getFIdUse().getFQName();
      if (indexMap.containsKey(name())) {
          fqn = ((FIdUseExp) indexMap.get(name())).getFIdUse().getFQName();
      }
      if (indexNames != null) {
          fqn = fqn.copyAndAddFas(createIndexNameFas());
      }
      fqn = fqn.asFQNameFull().copyAndAppend(suffix);
      fqn.scalarized = false;
      FExp res = createNode(new FIdUse(fqn));
      res = dynamicFExp(res).scalarize(indexMap);
      res.setLocation(this);
      return res;
    }
    
    public FExp FIdTempExp.scalarRecordFExp(Map<String,FExp> indexMap, FQName suffix) {
        FQName fqn = getFIdUse().getFQName();
        if (indexNames != null)
            fqn = fqn.copyAndAddFas(createIndexNameFas());
        fqn = fqn.copyAndAppend(suffix);
        fqn.scalarized = true;
        return createNode(new FIdUse(fqn));
    }
    
    public FExp FSubscriptedExp.scalarRecordFExp(Map<String,FExp> indexMap, FQName suffix) {
        if (indexVariability().indexParameterOrLess() && !getFExp().size().isUnknown()) {
            try {
                return select().scalarRecordFExp(indexMap, suffix);
            } catch (ConstantEvaluationException e) {
                
            }
        }
        return new FSubscriptedExp(getFExp().scalarRecordFExp(indexMap, suffix), getFArraySubscripts().scalarize(indexMap));
    }
    
    public FExp FArray.scalarRecordFExp(Map<String,FExp> indexMap, FQName suffix) {
        FArray res = createEmptyNode();
        if (isIterArray())
            return super.scalarRecordFExp(indexMap, suffix);
        for (FExp e : getFExps())
            res.addFExp(e.scalarRecordFExp(indexMap, suffix));
        return res;
    }
    
    /**
     * Create an FExp that represents a specific scalar component of the given record constructor.
     * 
     * @param indexMap  translations for indices in the expressions
     * @param con       the record constructor to extract an expression from
     * 
     * @see FExp#scalarRecordFExp(Map, FQName)
     */
    public FExp FQName.scalarRecordFExpForCon(Map<String,FExp> indexMap, FRecordConstructor con) {
        throw new UnsupportedOperationException();
    }

	public FExp FQNameString.scalarRecordFExpForCon(Map<String,FExp> indexMap, FRecordConstructor con) {
        FExp arg = con.component(getName());
		return arg.scalarize(indexMap);
	}
	
	public FExp FQNameFull.scalarRecordFExpForCon(Map<String,FExp> indexMap, FRecordConstructor con) {
		FQNamePart first = getFQNamePart(0);
        FExp arg = con.component(first.getName());
        if (first.hasFArraySubscripts()) {
            arg = arg.extractArrayCell(indexMap, first.getFArraySubscripts().asIndex());
        }
		return copySuffix().scalarRecordFExp(indexMap, arg);
	}
	
    public FExp FQName.scalarRecordFExp(Map<String,FExp> indexMap, FExp exp) {
        return exp.scalarRecordFExp(indexMap, this);
    }
    
    public FExp FQNameEmpty.scalarRecordFExp(Map<String,FExp> indexMap, FExp exp) {
        return exp.scalarize(indexMap);
    }
    
    
    public FExp FExp.extractArrayCell(Map<String,FExp> indexMap, Index i) {
        if (type().isUnknown() || size().isUnknown()) {
            int[] ind = i.index();
            FExp[] subs = new FExp[ind.length];
            for (int k = 0; k < ind.length; k++) {
                subs[k] = new FIntegerLitExp(ind[k]);
            }
            return extractArrayCell(indexMap, subs);
        } else {
            return cell(i);
        }
    }
    
    public FExp FExp.extractArrayCell(Map<String,FExp> indexMap, FExp[] subs) {
        addArrayUsesToIndexMap(subs);
        return dynamicFExp(scalarize(indexMap));
    }
    
    public FExp FIdUseExp.extractArrayCell(Map<String,FExp> indexMap, Index i) {
        return dynamicFExp(createNode(new FIdUse(getFIdUse().getFQName().specify(i, true))));
    }
    
    public FExp FIfExp.extractArrayCell(Map<String,FExp> indexMap, Index i) {
        FIfExp res = new FIfExp();
        res.setIfExp(getIfExp().scalarize(indexMap));
        res.setThenExp(getThenExp().extractArrayCell(indexMap, i));
        res.setElseExp(getElseExp().extractArrayCell(indexMap, i));
        return dynamicFExp(res);
    }

	/**
	 * Scalarize equation and put all scalarized equations in list eqns.
	 */
    public void FFunctionCallEquation.scalarize(Scalarizer.Equation s) {
        createArrayTemporaries(s);
	    if (getCall().isOperatorWithoutOutputs()) { // Special case
	        getCall().scalarizeOperatorWithoutOutputs(s);
	    } else {
	        List<FFunctionCallLeft> lefts = new List<FFunctionCallLeft>();
            for (FFunctionCallLeft id : getLefts()) {
                lefts.add(id.scalarize(s.map()));
            }
	        s.add(new FFunctionCallEquation(lefts, (FAbstractFunctionCall) getCall().scalarizeExp(s.map())));
	    }
	}
    
    syn boolean FAbstractFunctionCall.isOperatorWithoutOutputs() = false;
    eq FReinit.isOperatorWithoutOutputs()                        = true;
    eq FAssert.isOperatorWithoutOutputs()                        = true;
    
    public void FExp.scalarizeOperatorWithoutOutputs(Scalarizer.Equation s) {
        if (isArray()) {
            for (FExp e : getArray().iterable()) {
                e.scalarizeOperatorWithoutOutputs(s);
            }
        } else if (type().isRecord()) {
            for (FRecordComponentType frct : ((FRecordType)type()).getComponents()) {
                component(frct.getName()).scalarizeOperatorWithoutOutputs(s);
            }
        } else {
            FAbstractFunctionCall call = (FAbstractFunctionCall) scalarizeExp(s.map());
            List<FFunctionCallLeft> lefts = new List<FFunctionCallLeft>();
            s.add(new FFunctionCallEquation(lefts, call));
        }
    }
    
    public FExp FEndExp.scalarizeExp(Map<String,FExp> indexMap) {
        return mySize().createFExp(0);
    }
	
    @Override
    public void FIfWhenElseEquation.scalarize(Scalarizer.Equation s) {
        List<FAbstractEquation> l = new List<FAbstractEquation>();
        scalarizeList(s.block(l), getFAbstractEquations());
        FIfWhenElseEquation res = createEmptyNode();
        res.setType((FEquationType) getType().fullCopy());
        res.setFAbstractEquationList(l);
        scalarizeTestAndElse(s, res);
        s.add(res);
    }

    @Override
    public void FIfEquation.scalarize(Scalarizer.Equation s) {
        boolean lockedBranch = false;
        if (getTest().variability().indexParameterOrLess()) {
            try {
                if (getTest().ceval().booleanValue()) {
                    scalarizeList(s, getFAbstractEquations());
                } else if (hasElse()) {
                    scalarizeList(s, getElse().getFAbstractEquations());
                }
                lockedBranch = true;
            } catch (ConstantEvaluationException e) {}
        }
        if (!lockedBranch) {
            super.scalarize(s);
        }
    }
	
    public void FIfWhenElseEquation.scalarizeTestAndElse(Scalarizer.Equation s, FIfWhenElseEquation res) {}
	
    public void FIfWhenEquation.scalarizeTestAndElse(Scalarizer.Equation s, FIfWhenElseEquation res) {
		FIfWhenEquation res2 = (FIfWhenEquation) res;
        res2.setTest(getTest().scalarize(s));
		if (hasElse()) {
	        ArrayList<FExp> tempsToAddToElse = branchTemporaries;
	        branchTemporaries = null;
            List<FAbstractEquation> l = new List();
            getElse().scalarize(s.block(l));
            res2.setElse((FIfWhenElseEquation)l.getChild(0));
			res2.addDummyEqnsForTemps(branchTemporaries, tempsToAddToElse);
		}
        branchTemporaries = null;
	}
	
	public void FIfWhenElseEquation.addDummyEqnsForTemps(ArrayList<FExp> tempsForThen, ArrayList<FExp> tempsForElse) {
        if (tempsForThen != null) 
            for (FExp e : tempsForThen)
                e.type().addDummyEqnsForTemp(getFAbstractEquations(), e.tempVarName());
	}
    
    public void FIfWhenEquation.addDummyEqnsForTemps(ArrayList<FExp> tempsForThen, ArrayList<FExp> tempsForElse) {
        super.addDummyEqnsForTemps(tempsForThen, tempsForElse);
        if (hasElse())
            getElse().addDummyEqnsForTemps(tempsForElse, tempsForElse);
    }
    
    public void FType.addDummyEqnsForTemp(List<FAbstractEquation> l, String name) {
        if (isArray()) {
            FType scalar = scalarType();
            for (Index i : indices()) 
                scalar.addDummyEqnsForTemp(l, name + i);
        } else {
            l.add(new FEquation(new FIdUseExp(name), zeroLiteral()));
        }
    }
    
    public void FRecordType.addDummyEqnsForTemp(List<FAbstractEquation> l, String name) {
        if (isArray()) {
            super.addDummyEqnsForTemp(l, name);
        } else {
            for (FRecordComponentType comp : getComponents())
                comp.getFType().addDummyEqnsForTemp(l, name + '.' + comp.getName());
        }
    }
	
	public void FExp.notifyIfWhenEquationsOfTemporaryVar() {
	    FIfWhenEquation myIf = surroundingIfOrElse();
	    if (myIf != null) 
	        myIf.addBranchTemporary(this);
	}
	
	public void FIfWhenEquation.addBranchTemporary(FExp e) {
	    if (branchTemporaries == null)
	        branchTemporaries = new ArrayList<FExp>();
	    branchTemporaries.add(e);
        FIfWhenEquation myIf = surroundingIfOrElse();
        if (myIf != null) 
            myIf.addBranchTemporary(e);
	}
	
	private ArrayList<FExp> FIfWhenEquation.branchTemporaries = null;
	
	/**
	 * Surrounding if or else equation, if any.
	 * 
	 * Only valid in flat tree.
	 */
    inh FIfWhenEquation FExp.surroundingIfOrElse();
    inh FIfWhenEquation FAbstractEquation.surroundingIfOrElse();
    eq FClass.getChild().surroundingIfOrElse()                      = null;
    eq InstNode.getChild().surroundingIfOrElse()                    = null;
    eq Root.getChild().surroundingIfOrElse()                        = null;
    eq FIfWhenEquation.getFAbstractEquation().surroundingIfOrElse() = this;
    eq FIfWhenEquation.getElse().surroundingIfOrElse()              = this;


    public FFunctionCallLeft FFunctionCallLeft.scalarize(Map<String,FExp> indexMap) {
        FFunctionCallLeft res = new FFunctionCallLeft();
        if (hasFExp() && !getFExp().size().isEmpty()) {
            res.setFExp(getFExp().scalarize(indexMap));
        }
        return res;
    }

	/**
	 * Create a record constructor (or FArray of record constructors),  
	 *        with the arguments taken from a record variable with the given name.
	 */
	public FExp FType.createRecordConstructor(Map<String,FExp> indexMap, FExp exp) {
        if (isArray() || exp.isArray()) {
            return createRecordConstructorArray(indexMap, exp, indices().iterator(), 0);
        } else {
            return createRecordConstructorCell(indexMap, exp);
        }
	}
	
	/**
	 * Create an FArray of expressions, with the arguments taken from a record 
	 * variable or member with the given name.
	 */
	public FExp FType.createRecordConstructorArray(Map<String,FExp> indexMap, FExp exp, Iterator<Index> it, int dim) {
        if (isEmpty()) {
            return createEmptyExp();
        }
		FArray arr = new FArray();
		boolean last = dim == ndims() - 1;
		for (int i = 0, n = size().get(dim); i < n; i++) {
			FExp res;
            if (last) {
                res = createRecordConstructorCell(indexMap, exp.extractArrayCell(indexMap, it.next()));
            } else {
                res = createRecordConstructorArray(indexMap, exp, it, dim + 1);
            }
			arr.addFExp(res);
		}
		return arr;
	}
	
    syn boolean FType.isEmpty() = size().isEmpty();
    syn FExp FType.createEmptyExp() {
        Size s = size();
        List<FExp> dims = new List<FExp>();
        for (int i = 0, n = s.ndims(); i < n ; i++) {
            dims.add(s.createFExp(i));
        }
        return new FFillExp(dims, zeroLiteral());
    }
	
	/**
	 * Create a record constructor with the arguments taken from a record 
	 *        variable with the given name.
	 * 
	 * Assumes that <code>name</code> refers to a non-array variable 
	 * (or a specific cell in an array variable).
	 */
	public FExp FType.createRecordConstructorCell(Map<String,FExp> indexMap, FExp exp) {
	    return exp.scalarize(indexMap);
	}
	
	public FExp FRecordType.createRecordConstructorCell(Map<String,FExp> indexMap, FExp exp) {
		FRecordConstructor rc = new FRecordConstructor(new FIdUse(getName()), new List());
		for (FRecordComponentType comp : getComponents()) {
             FExp next = exp.scalarRecordFExp(indexMap, comp.getName());
             if (exp.type().isUnknown() || exp.useTempVar) {
                 // Work around for expanding FIdTempExp which doesnt know its type
                 next = comp.getFType().createRecordConstructor(indexMap, exp.dynamicFExp(next));
             }
             rc.addArg(next);
		}
		return rc;
	}

    /**
     * Creates a new temporary varable with the given name.
     *        If this is an array, variables are created for each cell.
     * 
     * @param vars         list of variable to add the new variable to
     * @param name         the name of the new variable
     * @param variability  the variability of the new variable
     * @param fixed        if creating parameters, use this value for the fixed attribute
     */
    public void FType.createTempFVariables(List vars, FQName name, FTypePrefixVariability variability) {
        if (isArray()) {
            FQNameFull fqn = name.copyAsFQNameFull();
            for (Index i : indices()) {
                fqn.addFArraySubscripts(i.createFArraySubscripts());
                createTempCellFVariables(vars, fqn, variability);
            }
        } else {
            createTempCellFVariables(vars, name, variability);
        }
    }

    /**
     * Creates a new temporary variable with the given name.
     * 
     * @param vars         list of variable to add the new variable to
     * @param name         the name of the new variable
     * @param variability  the variability of the new variable
     */
    public void FType.createTempCellFVariables(List vars, FQName name, FTypePrefixVariability variability) {
        FQName fqn = name.fullCopy();
        fqn.scalarized = true;
        FVariable var = createTempFVariable(fqn, variability);
        vars.add(var);
    }

    /**
     * Creates temporary variables for a record with the given name.
     * 
     * @param vars         list of variable to add the new variable to
     * @param name         the name of the new variable
     * @param variability  the variability of the new variable
     */
    public void FRecordType.createTempCellFVariables(List vars, FQName name, FTypePrefixVariability variability) {
        for (FRecordComponentType comp : getComponents()) {
            FQName next = name.copyAndAppend(comp.getName());
            comp.getFType().createTempFVariables(vars, next, variability);
        }
    }

	/**
	 * Creates a new temporary variable with the given name and variability.
	 * 
	 * All optional children in the new variable are empty.
	 * 
	 * Default implementation returns <code>null</code>.
	 */
	public FVariable FType.createTempFVariable(FQName name, FTypePrefixVariability variability) {
		return createFVariable(new FTemporaryVisibilityType(), name, variability);
	}
	
	/**
	 * Creates a new variable with the given visibility, name and visibility.
	 * 
	 * All optional children in the new variable are empty.
	 * 
	 * Default implementation returns <code>null</code>.
	 */
	public FVariable FType.createFVariable(FVisibilityType fvt, FQName name, 
			FTypePrefixVariability variability) {
		throw new UnsupportedOperationException();
	}
		
	public FVariable FRealType.createFVariable(FVisibilityType fvt, FQName name, 
			FTypePrefixVariability variability) {
		return new FRealVariable(fvt, variability, name);
	}	
	
	public FVariable FIntegerType.createFVariable(FVisibilityType fvt, FQName name, 
			FTypePrefixVariability variability) {
		return new FIntegerVariable(fvt, variability.combineDown(fDiscrete()), name);
	}	
	
	public FVariable FBooleanType.createFVariable(FVisibilityType fvt, FQName name, 
			FTypePrefixVariability variability) {
		return new FBooleanVariable(fvt, variability.combineDown(fDiscrete()), name);
	}	
	
	public FVariable FStringType.createFVariable(FVisibilityType fvt, FQName name, 
			FTypePrefixVariability variability) {
		return new FStringVariable(fvt, variability.combineDown(fDiscrete()), name);
	}	
	
	public FVariable FRecordType.createFVariable(FVisibilityType fvt, FQName name, 
			FTypePrefixVariability variability) {
		return new FRecordVariable(fvt, variability, name, new FQNameString(getName()));
	}	
	
	public FVariable FEnumType.createFVariable(FVisibilityType fvt, FQName name, 
			FTypePrefixVariability variability) {
		return new FEnumVariable(fvt, variability.combineDown(fDiscrete()), name, new FQNameString(getName()));
	}	
    
    public FVariable FExternalObjectType.createFVariable(FVisibilityType fvt, FQName name, 
            FTypePrefixVariability variability) {
        return new FExternalObjectVariable(fvt, variability.combineDown(fParameter()), name, getConstructor().fullCopy());
    }
    
	/* Scalarization of expressions is needed in order to compute a simple
	 * scalar expression from an expression with ndims==0. For example, an
	 * FIdUse 'x[2]' needs to be marked as scalarized, and the expression
	 * scalar(x*A*x) needs to be replaced by a double sum.
	 */

	/**
	 * Flag that signals that this expression should be replaced with a use of a temporary variable.
	 */
	protected boolean FExp.useTempVar = false;
    syn boolean FExp.useTempVar() = useTempVar;
	
	/**
	 * Scalarize expressions, replacing array expressions with FArrays of scalarized subexpressions.
	 * 
	 * The FArrays are needed because function calls need arrays to be passed as arrays.
	 */
	public FExp FExp.scalarize(Map<String,FExp> indexMap) {
        FExp exp = useTempVar ? 
                dynamicFExp(tempExp()) :
                this;
        if (scalarizeExpanded()) {
            return type().createRecordConstructor(indexMap, exp);
        } else {
            return exp.scalarizeExp(indexMap);
        }
    }
    
    public FExp FExp.scalarize(Scalarizer s) {
        return scalarize(s.map());
    }
    
    syn boolean FExp.scalarizeExpanded()       = 
        isComposite() && indexNames == null && !(size().isUnknown() || inUnknownSize()) && !(useTempVar && isForIndexExp());
    eq FIdUseExp.scalarizeExpanded()           = !inFunction() && super.scalarizeExpanded();
    eq FFunctionCall.scalarizeExpanded()       = ((useTempVar && !inFunction()) || isVectorized()) && super.scalarizeExpanded();
    eq FIfExp.scalarizeExpanded()              = false;
    
    syn boolean FFunctionCall.isVectorized() = false;
    eq FVectorFunctionCall.isVectorized() = true;
    
	/**
	 * Scalarize expressions.
	 */
	public FExp FExp.scalarizeExp(Map<String,FExp> indexMap) {
		return fullCopy();
	}

	public FExp FArray.scalarizeExp(Map<String,FExp> indexMap) {
		if (isIterArray())
			return getFExp(0).scalarize(indexMap);
		FArray res = new FArray();
		for (FExp e : getFExps())
			res.addFExpNoTransform(e.scalarize(indexMap));
		return res;
	}

    public FExp FIdUseExp.scalarizeExp(Map<String,FExp> indexMap) {
        if (indexMap.containsKey(name())) {
            return indexMap.get(name()).fullCopy();
        }
        return setLocationOf(new FIdUseExp(getFIdUse().scalarize(indexMap, indexNames)));
    }
    
    @Override
    public FExp FDerExp.scalarizeExp(Map<String,FExp> indexMap) {
        return new FDerExp(getFIdUse().scalarize(indexMap, indexNames), order());
    }
    
    @Override
    public FExp FPreExp.scalarizeExp(Map<String,FExp> indexMap) {
        return new FPreExp(getFIdUse().scalarize(indexMap, indexNames));
    }

    public FIdUse FIdUse.scalarize(Map<String,FExp> indexMap, FExp[] indexNames) {
        FQName fqn = getFQName().scalarize(indexMap);
        if (indexNames != null) {
            fqn = fqn.asFQNameFull().addFArraySubscripts(getExpandedSubscripts().scalarize(indexMap));
        }
        return new FIdUse(fqn);
    }

	public abstract FQName FQName.scalarize(Map<String,FExp> indexMap);
	
	public FQName FQNameEmpty.scalarize(Map<String,FExp> indexMap) {
		return new FQNameEmpty();
	}
	
	public FQName FQNameString.scalarize(Map<String,FExp> indexMap) {
		return new FQNameString(getName());
	}

    public FQName FQNameFull.scalarize(Map<String,FExp> indexMap) {
        if (!inFunction()) {
            StringBuilder name = new StringBuilder();
            getFQNamePart(0).scalarizeAsString(name);
            for (int i = 1; i < getNumFQNamePart(); i++) {
                name.append(".");
                getFQNamePart(i).scalarizeAsString(name);
            }
            return new FQNameString(name.toString());
        } else {
            FQNameFull fqn = new FQNameFull(new List());
            for (FQNamePart fqnp : getFQNameParts()) 
                fqn.addFQNamePart(fqnp.scalarize(indexMap));
            return fqn;
        }
    }

    public void FQNamePart.scalarizeAsString(StringBuilder sb) {
        sb.append(name());
    }

    public void FQNamePartArray.scalarizeAsString(StringBuilder sb) {
        super.scalarizeAsString(sb);
        sb.append(getFArraySubscripts().createIndex());
    }

    public FQNamePart FQNamePart.scalarize(Map<String,FExp> indexMap) {
        return new FQNamePart(getName());
    }
    
    public FQNamePartArray FQNamePartArray.scalarize(Map<String,FExp> indexMap) {
        return new FQNamePartArray(getName(), getFArraySubscripts().scalarize(indexMap));
    }

    public FArraySubscripts FArraySubscripts.scalarize(Map<String,FExp> indexMap) {
        FArraySubscripts fas = new FArraySubscripts();
        for (FSubscript fs : getFSubscripts()) {
            fas.addFSubscript(fs.scalarize(indexMap));
        }
        return fas;
    }

    public FSubscript FSubscript.scalarize(Map<String,FExp> indexMap) {
        return (FSubscript) fullCopy();
    }
    
    public FSubscript FColonSubscript.scalarize(Map<String,FExp> indexMap) {
        if (indexName == null)
            throw new UnsupportedOperationException("Colon subscript without index name");
        return new FExpSubscript(indexName.fullCopy());
    }
    
    public FSubscript FExpSubscript.scalarize(Map<String,FExp> indexMap) {
        return new FExpSubscript(getFExp().scalarize(indexMap));
    }




    public FExp FIfExp.scalarizeExp(Map<String,FExp> indexMap) {
        if (getIfExp().variability().indexParameterOrLess()) {
            try {
                return cevalSelectExp().scalarize(indexMap);
            } catch (ConstantEvaluationException e) {}
        }
        return new FIfExp(getIfExp().scalarize(indexMap),
                getThenExp().scalarize(indexMap),
                getElseExp().scalarize(indexMap));
    }

	public FExp FMulExp.scalarizeExp(Map<String,FExp> indexMap) {
		if (getLeft().isArray() && !isArray()) 
			return dynamicFExp(composeMulScalarCellExp(Index.NULL)).scalarize(indexMap);
		else
			return super.scalarizeExp(indexMap);
	}
	
	public FExp FRangeExp.scalarizeExp(Map<String,FExp> indexMap) {
        FExp res = indexNames[0].fullCopy();
		boolean startIsOne = getFExp(0).isIntegerLiteral(1);
		if (!startIsOne || hasStep()) {
			res = new FSubExp(res, new FIntegerLitExp(1));
			if (hasStep())
				res = new FMulExp(res, getFExp(1).fullCopy());
			res = new FAddExp(getFExp(0).fullCopy(), res);
		}
		return res;
	}
	
    public FExp FLinspace.scalarizeExp(Map<String,FExp> indexMap) {
        FExp index = new FSubExp(indexNames[0].fullCopy(), new FIntegerLitExp(1));
        FExp len  = new FSubExp(getStopExp().fullCopy(), getStartExp().fullCopy());
        FExp step = new FDivExp(len, new FSubExp(getN().fullCopy(), new FIntegerLitExp(1)));
        FExp res = new FAddExp(getStartExp().fullCopy(), new FMulExp(index, step));
        return res;
    }

	
	public FExp FSizeExp.scalarizeExp(Map<String,FExp> indexMap) {
        if (getFExp().isSlice() || !getFExp().size().isUnknown(dimension())) {
            return getFExp().size().scalarize(indexMap, dimension());
        } else {
            return new FSizeExp(getFExp().scalarize(indexMap), new Opt<FExp>(getDim().scalarize(indexMap)));
        }
	}
	
    public FExp FUnknownSizeExp.scalarizeExp(Map<String,FExp> indexMap) {
        return new FSizeExp(getFExp().scalarize(indexMap), new Opt<FExp>(getDim().scalarize(indexMap)));
    }
	
	public FExp FNdimsExp.scalarizeExp(Map<String,FExp> indexMap) {
		return ceval().buildLiteral();
	}

    public FExp FSubscriptedExp.scalarizeExp(Map<String,FExp> indexMap) {
        if (indexVariability().indexParameterOrLess() && !getFExp().size().isUnknown()) {
            try {
                return select().scalarize(indexMap);
            } catch (ConstantEvaluationException e) {
                
            }
        }
        FArraySubscripts fas = getFArraySubscripts().scalarize(indexMap);
        if (inFunction()) {
            return new FIdUseExp(getFExp().tempVarName(), fas);
        } else {
            FSubscriptedExp res = createEmptyNode();
            res.setFExp(getFExp().scalarize(indexMap));
            res.setFArraySubscripts(fas);
            return res;
        }
    }

    public FExp FCardinality.scalarizeExp(Map<String,FExp> indexMap) {
        return new FIntegerLitExp(getFExp().cardinalityValue());
    }

	public FExp FMinMaxExp.scalarizeExp(Map<String,FExp> indexMap) {
		if (hasY())
			return createNode(getX().scalarize(indexMap), getY().scalarize(indexMap));
		else
			return getX().reduceToScalarized(this, indexMap);
	}
	
	public FExp FReductionExp.scalarizeExp(Map<String,FExp> indexMap) {
		if (getFExp().size().numElements() == 0)
			return reduceStartValue().buildLiteral();
		else
			return getFExp().reduceToScalarized(scalarReduceExp(), indexMap);
	}
	
	syn FBinExp FReductionExp.scalarReduceExp();
	eq FSumExp.scalarReduceExp()     = new FAddExp();
	eq FProductExp.scalarReduceExp() = new FMulExp();
	
	public FExp FIterExp.scalarizeExp(Map<String,FExp> indexMap) {
		return getFExp().scalarize(indexMap);
	}
	
    /**
     * Scalarize an expression by recursively scalarizing and combining the contents in its Array.
     * 
     * New nodes are created with <code>template.createNodeBinary()</code>.
     */
    public FExp FExp.reduceToScalarized(FExp template, Map<String,FExp> indexMap) {
        if (isArray()) {
            List<FExp> exps = getArray().getFExps();
            java.util.List<FExp> scalarizedExps = new ArrayList<FExp>();
            Iterator<FExp> it = getArray().iteratorFExp();
            while (it.hasNext()) {
                scalarizedExps.add(it.next().scalarize(indexMap));
            }
            return createBalancedBinaryTree(template, scalarizedExps);
        } else {
            return scalarize(indexMap);
        }
    }

    /**
     * Constructs a balanced binary tree based on the expression list exps with
     * the operation as specified by template.
     */
    public static FExp FExp.createBalancedBinaryTree(FExp template, java.util.List<FExp> exps) {
        return createBalancedBinaryTree(template, exps, 0, exps.size());
    }

    private static FExp FExp.createBalancedBinaryTree(FExp template, java.util.List<FExp> exps, int start, int end) {
        if (start == end) {
            return null;
        }
        if (start == end - 1) {
            return exps.get(start);
        }
        // We want a left heavy tree, hence the modulo part
        int half = (start + end) / 2 + (start + end) % 2;
        FExp left = createBalancedBinaryTree(template, exps, start, half);
        FExp right = createBalancedBinaryTree(template, exps, half, end);
        return template.createNodeBinary(left, right);
    }

	public FExp FBinExp.scalarizeExp(Map<String,FExp> indexMap) { return createNode(getLeft().scalarize(indexMap), getRight().scalarize(indexMap)); }
	public FExp FUnaryExp.scalarizeExp(Map<String,FExp> indexMap) { return createNode(getFExp().scalarize(indexMap)); }
	public FExp FMathematicalFunctionCall.scalarizeExp(Map<String,FExp> indexMap) { return createNode(getFExp().scalarize(indexMap)); }
	public FExp FAtan2Exp.scalarizeExp(Map<String,FExp> indexMap)     { return createNode(getFExp().scalarize(indexMap), getY().scalarize(indexMap)); }
	public FExp FUnaryBuiltIn.scalarizeExp(Map<String,FExp> indexMap) { return createNode(getFExp().scalarize(indexMap)); }
	public FExp FTranspose.scalarizeExp(Map<String,FExp> indexMap)    { return getFExp().scalarize(indexMap); }
	
	public FExp FNoArgBuiltIn.scalarizeExp(Map<String,FExp> indexMap) { return createEmptyNode(); }
	public FExp FEventGenExp.scalarizeExp(Map<String,FExp> indexMap) { return createNode(getX().scalarize(indexMap)); }
	public FExp FBinEventGenExp.scalarizeExp(Map<String,FExp> indexMap) { return createNode(getX().scalarize(indexMap),getY().scalarize(indexMap)); }
	
	public FExp FLitExp.scalarizeExp(Map<String,FExp> indexMap) { return (FLitExp) fullCopy(); }
	public FExp FEnumLitExp.scalarizeExp(Map<String,FExp> indexMap) { 
	    return inArraySubscripts() ? new FIntegerLitExp(ceval().intValue()) : super.scalarizeExp(indexMap);
	}
	public FExp FBooleanLitExp.scalarizeExp(Map<String,FExp> indexMap) { 
	    return inArraySubscripts() ? new FIntegerLitExp(ceval().intValue()) : super.scalarizeExp(indexMap);
    }
	
	public FExp FSmoothExp.scalarizeExp(Map<String,FExp> indexMap)     { return new FSmoothExp(getOrder().scalarize(indexMap), getFExp().scalarize(indexMap)); }
	public FExp FSampleExp.scalarizeExp(Map<String,FExp> indexMap)     { return new FSampleExp(getOffset().scalarize(indexMap), getInterval().scalarize(indexMap)); }
	public FExp FSemiLinearExp.scalarizeExp(Map<String,FExp> indexMap) { return new FSemiLinearExp(getX().scalarize(indexMap), getPosSlope().scalarize(indexMap), getNegSlope().scalarize(indexMap)); }
	public FExp FHomotopyExp.scalarizeExp(Map<String,FExp> indexMap)   { return new FHomotopyExp(getActual().scalarize(indexMap), getSimplified().scalarize(indexMap)); }
	
	public FExp FStringExp.scalarizeExp(Map<String,FExp> indexMap)  {
		FStringExp scalarized = new FStringExp();
		scalarized.setValue(getValue().scalarize(indexMap));
		if (hasMinimumLength())
			scalarized.setMinimumLength(getMinimumLength().scalarize(indexMap));
		if (hasLeftJustified())
			scalarized.setLeftJustified(getLeftJustified().scalarize(indexMap));
		if (hasSignificantDigits())
			scalarized.setSignificantDigits(getSignificantDigits().scalarize(indexMap));
		if (hasFormat())
			scalarized.setFormat(getFormat().scalarize(indexMap));
		return scalarized;
	}
	
    public FExp FFunctionCall.scalarizeExp(Map<String,FExp> indexMap) {
        if (extractTemp())
            return tempExp();
        else
            return scalarizeFunction(indexMap);
    }
	
	public FExp FRecordConstructor.scalarizeExp(Map<String,FExp> indexMap) {
        FRecordConstructor rc = new FRecordConstructor(getRecord().scalarize(indexMap, null), new List());
        for (FExp arg : getArgs()) {
            rc.addArg(arg.scalarize(indexMap));
        }
		return rc;
	}
	
	public FExp FZeros.scalarizeExp(Map<String,FExp> indexMap) {
		return new FIntegerLitExp(0);
	}
	
	public FExp FOnes.scalarizeExp(Map<String,FExp> indexMap) {
		return new FIntegerLitExp(1);
	}
    
    public FExp FScalarExp.scalarizeExp(Map<String,FExp> indexMap) {
        int[] t = new int[getFExp().ndims()];
        Arrays.fill(t, 1);
        return dynamicFExp(getFExp().extractArrayCell(indexMap, new Index(t))).scalarize(indexMap);
    }
    
	public FExp FFillExp.scalarizeExp(Map<String,FExp> indexMap) {
		return getFillExp().fullCopy();
	}
	
	public FFunctionCall FFunctionCall.scalarizeFunction(Map<String,FExp> indexMap) {
		List<FExp> args = new List<FExp>();
        for (FExp arg : getArgs()) {
            args.add(arg.scalarize(indexMap));
        }
        FFunctionCall res = createScalarized(getName().fullCopy(), args, null);
        res.setFType(getFType().scalarize(indexMap, res));
        return res;
    }
    
    public FType FType.scalarize(Map<String,FExp> indexMap, FExp context) {
        FType res = treeCopy();
        res.scalarizeTypeSizes(indexMap, context);
        return res;
    }
    
    public void ASTNode.scalarizeTypeSizes(Map<String,FExp> indexMap, FExp context) {
        for (ASTNode n : this) {
            n.scalarizeTypeSizes(indexMap, context);
        }
    }
    
    public void FType.scalarizeTypeSizes(Map<String,FExp> indexMap, FExp context) {
        setSize(getSize().scalarize(indexMap, context));
        super.scalarizeTypeSizes(indexMap, context);
    }
    
    public Size Size.scalarize(Map<String,FExp> indexMap, FExp context) {
        return this;
    }
    
    @Override
    public Size MutableSize.scalarize(Map<String,FExp> indexMap, FExp context) {
        MutableSize res = new MutableSize(ndims());
        for (int i = 0; i < exps.length; i++) {
            res.size[i] = size[i];
            if (exps[i] != null) {
                res.exps[i] = exps[i].scalarize(indexMap);
                context.dynamicFExp(res.exps[i]);
            }
        }
        return res;
    }
    
    public FExp Size.scalarize(Map<String,FExp> indexMap, int i) {
        return createFExp(i);
    }
    
    @Override
    public FExp MutableSize.scalarize(Map<String,FExp> indexMap, int i) {
        if (exps[i] != null) {
            return exps[i].scalarize(indexMap);
        } else {
            return super.scalarize(indexMap, i);
        }
    }
    
    protected FFunctionCall FFunctionCall.createScalarized(FIdUse name, List<FExp> args, FType type) {
        return setLocationOf(new FFunctionCall(name, args, type)); 
    }
    
    protected FFunctionCall FPartialFunctionCall.createScalarized(FIdUse name, List<FExp> args, FType type) {
        return new FPartialFunctionCall(name, args, type, getArgNames().fullCopy()); 
    }
    
	public FAssert FAssert.scalarizeExp(Map<String,FExp> indexMap) {
		Opt level = hasLevel() ? new Opt(getLevel().scalarize(indexMap)) : new Opt();
        return createNode(getTest().scalarize(indexMap), getMsg().scalarize(indexMap), level);
	}

    public FReinit FReinit.scalarizeExp(Map<String,FExp> indexMap) {
        return new FReinit(getVar().scalarize(indexMap), getFExp().scalarize(indexMap));
    }

    public FDelayExp FDelayExp.scalarizeExp(Map<String,FExp> indexMap) {
        Opt max = hasMax() ? new Opt(getMax().scalarize(indexMap)) : new Opt();
        return createNode(getFExp().scalarize(indexMap), getDelay().scalarize(indexMap), max);
    }
    
    public FSpatialDistExp FSpatialDistExp.scalarizeExp(Map<String,FExp> indexMap) {
        return new FSpatialDistExp(getIn0().scalarize(indexMap), getIn1().scalarize(indexMap),
                getX().scalarize(indexMap), getPositiveVelocity().scalarize(indexMap),
                getInitialPoints().scalarize(indexMap), getInitialValues().scalarize(indexMap));
    }

    public FForIndex FForIndex.scalarize(Map<String,FExp> indexMap) {
        return new FForIndex(getFVariable().fullCopy(), getFExp().scalarizeIndexExp(indexMap));
    }

	/**
	 * Scalarize the expression of an FForIndex. 
	 */
	public FExp FExp.scalarizeIndexExp(Map<String,FExp> indexMap) {
		return scalarize(indexMap);
	}
	
	public FRangeExp FRangeExp.scalarizeIndexExp(Map<String,FExp> indexMap) {
		List<FExp> exps = new List<FExp>();
		for (FExp e : getFExps())
			exps.add(e.scalarize(indexMap));
		return new FRangeExp(exps);
	}

    public FExInStream FExInStream.scalarizeExp(Map<String,FExp> indexMap) {
        FExInStream res = new FExInStream(getDefault().scalarize(indexMap), getEps().scalarize(indexMap), new List<FExp>());
        for (FExp e : getVars()) {
            res.addVarNoTransform(e.scalarize(indexMap));
        }
        return res;
    }

	public void ConnectionSetManager.scalarize() {
		for (ConnectionSet set : list)
			set.scalarize();
		Map<String, CSENameMapEntry> oldCSEStreamMap = cseStreamMap;
		cseStreamMap = new HashMap<String, CSENameMapEntry>();
		for (CSENameMapEntry entry : oldCSEStreamMap.values()) {
            if (entry.outsideCSE != null)
                updateCSEMapEntry(entry.outsideCSE, entry.outside);
            if (entry.insideCSE != null)
                updateCSEMapEntry(entry.insideCSE, entry.inside);
		}
	}
	
	public void ConnectionSet.scalarize() {
		for (ConnectionSetEntry e : this)
			e.scalarize();
	}
	
	public void ConnectionSetEntry.scalarize() {
		if (fqName.accessNdims() == 0) {
			// Can't use FQName.scalarize(), since it relies on rewrites
			fqName = new FQNameString(fqName.scalarName());
		} else {
			Indices ind = Indices.createFromFas(fqName.getFArraySubscripts());
			scalarNames = new String[ind.numElements()];
			int j = 0;
			for (Index i : ind)
				scalarNames[j++] = fqName.copyAndAddFas(i.createFArraySubscripts()).scalarName();
		}
	}

}
