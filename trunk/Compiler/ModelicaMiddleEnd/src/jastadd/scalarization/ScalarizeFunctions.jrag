/*
    Copyright (C) 2016 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


aspect AlgorithmScalarization {
    
    public class Scalarizer {
        public static class Function {
            List<FFunctionVariable> vars; List<FStatement> stmts; Map<String,FExp> indexMap;
            public Function(List<FFunctionVariable> vars, List<FStatement> stmts, Map<String,FExp> indexMap) {
                this.vars = vars; this.stmts = stmts; this.indexMap = indexMap;
            }
        }
    }
    
    public boolean FInitArrayStmt.scalarize(List vars, List<FStatement> stmts, Map<String,FExp> indexMap) {
        FFunctionVariable ffv = (FFunctionVariable) getFIdUseExp().myFV();
        ffv.type().scalarizeInitArray(new Scalarizer.Function(vars, stmts, indexMap));
        return super.scalarize(vars, stmts, indexMap);
    }
    
    public void FType.scalarizeInitArray(Scalarizer.Function scalarizer) {
        getSize().scalarizeInitArray(scalarizer, this);
    }
    
    public void Size.scalarizeInitArray(Scalarizer.Function scalarizer, FType context) {
        
    }
    
    public void MutableSize.scalarizeInitArray(Scalarizer.Function scalarizer, FType context) {
        for (int i = 0; i < exps.length; i++) {
            if (exps[i] != null) {
                exps[i].createArrayTemporaries(scalarizer.stmts, scalarizer.vars, scalarizer.indexMap, new ForNames());
                exps[i] = exps[i].scalarize(scalarizer.indexMap);
                exps[i].parent = context;
            }
        }
    }
}
