/*
    Copyright (C) 2016 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import java.util.HashSet;


aspect Derivatives {

    public class EquationDifferentiationException extends RuntimeException {
    
        public FAbstractEquation equation;
        
        public EquationDifferentiationException(FAbstractEquation e, String message) {
            super(message);
            this.equation = e;
        }
    
    }

    public class ExpressionDifferentiationException extends RuntimeException {
        
        private static final String MSG = "Cannot differentiate the expression%s%s%s";
    
        public FExp fexp;
        
        public ExpressionDifferentiationException(FExp e) {
            this.fexp = e;
        }
        
        public void generateError() {
            fexp.error(toString());
        }
        
        public String toString() {
            return toString(": ", "");
        }
        
        public String toQuotedString() {
            return toString(" '", "'");
        }
        
        public String toString(String pref, String suff) {
            return String.format(getFormat(), pref, fexp, suff);
        }
        
        protected String getFormat() {
            return MSG;
        }
    
    }

    public class FunctionDifferentiationException extends ExpressionDifferentiationException {
        
        private static final String MSG = 
            "Cannot differentiate call to function without derivative or smooth order annotation%s%s%s";
    
        public FExp fexp;
        
        public FunctionDifferentiationException(FExp e) {
            super(e);
        }
        
        protected String getFormat() {
            return MSG;
        }
    
    }

    syn Collection<FAbstractEquation> FAbstractEquation.diff(String name) {
        throw new EquationDifferentiationException(this, "Cannot differentate the equation:\n   " + prettyPrint(""));
    }
    
    eq FEquation.diff(String name) {
        try {
            return Arrays.asList(dynamicFAbstractEquation(new FEquation(getLeft().diff(name), getRight().diff(name))));
        } catch (ExpressionDifferentiationException e) {
            throw new EquationDifferentiationException(this, e.toQuotedString() + " in equation:\n   " + this);
        }
    }

    eq FFunctionCallEquation.diff(String name) {
        try {
            FExp diffedCall = getCall().diff(name);
            if (diffedCall.isLiteralZero()) {
                Collection<FAbstractEquation> res = new ArrayList<FAbstractEquation>();
                for (FFunctionCallLeft left : getLefts())
                    for (FIdUseExp use : FIdUseExpsInLHS())
                        res.add(dynamicFAbstractEquation(new FEquation(use.diff(name), use.type().zeroLiteral())));
                return res;
            } else {
                List lefts = new List();
                for (FFunctionCallLeft l : getLefts()) {
                    Opt lopt = l.hasFExp() ? new Opt(l.getFExp().diff(name)) : new Opt();
                    lefts.add(new FFunctionCallLeft(lopt));
                }
                return Arrays.asList(dynamicFAbstractEquation(
                        new FFunctionCallEquation(lefts, (FAbstractFunctionCall)diffedCall)));
            }
        } catch (ExpressionDifferentiationException e) {
            throw new EquationDifferentiationException(this, e.toQuotedString() + " in equation:\n   " + this);
        }
    }

    public static final String FExp.TIME = "time";
    
    public FExp FExp.diff(String name, int n) {
        return (n <= 1) ? diff(name) : diff(name, n - 1).diff(name);
    }

    public FExp FExp.diff(String name) {
        throw new ExpressionDifferentiationException(this);
    }
    
    public FExp FNoExp.diff(String name) {
        return new FNoExp();
    }
    
    public FExp FDotAddExp.diff(String name) {
        FExp rd = dynamicFExp(getRight().diff(name));
        FExp ld = dynamicFExp(getLeft().diff(name));
        boolean rz = rd.equalsRealValue(0);
        boolean lz = ld.equalsRealValue(0);
        if (rz && lz) {
            return new FRealLitExp(0.0);
        } else if (lz) {
            return dynamicFExp(rd);
        } else if (rz) {
            return dynamicFExp(ld);
        } else {
            return dynamicFExp(newFAddExp(ld,rd));
        }
    }

    public FExp FDotSubExp.diff(String name) {
        FExp rd = dynamicFExp(getRight().diff(name));
        FExp ld = dynamicFExp(getLeft().diff(name));
        boolean rz = rd.equalsRealValue(0);
        boolean lz = ld.equalsRealValue(0);
        if (rz && lz) {
            return new FRealLitExp(0.0);
        } if (lz) {
            return dynamicFExp(new FNegExp(rd));
        } else if (rz) {
            return dynamicFExp(ld);
        } else {
            return dynamicFExp(newFSubExp(ld,rd));
        }
    }

    public FExp FDotMulExp.diff(String name) {
        FExp rd = dynamicFExp((getRight().diff(name)));
        FExp ld = dynamicFExp((getLeft().diff(name)));
        boolean rz = rd.equalsRealValue(0);
        boolean lz = ld.equalsRealValue(0);
        if (rz && lz) {
            return new FRealLitExp(0.0);
        } else if (lz) {
            return dynamicFExp(newFMulExp(getLeft().copySymbolic(), rd));
        } else if (rz) {
            return dynamicFExp(newFMulExp(ld, getRight().copySymbolic()));
        } else {
            return dynamicFExp(newFAddExp(
                newFMulExp(getLeft().copySymbolic(), rd),
                newFMulExp(ld, getRight().copySymbolic())));
        }   
    }

    public FExp FDotDivExp.diff(String name) {
        if (getRight().variability().parameterOrLess()) {
            return dynamicFExp(newFDivExp(
                getLeft().diff(name),
                getRight().copySymbolic()));
        } else {
            return dynamicFExp(newFDivExp(newFSubExp(
                newFMulExp(getLeft().diff(name), getRight().copySymbolic()),
                newFMulExp(getLeft().copySymbolic(), getRight().diff(name))),
                newFPowExp(getRight().copySymbolic(), new FIntegerLitExp(2))));
        }
    }

    public FExp FDotPowExp.diff(String name) {
        if (getRight().variability().discreteOrLess()) {
            FExp e1;
            if (getRight().variability().knownParameterOrLess()) {
                double exponentValue = getRight().ceval().realValue();
                if (exponentValue == 2.0) {
                    e1 = getLeft().copySymbolic();
                } else {
                    FExp exponent = new FRealLitExp(getRight().ceval().realValue() - 1);
                    e1 = newFPowExp(getLeft().copySymbolic(),exponent);
                }
            } else {
                FExp exponent = newFSubExp(getRight().copySymbolic(),new FIntegerLitExp(1));
                e1 = newFPowExp(getLeft().copySymbolic(),exponent);
            }
            
            FExp e2 = newFMulExp(getRight().copySymbolic(), e1);
            return dynamicFExp(newFMulExp(e2, getLeft().diff(name)));
        } else {
            // der(x^y) = x^y * (der(x) * (y / x) + der(y) * log(x))
            //            e1-    -------e2-------   -------e3------
            FExp x = getLeft();
            FExp y = getRight();
            FExp dx = x.diff(name);
            FExp dy = y.diff(name);
            FExp e1 = copySymbolic();
            FExp e2 = newFMulExp(dx, newFDivExp(y.copySymbolic(), x.copySymbolic()));
            FExp e3 = newFMulExp(dy, new FLogExp(x.copySymbolic()));
            return dynamicFExp(newFMulExp(e1, newFAddExp(e2, e3)));
        }
    }

    public FExp FNegExp.diff(String name) {
        return dynamicFExp(new FNegExp(getFExp().diff(name)));
    }

    public FExp FSinExp.diff(String name) {
        FExp ed = dynamicFExp(getFExp().diff(name));
        try {
            if (ed.variability().lessOrEqual(fConstant()) && ed.ceval().realValue()==0.) {
                return new FRealLitExp(0.0);
            }
        } catch(Exception e) {
        }
        return dynamicFExp(new FMulExp(new FCosExp(getFExp().copySymbolic()),
            getFExp().diff(name)));
    }
    
    public FExp FCosExp.diff(String name) {
        FExp ed = dynamicFExp(getFExp().diff(name));
        try {
            if (ed.variability().lessOrEqual(fConstant()) && ed.ceval().realValue()==0.) {
                return new FRealLitExp(0.0);
            }
        } catch(Exception e) {
        }
        return dynamicFExp(new FNegExp(new FMulExp(new FSinExp(getFExp().copySymbolic()),
            getFExp().diff(name))));
    }

    public FExp FTanExp.diff(String name) {
        FExp ed = dynamicFExp(getFExp().diff(name));
        try {
            if (ed.variability().lessOrEqual(fConstant()) && ed.ceval().realValue()==0.) {
                return new FRealLitExp(0.0);
            }
        } catch(Exception e) {
        }
        return dynamicFExp(new FDivExp(getFExp().diff(name),
                                       new FPowExp(new FCosExp(getFExp().copySymbolic()), new FIntegerLitExp(2))));
    }

    public FExp FExpExp.diff(String name) {
        return dynamicFExp(new FMulExp(new FExpExp(getFExp().copySymbolic()),
            getFExp().diff(name)));
    }

    public FExp FAsinExp.diff(String name) {
        return dynamicFExp(new FDivExp(getFExp().diff(name),
                                       new FSqrtExp(new FSubExp(new FIntegerLitExp(1),
                                       new FPowExp(getFExp().copySymbolic(),
                                       new FIntegerLitExp(2))))));
    }

    public FExp FAcosExp.diff(String name) {
        return dynamicFExp(new FDivExp(new FNegExp(getFExp().diff(name)),
                                       new FSqrtExp(new FSubExp(new FIntegerLitExp(1),
                                       new FPowExp(getFExp().copySymbolic(),
                                       new FIntegerLitExp(2))))));
    }

    public FExp FAtanExp.diff(String name) {
        return dynamicFExp(new FDivExp(getFExp().diff(name),
                                       new FAddExp(new FIntegerLitExp(1),
                                       new FPowExp(getFExp().copySymbolic(),
                                       new FIntegerLitExp(2)))));
    }

    public FExp FAtan2Exp.diff(String name) {
        /* der(atan2(y,x) = (der(y)*x - y*der(x)) / (y*y + x*x) */
        FExp y = getFExp();
        FExp x = getY();
        FExp exp1 = new FSubExp(
                new FMulExp(y.diff(name), x.copySymbolic()),
                new FMulExp(y.copySymbolic(), x.diff(name)));
        FExp exp2 = new FAddExp(
                new FMulExp(y.copySymbolic(),y.copySymbolic()), 
                new FMulExp(x.copySymbolic(),x.copySymbolic()));
        return dynamicFExp(new FDivExp(exp1,exp2));
    }
    
    public FExp FSinhExp.diff(String name) {
        return dynamicFExp(new FMulExp(new FCoshExp(getFExp().copySymbolic()),
            getFExp().diff(name)));
    }
    
    public FExp FCoshExp.diff(String name) {
        return dynamicFExp(new FMulExp(new FSinhExp(getFExp().copySymbolic()),
            getFExp().diff(name)));
    }

    public FExp FTanhExp.diff(String name) {
        return dynamicFExp(new FDivExp(getFExp().diff(name),
                new FPowExp(new FCoshExp(getFExp().copySymbolic()), new FIntegerLitExp(2))));
    }

    public FExp FLogExp.diff(String name) {
        return dynamicFExp(new FDivExp(getFExp().diff(name),
                getFExp().copySymbolic()));
    }

    public FExp FLog10Exp.diff(String name) {
        return dynamicFExp(new FDivExp(getFExp().diff(name),
                new FMulExp(getFExp().copySymbolic(),new FLogExp(new FIntegerLitExp(10)))));
    }

    public FExp FSqrtExp.diff(String name) {
        return dynamicFExp(new FDivExp(getFExp().diff(name),
                new FMulExp(new FIntegerLitExp(2),new FSqrtExp(getFExp().copySymbolic()))));
    }

    public FExp FSmoothExp.diff(String name) {
        int order = getOrder().ceval().intValue();
        FExp diffExp = getFExp().diff(name);
        if (order <= 1)
            diffExp.resetOriginalReferences();
        if (order > 0)
            return new FSmoothExp(order - 1, diffExp);
        else
            return diffExp;
    }

    public FExp FHomotopyExp.diff(String name) {
        return dynamicFExp(new FHomotopyExp(getActual().diff(name), getSimplified().diff(name)));
    }
    
    public FExp FNoEventExp.diff(String name) {
        return new FNoEventExp(getFExp().diff(name));
    }
    
    public FExp FIfExp.diff(String name) {
        FExp td = dynamicFExp((getThenExp().diff(name)));
        FExp ed = dynamicFExp((getElseExp().diff(name)));
        boolean tz = td.equalsRealValue(0);
        boolean ez = ed.equalsRealValue(0);
        if (ez && tz) {
            return new FRealLitExp(0.0);
        } 
        FExp e = getIfExp().copySymbolic();
        return dynamicFExp(new FIfExp(e, td, ed));
    }
    
    public FExp FMinMaxExp.diff(String name) {
        return dynamicFExp(new FNoEventExp(new FIfExp(createCompareNode(getX().copySymbolic(), getY().copySymbolic()), getX().diff(name), getY().diff(name))));
    }

    public FExp FIdUseExp.diff(String name) {
        return dynamicFExp(diffUseOrDerExp(name, name()));
    }

    public FExp FPreExp.diff(String name) {
        if (name.equals(name())) {
            return new FRealLitExp(1);
        } else {
            return new FRealLitExp(0);
        }   
    }

    public FExp InstDerExp.diff(String name) {  
        return dynamicFExp(diffUseOrDerExp(name, null));
    }

    public FExp FAbsExp.diff(String name) {
        FExp diff = getFExp().diff(name);
        if (diff.isLiteralZero()) {
            return dynamicFExp(diff);
        } else {
            FRelExp e = new FGeqExp(getFExp().copySymbolic(), new FRealLitExp(0));
            e.setOriginalFExp(e);
            return dynamicFExp(new FIfExp(e, diff, new FNegExp(diff.copySymbolic())));
        }
    }

    public FExp FDSRefExp.diff(String name) {
        return getOrg().diff(name);
    }

    public FExp FSignExp.diff(String name) {
        return new FRealLitExp(0);
    }

    public FExp FDivFuncExp.diff(String name) {
        return new FRealLitExp(0);
    }

    public FExp FDelayExp.diff(String name) {
        Opt max = hasMax() ? new Opt(getMax().copySymbolic()) : new Opt();
        FExp res = new FDelayExp(getFExp().diff(name), getDelay().copySymbolic(), max);
        if (getDelay().isContinuousExp()) {
            res = new FMulExp(getDelay().diff(name), res);
        }
        return res;
    }
    
    public FExp FSpatialDistExp.diff(String name) {
        throw new FunctionDifferentiationException(this);
    }

    public FExp FInStream.diff(String name) {
        if (name.equals(FExp.TIME)) {
            return new FDerInStream(this.treeCopy());
        }
        return super.diff(name);
    }

    public FExp FExInStream.diff(String name) {
        if (name.equals(FExp.TIME)) {
            return new FDerInStream(this.treeCopy());
        }
        return super.diff(name);
    }

    public FExp FSubscriptedExp.diff(String name) {
        return new FSubscriptedExp(getFExp().diff(name), getFArraySubscripts().treeCopy());
    }


    public FExp FExp.diffUseOrDerExp(String name, String myName) {
        if (name.equals(TIME)) {
            if (variability().continuousVariability() || inFunction() && type().containsReal()) {
                return createDerExp(1);
            } else {
                return type().zeroLiteral();
            }
        } else if (name.equals(myName)) {
            FExp exp = type().createLiteral(1);
            if (exp == null) {
                exp = new FNoExp();
            }
            return exp;
        } else {
            FExp exp = type().zeroLiteral();
            if (!exp.isValidExp()) {//TODO: check if needed!
                exp = fullCopy();
            }
            return exp;
        }
    }

    syn int FIdUseExp.order()              = 0;
    eq FAbstractDerExp.order()             = getOrder();
    syn int InstDerExp.order()             = 1;
    eq InstHDerExp.order()                 = getOrder();
    syn int FVariable.order()              = 0;
    eq FAbstractDerivativeVariable.order() = getOrder();

    syn FExp FExp.createDerExp(int order) = diff(TIME, order);
    eq FIdUseExp.createDerExp(int order) {
        FExp exp = getFIdUse().createDerExp(order() + order);
        if (exp instanceof FIdUseExp) {
            ((FIdUseExp)exp).setOriginalVariable(getOriginalVariable());
        }
        return exp;
    }
    eq InstDerExp.createDerExp(int order) = getFExp().createDerExp(order() + order);

    syn FExp FIdUse.createDerExp(int order) = new FDerExp(fullCopy(), order);
    
    syn FExp FIdUseInstAccess.createDerExp(int order) = getInstAccess().createDerExp(order);
    
    syn InstDerExp InstAccess.createDerExp(int order) {
        FExp use = new FIdUseExp(new FIdUseInstAccess(fullCopy()));
        return (order == 1) ? new InstDerExp(use) : new InstHDerExp(use, order);
    }
    
    public FExp FRecordConstructor.diff(String name) {
        FRecordConstructor res = new FRecordConstructor(getRecord().fullCopy(), new List());
        for (FExp arg : getArgs())
            res.addArg(arg.diff(name));
        return res;
    }
    
    public FExp FLitExp.diff(String name) {
        return type().zeroLiteral();
    }
    
    public FExp FTimeExp.diff(String name) {
        int val = 0;
        if (name.equals(TIME))
            val = 1;
        return dynamicFExp(new FRealLitExp(val));
    }

    private int FFunctionCall.order = 0;

    public FExp FFunctionCall.diff(String name) {
        // If the function does not have an argument that matches name,
        // and the name is not 'time', then the derivative is zero.
        if (!name.equals(TIME)) {
            boolean isIndependent = true;
            FQName fqn = new FQNameString(name);
            FIdUseExp fid = (FIdUseExp) dynamicFExp(fqn.createFIdUseExp());
            FAbstractVariable fv = fid.myFV();
            if (fv != null) {
                HashSet<FVariable> s = new HashSet<FVariable>();
                s.add((FVariable) fv);
                for (FExp e : getArgs()) {
                    if (!e.isIndependent(s)) {
                        isIndependent = false;
                        break;
                    }
                }
                if (isIndependent) {
                    return new FRealLitExp(0);
                }
            }
        }
        
        FFunctionDecl myDecl = myFCallable().asFFunctionDecl();
        if (myDecl == null)
            throw new FunctionDifferentiationException(this);
        AnnotationNode derNode = derivativeAnnotation();
        
        FCallable myDiffDecl = myDecl.diff(derNode, inFunction());
        if (myDiffDecl == null)
            throw new FunctionDifferentiationException(this);
        List args = new List();
        for (FExp e : getArgs()) {
            args.add(e.copySymbolic());
        }
        int i = 0;
        for (FExp e : getArgs()) {
            FFunctionVariable fv = myDecl.myInput(i);
            if (fv.shouldBeDifferentiated(derNode))
                args.add(e.diff(name));
            i++;
        }
        FFunctionCall der_f = new FFunctionCall(new FIdUse(myDiffDecl.name()), args, getSizes());
        der_f.order = order + 1;
        return dynamicFExp(der_f);
    }

    public FExp FArray.diff(String name) {
        FArray diff_farray = new FArray();
        for (FExp e : getFExps()) {
            diff_farray.addFExp(e.diff(name));
        }
        return dynamicFExp(diff_farray);
    }

    /**
     * Generic implementation of {@link #diff(String)} for array expressions 
     * that delegates to the elements of array expansion.
     */
    protected FExp FExp.diffArray(String name) {
        return getArray().buildDiff(name);
    }

    /**
     * Generic implementation of {@link #diff(String)} for expressions that are 
     * always constant during simulation.
     */
    protected FExp FExp.diffZero(String name) {
        return type().zeroLiteral();
    }

    /**
     * Build an FArray containing the differentiated elements of this array 
     * (by calling {@link FExp#diff(String)} on each one).
     */
    public FExp Array.buildDiff(final String name) {
        return buildFArray(new ElementBuilder() {
            public FExp build(FExp exp) {
                return exp.diff(name);
            }
        });
    }

}

aspect SmoothOrder{

    public static final int ASTNode.SMOOTH_ORDER_ANNOTATION_DEFAULT = -1;

    public static int ASTNode.readSmoothOrderAnnotation(AnnotationNode a) {
        AnnotationNode smoothOrder = a.forPath("smoothOrder");
        if (smoothOrder.isIntegerValue())
            return smoothOrder.integer();
        else
            return SMOOTH_ORDER_ANNOTATION_DEFAULT;
    }
    
    public void FFunctionDecl.smoothOrder(int order) {
        AnnotationNode node = annotation().forPath("smoothOrder");
        if (node.exists() || order != SMOOTH_ORDER_ANNOTATION_DEFAULT)
            // We only wan't to set this attribute if it is already set or order is non equal to default.
            annotation().forPath("smoothOrder").setValue(new FIntegerLitExp(order));
    }
    
    public interface FCallable {
        public int smoothOrder();
    }
    
    syn int FFunctionDecl.smoothOrder()     = readSmoothOrderAnnotation(annotation());
    syn int FFunctionVariable.smoothOrder() = myFCallable().smoothOrder();
    syn int InstClassDecl.smoothOrder()     = readSmoothOrderAnnotation(findSmoothOrderAnnotationRoot());
    syn int InstFunctionCall.smoothOrder()  = myInstClassDecl().smoothOrder();
    syn int FFunctionCall.smoothOrder()     = myFCallable().smoothOrder();
    
}

aspect AlgorithmDifferentiation{
    syn FCallable FFunctionDecl.diff(AnnotationNode derNode, boolean inFunction) {
        if (smoothOrder() == 0 && !inFunction)
            return null;
        FFunctionDecl func = derivativeFunction(derNode);
        if (func != null) 
            return func;
        if (smoothOrder() == SMOOTH_ORDER_ANNOTATION_DEFAULT && !inFunction)
            return null;
        return createAndAddDerivativeFunction(derNode);
    }
    
    public FFunctionDecl FFunctionDecl.createAndAddDerivativeFunction(AnnotationNode derNode) {
        FQName name = getFQName().createDerPrefixedName(1);
        derNode.setValue(name.createFIdUseExp());
        derNode.forPath("order").setValue(new FIntegerLitExp(order() + 1));
        
        Collection<FFunctionVariable> inputs = new ArrayList<FFunctionVariable>();
        Collection<FFunctionVariable> derivatedInputs = new ArrayList<FFunctionVariable>();
        Collection<FFunctionVariable> outputs = new ArrayList<FFunctionVariable>();
        Collection<FFunctionVariable> others = new ArrayList<FFunctionVariable>();
        for (FFunctionVariable ffv : getFFunctionVariables()) {
            FFunctionVariable ffvCopy = ffv.fullCopy();
            if (ffv.isInput()) {
                inputs.add(ffvCopy);
                if (ffv.order() == order() && ffv.shouldBeDifferentiated(derNode))
                    derivatedInputs.add(ffv.createDerivative());
            } else if (ffv.isOutput()) {
                ffvCopy.setFTypePrefixInputOutputOpt(new Opt<FTypePrefixInputOutput>());
                others.add(ffvCopy);
                if (ffv.order() == order() && ffv.shouldBeDifferentiated(derNode))
                    outputs.add(ffv.createDerivative());
            } else {
                others.add(ffvCopy);
                if (ffv.order() == order() && ffv.shouldBeDifferentiated(derNode))
                    others.add(ffv.createDerivative());
            }
        }
        List<FFunctionVariable> variables = new List<FFunctionVariable>();
        variables.addAll(inputs);
        variables.addAll(derivatedInputs);
        variables.addAll(outputs);
        variables.addAll(others);

        FFunctionDecl function = new FFunctionDecl(name, variables, new FAlgorithm(), new List<FAttribute>());
        function.smoothOrder(Math.max(smoothOrder() - 1, 0));
        myFClass().addFFunctionDecl(function);
        function.setFAlgorithm(getFAlgorithm().diff());
        
        return function;
    }
    
    syn FAlgorithm FAlgorithm.diff() {
        List<FStatement> diffed = new List<FStatement>();
        for (FStatement statement : getFStatements())
            statement.diff(diffed);
        return new FDerivativeAlgorithm(diffed, order() + 1);
    }
    
    public void FStatement.diff(List<FStatement> diffed) {
        throw new UnsupportedOperationException("Can not differentiate statment: " + this);
    }
    
    @Override
    public void FAssignStmt.diff(List<FStatement> diffed) {
        if (order() == myFAlgorithm().order() && shouldBeDifferentiated())
            diffed.add(new FDerivativeAssignStmt(getLeft().createDerExp(1).asFIdUseExp(), getRight().diff("time"), order() + 1));
        diffed.add(fullCopy());
    }
   
    @Override
    public void FBreakStmt.diff(List<FStatement> diffed) {
        diffed.add(fullCopy());
    }
    
    @Override
    public void FForStmt.diff(List<FStatement> diffed) {
        List<FStatement> statements = new List<FStatement>();
        for (FStatement statement : getForStmts())
            statement.diff(statements);
        diffed.add(new FForStmt(getIndex().fullCopy(), statements));
    }
    
    @Override
    public void FFunctionCallStmt.diff(List<FStatement> diffed) {
        if (order() == myFAlgorithm().order() && shouldBeDifferentiated()) {
            List<FFunctionCallLeft> lefts = new List<FFunctionCallLeft>();
            for (FFunctionCallLeft l : getLefts()) {
                Opt<FExp> lopt = l.hasFExp() ? new Opt<FExp>(l.getFExp().diff("time")) : new Opt<FExp>();
                lefts.add(new FFunctionCallLeft(lopt));
            }
            FExp diffedCall = getCall().diff("time");
            diffed.add(new FDerivativeFunctionCallStmt(lefts, (FAbstractFunctionCall) diffedCall, order() + 1));
        }
        diffed.add(fullCopy());
    }
    
    syn FIfWhenStmt FIfWhenStmt.createDifferentiated(List<FIfWhenClause> differentiatedClauses);
    eq FIfStmt.createDifferentiated(List<FIfWhenClause> differentiatedClauses) {
        List<FStatement> elseStatements = new List<FStatement>();
        for (FStatement statement : getElseStmts())
            statement.diff(elseStatements);
        return new FIfStmt(differentiatedClauses, elseStatements);
    }
    eq FWhenStmt.createDifferentiated(List<FIfWhenClause> differentiatedClauses) = new FWhenStmt(differentiatedClauses);
    
    @Override
    public void FIfWhenStmt.diff(List<FStatement> diffed) {
        List<FIfWhenClause> clauses = new List<FIfWhenClause>();
        for (FIfWhenClause clause : getFIfWhenClauses())
            clauses.add(clause.diff());
        diffed.add(createDifferentiated(clauses));
    }
    
    public FIfWhenClause FIfWhenClause.diff() {
        List<FStatement> statements = new List<FStatement>();
        for (FStatement statement : getFStatements())
            statement.diff(statements);
        return createNode(getTest().fullCopy(), statements);
    }
    
    @Override
    public void FInitArrayStmt.diff(List<FStatement> diffed) {
        diffed.add(fullCopy());
        if (order() == myFAlgorithm().order() && shouldBeDifferentiated()) {
            diffed.add(new FDerivatedInitArrayStmt(getFIdUseExp().createDerExp(1).asFIdUseExp(), order() + 1));
        }
    }
    
    @Override
    public void FReturnStmt.diff(List<FStatement> diffed) {
        diffed.add(fullCopy());
    }
    
    @Override
    public void FWhileStmt.diff(List<FStatement> diffed) {
        List<FStatement> statements = new List<FStatement>();
        for (FStatement statement : getWhileStmts())
            statement.diff(statements);
        diffed.add(new FWhileStmt(getTest().fullCopy(), statements));
    }
    
    syn FFunctionVariable FFunctionVariable.createDerivative() {
        return createNode(getFTypePrefixInputOutputOpt().fullCopy(), getType().fullCopy(), new Opt<FExp>(), 
                getFQName().createDerPrefixedName(1), order() + 1);
    }
    
    rewrite FDerExp {
        when (inFunction()) to FIdUseExp 
        new FIdUseExp(getFIdUse().getFQName().createDerPrefixedFunctionName(order()));
    }
    
    
    syn int FFunctionDecl.order()          = getFAlgorithm().order();
    syn int FAlgorithm.order()             = 0;
    eq FDerivativeAlgorithm.order()        = getOrder();
    
    syn int FFunctionVariable.order()      = getOrder();
    
    syn int FAssignStmt.order()            = 0;
    eq FDerivativeAssignStmt.order()       = getOrder();
    
    syn int FFunctionCallStmt.order()      = 0;
    eq FDerivativeFunctionCallStmt.order() = getOrder();
    
    syn int FInitArrayStmt.order()         = 0;
    eq FDerivatedInitArrayStmt.order()     = getOrder();
}
