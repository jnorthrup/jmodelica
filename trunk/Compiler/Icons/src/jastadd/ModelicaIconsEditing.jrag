import org.jmodelica.icons.Observable;
import org.jmodelica.icons.primitives.Line;
import org.jmodelica.icons.Observer;

aspect ModelicaIconsEditing {
	
	/*-------------------------------------------------------------------------
	 *                          Connection related
	 ------------------------------------------------------------------------*/
	
	public Line FConnectClause.getConnectionLine() {
		return getConnectClause().getConnectionLine();
	}
	
	private Line ConnectClause.connectionLine;
	
	public Line ConnectClause.getConnectionLine() {
		if (connectionLine != null)
			return connectionLine;
		try {
			connectionLine = annotation().createConnectionLine();
		} catch (FailedConstructionException e) {
			connectionLine = new Line();
		}
		connectionLine.addObserver(this);
		return connectionLine;
	}
	
	public class ConnectClause implements Observer{}
	
	@Override
	public void ConnectClause.update(Observable o, Object flag, Object additionalInfo) {
		if (o == getConnectionLine())
			annotation().saveConnectionLine(getConnectionLine());
	}
	
	
	/*-------------------------------------------------------------------------
	 *                          Component related
	 ------------------------------------------------------------------------*/
	public Placement InstComponentDecl.getPlacement() {
		return getComponentDecl().getPlacement();
	}
	
	private Placement ComponentDecl.placement;
	
	public Placement ComponentDecl.getPlacement() {
		if (placement != null)
			return placement;
		
		try {
			placement = annotation().createPlacement(Context.DIAGRAM);
		}
		catch(FailedConstructionException fe) {
			placement = new Placement(new Transformation(new Extent(new Point(-10, -10), new Point(10, 10))));
		}
		placement.addObserver(this);
		return placement;
	}
	
	public class ComponentDecl implements Observer{}
	
	@Override
	public void ComponentDecl.update(Observable o, Object flag, Object additionalInfo) {
		if (o == getPlacement())
			annotation().savePlacement(getPlacement());
	}
	
	public CoordinateSystem InstComponentDecl.getCoordinateSystem() {
		return myInstClass().getCoordinateSystem();
	}
	
	public CoordinateSystem InstClassDecl.getCoordinateSystem() {
		return getClassDecl().getCoordinateSystem();
	}
	
	private CoordinateSystem ClassDecl.coordinateSystem;
	
	public CoordinateSystem ClassDecl.getCoordinateSystem() {
		if (coordinateSystem != null)
			return coordinateSystem;
		coordinateSystem = annotation().forPath("Diagram/CoordinateSystem").createCoordinateSystem();
		coordinateSystem.addObserver(this);
		return coordinateSystem;
	}
	
	public class ClassDecl implements Observer{}
	
	@Override
	public void ClassDecl.update(Observable o, Object flag, Object additionalInfo) {
		if (o == getCoordinateSystem())
			annotation().forPath("Diagram").saveCoordinateSystem(getCoordinateSystem());
	}
	
	/*-------------------------------------------------------------------------
	 *                          Class related
	 ------------------------------------------------------------------------*/
	public InstComponentDecl InstClassDecl.addComponent(String className, String componentName, Placement placement) {
		ComponentDecl componentDecl = new ComponentDecl();
		componentDecl.setClassName(Access.fromClassName(className));
		componentDecl.setVisibilityType(new PublicVisibilityType());
		componentDecl.setName(new IdDecl(componentName));
		componentDecl.setComment(new Comment());
		componentDecl.setCCComment(new Comment());
		componentDecl.annotation().savePlacement(placement);
		
		FullClassDecl classDecl = (FullClassDecl)getClassDecl();
		classDecl.addNewComponentDecl(componentDecl);
		InstComponentDecl icd = (InstComponentDecl)createInstComponentDecl(componentDecl);
		addInstComponentDecl(icd);
		return icd;
	}
	
	public void InstClassDecl.removeComponent(InstComponentDecl icd) {
		removeInstComponentDecl(icd);
		((FullClassDecl)getClassDecl()).removeComponentDecl(icd.getComponentDecl());
	}
	
	public ConnectClause InstClassDecl.addConnection(String sourceID, String targetID) {
		ConnectClause connectClause = new ConnectClause();
		connectClause.setComment(new Comment());
		connectClause.setConnector1(Access.fromClassName(sourceID));
		connectClause.setConnector2(Access.fromClassName(targetID));
		addConnection(connectClause);
		return connectClause;
	}
	
	public void InstClassDecl.addConnection(ConnectClause connectClause) {
		((FullClassDecl)getClassDecl()).addNewEquation(connectClause);
		FConnectClause fcc = (FConnectClause)connectClause.instantiate();
		addFAbstractEquation(fcc);
	}
	
	public boolean InstClassDecl.removeConnection(FConnectClause fcc) {
		if (!removeFAbstractEquation(fcc))
			return false;
		((FullClassDecl) getClassDecl()).removeEquation(fcc.getConnectClause());
		return true;
	}
	

}