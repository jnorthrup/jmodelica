/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect OptimicaFlatTree {
	
	refine FlatTree public FClass InstClassDecl.createFClass() {
		if (isOptimizationClass()) {
			return new FOptClass();
		} else {
			return new FClass();
		}
	}

}

aspect OptimicaFlattening {

    public InstFullClassDecl OptClassDecl.newInstClassDecl() {
        InstOptClassDecl fcd = new InstOptClassDecl(this, new Opt(), newInstRestriction(), newInstExternalOpt(), new Opt());
        fcd.setInstConstrainingClassOpt(newInstConstrainingClassOpt(null));
        if (hasClassModification()) 
            fcd.setInstClassModification(getClassModification().newInstModification());
        return copyLocationTo(fcd);
    }

    public InstOptimizationClass OptimizationClass.newInstRestriction() {
    	return copyLocationTo(new InstOptimizationClass());
    }
    
    public class Flattener {
        private List<FConstraint> constraints = new List<FConstraint>();
        private List<FAttribute> attributes = new List<FAttribute>();
        
        public List<FConstraint> getFConstraints() {
            return constraints;
        }
        
        public List<FAttribute> getFAttributes() {
            return attributes;
        }
        
        public List<FConstraint> addFConstraint(FConstraint c) {
            return constraints.add(c);
        }
        
        public void setFAttributeList(List<FAttribute> a) {
            attributes = a;
        }
    }
    refine Flattening public void FClass.update(Flattener f) {
            refined(f);
            if (f.isFlatteningOptimica()){
	            FOptClass foc = (FOptClass) this;
	            foc.setFConstraintList(f.getFConstraints());
	            foc.setFAttributeList(f.getFAttributes());
            }
        }
    
    public void InstOptClassDecl.flattenUsedFuncsAndEnums(Flattener f) {
		getFConstraints().flattenUsedFuncsAndEnums(f);
		if (hasInstClassModification()) 
			getInstClassModification().flattenUsedFuncsAndEnums(f);
		super.flattenUsedFuncsAndEnums(f);
    }

    private static final ExtraFlattener InstOptClassDecl.optimicaExtraFlattener = InstClassDecl.addExtraFlattener(
            new InstClassDecl.ExtraFlattener() {
                public void flattenExtra(Flattener f, InstClassDecl icd) {
                    if (!f.isFlatteningOptimica()) {
                        return;
                    }
                    FQName empty = new FQNameEmpty();
                    if (icd.hasInstClassModification()) {
                        List attr = new List();
                        icd.getInstClassModification().collectAttributes(attr, empty, AttributeExpRetriever.DEFAULT, true);
                        f.setFAttributeList(attr);
                    }
                }
            });

	refine Flattening public void InstNode.flattenEquations(Flattener f, FQName name) {
        for (FAbstractEquation ae : getFAbstractEquations()) 
            ae.flatten(f, name);
        for (FConstraint c : getFConstraints()) 
            c.flatten(f, name);
    }

	refine Connections public void InstNode.buildConnectionSets(FQName prefix, ConnectionSetManager csm, boolean connect) {
		prefix = getFQName();
		for (FAbstractEquation ae : getFAbstractEquations()) 
		   ae.buildConnectionSets(prefix, csm, connect);
        for (FConstraint c : getFConstraints()) 
           c.buildConnectionSets(prefix, csm, connect);
		getInstComponentDeclList().buildConnectionSets(prefix, csm, connect);
		getInstExtendsList().buildConnectionSets(prefix, csm, connect);
	}

	syn lazy ArrayList<Constraint> ClassDecl.constraints() = new ArrayList<Constraint>();
	eq OptClassDecl.constraints() {
	    ArrayList<Constraint> l = new ArrayList<Constraint>();
		for (Constraint c : getConstraints())
			l.add(c);
		return l;
	}
	//eq ShortClassDecl.constraints() = getExtendsClauseShortClass().getSuper().myClassDecl().constraints();
	
	syn ArrayList<Constraint> InstNode.constraints() = new ArrayList<Constraint>();
	eq InstOptClassDecl.constraints() = getClassDecl().constraints();
	eq InstComponentDecl.constraints() = myInstClass().constraints();
	eq InstExtends.constraints() = myInstClass().constraints();
	
    public abstract FConstraint Constraint.instantiate();
	
	public FConstraintEq ConstraintEq.instantiate() {
		return copyLocationTo(new FConstraintEq(getLeft().instantiate(),getRight().instantiate()));
	}

	public FConstraintLeq ConstraintLeq.instantiate() {
		return copyLocationTo(new FConstraintLeq(getLeft().instantiate(),getRight().instantiate()));
	}
	
	public FConstraintGeq ConstraintGeq.instantiate() {
		return copyLocationTo(new FConstraintGeq(getLeft().instantiate(),getRight().instantiate()));
	}
	
	public InstForClauseC ForClauseC.instantiate() {
		List<InstForIndex> forIndex = new List();
		List<FConstraint> cons = new List();
		for (ForIndex fi : getForIndexs()) 
    		forIndex.add(fi.instantiate());    	
		for (Constraint c : getConstraints()) 
			cons.add(c.instantiate());
		return new InstForClauseC(forIndex, cons);
	}

	
	public FTimedVariable TimedVariable.instantiate() {
		FIdUseInstAccess name = new FIdUseInstAccess(getName().newInstAccess());
		return copyLocationTo(new FTimedVariable(name, getArg().instantiate()));
	}
	
	
    public void FConstraint.flatten(Flattener f, FQName prefix) {}
	
	public void FConstraintEq.flatten(Flattener f, FQName prefix) {
		f.addFConstraint(new FConstraintEq(getLeft().flatten(prefix),getRight().flatten(prefix)));
	}

	public void FConstraintLeq.flatten(Flattener f, FQName prefix) {
		f.addFConstraint(new FConstraintLeq(getLeft().flatten(prefix),getRight().flatten(prefix)));
	}

	public void FConstraintGeq.flatten(Flattener f, FQName prefix) {
		f.addFConstraint(new FConstraintGeq(getLeft().flatten(prefix),getRight().flatten(prefix)));
	}

	public void InstForClauseC.flatten(Flattener f, FQName prefix) {
        Indices ind = Indices.create(getInstForIndexs());
        for (Index i : ind) {
            ind.translate(i).setValues(getInstForIndexs());
            getFConstraints().flushAllRecursive();
            for (FConstraint c : getFConstraints()) {
                c.flatten(f, prefix);
            }
        }
        for (InstForIndex ifi : getInstForIndexs()) {
            ifi.clearEvaluationValue();
        }
	}

	syn nta List<FConstraint> InstNode.getFConstraintList()  { 
	    List l = new List();
	    for (Constraint c : constraints()) {
	    	l.add(c.instantiate());
	    }
	    return l;

	}

	syn List<FConstraint> InstNode.getFConstraints() {
		return getFConstraintList();	
	}

    public FExp InstTimedVariable.flatten(FQName prefix) {
        return new FTimedVariable(new FIdUse(getName().flatten()), getArg().flatten(prefix));
    }

}