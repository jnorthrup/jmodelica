/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect OptimicaParsers {
	
	refine RootAccess eq SourceRoot.language() = "Optimica";

    public abstract class ParserHandler {}

    refine Parsers public static beaver.Parser ParserHandler.createModelicaParser(AbstractModelicaScanner scanner, String fileName) {
        org.jmodelica.optimica.parser.ModelicaParser parser = 
            new org.jmodelica.optimica.parser.ModelicaParser();
        parser.setLineBreakMap(scanner.getLineBreakMap());
        parser.setFileName(fileName);
        return parser;
    }

    refine Parsers public static AbstractModelicaScanner ParserHandler.createModelicaScanner(Reader in) {
        return new org.jmodelica.optimica.parser.ModelicaScanner(in);
    }

    refine Parsers public static AbstractFlatModelicaScanner ParserHandler.createModelicaFlatScanner(Reader in) {
        return new org.jmodelica.optimica.parser.FlatModelicaScanner(in);
    }

    refine Parsers public static short ParserHandler.expModelicaGoal() {
        return org.jmodelica.optimica.parser.ModelicaParser.AltGoals.exp;
    }

    refine Parsers public static short ParserHandler.anonymousClassModelicaGoal() {
        return org.jmodelica.optimica.parser.ModelicaParser.AltGoals.anonymous_short_class;
    }

    public static beaver.Parser ParserHandler.createOptimicaParser(AbstractModelicaScanner scanner, String fileName) {
        org.jmodelica.optimica.parser.OptimicaParser parser = new org.jmodelica.optimica.parser.OptimicaParser();
        parser.setLineBreakMap(scanner.getLineBreakMap());
        parser.setFormattingInfo(scanner.getFormattingInfo());
        parser.setFileName(fileName);
        return parser;
    }

    public static AbstractModelicaScanner ParserHandler.createOptimicaScanner(Reader in) {
    	return new org.jmodelica.optimica.parser.OptimicaScanner(in);
    }

    public static short ParserHandler.expOptimicaGoal() {
        return org.jmodelica.optimica.parser.OptimicaParser.AltGoals.exp;
    }

    public static short ParserHandler.anonymousClassOptimicaGoal() {
        return org.jmodelica.optimica.parser.OptimicaParser.AltGoals.anonymous_short_class;
    }

    refine Parsers public static SourceRoot ParserHandler.parseFile(UtilInterface uif, String fileName) 
            throws ParserException, beaver.Parser.Exception, FileNotFoundException, IOException {
        return parseOptimicaFile(uif, fileName);
    }

    refine Parsers public static SourceRoot ParserHandler.parseString(UtilInterface uif, String str, String fileName)  
            throws ParserException, beaver.Parser.Exception, FileNotFoundException, IOException {
        return parseOptimicaString(uif, str, fileName);
    }

    refine Parsers public static Exp ParserHandler.parseExpString(String str) 
            throws ParserException, beaver.Parser.Exception, FileNotFoundException, IOException {
        return parseOptimicaExpString(str);
    }

    refine Parsers public static BaseClassDecl ParserHandler.parseAnonymousClassString(String code, Restriction restriction, String targetName)
            throws ParserException, beaver.Parser.Exception, FileNotFoundException, IOException {
        return parseOptimicaAnonymousClassString(code, restriction, targetName);
    }

    public static SourceRoot ParserHandler.parseOptimicaFile(UtilInterface uif, String fileName) 
            throws ParserException, beaver.Parser.Exception, FileNotFoundException, IOException {
        Reader reader = fileReader(uif, fileName);
        AbstractModelicaScanner scanner = createOptimicaScanner(new BufferedReader(reader));
        beaver.Parser parser = createOptimicaParser(scanner, fileName);
        SourceRoot sr = (SourceRoot) parser.parse(scanner);
        sr.setUtilInterface(uif);
        sr.setFileName(fileName);
        reader.close();
        return sr;
    }

    public static SourceRoot ParserHandler.parseOptimicaString(UtilInterface uif, String str, String fileName)  
            throws ParserException, beaver.Parser.Exception, FileNotFoundException, IOException {
        AbstractModelicaScanner scanner = createOptimicaScanner(new StringReader(str));
        beaver.Parser parser = createOptimicaParser(scanner, fileName);
        SourceRoot sr = (SourceRoot) parser.parse(scanner);
        sr.setUtilInterface(uif);
        sr.setFileName(fileName);
        return sr;
    }

    public static Exp ParserHandler.parseOptimicaExpString(String str) 
            throws ParserException, beaver.Parser.Exception, FileNotFoundException, IOException {
        AbstractModelicaScanner scanner = createOptimicaScanner(new StringReader(str));
        beaver.Parser parser = createOptimicaParser(scanner, EXP_FILENAME);
        Exp exp = (Exp) parser.parse(scanner, expOptimicaGoal());
        return exp;
    }

    public static BaseClassDecl ParserHandler.parseOptimicaAnonymousClassString(String code, Restriction restriction, String targetName)
            throws ParserException, beaver.Parser.Exception, FileNotFoundException, IOException {
        AbstractModelicaScanner scanner = createOptimicaScanner(new StringReader(code));
        beaver.Parser parser = createOptimicaParser(scanner, ANONYMOUS_CLASS_FILENAME);
        BaseClassDecl cl = (BaseClassDecl) parser.parse(scanner, anonymousClassOptimicaGoal());
        cl.setRestriction(restriction);
        cl.setName(new IdDecl(targetName));
        return cl;
    }

}