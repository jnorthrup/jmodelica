/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect OptimicaInitialTransformations {

   	rewrite PN_OptClassDecl {
 	  	to OptClassDecl { 
 	   		
 	   		//System.out.println("****  rewrite PN_OptClassDecl");
 	   		
 	   		Composition c = getComposition();
  	
  			List eqn = new List();
  			List constr = new List();
  			List alg = new List();
  			List sup = new List();
  			List imp = new List();
  			List classd = new List();
  			List compd = new List();
  			List annotation = new List();
  	
  			for (int i=0; i<c.getNumClause();i++) {
  	
  				Clause cl = c.getClause(i);
  		
  	    		if (cl instanceof ComponentDecl) {
  	    			compd.add((ComponentDecl)cl);
  	    		} else if (cl instanceof EquationClause) {
  	    			EquationClause ec = (EquationClause)cl;
  	    			for (int j=0;j<ec.getNumAbstractEquation();j++) {
		  	    		eqn.add(ec.getAbstractEquation(j));
  	    			}
		  	    }else if (cl instanceof AlgorithmClause) {
  	    			AlgorithmClause ac = (AlgorithmClause)cl;
  	    			for (int j=0;j<ac.getNumAbstractAlgorithm();j++) {
		  	    		alg.add(ac.getAbstractAlgorithm(j));
  	    			}
  	    		}else if (cl instanceof ConstraintClause) {
  	    			ConstraintClause cc = (ConstraintClause)cl;
  	    			for (int j=0;j<cc.getNumConstraint();j++) {
		  	    		constr.add(cc.getConstraint(j));
  	    			}
		  	    } else if (cl instanceof ExtendsClause) {
		  	    	sup.add((ExtendsClause)cl);
		  	    } else if (cl instanceof ClassDecl) {
		  	    	classd.add((ClassDecl)cl);
		  	    } else if (cl instanceof ImportClause) {
		  	    	imp.add((ImportClause)cl);
		  	    } else if (cl instanceof ElementAnnotation) {
		  	    	annotation.add(((ElementAnnotation)cl).getAnnotation());
		  	    }

		  	}
  	
  			Opt ext_clause = c.hasAbstractExternalClause()?
  			                 new Opt((ExternalClause)c.getAbstractExternalClause()):
  			                 new Opt();
  			
 	     	OptClassDecl fc = new OptClassDecl(visibility(),
 	     		                          getEncapsulatedOpt(),
 	     	                              getPartialOpt(),
 	     	                              getRestriction(),
 	     	                              getName(),
 	     	                              getRedeclareOpt(),
 	     	                              getFinalOpt(),
 	     	                              getInnerOpt(),
 	     	                              getOuterOpt(),
 	     	                              getReplaceableOpt(),
 	     	                              getConstrainingClauseOpt(),
 	     	                              getConstrainingClauseCommentOpt(),
 	     	                              getStringCommentOpt(),
 	     	                              eqn,
 	     	                              alg,
 	     	                              sup,
 	     	                              imp,
 	     	                              classd,
 	     	                              compd,
 	     	                              annotation,
 	     	                              ext_clause,
 	     	                              getEndName(),
 	     	                              getClassModificationOpt(),
 	     	                              constr);
 	     	fc.setStart(getRestriction().getStart());
 	     	return fc;
 	  	}
   	}



}

aspect FlatTypeSystem {
	eq FTimedVariable.type() = new BrokenType();
}

aspect FlatVariability {
    // TODO: Fix this
    eq FTimedVariable.variability() = null;
}
