/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect OptimicaTransformCanonical {
	
	public void FOptClass.transformCanonical() {
		
		FRealVariable fv_startTime = null;
		FRealVariable fv_finalTime = null;
		
		// Are there class attributes set for startTime?
		FAttribute startTime_attr = null;
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("startTime")) {
				startTime_attr = a;
				break;
			}
		}
		
		if (root().options.getBooleanOption("convert_free_dependent_parameters_to_algebraics")) {
			for (FVariable fv : freeDependentParameters()) {
				fv.setFTypePrefixVariability(new FContinuous());
			}
		}		

		root().flushAllRecursive();
	
		// Create a parameter for the startTime attribute
		fv_startTime = new FRealVariable(new FPublicVisibilityType(), 
				fParameter(), new Opt(), 
				startTime_attr!=null? (List<FAttribute>)startTime_attr.getFAttributeList().fullCopy(): new List(), 
						(startTime_attr!=null && startTime_attr.hasValue())? new Opt(startTime_attr.getValue().fullCopy()): 
							new Opt(new FRealLitExp("0.0")), 
							new Opt(), new FQName("startTime"));
		addFVariable(fv_startTime);

		// Are there attributes set for finalTime
		FAttribute finalTime_attr = null;
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("finalTime")) {
				finalTime_attr = a;
				break;
			}
		}
		
		// Create a parameter for the finalTime attribute
		fv_finalTime = new FRealVariable(new FPublicVisibilityType(), 
				fParameter(), new Opt(), 
				finalTime_attr!=null? (List<FAttribute>)finalTime_attr.getFAttributeList().fullCopy(): new List(), 
				(finalTime_attr!=null && finalTime_attr.hasValue())? new Opt(finalTime_attr.getValue().fullCopy()):
					new Opt(new FRealLitExp("1.0")), new Opt(), new FQName("finalTime"));
				addFVariable(fv_finalTime);

		if (root().options.getBooleanOption("normalize_minimum_time_problems")) {
			// Add 'finalTime' parameter if free
			
			// If either startTime or finalTime is free, and the 
			// option canonicalize_minimum_time_problems is true then the
			// optimization interval should be [0,1]. Notice that attributes
			// being reset here have been copied to the parameters with names
			// startTime and finalTime.
			if (finalTimeFreeAttribute() || startTimeFreeAttribute()) {				

				// Attributes set for startTime?
				if (startTime_attr!=null) {
					// Fixed interval starting at 0.0
					startTime_attr.setValue(new FRealLitExp("0.0"));
					FExp initialGuess_exp = null;
					for (FAttribute a : startTime_attr.getFAttributes()) {
						// Remove binding expression if startTime is free
						if (startTimeFreeAttribute()) {
							fv_startTime.setBindingExpOpt(new Opt());
						}
						// Set free to false
						if (a.getName().name().equals("free")) {
							a.setValue(new FBooleanLitExpFalse());
							a.setAttributeSet(false);
						}
						// Set start to 0.0
						if (a.getName().name().equals("start")) {
							a.setValue(new FRealLitExp("0.0"));
							a.setAttributeSet(false);
						}					
						// Set initialGuess to 0.0
						if (a.getName().name().equals("initialGuess")) {
							initialGuess_exp = a.getValue().fullCopy();
							a.setValue(new FRealLitExp("0.0"));
							a.setAttributeSet(false);
						}
					}
					// If the start attribute is not explicitly set, then it
					// should be set to the value of the initialGuess attribute.
					if (!fv_startTime.startAttributeSet()) {
						fv_startTime.addFAttribute(new FAttribute(new FIdUse("Real"),
	                            new FIdDecl(new FQName("start")),
	                            new Opt(initialGuess_exp!=null? initialGuess_exp: new FRealLitExp("0.0")),
	                            true,
	                            new Opt(),
	                            new Opt(),
	                            new List()));											
					}
				} 
				// Same as for startTime
				if (finalTime_attr!=null) {
					finalTime_attr.setValue(new FRealLitExp("1.0"));
					FExp initialGuess_exp = null;
					for (FAttribute a : finalTime_attr.getFAttributes()) {
						if (finalTimeFreeAttribute()) {
							fv_finalTime.setBindingExpOpt(new Opt());
						}
						if (a.getName().name().equals("free")) {
							a.setValue(new FBooleanLitExpFalse());
							a.setAttributeSet(false);
						}
						if (a.getName().name().equals("start")) {
							a.setValue(new FRealLitExp(("1.0")));
							a.setAttributeSet(false);
						}					
						if (a.getName().name().equals("initialGuess")) {
							initialGuess_exp = a.getValue().fullCopy();
							a.setValue(new FRealLitExp("1.0"));
							a.setAttributeSet(false);
						}	
					}	
					if (!fv_finalTime.startAttributeSet()) {
						fv_finalTime.addFAttribute(new FAttribute(new FIdUse("Real"),
	                            new FIdDecl(new FQName("start")),
	                            new Opt(initialGuess_exp!=null? initialGuess_exp: new FRealLitExp("1.0")),
	                            true,
	                            new Opt(),
	                            new Opt(),
	                            new List()));											
					}
				}
				enableStartAndFinalTimeRewrite();
			}
			// Flush to reset cashes
			root().flushAllRecursive();
		}
		super.transformCanonicalBase();		

	}
	
	// Don't add initial equations for optimization problems
	public void FOptClass.addInitialEquations() {}
	
	protected void FOptClass.scalarizeAllVarDependent(List<FVariable> vars) {
		super.scalarizeAllVarDependent(vars);
		scalarizeConstraints(vars);
		scalarizeClassAttributes();
	}
	
	protected void FOptClass.scalarizeConstraints(List<FVariable> vars) {
		List<FAbstractEquation> eqns = getFEquationBlock(0).getFAbstractEquations();
		List<FConstraint> constr = new List<FConstraint>();
		for (FConstraint c : getFConstraints()) 
			c.scalarize(constr, eqns, vars, Collections.<String,FExp>emptyMap());
		setFConstraintList(constr);
	}
	
	protected void FOptClass.scalarizeClassAttributes() {
		List<FAttribute> al = new List<FAttribute>();
		for (FAttribute a : getFAttributes()) 
			al.add(a.scalarize(Index.NULL));
		setFAttributeList(al);
	}
	
	/**
	 * \brief Scalarize constraint and put all scalarized equations in list eqns.
	 */
	public void FConstraint.scalarize(List<FConstraint> constr, List<FAbstractEquation> eqns, 
			List<FVariable> vars, Map<String,FExp> indexMap) {}
	
	public void FRelationConstraint.scalarize(List<FConstraint> constr, List<FAbstractEquation> eqns, 
			List<FVariable> vars, Map<String,FExp> indexMap) {
		createArrayTemporaries(eqns, vars, indexMap, true);
		//log.debug("FEquation.scalarize() " + ndims());
		if (ndims()==0) {
			/**
			 * If the constraint is of dimension 0, i.e, already scalar,
			 * the constraint is "scalarized" into a simple constraint where
			 * e.g. built in functions are replaced by elementary operations.
			 */
			constr.add(createNode(getLeft().scalarize(indexMap), getRight().scalarize(indexMap)));
		} else if (ndims() > 0) {
			/**
			 * If the expression is an array expression, then the FExp.getArray()
			 * element is used to generate scalar constraints.
			 */
			// Iterate over array elements and create scalarized equation for each
			for (Index i : indices()) {
				constr.add(createNode(getLeft().getArray().get(i).scalarize(indexMap), 
						getRight().getArray().get(i).scalarize(indexMap)));
			}
		}
	}
	
	public void FForClauseC.scalarize(List<FConstraint> constr, List<FAbstractEquation> eqns,
			List<FVariable> vars, Map<String,FExp> indexMap) {
		createArrayTemporaries(eqns, vars, indexMap, true);
		Map<String,FExp> myIndexMap = new HashMap<String,FExp>();
		myIndexMap.putAll(indexMap);
		Indices indices = indices();
		for (Index i : indices) {
			int j = 0;
			int[] ii = indices.translate(i).index();
			for (FForIndex fi : getFForIndexs()) {
				myIndexMap.put(fi.getFVariable().name(), new FIntegerLitExp(ii[j]));
				j++;
			}
			for (FConstraint c : getFConstraints()) 
				c.scalarize(constr, eqns, vars, myIndexMap);
		}
	}
	
	public FExp FTimedVariable.scalarize(Map<String,FExp> indexMap) { 
		return new FTimedVariable(getName().scalarize(indexMap),getArg().scalarize(indexMap)); 
	}
	
	public FExp FStartTimeExp.scalarize(Map<String,FExp> indexMap) { return new FStartTimeExp(); } 
	public FExp FFinalTimeExp.scalarize(Map<String,FExp> indexMap) { return new FFinalTimeExp(); } 
	
}

aspect NormalizeFinalTimeProblems {

	boolean FDerExp.rewriteStartAndFinalTime = false;
	public void ASTNode.enableStartAndFinalTimeRewrite() {
		for (ASTNode n : this)
			n.enableStartAndFinalTimeRewrite();
	}
	
	public void FDerExp.enableStartAndFinalTimeRewrite() {
		super.enableStartAndFinalTimeRewrite();
		rewriteStartAndFinalTime = true;
		is$Final = false;
	}
	
	boolean FDerExp.rewritten = false;
	
	rewrite FDerExp {when (rewriteStartAndFinalTime && !rewritten) to FExp {
		    //System.out.println("hej");
			FDivExp e = new FDivExp(this,new FSubExp(new FIdUseExp(new FIdUse("finalTime")),
					new FIdUseExp(new FIdUse("startTime"))));
			rewritten = true;
			return e;
		}
	}
}

