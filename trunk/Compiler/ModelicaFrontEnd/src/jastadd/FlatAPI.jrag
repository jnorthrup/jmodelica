/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import java.util.LinkedHashSet;
import java.util.ArrayList;

aspect FlatAPI {
	
	/**
	 * The value reference value is represented by a 32 bit unsigned integer 
	 * variable. The lowest 28 bits is used to represent the index of a 
	 * variable of the corresponding Real, Integer, Boolean and String vector. 
	 * Bits 29-31 represents the primitive type, where:
	 * 0: Real
	 * 1: Integer
	 * 2: Boolean
	 * 3: String
	 * Bit 32 is left unused.
	 *
	 */
	inh lazy int FVariable.valueReference();
	eq FClass.getFVariable(int i).valueReference() {
		int index = 0;
		index = 0x00000000; 
		FVariable fv = getFVariable(i);
		if (independentRealConstants().indexOf(fv) >= 0) {
			return index + independentRealConstants().indexOf(fv);
		} 
		index += numIndependentRealConstants();
		if (dependentRealConstants().indexOf(fv) >= 0) {
			return index + dependentRealConstants().indexOf(fv);
		} 
		index += numDependentRealConstants();
		if (independentRealParameters().indexOf(fv) >= 0) {
			return index + independentRealParameters().indexOf(fv);
		} 
		index += numIndependentRealParameters();
		if (dependentRealParameters().indexOf(fv) >= 0) {
			return index + dependentRealParameters().indexOf(fv);
		} 
		index += numDependentRealParameters();
		if (derivativeVariables().indexOf(fv) >= 0) {
			return index + derivativeVariables().indexOf(fv);
		} 		
		index += numDerivativeVariables(); 
		if (differentiatedRealVariables().indexOf(fv) >= 0) {
			return index + differentiatedRealVariables().indexOf(fv);
		} 
		index += numDifferentiatedRealVariables();
		if (realInputs().indexOf(fv) >= 0) {
			return index + realInputs().indexOf(fv);
		} 
		index += numRealInputs();
		if (algebraicRealVariables().indexOf(fv) >= 0) {
			return index + algebraicRealVariables().indexOf(fv);
		} 

		index = 0x10000000; 
		if (independentIntegerConstants().indexOf(fv) >= 0) {
			return index + independentIntegerConstants().indexOf(fv);
		} 
		index += numIndependentIntegerConstants();
		if (dependentIntegerConstants().indexOf(fv) >= 0) {
			return index + dependentIntegerConstants().indexOf(fv);
		} 
		index += numDependentIntegerConstants();
		if (independentIntegerParameters().indexOf(fv) >= 0) {
			return index + independentIntegerParameters().indexOf(fv);
		} 
		index += numIndependentIntegerParameters();
		if (dependentIntegerParameters().indexOf(fv) >= 0) {
			return index + dependentIntegerParameters().indexOf(fv);
		} 
		index += numDependentIntegerParameters();
		if (integerInputs().indexOf(fv) >= 0) {
			return index + integerInputs().indexOf(fv);
		} 
		index += numIntegerInputs();
		if (algebraicIntegerVariables().indexOf(fv) >= 0) {
			return index + algebraicIntegerVariables().indexOf(fv);
		} 
		
		index = 0x20000000; 
		if (independentBooleanConstants().indexOf(fv) >= 0) {
			return index + independentBooleanConstants().indexOf(fv);
		} 
		index += numIndependentBooleanConstants();
		if (dependentBooleanConstants().indexOf(fv) >= 0) {
			return index + dependentBooleanConstants().indexOf(fv);
		} 
		index += numDependentBooleanConstants();
		if (independentBooleanParameters().indexOf(fv) >= 0) {
			return index + independentBooleanParameters().indexOf(fv);
		} 
		index += numIndependentBooleanParameters();
		if (dependentBooleanParameters().indexOf(fv) >= 0) {
			return index + dependentBooleanParameters().indexOf(fv);
		} 
		index += numDependentBooleanParameters();
		if (booleanInputs().indexOf(fv) >= 0) {
			return index + booleanInputs().indexOf(fv);
		} 
		index += numBooleanInputs();
		if (algebraicBooleanVariables().indexOf(fv) >= 0) {
			return index + algebraicBooleanVariables().indexOf(fv);
		} 

		index = 0x30000000; 
		if (independentStringConstants().indexOf(fv) >= 0) {
			return index + independentStringConstants().indexOf(fv);
		} 
		index += numIndependentStringConstants();
		if (dependentStringConstants().indexOf(fv) >= 0) {
			return index + dependentStringConstants().indexOf(fv);
		} 
		index += numDependentStringConstants();
		if (independentStringParameters().indexOf(fv) >= 0) {
			return index + independentStringParameters().indexOf(fv);
		} 
		index += numIndependentStringParameters();
		if (dependentStringParameters().indexOf(fv) >= 0) {
			return index + dependentStringParameters().indexOf(fv);
		} 
		index += numDependentStringParameters();
		if (stringInputs().indexOf(fv) >= 0) {
			return index + stringInputs().indexOf(fv);
		} 
		index += numStringInputs();
		if (algebraicStringVariables().indexOf(fv) >= 0) {
			return index + algebraicStringVariables().indexOf(fv);
		} 

		return index;
	}

    syn int FClass.numReals() = reals().size();
	coll ArrayList<FRealVariable> FClass.reals() 
	  [new ArrayList<FRealVariable>()] with add root FlatRoot;
	FRealVariable contributes this to FClass.reals() for myFClass();
//	FDerivativeVariable contributes this to FClass.reals() for myFClass();

    syn int FClass.numIntegers() = integers().size();
	coll ArrayList<FIntegerVariable> FClass.integers() 
	  [new ArrayList<FIntegerVariable>()] with add root FlatRoot;
	FIntegerVariable contributes this to FClass.integers() for myFClass();

    syn int FClass.numBooleans() = booleans().size();
	coll ArrayList<FBooleanVariable> FClass.booleans() 
	  [new ArrayList<FBooleanVariable>()] with add root FlatRoot;
	FBooleanVariable contributes this to FClass.booleans() for myFClass();

    syn int FClass.numStrings() = strings().size();
	coll ArrayList<FStringVariable> FClass.strings() 
	  [new ArrayList<FStringVariable>()] with add root FlatRoot;
	FStringVariable contributes this to FClass.strings() for myFClass();

    syn int FClass.numIndependentConstants() = independentConstants().size();
	coll ArrayList<FVariable> FClass.independentConstants() 
	  [new ArrayList<FVariable>()] with add root FlatRoot;
	FVariable contributes
 		this when isIndependentConstant()
	to FClass.independentConstants() for myFClass();

	syn int FClass.numIndependentRealConstants() = independentRealConstants().size();
	syn lazy ArrayList<FRealVariable> FClass.independentRealConstants() {
      ArrayList<FRealVariable> set = new ArrayList<FRealVariable>();
      set.addAll(reals());
      set.retainAll(independentConstants());
      return set;
     }
	syn int FVariable.independentRealConstantIndex() =
		myFClass().independentRealConstants().indexOf(this);
	
	syn int FClass.numIndependentIntegerConstants() = independentIntegerConstants().size();
	syn lazy ArrayList<FIntegerVariable> FClass.independentIntegerConstants() {
      ArrayList<FIntegerVariable> set = new ArrayList<FIntegerVariable>();
      set.addAll(integers());
      set.retainAll(independentConstants());
      return set;
     }
	syn int FVariable.independentIntegerConstantIndex() =
		myFClass().independentIntegerConstants().indexOf(this);

	
	syn int FClass.numIndependentBooleanConstants() = independentBooleanConstants().size();
	syn lazy ArrayList<FBooleanVariable> FClass.independentBooleanConstants() {
      ArrayList<FBooleanVariable> set = new ArrayList<FBooleanVariable>();
      set.addAll(booleans());
      set.retainAll(independentConstants());
      return set;
     }
	syn int FVariable.independentBooleanConstantIndex() =
		myFClass().independentBooleanConstants().indexOf(this);
	
	syn int FClass.numIndependentStringConstants() = independentStringConstants().size();
	syn lazy ArrayList<FStringVariable> FClass.independentStringConstants() {
      ArrayList<FStringVariable> set = new ArrayList<FStringVariable>();
      set.addAll(strings());
      set.retainAll(independentConstants());
      return set;
     }
	syn int FVariable.independentStringConstantIndex() =
		myFClass().independentStringConstants().indexOf(this);

	// TODO: Is there such a thing as a dependent constant??
    syn int FClass.numDependentConstants() = dependentConstants().size();
	coll ArrayList<FVariable> FClass.dependentConstants() 
	  [new ArrayList<FVariable>()] with add root FlatRoot;
	FVariable contributes
 		this when false
	to FClass.dependentConstants() for myFClass();
	
	syn int FClass.numDependentRealConstants() = dependentRealConstants().size();
	syn lazy ArrayList<FRealVariable> FClass.dependentRealConstants() {
      ArrayList<FRealVariable> set = new ArrayList<FRealVariable>();
      set.addAll(reals());
      set.retainAll(dependentConstants());
      return set;
     }
	syn int FVariable.dependentRealConstantIndex() =
		myFClass().dependentRealConstants().indexOf(this);
	
	syn int FClass.numDependentIntegerConstants() = dependentIntegerConstants().size();
	syn lazy ArrayList<FIntegerVariable> FClass.dependentIntegerConstants() {
      ArrayList<FIntegerVariable> set = new ArrayList<FIntegerVariable>();
      set.addAll(integers());
      set.retainAll(dependentConstants());
      return set;
     }
	syn int FVariable.dependentIntegerConstantIndex() =
		myFClass().dependentIntegerConstants().indexOf(this);
	
	syn int FClass.numDependentBooleanConstants() = dependentBooleanConstants().size();
	syn lazy ArrayList<FBooleanVariable> FClass.dependentBooleanConstants() {
      ArrayList<FBooleanVariable> set = new ArrayList<FBooleanVariable>();
      set.addAll(booleans());
      set.retainAll(dependentConstants());
      return set;
     }
	syn int FVariable.dependentBooleanConstantIndex() =
		myFClass().dependentBooleanConstants().indexOf(this);
	
	syn int FClass.numDependentStringConstants() = dependentStringConstants().size();
	syn lazy ArrayList<FStringVariable> FClass.dependentStringConstants() {
      ArrayList<FStringVariable> set = new ArrayList<FStringVariable>();
      set.addAll(strings());
      set.retainAll(dependentConstants());
      return set;
     }
	syn int FVariable.dependentStringConstantIndex() =
		myFClass().dependentStringConstants().indexOf(this);

    syn int FClass.numIndependentParameters() = independentParameters().size();
	coll ArrayList<FVariable> FClass.independentParameters() 
	  [new ArrayList<FVariable>()] with add root FlatRoot;
	FVariable contributes
 		this when isIndependentParameter()
	to FClass.independentParameters() for myFClass();
	
	syn int FClass.numIndependentRealParameters() = independentRealParameters().size();
	syn lazy ArrayList<FRealVariable> FClass.independentRealParameters() {
      ArrayList<FRealVariable> set = new ArrayList<FRealVariable>();
      set.addAll(reals());
      set.retainAll(independentParameters());
      return set;
     }
	syn int FVariable.independentRealParameterIndex() =
		myFClass().independentRealParameters().indexOf(this);

	syn int FClass.numIndependentIntegerParameters() = independentIntegerParameters().size();
	syn lazy ArrayList<FIntegerVariable> FClass.independentIntegerParameters() {
      ArrayList<FIntegerVariable> set = new ArrayList<FIntegerVariable>();
      set.addAll(integers());
      set.retainAll(independentParameters());
      return set;
     }
	syn int FVariable.independentIntegerParameterIndex() =
		myFClass().independentIntegerParameters().indexOf(this);
	
	syn int FClass.numIndependentBooleanParameters() = independentBooleanParameters().size();
	syn lazy ArrayList<FBooleanVariable> FClass.independentBooleanParameters() {
      ArrayList<FBooleanVariable> set = new ArrayList<FBooleanVariable>();
      set.addAll(booleans());
      set.retainAll(independentParameters());
      return set;
     }
	syn int FVariable.independentBooleanParameterIndex() =
		myFClass().independentBooleanParameters().indexOf(this);

	syn int FClass.numIndependentStringParameters() = independentStringParameters().size();
	syn lazy ArrayList<FStringVariable> FClass.independentStringParameters() {
      ArrayList<FStringVariable> set = new ArrayList<FStringVariable>();
      set.addAll(strings());
      set.retainAll(independentParameters());
      return set;
     }
	syn int FVariable.independentStringParameterIndex() =
		myFClass().independentStringParameters().indexOf(this);

    syn int FClass.numDependentParameters() = dependentParameters().size();
	coll ArrayList<FVariable> FClass.dependentParameters() 
	  [new ArrayList<FVariable>()] with add root FlatRoot;
	FVariable contributes
 		this when isDependentParameter()
	to FClass.dependentParameters() for myFClass();

	syn int FClass.numDependentRealParameters() = dependentRealParameters().size();
	syn lazy ArrayList<FRealVariable> FClass.dependentRealParameters() {
      ArrayList<FRealVariable> set = new ArrayList<FRealVariable>();
      set.addAll(reals());
      set.retainAll(dependentParameters());
      return set;
     }
	syn int FVariable.dependentRealParameterIndex() =
		myFClass().dependentRealParameters().indexOf(this);

	syn int FClass.numDependentIntegerParameters() = dependentIntegerParameters().size();
	syn lazy ArrayList<FIntegerVariable> FClass.dependentIntegerParameters() {
      ArrayList<FIntegerVariable> set = new ArrayList<FIntegerVariable>();
      set.addAll(integers());
      set.retainAll(dependentParameters());
      return set;
     }
	syn int FVariable.dependentIntegerParameterIndex() =
		myFClass().dependentIntegerParameters().indexOf(this);
	
	syn int FClass.numDependentBooleanParameters() = dependentBooleanParameters().size();
	syn lazy ArrayList<FBooleanVariable> FClass.dependentBooleanParameters() {
      ArrayList<FBooleanVariable> set = new ArrayList<FBooleanVariable>();
      set.addAll(booleans());
      set.retainAll(dependentParameters());
      return set;
     }
	syn int FVariable.dependentBooleanParameterIndex() =
		myFClass().dependentBooleanParameters().indexOf(this);
	
	syn int FClass.numDependentStringParameters() = dependentStringParameters().size();
	syn lazy ArrayList<FStringVariable> FClass.dependentStringParameters() {
      ArrayList<FStringVariable> set = new ArrayList<FStringVariable>();
      set.addAll(strings());
      set.retainAll(dependentParameters());
      return set;
     }
	syn int FVariable.dependentStringParameterIndex() =
		myFClass().dependentStringParameters().indexOf(this);
	
    syn int FClass.numDifferentiatedRealVariables() = differentiatedRealVariables().size();
  	syn lazy ArrayList<FVariable> FClass.differentiatedRealVariables() {
  		ArrayList<FVariable> l = new ArrayList<FVariable>();
  		for (FVariable fv : differentiatedRealVariablesSet()) {
  			l.add(fv);
  		}
  		return l;
  	}
  	// The LinkedHashSet is used here to avoid duplicates.
	coll LinkedHashSet<FVariable> FClass.differentiatedRealVariablesSet() 
	  [new LinkedHashSet<FVariable>()] with add root FlatRoot;
	FDer contributes
 		(FVariable)getFIdUse().myFV() when !getFIdUse().myFV().isUnknown()
	to FClass.differentiatedRealVariablesSet() for myFClass();
	syn int FVariable.differentiatedRealVariableIndex() =
		myFClass().differentiatedRealVariables().indexOf(this);

    syn int FClass.numDerivativeVariables() = derivativeVariables().size();
	coll ArrayList<FVariable> FClass.derivativeVariables() 
	  [new ArrayList<FVariable>()] with add root FlatRoot;
	FDerivativeVariable contributes
		this
	to FClass.derivativeVariables() for myFClass();
	syn int FVariable.derivativeVariableIndex() =
		myFClass().derivativeVariables().indexOf(this);
	
    syn int FClass.numVariables() = variables().size();
	coll ArrayList<FVariable> FClass.variables() 
	  [new ArrayList<FVariable>()] with add root FlatRoot;
	FVariable contributes
 		this when  !isParameter() && !isConstant()
	to FClass.variables() for myFClass();
	
	syn int FClass.numRealVariables() = realVariables().size();
	syn lazy ArrayList<FRealVariable> FClass.realVariables() {
      ArrayList<FRealVariable> set = new ArrayList<FRealVariable>();
      set.addAll(reals());
      set.retainAll(variables());
      return set;
     }

	syn int FClass.numIntegerVariables() = integerVariables().size();
	syn lazy ArrayList<FIntegerVariable> FClass.integerVariables() {
      ArrayList<FIntegerVariable> set = new ArrayList<FIntegerVariable>();
      set.addAll(integers());
      set.retainAll(variables());
      return set;
     }

	syn int FClass.numBooleanVariables() = booleanVariables().size();
	syn lazy ArrayList<FBooleanVariable> FClass.booleanVariables() {
      ArrayList<FBooleanVariable> set = new ArrayList<FBooleanVariable>();
      set.addAll(booleans());
      set.retainAll(variables());
      return set;
     }

	syn int FClass.numStringVariables() = stringVariables().size();
	syn lazy ArrayList<FStringVariable> FClass.stringVariables() {
      ArrayList<FStringVariable> set = new ArrayList<FStringVariable>();
      set.addAll(strings());
      set.retainAll(variables());
      return set;
     }
	
    syn int FClass.numAlgebraicVariables() = algebraicVariables().size();
	syn lazy ArrayList<FVariable> FClass.algebraicVariables() { 
	  ArrayList<FVariable> set = new ArrayList<FVariable>();
  	  set.addAll(variables());
  	  set.removeAll(differentiatedRealVariables());
  	  set.removeAll(derivativeVariables());
  	  set.removeAll(inputs());
  /*
      for (FVariable fv : getFVariables()) {
      	if (!fv.isParameter() && !fv.isConstant() && !fv.isInput() && 
      	  !differentiatedRealVariables().contains(fv)) {
      		set.add(fv);
      	}
      }
    */
      return set;
	}
	
    syn int FClass.numAlgebraicRealVariables() = algebraicRealVariables().size();
	syn lazy ArrayList<FVariable> FClass.algebraicRealVariables() { 
	  ArrayList<FVariable> set = new ArrayList<FVariable>();
	  set.addAll(algebraicVariables());
	  set.retainAll(reals());
      return set;
	}
	syn int FVariable.algebraicRealVariableIndex() =
		myFClass().algebraicRealVariables().indexOf(this);
	
    syn int FClass.numAlgebraicIntegerVariables() = algebraicIntegerVariables().size();
	syn lazy ArrayList<FVariable> FClass.algebraicIntegerVariables() { 
	  ArrayList<FVariable> set = new ArrayList<FVariable>();
	    set.addAll(algebraicVariables());
	    set.retainAll(integers());
      return set;
	}
	syn int FVariable.algebraicIntegerVariableIndex() =
		myFClass().algebraicIntegerVariables().indexOf(this);
	
    syn int FClass.numAlgebraicBooleanVariables() = algebraicBooleanVariables().size();
	syn lazy ArrayList<FVariable> FClass.algebraicBooleanVariables() { 
	  ArrayList<FVariable> set = new ArrayList<FVariable>();
	    set.addAll(algebraicVariables());
	    set.retainAll(booleans());
      return set;
	}
	syn int FVariable.algebraicBooleanVariableIndex() =
		myFClass().algebraicBooleanVariables().indexOf(this);

    syn int FClass.numAlgebraicStringVariables() = algebraicStringVariables().size();
	syn lazy ArrayList<FVariable> FClass.algebraicStringVariables() { 
	  ArrayList<FVariable> set = new ArrayList<FVariable>();
	    set.addAll(algebraicVariables());
	    set.retainAll(strings());
      return set;
	}
	syn int FVariable.algebraicStringVariableIndex() =
		myFClass().algebraicStringVariables().indexOf(this);

    syn int FClass.numVariablesWithBindingExp() = variablesWithBindingExp().size();
	coll ArrayList<FVariable> FClass.variablesWithBindingExp() 
	  [new ArrayList<FVariable>()] with add root FlatRoot;
	FVariable contributes
 		this when !isParameter() && !isConstant() &&
 		  hasBindingExp()
	to FClass.variablesWithBindingExp() for myFClass();

	syn int FClass.numRealVariablesWithBindingExp() = realVariablesWithBindingExp().size();
	syn lazy ArrayList<FVariable> FClass.realVariablesWithBindingExp() {
      ArrayList<FVariable> set = new ArrayList<FVariable>();
      set.addAll(variablesWithBindingExp());
      set.retainAll(reals());
      return set;
     }

	syn int FClass.numIntegerVariablesWithBindingExp() = integerVariablesWithBindingExp().size();
	syn lazy ArrayList<FVariable> FClass.integerVariablesWithBindingExp() {
      ArrayList<FVariable> set = new ArrayList<FVariable>();
      set.addAll(variablesWithBindingExp());
      set.retainAll(integers());
      return set;
     }

	syn int FClass.numBooleanVariablesWithBindingExp() = booleanVariablesWithBindingExp().size();
	syn lazy ArrayList<FVariable> FClass.booleanVariablesWithBindingExp() {
      ArrayList<FVariable> set = new ArrayList<FVariable>();
      set.addAll(variablesWithBindingExp());
      set.retainAll(booleans());
      return set;
     }

	syn int FClass.numStringVariablesWithBindingExp() = stringVariablesWithBindingExp().size();
	syn lazy ArrayList<FVariable> FClass.stringVariablesWithBindingExp() {
      ArrayList<FVariable> set = new ArrayList<FVariable>();
      set.addAll(variablesWithBindingExp());
      set.retainAll(strings());
      return set;
     }
     
    syn int FClass.numInputs() = inputs().size();
	coll ArrayList<FVariable> FClass.inputs() 
	  [new ArrayList<FVariable>()] with add root FlatRoot;
	FVariable contributes
 		this when isInput()
	to FClass.inputs() for myFClass();

	syn int FClass.numRealInputs() = realInputs().size();
	syn lazy ArrayList<FVariable> FClass.realInputs() {
      ArrayList<FVariable> set = new ArrayList<FVariable>();
      set.addAll(inputs());
      set.retainAll(reals());
      return set;
     }
	syn int FVariable.realInputIndex() =
		myFClass().realInputs().indexOf(this);
	
	syn int FClass.numIntegerInputs() = integerInputs().size();
	syn lazy ArrayList<FVariable> FClass.integerInputs() {
      ArrayList<FVariable> set = new ArrayList<FVariable>();
      set.addAll(inputs());
      set.retainAll(integers());
      return set;
     }
	syn int FVariable.integerInputIndex() =
		myFClass().integerInputs().indexOf(this);

	syn int FClass.numBooleanInputs() = booleanInputs().size();
	syn lazy ArrayList<FVariable> FClass.booleanInputs() {
      ArrayList<FVariable> set = new ArrayList<FVariable>();
      set.addAll(inputs());
      set.retainAll(booleans());
      return set;
     }
	syn int FVariable.booleanInputIndex() =
		myFClass().booleanInputs().indexOf(this);

	syn int FClass.numStringInputs() = stringInputs().size();
	syn lazy ArrayList<FVariable> FClass.stringInputs() {
      ArrayList<FVariable> set = new ArrayList<FVariable>();
      set.addAll(inputs());
      set.retainAll(strings());
      return set;
     }
	syn int FVariable.stringInputIndex() =
		myFClass().stringInputs().indexOf(this);

    syn int FClass.numEquations() = equations().size();
	syn ArrayList<FAbstractEquation> FClass.equations() {
		ArrayList<FAbstractEquation> l = new ArrayList<FAbstractEquation>();
		for (FEquationBlock b : getFEquationBlocks()) {
			for (FAbstractEquation e : b.getFAbstractEquations()) {
				l.add(e);
			}
		}
		return l;
	}
	
	syn int FClass.numEventIndicators() = numRelExpInEquations();
	
    syn int FClass.numRelExpInEquations() = relExpInEquations().size();
	coll ArrayList<FLogBinExp> FClass.relExpInEquations() 
	  [new ArrayList<FLogBinExp>()] with add root FlatRoot;
	FLogBinExp contributes
 		this when inEquationSection()
	to FClass.relExpInEquations() for myFClass();	
	
	syn int FClass.numInitialEquations() = initialEquations().size(); 
	syn ArrayList<FAbstractEquation> FClass.initialEquations() {
		ArrayList<FAbstractEquation> l = new ArrayList<FAbstractEquation>();
		for (FAbstractEquation e : getFInitialEquations()) {
			l.add(e);
		}
		return l;
	}

	syn int FClass.numInitialGuessEquations() {
		int n_eq = 0;
		for (FRealVariable fv : realVariables()) {
			if (!(fv.fixedAttribute())) {
				n_eq++;
			}
		}
		return n_eq;
	}

	syn int FClass.numInitialEventIndicators() = numRelExpInInitialEquations();
    syn int FClass.numRelExpInInitialEquations() = 
    	relExpInInitialEquations().size();
	coll ArrayList<FLogBinExp> FClass.relExpInInitialEquations() 
	  [new ArrayList<FLogBinExp>()] with add root FlatRoot;
	FLogBinExp contributes
 		this when inInitialEquationSection()
	to FClass.relExpInInitialEquations() for myFClass();	
	
/*	

	coll ArrayList<FVariable> FClass.structuralParameters() [new ArrayList<FVariable>()] with add root FlatRoot;
	FIdUseExp contributes
		(FVariable)myFV() when inArraySubscripts()
	to FClass.structuralParameters() for myFClass();

	coll ArrayList<FEquation> FVariable.variableIncidence() [new ArrayList<FEquation>()] with add root FlatRoot;
    FIdUseExp contributes
		myFEquation() when inFEquation()
	to FVariable.variableIncidence() for (FVariable)myFV();
	
	syn lazy ArrayList<ArrayList> FClass.variableIncidence() {
		ArrayList<ArrayList> l = new ArrayList<ArrayList>();
		for (FVariable fv : variables()) {
           l.add(fv.variableIncidence());
       } 
		return l;
	
	}
	
	inh boolean FExp.inFEquation();
	eq FEquation.getChild().inFEquation()=true;
	eq Root.getChild().inFEquation()=false;
	
	inh FEquation FExp.myFEquation();
	eq FEquation.getChild().myFEquation()=this;
	eq Root.getChild().myFEquation()=null;
*/	
	inh FClass FVariable.myFClass();
	inh FClass FExp.myFClass();
	inh FClass FIdUse.myFClass();
	eq FClass.getChild().myFClass() = this;
	eq Root.getChild().myFClass() = null; 

	syn lazy boolean FVariable.isIndependentConstant() = isConstant();
	syn lazy boolean FVariable.isDependentConstant() = false;
	syn lazy boolean FVariable.isIndependentParameter();
	eq FVariable.isIndependentParameter() = isParameter() &&
 		  (hasBindingExp()? getBindingExp().isConstantExp(): 
 		  (startAttributeSet()? startAttributeExp().isConstantExp(): true));
	syn lazy boolean FVariable.isDependentParameter() = isParameter() &&
 		  (hasBindingExp()? getBindingExp().isParameterExp(): 
 		  (startAttributeSet()? startAttributeExp().isParameterExp(): false));
	syn boolean FVariable.isVariable() = !isParameter() && !isConstant();
	syn lazy boolean FVariable.isDifferentiatedVariable() = 
	  myFClass().differentiatedRealVariables().contains(this);
	syn lazy boolean FVariable.isDerivativeVariable() = false;
	eq FDerivativeVariable.isDerivativeVariable() = true;
	syn lazy boolean FVariable.isAlgebraicVariable() = 
	  myFClass().algebraicRealVariables().contains(this);

	inh FVariable FExp.inBindingExp();
	eq FVariable.getBindingExp().inBindingExp() = this;
	eq Root.getChild().inBindingExp() = null; 
	
	coll ArrayList<FVariable> FVariable.referencedFVariablesInBindingExp() 
	  [new ArrayList<FVariable>()] with add root FlatRoot;
	FIdUseExp contributes
		(FVariable)myFV() when !myFV().isUnknown()
	to FVariable.referencedFVariablesInBindingExp() for inBindingExp();
	
}

aspect FlatCausality {

	syn boolean FTypePrefixInputOutput.inputCausality() = false;
	eq FInput.inputCausality() = true;	
	syn boolean FTypePrefixInputOutput.outputCausality() = false;
	eq FOutput.outputCausality() = true;	
	
    syn boolean FVariable.isInput() = 
      hasFTypePrefixInputOutput()? getFTypePrefixInputOutput().inputCausality(): false;    
    syn boolean FVariable.isOutput() = 
      hasFTypePrefixInputOutput()? getFTypePrefixInputOutput().outputCausality(): false;

}

aspect FlatTypes {

	syn boolean AbstractFVariable.isReal() = false;
	eq FRealVariable.isReal() = true;
	syn boolean AbstractFVariable.isInteger() = false;
	eq FIntegerVariable.isInteger() = true;
	syn boolean AbstractFVariable.isBoolean() = false;
	eq FBooleanVariable.isBoolean() = true;
	syn boolean AbstractFVariable.isString() = false;
	eq FStringVariable.isString() = true;
		
}

/**
 * \brief Evaluation of attriutes for primitive types.
 */
aspect Attributes {

	// Quantity attribute
	syn lazy boolean FVariable.quantityAttributeSet() {
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("quantity")) {
				return a.getAttributeSet();
			}
		}
		return false;
	}
		
	syn lazy FExp FVariable.quantityAttributeExp() {
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("quantity")) {
				return a.hasValue()? a.getValue(): null;
			}
		}
		return null;
	}

	syn CValue FVariable.quantityAttributeCValue() =
		quantityAttributeSet()? quantityAttributeExp().ceval():
			new CValueString("");
		
	syn String FVariable.quantityAttribute() = 
		quantityAttributeCValue().stringValue();

	// Unit attribute
	syn lazy boolean FRealVariable.unitAttributeSet() {
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("unit")) {
				return a.getAttributeSet();
			}
		}
		return false;
	}
		
	syn lazy FExp FRealVariable.unitAttributeExp()  {
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("unit")) {
				return a.hasValue()? a.getValue(): null;
			}
		}
		return null;
	}

	syn CValue FRealVariable.unitAttributeCValue() =
		unitAttributeSet()? unitAttributeExp().ceval():
			new CValueString("");
		
	syn String FRealVariable.unitAttribute() =  
		unitAttributeCValue().stringValue();

	// Display Unit attribute
	syn lazy boolean FRealVariable.displayUnitAttributeSet() {
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("displayUnit")) {
				return a.getAttributeSet();
			}
		}
		return false;
	}
		
	syn lazy FExp FRealVariable.displayUnitAttributeExp()  {
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("displayUnit")) {
				return a.hasValue()? a.getValue(): null;
			}
		}
		return null;
	}

	syn CValue FRealVariable.displayUnitAttributeCValue() =
		displayUnitAttributeSet()? displayUnitAttributeExp().ceval():
			new CValueString("");
		
	syn String FRealVariable.displayUnitAttribute() =  
		displayUnitAttributeCValue().stringValue();

	// min attribute
	syn lazy boolean FVariable.minAttributeSet() {
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("min")) {
				return a.getAttributeSet();
			}
		}
		return false;
	}
	
	syn lazy FExp FVariable.minAttributeExp() {
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("min")) {
				return a.hasValue()? a.getValue(): null;
			}
		}
		return null;
	}

	syn CValue FRealVariable.minAttributeCValue() =
		minAttributeSet()? minAttributeExp().ceval():
			new CValueReal(-1e20);
	syn CValue FIntegerVariable.minAttributeCValue() =
		minAttributeSet()? minAttributeExp().ceval():
			new CValueInteger((int)-1e10);
	
	syn double FRealVariable.minAttribute() = 
		minAttributeCValue().realValue();
	syn int FIntegerVariable.minAttribute() = 
		minAttributeCValue().intValue();	

	// max attribute
	syn lazy boolean FVariable.maxAttributeSet() {
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("max")) {
				return a.getAttributeSet();
			}
		}
		return false;
	}
	
	syn lazy FExp FVariable.maxAttributeExp() {
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("max")) {
				return a.hasValue()? a.getValue(): null;
			}
		}
		return null;
	}

	syn CValue FRealVariable.maxAttributeCValue() =
		maxAttributeSet()? maxAttributeExp().ceval():
			new CValueReal(1e20);
	syn CValue FIntegerVariable.maxAttributeCValue() =
		maxAttributeSet()? maxAttributeExp().ceval():
			new CValueInteger((int)1e10);
	
	syn double FRealVariable.maxAttribute() = 
		maxAttributeCValue().realValue();
	syn int FIntegerVariable.maxAttribute() = 
		maxAttributeCValue().intValue();	

	// start attribute
	syn lazy boolean FVariable.startAttributeSet() {
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("start")) {
				return a.getAttributeSet();
			}
		}
		return false;
	}
	
	syn lazy FExp FVariable.startAttributeExp() {
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("start")) {
				return  a.hasValue()? a.getValue(): null;
			}
		}
		return null;
	}

	syn CValue FVariable.startAttributeCValue();
	eq FRealVariable.startAttributeCValue() =
		startAttributeSet()? startAttributeExp().ceval():
			new CValueReal(0.0);
	eq FDerivativeVariable.startAttributeCValue() = new CValueReal(0.0);
		eq FIntegerVariable.startAttributeCValue() =
		startAttributeSet()? startAttributeExp().ceval():
			new CValueInteger(0);
	eq FBooleanVariable.startAttributeCValue() =
		startAttributeSet()? startAttributeExp().ceval():
			new CValueBoolean(false);
	eq FStringVariable.startAttributeCValue() =
		startAttributeSet()? startAttributeExp().ceval():
			new CValueString("");
	
	syn double FRealVariable.startAttribute() = 
		startAttributeCValue().realValue();
	syn int FIntegerVariable.startAttribute() = 
		startAttributeCValue().intValue();
	syn boolean FBooleanVariable.startAttribute() = 
		startAttributeCValue().booleanValue();
	syn String FStringVariable.startAttribute() = 
		startAttributeCValue().stringValue();

	// fixed attribute
	syn lazy boolean FVariable.fixedAttributeSet() {
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("fixed")) {
				return a.getAttributeSet();
			}
		}
		return false;
	}
	
	syn lazy FExp FVariable.fixedAttributeExp() {
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("fixed")) {
				return a.hasValue()? a.getValue(): null;
			}
		}
		return null;
	}
	
	syn CValue FRealVariable.fixedAttributeCValue() =
		fixedAttributeSet()? fixedAttributeExp().ceval():
			isParameter() || isConstant()? new CValueBoolean(true):
				new CValueBoolean(false);

	syn CValue FIntegerVariable.fixedAttributeCValue() =
		fixedAttributeSet()? fixedAttributeExp().ceval():
			isParameter() || isConstant()? new CValueBoolean(true):
				new CValueBoolean(false);

	syn CValue FBooleanVariable.fixedAttributeCValue() =
		fixedAttributeSet()? fixedAttributeExp().ceval():
			isParameter() || isConstant()? new CValueBoolean(true):
				new CValueBoolean(false);

	syn boolean FRealVariable.fixedAttribute() = 
		fixedAttributeCValue().booleanValue();
	syn boolean FIntegerVariable.fixedAttribute() = 
		fixedAttributeCValue().booleanValue();	
	syn boolean FBooleanVariable.fixedAttribute() = 
		fixedAttributeCValue().booleanValue();	
		
	// Nominal attribute
	syn lazy boolean FRealVariable.nominalAttributeSet() {
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("nominal")) {
				return a.getAttributeSet();
			}
		}
		return false;
	}
		
	syn lazy FExp FRealVariable.nominalAttributeExp()  {
		for (FAttribute a : getFAttributes()) {
			if (a.getName().name().equals("nominal")) {
				return a.hasValue()? a.getValue(): null;
			}
		}
		return null;
	}

	syn CValue FRealVariable.nominalAttributeCValue() =
		nominalAttributeSet()? nominalAttributeExp().ceval():
			new CValueReal(1.0);
		
	syn double FRealVariable.nominalAttribute() =  
		nominalAttributeCValue().realValue();
				
}

aspect FVariableUses {
	
	/**
	 * \brief Collection attribute returning all variable uses in expressions.
	 */
	coll HashSet<FIdUseExp> FVariable.uses() [new HashSet<FIdUseExp>()] 
	   with add root FlatRoot;
	
	FIdUseExp contributes this when !(getParent() instanceof FDer) to 
	   FVariable.uses() for myFV();

}

aspect LinearFVariables {
	
	/**
	 * \brief Check linearity of variable.
	 * 
	 * The attribute isLinear returns true if all uses of the variable appears
	 * linearly in equations and in initial equations. Parameters and constants
	 * are assumed to be literals in the linearity computation. Accordingly,
	 * multiplication of a variable with a parameter or constant does not render
	 * the variable nonlinear. Also, parameters and constants are considered
	 * to be linear themselves.
	 */
	syn lazy boolean FVariable.isLinear() {
		if (isParameter() || isConstant()) {
			return true;
		}
		for (FIdUseExp e : uses()) {
			if (!e.isLinear()) {
				return false;
			}
		}
		return true;
	}
	
	/**
	 * \brief Check if a subexpression appears linearly.
	 * 
	 * Note that this method does not check if the expression itself is linear
	 * but wheather it apperas linearly in a composite expression. For example
	 * the sub expression 'sin(x)' appears linearly in '1+sin(x)'.
	 */
	inh boolean FExp.isLinear();
	eq FlatRoot.getChild().isLinear() = true;
	eq SourceRoot.getChild().isLinear() = true;
	
	eq FAbstractEquation.getChild().isLinear() = true;
	
	eq FMulExp.getLeft().isLinear() =
		(getRight().isConstantExp() || getRight().isParameterExp())?
				isLinear() : false;
	eq FMulExp.getRight().isLinear() =
		(getLeft().isConstantExp() || getLeft().isParameterExp())?
				isLinear() : false;
	eq FDivExp.getLeft().isLinear() =
		(getRight().isConstantExp() || getRight().isParameterExp())?
				isLinear() : false;			
	eq FDivExp.getRight().isLinear() = false;		
    eq FPowExp.getChild().isLinear() = false;
    eq FFunctionCall.getChild().isLinear() = false;
    eq FBuiltInExp.getChild().isLinear() = false;
				
}

aspect FlatDiagnostics {

	syn String FClass.diagnostics() {
		StringBuffer str = new StringBuffer();
		str.append("Diagnostics for flattened class " + name() + "\n");

		str.append("Number of independent constants:              " + 
		  numIndependentConstants() + "\n");
		str.append("  Number of Real independent constants:       " + 
		  numIndependentRealConstants() + "\n");
		str.append("  Number of Integer independent constants:    " + 
		  numIndependentIntegerConstants() + "\n");
		str.append("  Number of Boolean independent constants:    " + 
		  numIndependentBooleanConstants() + "\n");
		str.append("  Number of String independent constants:     " + 
		  numIndependentStringConstants() + "\n");

		str.append("Number of dependent constants:                " + 
		  numDependentConstants() + "\n");
		str.append("  Number of Real dependent constants:         " + 
		  numDependentRealConstants() + "\n");
		str.append("  Number of Integer dependent constants:      " + 
		  numDependentIntegerConstants() + "\n");
		str.append("  Number of Boolean dependent constants:      " + 
		  numDependentBooleanConstants() + "\n");
		str.append("  Number of String dependent constants:       " + 
		  numDependentStringConstants() + "\n");

		str.append("Number of independent parameters:             " + 
		  numIndependentParameters() + "\n");
		str.append("  Number of Real independent parameters:      " + 
		  numIndependentRealParameters() + "\n");
		str.append("  Number of Integer independent parameters:   " + 
		  numIndependentIntegerParameters() + "\n");
		str.append("  Number of Boolean independent parameters:   " + 
		  numIndependentBooleanParameters() + "\n");
		str.append("  Number of String independent parameters:    " + 
		  numIndependentStringParameters() + "\n");
		  		  
		str.append("Number of dependent parameters:               " + 
		  numDependentParameters() + "\n");
		str.append("  Number of Real dependent parameters:        " + 
		  numDependentRealParameters() + "\n");
		str.append("  Number of Integer dependent parameters:     " + 
		  numDependentIntegerParameters() + "\n");
		str.append("  Number of Boolean dependent parameters:     " + 
		  numDependentBooleanParameters() + "\n");
		str.append("  Number of String dependent parameters:      " + 
		  numDependentStringParameters() + "\n");
		  
		str.append("Number of differentiated variables:           " + 
				  numDifferentiatedRealVariables() + "\n"); 
		str.append("Number of derivative variables:               " + 
				  numDerivativeVariables() + "\n"); 
		  
		str.append("Number of inputs:                             " + 
		  numInputs() + "\n");
		str.append("  Number of Real inputs:                      " + 
		  numRealInputs() + "\n");
		str.append("  Number of Integer inputs:                   " + 
		  numIntegerInputs() + "\n");
		str.append("  Number of Boolean inputs:                   " + 
		  numBooleanInputs() + "\n");
		str.append("  Number of String inputs:                    " + 
		  numStringInputs() + "\n");
		
		str.append("Number of variables :                         " + 
		  numVariables() + "\n");
		str.append("  Number of Real variables:                   " + 
		  numRealVariables() + "\n");
		str.append("  Number of Integer variables:                " + 
		  numIntegerVariables() + "\n");
		str.append("  Number of Boolean variables:                " + 
		  numBooleanVariables() + "\n");
		str.append("  Number of String variables:                 " + 
		  numStringVariables() + "\n");
		
		str.append("Number of algebraic variables :               " + 
		  numAlgebraicVariables() + "\n");
		str.append("  Number of Real algebraic variables:         " + 
		  numAlgebraicRealVariables() + "\n");
		str.append("  Number of Integer algebraic variables:      " + 
		  numAlgebraicIntegerVariables() + "\n");
		str.append("  Number of Boolean algebraic variables:      " + 
		  numAlgebraicBooleanVariables() + "\n");
		str.append("  Number of String algebraic variables:       " + 
		  numAlgebraicStringVariables() + "\n");

		str.append("Number of equations:                          " + 
		  numEquations() + "\n");
		
		str.append("Number of variables with binding expression:  " + 
		  numVariablesWithBindingExp() + "\n");
		str.append("  Number of Real variables with binding exp:  " + 
		  numRealVariablesWithBindingExp() + "\n");
		str.append("  Number of Integer variables binding exp:    " + 
		  numIntegerVariablesWithBindingExp() + "\n");
		str.append("  Number of Boolean variables binding exp:    " + 
		  numBooleanVariablesWithBindingExp() + "\n");
		str.append("  Number of String variables binding exp:     " + 
		  numStringVariablesWithBindingExp() + "\n");
			
		str.append("Total number of equations:                    " + 
				  (numEquations()+numVariablesWithBindingExp()) + "\n");
	
		str.append("Number of initial equations:                  " + 
		  numInitialEquations() + "\n");

		str.append("Number of relational exps in equations:       " + 
				  (numRelExpInEquations()) + "\n");

		str.append("Number of relational exps in init equations:  " + 
				  (numRelExpInInitialEquations()) + "\n");
		
		str.append("\n");
		
		str.append(variableDiagnostics());
		
		str.append("\n");  

		str.append(aliasDiagnostics());
		
		str.append("\n");  

		return str.toString();
	}

	public String FClass.aliasDiagnostics() {
		StringBuffer str = new StringBuffer();
		str.append("Alias sets:\n");
		if (getAliasManager()!=null) {
			str.append(getAliasManager().printAliasSets());
			int n_elim = 0;
			for (LinkedHashSet<AliasVariable> aliasSet : 
				getAliasManager().getAliasSets()) {
				n_elim += aliasSet.size() - 1;
			}
			str.append(n_elim + " variables can be eliminated");
				
		} else {
			str.append("  Alias sets not computed.\n");
		}
		return str.toString();	
		
	}

	public String FClass.variableDiagnostics() {
		
		StringBuffer str = new StringBuffer();
		
		str.append("Independent constants: \n");
		for (FVariable fv : independentConstants()) {
			str.append(" " + fv.name());
			str.append(": number of uses: " + fv.uses().size() + ", isLinear: " 
					+ fv.isLinear());
				str.append("\n");
		}
		str.append("\n");
		
		str.append("Dependent constants: \n");
		for (FVariable fv : dependentConstants()) {
			str.append(" " + fv.name());
			str.append(": number of uses: " + fv.uses().size() + ", isLinear: " 
					+ fv.isLinear());
				str.append("\n");
		}
		str.append("\n");
		
		str.append("Independent parameters: \n");
		for (FVariable fv : independentParameters()) {
			str.append(" " + fv.name());
			str.append(": number of uses: " + fv.uses().size() + ", isLinear: " 
					+ fv.isLinear());
			if (fv.hasBindingExp()) {
				str.append(" evaluated binding exp: ");
				if (fv.isReal()) {
					str.append(fv.getBindingExp().ceval().realValue());
				} else if (fv.isInteger()) {
					str.append(fv.getBindingExp().ceval().intValue());
				} else if (fv.isBoolean()) {
					str.append(fv.getBindingExp().ceval().booleanValue());
				} else if (fv.isString()) {
					str.append(fv.getBindingExp().ceval().stringValue());
				}
			}
			str.append("\n");
		}
		str.append("\n");
		
		str.append("Dependent parameters: \n");
		for (FVariable fv : dependentParameters()) {
			str.append(" " + fv.name());
			str.append(": number of uses: " + fv.uses().size() + ", isLinear: " 
					+ fv.isLinear());
				str.append("\n");
		}

		str.append("\n");  
		str.append("Differentiated variables: \n");
		for (FVariable fv : differentiatedRealVariables()) {
			str.append(" " + fv.name());
			str.append(": number of uses: " + fv.uses().size() + ", isLinear: " 
					+ fv.isLinear());
			str.append("\n");
		}

		str.append("\n");  
		str.append("Derivative variables: \n");
		for (FVariable fv : derivativeVariables()) {
			str.append(" " + fv.name());
			str.append(": number of uses: " + fv.uses().size() + ", isLinear: " 
					+ fv.isLinear());
				str.append("\n");
		}
		str.append("\n");  

		str.append("Algebraic variables: \n");
		for (FVariable fv : algebraicRealVariables()) {
			str.append(" " + fv.name());
			str.append(": number of uses: " + fv.uses().size() + ", isLinear: " 
					+ fv.isLinear());
			str.append(", alias: ");
			if (!fv.isAlias()) {
				str.append("no");
			} else {
				if (fv.isNegated()) {
					str.append("-");
				}
				str.append(fv.alias().valueReference());
			}
			str.append("\n");
		}
		str.append("\n");
		
		str.append("Input variables: \n");
		for (FVariable fv : inputs()) {
			str.append(" " + fv.name());
			str.append(": number of uses: " + fv.uses().size() + ", isLinear: " 
					+ fv.isLinear());
				str.append("\n");
		}

		return str.toString();
		
	}



}