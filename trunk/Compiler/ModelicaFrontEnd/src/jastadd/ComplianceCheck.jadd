/*
    Copyright (C) 2010 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect ComplianceCheck {

	/**
	 * \brief Check for code that is not allowed in its current context.
	 * 
	 * Examples would be checking that classes follow the requirements of 
	 * their restriction. 
	 */
	public void ASTNode.complianceCheck() {}
	
	public void FIfWhenClause.complianceCheck() {
		if (!getTest().variability().lessOrEqual(fParameter()))
			warning("Using if statements is currently not supported when compiling with CppAD, and can give erroneous results");
	}
	
	public void FWhileStmt.complianceCheck() {
		if (!getTest().variability().lessOrEqual(fParameter()))
			warning("Using while statements is currently not supported when compiling with CppAD, and can give erroneous results");
	}
	
	public void InstRecord.complianceCheck() {
		if (type().isArray())
			warning("Using arrays of records is currently not supported when compiling with CppAD, and can give erroneous results");
	}
	

	public void FUnsupportedEquation.collectErrors() {
		compliance("Unsupported equation type");
	}

	public void FUnsupportedExp.collectErrors() {
		compliance("Unsupported expression type");
	}
	
	public void InstPrimitive.complianceCheck() {
		super.complianceCheck();
		if (isString())
			compliance("String variables are not supported");
		if (isInteger() && !variability().lessOrEqual(fParameter()))
			compliance("Integer variables are not supported, only constants and parameters");
		if (isBoolean() && !variability().lessOrEqual(fParameter()))
			compliance("Boolean variables are not supported, only constants and parameters");		
	}

	public void InstComponentDecl.complianceCheck() {
		if (hasConditionalAttribute())
			compliance("Conditional components are not supported");
	}
	
	
}