/*
    Copyright (C) 2010 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect ComplianceCheck {

	/**
	 * \brief Check for code that is not allowed in its current context.
	 * 
	 * Examples would be checking that classes follow the requirements of 
	 * their restriction. 
	 */
	public void ASTNode.complianceCheck() {}
	
	public void FIfWhenClause.complianceCheck() {
		super.complianceCheck();
		if (!getTest().variability().lessOrEqual(fParameter()))
			warning("Using if statements is currently not supported when compiling with CppAD, and can give erroneous results");
	}
	
	public void FWhileStmt.complianceCheck() {
		super.complianceCheck();
		if (!getTest().variability().lessOrEqual(fParameter()))
			warning("Using while statements is currently not supported when compiling with CppAD, and can give erroneous results");
	}
	
	public void InstAccess.complianceCheck() {
		super.complianceCheck();
		if (myInstComponentDecl().isRecord() && hasFArraySubscripts() && inFunction() && 
				!getFArraySubscripts().variability().lessOrEqual(fParameter())) {
			warning("Using arrays of records with indices of higher than parameter variability is currently not supported when compiling with CppAD");
		}
	}
	
/*	public void InstExternal.complianceCheck() {
		super.complianceCheck();
		if (!hasFExternalLanguage() || !getFExternalLanguage().supportedLanguage())
			compliance("External functions are not supported");
	}
*/	
	syn boolean FExternalLanguage.supportedLanguage() = false;
	eq FBuiltinExternalLanguage.supportedLanguage()   = true;
	eq FUnknownExternalLanguage.supportedLanguage()   = true;  // Avoid duplicate errors

	public void FWhenEquation.complianceCheck() {
		compliance("When equations are currently not supported");
	}

	public void FIfEquation.complianceCheck() {
		if (!shouldEliminateIf())
			compliance("If equations are currently only supported with constant or parameter test expressions");
	}

	public void FUnsupportedEquation.collectErrors() {
		compliance("Unsupported equation type");
	}

	public void FUnsupportedExp.collectErrors() {
		compliance("Unsupported expression type");
	}
	
	public void FWhenStmt.complianceCheck() {
		super.complianceCheck();
		compliance("When statements are not supported");
	}
	
	public void FUnsupportedBuiltIn.complianceCheck() {
		compliance("The " + getName() + "() function-like operator is not supported");
	}
	
	public void FSampleExp.complianceCheck() {
		compliance("The sample() function-like operator is not supported");
	}
	
	public void FInitialExp.complianceCheck() {
		compliance("The initial() function-like operator is not supported");
	}
	
	public void FIntegerExp.complianceCheck() {
		compliance("The integer() function-like operator is not supported");
	}
	
	public void FIgnoredBuiltIn.complianceCheck() {
		warning("The " + getName() + 
				"() function-like operator is not supported, and is currently ignored");
	}
	
	public void FDotAddExp.complianceCheck() {
		super.complianceCheck();
		if (type().isString())
			compliance("String concatenation is not supported");
	}
	
	public void InstComponentDecl.complianceCheck() {
		super.complianceCheck();
		if (getComponentDecl().isInner() || getComponentDecl().isOuter())
			compliance("Inner/outer components are not supported");
	}
	
	public void InstPrimitive.complianceCheck() {
		super.complianceCheck();
		if (isString())
			compliance("String variables are not supported");
		if (isInteger() && !variability().lessOrEqual(fParameter()) && !inFunction())
			compliance("Integer variables are not supported, only constants and parameters");
		if (isBoolean() && !variability().lessOrEqual(fParameter()))
			compliance("Boolean variables are not supported, only constants and parameters");
	}
	
	public void InstEnum.complianceCheck() {
		super.complianceCheck();
		if (!variability().lessOrEqual(fParameter()))
			compliance("Enumeration variables are not supported, only constants and parameters");
	}
	
	public void InstNamedModification.complianceCheck() {
		if (getName().hasFArraySubscripts())
			compliance("Modifiers of specific array elements are not supported");
	}
	
	public void FClass.checkDuplicateVariables() {
		HashSet<String> h = new HashSet<String>();
		for (FVariable fv : getFVariables()) {
			if (h.contains(fv.name())) {
				compliance("The variable " + fv.name() + " is declared multiple times. "+
						"Possibly, the model is still legal, but the JModelica.org compiler "+
						"does currently not merge indentical components.");
			} else {
				h.add(fv.name());
			}	
		}
	}
	
	public void FClass.checkUnsupportedStreamConnections() {
		for (ConnectionSet cse : getConnectionSetManager().getConnectionSetList()) {
			if (cse.numStreamVariables() > 2) {
				compliance("Stream connections with more than two connectors are not supported: " + cse);
			}
		}
	}
	
}