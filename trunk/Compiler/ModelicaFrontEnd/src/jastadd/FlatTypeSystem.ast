/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

abstract AbstractFlatType ;

// FlatTypes consist of all valid types in a flat Modelica program
FlatType : AbstractFlatType ::= FPrimitiveType <NumberDimensions:int> ;

// The EmptyType is the type associated with the empty expression.
// This is a valid type, but it has not valid operators defined on it.
EmptyType : AbstractFlatType ;

//FEmptyType : FPrimitiveType;

// The BrokenType is used to signify any type errors.
// When an expression has a BrokenType in one of its subexpressions,
// then the type of the super expression should be the BrokenType.
// The super expression should not throw an error. It is the job
// of the originating faulty subexpression to throw an error.
BrokenType : AbstractFlatType ;

//FBrokenType : FPrimitiveType;

