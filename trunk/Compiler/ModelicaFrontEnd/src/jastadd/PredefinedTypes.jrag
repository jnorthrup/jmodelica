/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect PredefinedTypes {

    public List SourceRoot.computePredefinedType() {
        return getProgram().getPredefinedTypeList();
    }
    
    inh List FullClassDecl.getPredefinedType();
    eq SourceRoot.getProgram().getPredefinedType() = computePredefinedType();
    eq Root.getChild().getPredefinedType() = null;

    
    /* The predefined types Real, Integer etc of Modelica are
     * much like user-defined classes, in that they have components 
     * (called attributes). However, the types of attributes are restricted
     * to RealType, IntegerType, StringType and BooleanType, which corresponds
     * to machine representations (in the following referred to as built-in types). 
     * It is therefore convenient to implement the predefined types
     * as regular classes, in order to reuse the name and type lookup mechanisms.
     * Some differences apply however. The types of predefined types must
     * be looked up only amongst the built-in types. Also, there are no 
     * component accesses that needs to be looked up predefined types.
     * The predefined types are defined in the (list) non terminal attribute
     * PredefinedType.
     */

    /**
     * This attribute defines the NTA for predefined types
     * which contains a list of predefined PrimitiveClassDef:s.
     */
    syn lazy List Program.getPredefinedTypeList() {
        List l = new List();

        String builtInDef = 
                "type Real\n"
              + "RealType value=0;\n"
              + "parameter StringType quantity=\"\";\n"
              + "parameter StringType unit=\"\";\n"
              + "parameter StringType displayUnit=\"\";\n"
              + "parameter RealType min=-1e20, max=1e20;\n"
              + "parameter RealType start=0;\n"
              + "parameter BooleanType fixed=false;\n"
              + "parameter RealType nominal=0;\n"
              + "parameter EnumType stateSelect=StateSelect.default;\n"
              + "end Real;\n"
                
              + "type Integer\n"
              + "IntegerType value=0;\n"
              + "parameter StringType quantity=\"\";\n"
              + "parameter IntegerType min=-1e20, max=1e20;\n"
              + "parameter IntegerType start=0;\n"
              + "parameter BooleanType fixed=false;\n"
              + "end Integer;\n"
                
              + "type Boolean\n"
              + "BooleanType value=0;\n"
              + "parameter StringType quantity=\"\";\n"
              + "parameter BooleanType start=false;\n"
              + "parameter BooleanType fixed=true;\n"
              + "end Boolean;\n"
                
              + "type String\n"
              + "StringType value=0;\n"
              + "parameter StringType quantity=\"\";\n"
              + "parameter StringType start=\"\";\n"
              + "end String;\n"
                
              + "type StateSelect = enumeration("
              + " never \"Do not use as state at all.\","
              + " avoid \"Use as state, if it cannot be avoided (but only if variable appears differentiated and no other potential state with attribute default, prefer, or always can be selected).\","
              + " default \"Use as state if appropriate, but only if variable appears differentiated.\","
              + " prefer \"Prefer it as state over those having the default value (also variables can be selected, which do not appear differentiated). \","
              + " always \"Do use it as a state.\""
              + ");\n"
                
              + "type AssertionLevel = enumeration(error, warning);\n"
                
              + "partial model ExternalObject\n"
              + "end ExternalObject;\n";

        PrimitiveClassDecl pcd = null;

        Program p;
        try {
            p = ParserHandler.parseString(builtInDef, "").getProgram();
        } catch (Exception e) {
            return l;
        }
        
        for (Element elem : p.getUnstructuredEntity(0).getElements()) {
            FullClassDecl cd = (FullClassDecl) elem;
            
            if (!cd.name().equals("StateSelect") && !cd.name().equals("AssertionLevel")) {
                pcd = new PrimitiveClassDecl(cd.getName(),
                        new PublicVisibilityType(),
                        new Opt(),
                        new Opt(),
                        cd.getRestriction(),
                        new Opt(),
                        new Opt(),
                        new Opt(),
                        new Opt(),
                        new Opt(),
                        new Opt(),
                        new Opt(),
                        new Opt(),
                        cd.getEquationList(),
                        cd.getAlgorithmList(),
                        cd.getSuperList(),
                        cd.getImportList(),
                        cd.getClassDeclList(),
                        cd.getComponentDeclList(),
                        cd.getElementModificationList(),
                        new Opt(),
                        cd.getAnnotationOpt(),
                        cd.getEndDecl());
                l.add(pcd); 
            } else {
                pcd = new EnumClassDecl(cd.getName(),
                        new PublicVisibilityType(),
                        new Opt(),
                        new Opt(),
                        cd.getRestriction(),
                        new Opt(),
                        new Opt(),
                        new Opt(),
                        new Opt(),
                        new Opt(),
                        new Opt(),
                        new Opt(),
                        new Opt(),
                        cd.getEquationList(),
                        cd.getAlgorithmList(),
                        cd.getSuperList(),
                        cd.getImportList(),
                        cd.getClassDeclList(),
                        cd.getComponentDeclList(),
                        cd.getElementModificationList(),
                        new Opt(),
                        cd.getAnnotationOpt(),
                        cd.getEndDecl(),
                        new Symbol("enumeration"));
                pcd.originalComposition = cd.originalComposition;
                l.add(pcd);
            }
        }
        
        return l;
    }
    
    /**
     * This attribute defines the NTA for obtaining a base enumeration
     * declaration, which is used to construct user defined enumeration
     * types.
     */
    syn lazy EnumClassDecl Program.getEnumBaseDecl() {

        // Build a string with a Modelica class corresponding to a basic
    	// enumeration
        String builtInDef = 
                "type BaseEnum\n"
              + "EnumType value;\n"
              + "parameter StringType quantity=\"\";\n"
              + "parameter EnumType min, max;\n"
              + "parameter EnumType start;\n"
              + "parameter BooleanType fixed=false;\n"
              + "end BaseEnum;\n";
        
        EnumClassDecl ecd = null;
  
        try {
        
            SourceRoot sr = ParserHandler.parseString(builtInDef,"");
            Program p = sr.getProgram();

            FullClassDecl cd = (FullClassDecl)(p.getUnstructuredEntity(0).getElement(0));   
            
            ecd = new EnumClassDecl(cd.getName(),
                                    new PublicVisibilityType(),
                                    new Opt(),
                                    new Opt(),
                                    cd.getRestriction(),
                                    new Opt(),
                                    new Opt(),
                                    new Opt(),
                                    new Opt(),
                                    new Opt(),
                                    new Opt(),
                                    new Opt(),
                                    new Opt(),
                                    cd.getEquationList(),
                                    cd.getAlgorithmList(),
                                    cd.getSuperList(),
                                    cd.getImportList(),
                                    cd.getClassDeclList(),
                                    cd.getComponentDeclList(),
                                    cd.getElementModificationList(),
                                    new Opt(),
                                    cd.getAnnotationOpt(),
                                    cd.getEndDecl(),
                                    new Symbol("enumeration"));
            ecd.originalComposition = cd.originalComposition;
        
        } catch(Exception e){e.printStackTrace();}
            
        //log.debug("Program.getPredefinedTypeList(): "+l.getNumChild());
        
        return ecd;
        
    }

    private static final String Program.BUILTIN_FUNCS = 
              "function initial end initial;\n"
            + "function terminal end terminal;\n"
            + "function smooth\n"
            + "  input Integer p;\n"
            + "  input Real expr;\n"   // Type not used
            + "  output Real y;\n"     // Type not used
            + "end smooth;\n"
            + "function noEvent\n"
            + "  input Real expr;\n"   // Type not used
            + "  output Real y;\n"     // Type not used
            + "end noEvent;\n"
            + "function sample\n"
            + "  input Real start;\n"
            + "  input Real interval;\n"
            + "  output Real y;\n"     // Type not used
            + "end sample;\n"
            + "function pre\n"
            + "  input Real x;\n"      // Type not used
            + "  output Real y;\n"     // Type not used
            + "end pre;\n"
            + "function edge\n"
            + "  input Real x;\n"      // Type not used
            + "  output Real y;\n"     // Type not used
            + "end edge;\n"
            + "function change\n"
            + "  input Real x;\n"      // Type not used
            + "  output Real y;\n"     // Type not used
            + "end change;\n"
            + "function reinit\n"
            + "  input Real x;\n"      // Type not used
            + "  input Real expr;\n"     // Type not used
            + "end reinit;\n"
            + "function assert\n"
            + "  input Boolean condition;\n"
            + "  input String message;\n"
            + "  input AssertionLevel level = AssertionLevel.error;\n"
            + "end assert;\n"
            + "function terminate\n"
            + "  input String reason;\n"
            + "end terminate;\n"
            + "function abs\n"
            + "  input Real v;\n"
            + "  output Real y;\n"
            + "end abs;\n"
            + "function sign\n"
            + "  input Real v;\n"
            + "  output Real y;\n"
            + "end sign;\n"
            + "function sqrt\n"
            + "  input Real x;\n"
            + "  output Real y;\n"
            + "end sqrt;\n"
            + "function div"
            + "  input Real x1;\n"      // Type not used
            + "  input Real x2;\n"      // Type not used
            + "  output Real y;\n"     // Type not used
            + "end div;\n"
            + "function mod"
            + "  input Real x1;\n"      // Type not used
            + "  input Real x2;\n"      // Type not used
            + "  output Real y;\n"     // Type not used
            + "end mod;\n"
            + "function rem"
            + "  input Real x1;\n"      // Type not used
            + "  input Real x2;\n"      // Type not used
            + "  output Real y;\n"     // Type not used
            + "end rem;\n"
            + "function floor"
            + "  input Real x;\n"      // Type not used
            + "  output Real y;\n"     // Type not used
            + "end floor;\n"
            + "function ceil"
            + "  input Real x;\n"      // Type not used
            + "  output Real y;\n"     // Type not used
            + "end ceil;\n"
            + "function integer"
            + "  input Real x;\n"      // Type not used
            + "  output Integer y;\n"  // Type not used
            + "end integer;\n"
            + "function Integer"
            + "  input Real x;\n"      // Type not used
            + "  output Integer y;\n"  // Type not used
            + "end Integer;\n"
            + "function String"
            + "  input Real x;\n"      // Type not used
            + "  input Integer minimumLength = 0;\n"
            + "  input Boolean leftJustified = true;\n"
            + "  input Integer significantDigits = 6;\n"
            + "  input String format = \"\";\n"
            + "  output String y;\n"
            + "end String;\n"
            + "function delay"
            + "  input Real exp;\n"      // Type not used
            + "  input Real delayTime;\n"
            + "  input Real delayMax = delayTime;\n"
            + "  output Real y;\n"       // Type not used
            + "end delay;\n"
            + "function spatialDistribution end spatialDistribution;\n"
            + "function cardinality"
            + "  input Real x;\n"      // Type not used
            + "  output Integer y;\n"  // Type not used
            + "end cardinality;\n"
            + "function isPresent end isPresent;\n"
            + "function promote end promote;\n"
            + "function ndims\n"
            + "  input Real A;\n"      // Type not used
            + "  output Integer n;\n"
            + "end ndims;\n"
            + "function size\n"
            + "  input Real A;\n"         // Type not used
            + "  input Integer d = 0;\n"  // Default value not used
            + "  output Integer s;\n"
            + "end size;\n"
            + "function scalar"
            + "  input Real A;\n"      // Type not used
            + "  output Real y;\n"     // Type not used
            + "end scalar;\n"
            + "function vector"
            + "  input Real A;\n"      // Type not used
            + "  output Real B;\n"     // Type not used
            + "end vector;\n"
            + "function matrix"
            + "  input Real A;\n"      // Type not used
            + "  output Real B;\n"     // Type not used
            + "end matrix;\n"
            + "function transpose\n"
            + "  input Real A;\n"    // Type not used
            + "  output Real B;\n"   // Type not used
            + "end transpose;\n"
            + "function symmetric\n"
            + "  input Real A;\n"    // Type not used
            + "  output Real B;\n"   // Type not used
            + "end symmetric;\n"
            + "function cross\n"
            + "  input Real x[3];\n"
            + "  input Real y[3];\n"
            + "  output Real z[3];\n"   // Type not used
            + "end cross;\n"
            + "function outerProduct\n"
            + "  input Real x[:];\n"
            + "  input Real y[:];\n"
            + "  output Real z[:,:];\n"   // Type not used
            + "end outerProduct;\n"
            + "function diagonal\n"
            + "  input Real v[:];\n"
            + "  output Real z[:,:];\n"   // Type not used
            + "end diagonal;\n"
            + "function identity\n"
            + "  input Integer n;\n"
            + "  output Integer a[n, n];\n"
            + "end identity;\n"
            + "function array end array;\n"
            + "function zeros end zeros;\n"
            + "function ones end ones;\n"
            + "function fill\n"
            + "  input Real s;\n"      // Type not used
            + "  output Real o;\n"     // Type not used
            + "end fill;\n"
            + "function cat\n"
            + "  input Real k;\n"      // Type not used
            + "  output Real o;\n"     // Type not used
            + "end cat;\n"
            + "function linspace\n" 
            + "  input Real x1;\n"
            + "  input Real x2;\n"
            + "  input Integer n;\n"
            + "  output Real z[1];\n"   // Size not used
            + "end linspace;\n"
            + "function min\n"
            + "  input Real x;\n"      // Type not used
            + "  input Real y = 0;\n"  // Type and default value not used
            + "  output Real z;\n"     // Type not used
            + "end min;\n"
            + "function max\n"
            + "  input Real x;\n"      // Type not used
            + "  input Real y = 0;\n"  // Type and default value not used
            + "  output Real z;\n"     // Type not used
            + "end max;\n"
            + "function sum\n"
            + "  input Real A;\n"      // Type not used
            + "  output Real o;\n"     // Type not used
            + "end sum;\n"
            + "function product\n"
            + "  input Real A;\n"      // Type not used
            + "  output Real o;\n"     // Type not used
            + "end product;\n"
            + "function skew\n"
            + "  input Real x[3];\n"
            + "  output Real y[3,3];\n"   // Type not used
            + "end skew;\n"
            + "function homotopy\n"
            + "  input Real actual;\n"
            + "  input Real simplified;\n"
            + "  output Real o;\n"
            + "end homotopy;\n"
            + "function semiLinear\n"
            + "  input Real v1;\n"     // Type not used
            + "  input Real v2;\n"     // Type not used
            + "  input Real v3;\n"     // Type not used
            + "  output Real o;\n"     // Type not used
            + "end semiLinear;\n"
            + "function inStream\n"
            + "  input Real v;\n"      // Type not used
            + "  output Real o;\n"     // Type not used
            + "end inStream;\n"
            + "function actualStream\n"
            + "  input Real n;\n"      // Type not used
            + "  output Real o;\n"     // Type not used
            + "end actualStream;\n"
            + "function getInstanceName\n"
            + "  output String o;\n"
            + "end getInstanceName;\n"
            + "function sin \"sine\"\n"
            + "  input Modelica.SIunits.Angle u;\n"
            + "  output Real y;\n"
            + "end sin;\n"
            + "function cos \"cosine\"" 
            + "  input Modelica.SIunits.Angle u;\n"
            + "  output Real y;\n"
            + "end cos;\n"
            + "function tan \"tangent (u shall not be -pi/2, pi/2, 3*pi/2, ...)\"\n"
            + "  input Modelica.SIunits.Angle u;\n"
            + "  output Real y;\n"
            + "end tan;\n"
            + "function asin \"inverse sine (-1 <= u <= 1)\"\n"
            + "  input Real u;\n"
            + "  output Modelica.SIunits.Angle y;\n"
            + "end asin;\n"
            + "function acos \"inverse cosine (-1 <= u <= 1)\"\n"
            + "  input Real u;\n"
            + "  output Modelica.SIunits.Angle y;\n"
            + "end acos;\n"
            + "function atan \"inverse tangent\"\n"
            + "  input Real u;\n"
            + "  output Modelica.SIunits.Angle y;\n"
            + "end atan;\n"
            + "function atan2 \"four quadrant inverse tangent\"\n"
            + "  input Real u1;\n"
            + "  input Real u2;\n"
            + "  output Modelica.SIunits.Angle y;\n"
            + "end atan2;\n"
            + "function sinh \"hyperbolic sine\"\n"
            + "  input Real u;\n"
            + "  output Real y;\n"
            + "end sinh;\n"
            + "function cosh \"hyperbolic cosine\"\n"
            + "  input Real u;\n"
            + "  output Real y;\n"
            + "end cosh;\n"
            + "function tanh \"hyperbolic tangent\"\n"
            + "  input Real u;\n"
            + "  output Real y;\n"
            + "end tanh;\n"
            + "function exp \"exponential, base e\"\n"
            + "  input Real u;\n"
            + "  output Real y;\n"
            + "end exp;\n"
            + "function log \"natural (base e) logarithm (u shall be > 0)\"\n"
            + "  input Real u;\n"
            + "  output Real y;\n"
            + "end log;\n"
            + "function log10 \"base 10 logarithm (u shall be > 0)\"\n"
            + "  input Real u;\n"
            + "  output Real y;\n"
            + "end log10;\n"
            + "package Connections"
            + "  function branch"
            + "    input Real a;\n"      // Type not used
            + "    input Real b;\n"      // Type not used
            + "  end branch;"
            + "  function root"
            + "    input Real a;\n"      // Type not used
            + "  end root;"
            + "  function potentialRoot"
            + "    input Real A;\n"      // Type not used
            + "    input Integer priority = 0;\n"
            + "  end potentialRoot;"
            + "  function isRoot"
            + "    input Real a;\n"      // Type not used
            + "  end isRoot;"
            + "  function rooted"
            + "    input Real a;\n"      // Type not used
            + "    output Boolean y;\n"
            + "  end rooted;"
            + "end Connections;"
            + "function rooted"
            + "  input Real a;\n"      // Type not used
            + "  output Boolean y;\n"
            + "end rooted;"
            ;

    /**
     * This attribute defines the NTA for predefined types
     * which contains a list of predefined PrimitiveClassDecl:s.
     */
    syn lazy List<BaseClassDecl> Program.getBuiltInFunctionList() {
        List<BaseClassDecl> l = new List<BaseClassDecl>();
  
        try {
            SourceRoot sr = ParserHandler.parseString(BUILTIN_FUNCS, "");
            Program p = sr.getProgram();
            
            ExternalClause builtin = new ExternalClause(new Opt(new ExternalLanguage("builtin")), new Opt(), new Opt());
            for (Element e : p.getUnstructuredEntity(0).getElements()) 
            	e.addBuiltinFunctions(l, builtin);
        } catch (Exception e) {}
        
        return l;
    }

    public void Element.addBuiltinFunctions(List<? super BaseClassDecl> list, ExternalClause builtin) {
    	throw new UnsupportedOperationException();
    }

    public void FullClassDecl.addBuiltinFunctions(List<? super BaseClassDecl> list, ExternalClause builtin) {
    	if (isPackage()) {
    		List<ClassDecl> subList = new List<ClassDecl>();
    		for (ClassDecl cd : getClassDecls())
    			cd.addBuiltinFunctions(subList, builtin);
    		setClassDeclList(subList);
    	} else {
	    	String name = getName().getID();
	    	if (name.equals("Integer") || name.equals("String")) {
	    		// Add character that isn't allowed in identifiers to prevent collision with user class or the primitive class
	    		name = "!" + name;
	    		getName().setID(name);
	    		getEndDecl().setEndID(name);
	    	}
	        setExternalClause(builtin.fullCopy());
    	}
    	list.add(this);
    }

    /**
     * This attribute defines the NTA for predefined types
     * which contains a list of predefined BuiltInType:s.
     */
    syn lazy List Program.getBuiltInTypeList() {
        List l = new List();
        l.add(new BuiltInClassDecl(new IdDecl("RealType")));
        l.add(new BuiltInClassDecl(new IdDecl("IntegerType")));
        l.add(new BuiltInClassDecl(new IdDecl("BooleanType")));
        l.add(new BuiltInClassDecl(new IdDecl("StringType")));
        l.add(new BuiltInClassDecl(new IdDecl("EnumType")));
        return l;
    }

    public ClassDecl SourceRoot.doLookupBuiltInFunction(String name) {
        return unknownClassDecl();
    }


    inh ClassDecl Exp.lookupBuiltInFunction(String name);
    eq SourceRoot.getProgram().lookupBuiltInFunction(String name) = doLookupBuiltInFunction(name);
    eq Root.getChild().lookupBuiltInFunction(String name) = null;


    boolean PrimitiveClassDecl.rewritten = false;
    rewrite PrimitiveClassDecl {
        when (getName().getID().equals("Real") && !rewritten)
            to RealClassDecl {
                RealClassDecl rcd = new RealClassDecl(
                        getName(),
                        getVisibilityType(),
                        getEncapsulatedOpt(),
                        getPartialOpt(),
                        getRestriction(),
                        getRedeclareOpt(),
                        getFinalOpt(),
                        getInnerOpt(),
                        getOuterOpt(),
                        getReplaceableOpt(),
                        getConstrainingClauseOpt(),
                        getConstrainingClauseCommentOpt(),
                        getStringCommentOpt(),
                        getEquationList(),
                        getAlgorithmList(),
                        getSuperList(),
                        getImportList(),
                        getClassDeclList(),
                        getComponentDeclList(),
                        getElementModificationList(),
                        getExternalClauseOpt(),
                        getAnnotationOpt(),
                        getEndDecl());
                rcd.rewritten = true;
                return rcd;
            }
    }
    
    rewrite PrimitiveClassDecl {
        when (getName().getID().equals("Integer") && !rewritten)
            to IntegerClassDecl {
                IntegerClassDecl rcd = new IntegerClassDecl(
                        getName(),
                        getVisibilityType(),
                        getEncapsulatedOpt(),
                        getPartialOpt(),
                        getRestriction(),
                        getRedeclareOpt(),
                        getFinalOpt(),
                        getInnerOpt(),
                        getOuterOpt(),
                        getReplaceableOpt(),
                        getConstrainingClauseOpt(),
                        getConstrainingClauseCommentOpt(),
                        getStringCommentOpt(),
                        getEquationList(),
                        getAlgorithmList(),
                        getSuperList(),
                        getImportList(),
                        getClassDeclList(),
                        getComponentDeclList(),
                        getElementModificationList(),
                        getExternalClauseOpt(),
                        getAnnotationOpt(),
                        getEndDecl());
                rcd.rewritten = true;
                return rcd;
            }
    }
    
    rewrite PrimitiveClassDecl {
        when (getName().getID().equals("Boolean") && !rewritten)
            to BooleanClassDecl {
                BooleanClassDecl rcd = new BooleanClassDecl(
                        getName(),
                        getVisibilityType(),
                        getEncapsulatedOpt(),
                        getPartialOpt(),
                        getRestriction(),
                        getRedeclareOpt(),
                        getFinalOpt(),
                        getInnerOpt(),
                        getOuterOpt(),
                        getReplaceableOpt(),
                        getConstrainingClauseOpt(),
                        getConstrainingClauseCommentOpt(),
                        getStringCommentOpt(),
                        getEquationList(),
                        getAlgorithmList(),
                        getSuperList(),
                        getImportList(),
                        getClassDeclList(),
                        getComponentDeclList(),
                        getElementModificationList(),
                        getExternalClauseOpt(),
                        getAnnotationOpt(),
                        getEndDecl());
                rcd.rewritten = true;
                return rcd;
            }
    }
    
        rewrite PrimitiveClassDecl {
        when (getName().getID().equals("String") && !rewritten)
            to StringClassDecl {
                StringClassDecl rcd = new StringClassDecl(
                        getName(),
                        getVisibilityType(),
                        getEncapsulatedOpt(),
                        getPartialOpt(),
                        getRestriction(),
                        getRedeclareOpt(),
                        getFinalOpt(),
                        getInnerOpt(),
                        getOuterOpt(),
                        getReplaceableOpt(),
                        getConstrainingClauseOpt(),
                        getConstrainingClauseCommentOpt(),
                        getStringCommentOpt(),
                        getEquationList(),
                        getAlgorithmList(),
                        getSuperList(),
                        getImportList(),
                        getClassDeclList(),
                        getComponentDeclList(),
                        getElementModificationList(),
                        getExternalClauseOpt(),
                        getAnnotationOpt(),
                        getEndDecl());
                rcd.rewritten = true;
                return rcd;
            }
    }
}

aspect InstPredefinedTypes {

    syn lazy List InstProgramRoot.getInstPredefinedTypeList() {
        List l = new List();
        for (BaseClassDecl pcd : getProgram().getPredefinedTypes()) {
            l.add(pcd.newInstClassDecl());
        }
        return l;
    }

    syn lazy List InstProgramRoot.getInstBuiltInTypeList() {
        List l = new List();
        for (ClassDecl pcd : getProgram().getBuiltInTypes()) {
            l.add(pcd.newInstClassDecl());
        }
        return l;
    }

    syn lazy List InstProgramRoot.getInstBuiltInFunctionList() {
        List l = new List();
        for (BaseClassDecl bcd : getProgram().getBuiltInFunctions()) {
            l.add(bcd.newInstClassDecl());
        }
        return l;
    }
}

aspect AnnotationTypes {
    
}
