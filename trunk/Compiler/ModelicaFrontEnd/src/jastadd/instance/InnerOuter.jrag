import java.util.Set;

aspect InnerOuterComponents {

    inh boolean InstNode.inOuter();
    eq InstRoot.getChild().inOuter()          = false;
    eq Root.getChild().inOuter()              = false;
    eq InstComponentDecl.getChild().inOuter() = inOrIsOuter();

    inh InstComponentDecl InstComponentDecl.surroundingOuterComponentDecl();
    eq InstRoot.getChild().surroundingOuterComponentDecl()          = null;
    eq Root.getChild().surroundingOuterComponentDecl()              = null;
    eq InstComponentDecl.getChild().surroundingOuterComponentDecl() = isOuter() ? this : surroundingOuterComponentDecl();

    syn boolean InstComponentDecl.inOrIsOuter() = isOuter() || inOuter();

    syn lazy InstComponentDecl InstComponentDecl.myInnerInstComponentDecl() {
        InstComponentDecl res = null;
        if (isOuter()) {
            res = lookupInnerInstComponent(this, true);
        } else if (inOuter()) {
            res = lookupInInnerInstComponent(name());
        }
        return (res == null) ? unknownInstComponentDecl() : res;
    }

    inh InstComponentDecl InstNode.lookupInnerInstComponent(InstComponentDecl outer, boolean firstScope);

    eq InstRoot.getChild().lookupInnerInstComponent(InstComponentDecl outer, boolean firstScope)    = null;
    eq Root.getChild().lookupInnerInstComponent(InstComponentDecl outer, boolean firstScope)        = null;
    eq InstExtends.getChild().lookupInnerInstComponent(InstComponentDecl outer, boolean firstScope) = 
        lookupInnerInstComponent(outer, firstScope);

    eq InstNode.getChild().lookupInnerInstComponent(InstComponentDecl outer, boolean firstScope) {
        InstComponentDecl res = genericLookupInstComponent(outer.name()).targetOrNull();
        if (!firstScope && res != null && res.isInner()) {
            return res;
        } else if (res != null && res.isOuter() && !res.isInner()) {
            res = null;
        }
        return lookupInnerInstComponentNoLocal(outer, res);
    }

    /**
     * Lookup upwards in tree for matching inner declaration.
     * 
     * @param outer  outer declaration we are searching for 
     */
    syn InstComponentDecl InstNode.lookupInnerInstComponentNoLocal(InstComponentDecl outer, InstComponentDecl nonInner) = 
        lookupInnerInstComponent(outer, false);
    eq InstClassDecl.lookupInnerInstComponentNoLocal(InstComponentDecl outer, InstComponentDecl nonInner) {
        String name = outer.name();
        InstGeneratedInner res = null;
        for (InstGeneratedInner node : getInstGeneratedInners()) {
            if (node.matches(name)) {
                res = node;
            }
        }
        
        if (res != null) {
            res.addOuter(outer);
        } else {
            res = new InstGeneratedInner(createInstComponentDecl(outer.getComponentDecl()), outer, nonInner);
            getInstGeneratedInners().add(res);
        }
        return res.getInstComponentDecl();
    }

    syn nta List<InstGeneratedInner> InstClassDecl.getInstGeneratedInners() = new List<InstGeneratedInner>();

    eq InstGeneratedInner.getChild().myEnvironment() = new Environment();
    eq InstGeneratedInner.getChild().myEnvironment(String name) = new Environment();

    public InstGeneratedInner.InstGeneratedInner(InstClassDecl parent, InstComponentDecl outer, InstComponentDecl nonInner) {
        this(parent.createInstComponentDecl(outer.getComponentDecl()), outer, nonInner);
        addOuter(outer);
    }

    eq InstGeneratedInner.matches(String str) = getCopiedOuter().matches(str);

    private Set<InstComponentDecl> InstGeneratedInner.outers = new HashSet<InstComponentDecl>();

    public void InstGeneratedInner.addOuter(InstComponentDecl outer) {
        outers.add(outer);
    }

    inh boolean InstComponentDecl.isGeneratedInner();
    eq InstGeneratedInner.getInstComponentDecl().isGeneratedInner() = true;
    eq BaseNode.getChild().isGeneratedInner()                       = false;

    inh InstComponentDecl InstNode.lookupInInnerInstComponent(String name);
    eq InstRoot.getChild().lookupInInnerInstComponent(String name)          = null;
    eq Root.getChild().lookupInInnerInstComponent(String name)              = null;
    eq InstComponentDecl.getChild().lookupInInnerInstComponent(String name) = myInnerInstComponentDecl().memberInstComponent(name).targetOrNull();
    eq InstClassDecl.getChild().lookupInInnerInstComponent(String name)     = myInnerInstClassDecl().memberInstComponent(name).targetOrNull();

}

aspect InnerOuterClasses {

    eq InstClassDecl.getChild().inOuter() = inOrIsOuter();

    syn boolean InstClassDecl.inOrIsOuter() = isOuter() || inOuter();

    syn InstClassDecl InstClassDecl.myInnerInstClassDecl() {
        InstClassDecl res = null;
        if (isOuter()) 
            res = lookupInnerInstClass(name(), true);
        else if (inOuter())
            res = lookupInInnerInstClass(name());
        return res;
    }

    inh InstClassDecl InstNode.lookupInnerInstClass(String name, boolean firstScope);

    eq InstRoot.getChild().lookupInnerInstClass(String name, boolean firstScope)    = null;
    eq Root.getChild().lookupInnerInstClass(String name, boolean firstScope)        = null;
    eq InstExtends.getChild().lookupInnerInstClass(String name, boolean firstScope) = lookupInnerInstClass(name, firstScope);

    eq InstNode.getChild().lookupInnerInstClass(String name, boolean firstScope) {
        if (!firstScope) {
            InstClassDecl icd = genericLookupInstClass(name).target();
            if (icd != null && icd.isInner())
                return icd;
        }
        return lookupInnerInstClass(name, false);
    }

    inh InstClassDecl InstNode.lookupInInnerInstClass(String name);
    eq InstRoot.getChild().lookupInInnerInstClass(String name)          = null;
    eq Root.getChild().lookupInInnerInstClass(String name)              = null;
    eq InstComponentDecl.getChild().lookupInInnerInstClass(String name) = myInnerInstComponentDecl().memberInstClass(name).targetOrNull();
    eq InstClassDecl.getChild().lookupInInnerInstClass(String name)     = myInnerInstClassDecl().memberInstClass(name).targetOrNull();

}