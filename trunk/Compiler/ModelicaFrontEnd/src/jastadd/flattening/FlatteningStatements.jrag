/*
    Copyright (C) 2016 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect FlatStatements {
    
    public static boolean FStatement.flattenFStatementList(List<FStatement> sl, FClass fc, FQName prefix) {
        return FStatement.flattenFStatementList(sl, new List<FStatement>(), fc, prefix);
    }
    
    public static boolean FStatement.flattenFStatementList(List<FStatement> fromList, List<FStatement> toList, 
            FClass fc, FQName prefix) {
        boolean hasBroken = false;
        boolean res = false;
        List<FStatement> prevList = null;
        for (FStatement stmt : fromList) {
            if (hasBroken) {
                prevList = toList;
                toList = new List<FStatement>();
            }
            res = (hasBroken = stmt.flatten(toList, fc, prefix)) || res;
            if (prevList != null) {
                prevList.add(FStatement.breakBlock(toList, new FIdUseExp(stmt.breakCondName())));
                toList = prevList;
                prevList = null;
            }
        }
        return res;
    }
    
    public static FIfStmt FStatement.breakBlock(List<FStatement> stmts, FExp breakCond) {
        List<FIfWhenClause> clauses = new List<FIfWhenClause>();
        clauses.add(new FIfClause(breakCond.fullCopy(), stmts));
        return new FIfStmt(clauses, new List<FStatement>());
    }
    
    syn boolean ASTNode.containsBreakStmt() {
        for (ASTNode n : this)
            if (n.containsBreakStmt())
                return true;
        return false;
    }
    eq FForStmt.containsBreakStmt() {
        return false;
    }
    eq FWhileStmt.containsBreakStmt() {
        return false;
    }
    eq FBreakStmt.containsBreakStmt() {
        return true;
    }
    
    public abstract boolean FStatement.flatten(List<FStatement> sl, FClass fc, FQName prefix);
    
    public boolean FAssignStmt.flatten(List<FStatement> sl, FClass fc, FQName prefix) {
        addForIndexRangeAsserts(sl, fc, prefix);
        sl.add(new FAssignStmt((FAssignableExp)getLeft().flatten(prefix), getRight().flatten(prefix)));
        return false;
    }
    
    public boolean FInitArrayStmt.flatten(List<FStatement> sl, FClass fc, FQName prefix){
        throw new UnsupportedOperationException();
    }
    
    public boolean FFunctionCallStmt.flatten(List<FStatement> sl, FClass fc, FQName prefix) {
        addForIndexRangeAsserts(sl, fc, prefix);
        List<FFunctionCallLeft> l = new List<FFunctionCallLeft>();
        for (FFunctionCallLeft a : getLefts())
            l.add(a.flatten(prefix));
        sl.add(new FFunctionCallStmt(l, (FAbstractFunctionCall) getCall().flatten(prefix)));
        return false;
    }
    
    public boolean FWhenStmt.flatten(List<FStatement> sl, FClass fc, FQName prefix) {
        boolean res = false;
        boolean hasBroken = false;
        List cl = new List();
        for (FIfWhenClause c : getFIfWhenClauses()) {
            hasBroken = c.flatten(cl, fc, prefix) || hasBroken;
        }
        sl.add(new FWhenStmt(cl));
        return hasBroken;
    }
    
    public boolean FIfStmt.flatten(List<FStatement> sl, FClass fc, FQName prefix) {
        for (FIfWhenClause c : getFIfWhenClauses()) {
            c.getTest().addForIndexRangeAsserts(sl, fc, prefix);
        }
        boolean res = false;
        boolean hasBroken = false;
        List cl = new List();
        boolean first = true;
        for (FIfWhenClause c : getFIfWhenClauses()) {
            if (c.getTest().variability().indexParameterOrLess()) {
                try {
                    CValue val = c.getTest().ceval();
                    if (!val.booleanValue()) {
                        continue;
                    } else if (first) {
                        return FStatement.flattenFStatementList(c.getFStatements(), sl, fc, prefix) || hasBroken;
                    } else {
                        List l = new List();
                        hasBroken = FStatement.flattenFStatementList(c.getFStatements(), l, fc, prefix) || hasBroken;
                        sl.add(new FIfStmt(cl, l));
                        return hasBroken;
                    }
                } catch (ConstantEvaluationException e) {
                    
                }
            }
            first = false;
            hasBroken = c.flatten(cl, fc, prefix) || hasBroken;
        }
        if (first) {
            return FStatement.flattenFStatementList(getElseStmts(), sl, fc, prefix) || hasBroken;
        }
        List l = new List();
        hasBroken = FStatement.flattenFStatementList(getElseStmts(), l, fc, prefix) || hasBroken;
        sl.add(new FIfStmt(cl, l));
        return hasBroken;
    }
    
    public boolean FIfWhenClause.flatten(List cl, FClass fc, FQName prefix) {
        List l = new List();
        FExp t = getTest().flatten(prefix);
        boolean res = FStatement.flattenFStatementList(getFStatements(), l, fc, prefix);
        cl.add(flattenFIfWhenClause(t, l));
        return res;
    }
    
    protected abstract FIfWhenClause FIfWhenClause.flattenFIfWhenClause(FExp t, List l);
    
    protected FIfWhenClause FIfClause.flattenFIfWhenClause(FExp t, List l) {
        return new FIfClause(t, l);
    }
    
    protected FIfWhenClause FWhenClause.flattenFIfWhenClause(FExp t, List l) {
        return new FWhenClause(t, l);
    }
    
    public boolean FForStmt.flatten(List<FStatement> sl, FClass fc, FQName prefix) {
        sl.add((FForStmt)(this.fullCopy()));
        return false;
    }
        
    public boolean FWhileStmt.flatten(List<FStatement> sl, FClass fc, FQName prefix) {
        getTest().addForIndexRangeAsserts(sl, fc, prefix);
        List l = new List();
        boolean res = FStatement.flattenFStatementList(getWhileStmts(), l, fc, prefix);
        sl.add(new FWhileStmt(getTest().flatten(prefix), l));
        return res;
    }
    
    public boolean InstForStmt.flatten(List<FStatement> sl, FClass fc, FQName prefix) {
        if (inFunction()) {
            getInstForIndexList().addForIndexRangeAsserts(sl, fc, prefix);
            List fsl = new List();
            FStatement.flattenFStatementList(getForStmts(), fsl, fc, prefix);
            int i = getNumInstForIndex() - 1;
            FForStmt res = new FForStmt(getInstForIndex(i).flatten(prefix), fsl);
            for (i--; i >= 0; i--) {
                fsl = new List().add(res);
                res = new FForStmt(getInstForIndex(i).flatten(prefix), fsl);
            }
            sl.add(res);
        } else {
            ArrayList<CommonForIndex> forIndices = new ArrayList<CommonForIndex>();
            for (InstForIndex ifi : getInstForIndexs()) {
                forIndices.add(ifi);
            }
            Indices ind = Indices.create(forIndices);
            if (!ind.size().isZero()) {
                FVariable tempVar = null;
                boolean hasBreak = getForStmts().containsBreakStmt();
                if (hasBreak) {
                    tempVar = new FBooleanVariable(new FTemporaryVisibilityType(), fDiscrete(),
                            prefix.copyAndAppend(myTempVarName()));
                    fc.addFVariableNoTransform(tempVar);
                    new FAssignStmt(tempVar.createUseExp(), new FBooleanLitExpTrue()).flatten(sl, fc, prefix);
                }
                
                List<FStatement> inner = sl;
                for (Index i : ind) {
                    if (hasBreak) {
                        inner = new List<FStatement>();
                    }
                    ind.translate(i).setValues(forIndices);
                    getForStmts().flushAllRecursive();
                    FStatement.flattenFStatementList(getForStmts(), inner, fc, prefix);
                    if (hasBreak) {
                        sl.add(FStatement.breakBlock(inner, tempVar.createUseExp()));
                    }
                }
                for (InstForIndex ifi : getInstForIndexs()) {
                    ifi.clearEvaluationValue();
                }
            }
        }
        return false;
    }
    
    private static final String InstClassDecl.TEMP_VAR_PREFIX = "temp_";
    private int InstClassDecl.incr = 0;
    
    syn String InstClassDecl.nextTempVarName() = TEMP_VAR_PREFIX + ++incr;
    
    inh lazy String InstForStmt.myTempVarName();
    eq Root.getChild().myTempVarName() = null;
    eq InstClassDecl.getChild().myTempVarName() {
        String sqn = "";
        while (componentExists(sqn = nextTempVarName())) {}
        return name() + "." + sqn;
    }
    
    inh String FStatement.breakCondName();
    eq InstForStmt.getChild().breakCondName() = myTempVarName();
    eq Root.getChild().breakCondName() = null;
    
    public boolean InstClassDecl.componentExists(String name) {
        for (InstComponentDecl decl : allInstComponentDecls()) {
            if (decl.name().equals(name)) {
                return true;
            }
        }
        return false;
    }
    
    public boolean FBreakStmt.flatten(List<FStatement> sl, FClass fc, FQName prefix){
        if (!inFunction() && enclosingLoop() instanceof InstForStmt) {
            new FAssignStmt(prefix.copyAndAppend(breakCondName()).createFIdUseExp(),
                    new FBooleanLitExpFalse()).flatten(sl, fc, prefix);
            return true;
        }
        sl.add(new FBreakStmt());
        return false;
    }
    public boolean FReturnStmt.flatten(List<FStatement> sl, FClass fc, FQName prefix) {
        sl.add(new FReturnStmt());
        return false;
    }

    public void ASTNode.addForIndexRangeAsserts(List<FStatement> l, FClass fc, FQName prefix) {
        for (ASTNode n : this) {
            n.addForIndexRangeAsserts(l, fc, prefix);
        }
    }

    private final static String InstForIndexNoExp.SIZE_CONSISTENCE_ASSERT_MSG = 
            "For index with implicit iteration range used for inconsistent sizes, %s used for different sizes in %s and %s";

    public void InstForIndexNoExp.addForIndexRangeAsserts(List<FStatement> l, FClass fc, FQName prefix) {
        FExpSubscript cmpUse = null;
        Size cmpSize = null;
        // Find first known size, or if all are unknown, the first one
        for (FExpSubscript use : mySubscriptUses()) {
            Size size = use.mySize();
            if (cmpUse == null || (cmpSize.isUnknown() && !size.isUnknown())) {
                cmpUse = use;
                cmpSize = size;
            }
        }
        for (FExpSubscript use : mySubscriptUses()) {
            Size size = use.mySize();
            if (use != cmpUse && size.isUnknown()) {
                FExp test = getFExp().dynamicFExp(new FEqExp(size.createFExp(0), cmpSize.createFExp(0))).flatten(prefix);
                String msg = String.format(SIZE_CONSISTENCE_ASSERT_MSG, 
                        use, use.myInstAccess(), cmpUse.myInstAccess());
                FAssert as = new FAssert(test, new FStringLitExp(msg), new Opt());
                l.add(new FFunctionCallStmt(new List<FFunctionCallLeft>(), as));
            }
        }
    }

}

