/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import java.util.ArrayList;

aspect Constructors {

	/*
	public InstComposite.InstComposite(InstAccess a,
			                                   ComponentDecl cd,
			                                   Opt<InstModification> inst_mod_opt,
			                                   Opt<InstConstraining> inst_constr_opt) {
		this(a,new Opt<FArraySubscripts>(),cd,inst_mod_opt,inst_constr_opt);
	}
	*/
	
	/**
	 * \brief Constructs an equation that is not initial.
	 */
	public FEquation.FEquation(FExp left, FExp right) {
		this(new FNormalEquation(), left, right);
	}
	
	/**
	 * \brief Constructs a function call equation that is not initial.
	 */
	public FFunctionCallEquation.FFunctionCallEquation(List<FFunctionCallLeft> left, FAbstractFunctionCall call) {
		this(new FNormalEquation(), left, call);
	}
	
	/**
	 * \brief Constructs a connection clause that is not initial.
	 */
	public FConnectClause.FConnectClause(Opt<FStringComment> comment, FIdUseInstAccess left, FIdUseInstAccess right) {
		this(new FNormalEquation(), comment, left, right);
	}
	
	/**
	 * \brief Constructs a for clause equation that is not initial.
	 */
	public FForClauseE.FForClauseE(List<FForIndex> indices, List<FAbstractEquation> eqns) {
		this(new FNormalEquation(), indices, eqns);
	}
	
	/**
	 * \brief Constructs a for clause equation that is not initial.
	 */
	public InstForClauseE.InstForClauseE(List<InstForIndex> indices, List<FAbstractEquation> eqns) {
		this(new FNormalEquation(), indices, eqns);
	}
	
	/**
	 * \brief Constructs an algorithm block that is not initial.
	 */
	public FAlgorithmBlock.FAlgorithmBlock(List<FStatement> stmts) {
		this(new FNormalEquation(), stmts);
	}
	
	/**
	 * \brief Constructs a real literal expression from a double.
	 */
	public FRealLitExp.FRealLitExp(double val) {
		this(String.valueOf(val));
	}
	
	/**
	 * \brief Constructs an integer literal expression from an integer.
	 */
	public FIntegerLitExp.FIntegerLitExp(int val) {
		this(String.valueOf(val));
	}
	
	/**
	 * Constructs a boolean literal expression from a boolean.
	 */
	public static FBooleanLitExp FBooleanLitExp.create(boolean val) {
		return val ? new FBooleanLitExpTrue() : new FBooleanLitExpFalse();
	}
	
	public ComponentDecl.ComponentDecl(boolean isParameter,
	                                   String type,
	                                   String name,
	                                   String bexp) {

		this(new Opt(),
		                         new Opt(),
		                         new Opt(),
		                         new Opt(),
		                         new Opt(),
		                         new Opt(),
	                             isParameter? new Opt(new Parameter()): new Opt(),      
                                 new Opt(),
                                 new ClassAccess(type),
                                 new Opt(),
                                 new PublicVisibilityType(),
                                 new IdDecl(name),
                                 new Opt(),
                        		 new Opt(),        
                                 new Opt(),
                                 new Comment(new Opt(),new Opt()),
                                 new Opt(),
                                 new Comment(new Opt(),new Opt()));
		
		Exp bexp_ast=null;
		
		if (!bexp.equals("")) {
		    //ModelicaParser mp = new ModelicaParser();
			//bexp_ast = mp.parseExpString(bexp);
			ParserHandler ph = new ParserHandler();
			try {
				bexp_ast = ph.parseExpString(bexp);
			} catch (Exception e) {	
				System.out.println("Error when parsing string");	
			}
			//debugPrint("ComponentDecl.ComponentDecl");
			//bexp_ast.dumpTreeBasic("");	
		    this.setModification(new ValueModification(bexp_ast));
        }                     	
	}
	
	/**
	 * \brief Create a new FSubscriptedExp with a new FArraySubscripts, containing the 
	 *        proper number of FSubscripts (according to <code>exp</code>).
	 * 
	 * All FSubscripts except the first will be FColonSubscripts.
	 * 
	 * @param exp    the expression this FSubscriptedExp should wrap.
	 * @param index  the index to use for the first FSubscript.
	 */
	public FSubscriptedExp.FSubscriptedExp(FExp exp, int index) {
		this(exp, FArraySubscripts.createFColonSubscripts(exp.ndims()));
		getFArraySubscripts().specifyNext(index);
	}
	
	/**
	 * \brief Create a new FArraySubscripts containing <code>n</code> {@see FColonSubscript}s.
	 */
	public static FArraySubscripts FArraySubscripts.createFColonSubscripts(int n) {
		List<FSubscript> l = new List<FSubscript>();
		for (int i = 0; i < n; i++)
			l.add(new FColonSubscript());
		return new FArraySubscripts(l);
	}
	
}

/*
 * Some algorithms are the same for many node types, but require a new node 
 * to be created of the same type as the node being processed. These methods allow 
 * those algorithms to be generalized.
 */
aspect InheritedFactoryMethods {
	
	/**
	 * \brief Create a new empty node.
	 * 
	 * Abstract method needed for abstract node classes with declared 
	 * (i.e. not inherited) children.
	 */
	public abstract FExp                      FExp.createEmptyNode();
	public abstract FBinExp                   FBinExp.createEmptyNode();
	public abstract FUnaryExp                 FUnaryExp.createEmptyNode();
	public abstract FBooleanLitExp            FBooleanLitExp.createEmptyNode();   // No children, but can be useful
	public abstract FMathematicalFunctionCall FMathematicalFunctionCall.createEmptyNode();
	public abstract FInfArgsFunctionCall      FInfArgsFunctionCall.createEmptyNode();
	public abstract FMinMaxExp      			FMinMaxExp.createEmptyNode();

	// Unsupported expressions
	public FUnsupportedExp FUnsupportedExp.createEmptyNode() { return new FUnsupportedExp(); }
	
	// Arithmetic oprerators
	public FAddExp    FAddExp.createEmptyNode()    { return new FAddExp(); }
	public FSubExp    FSubExp.createEmptyNode()    { return new FSubExp(); }
	public FMulExp    FMulExp.createEmptyNode()    { return new FMulExp(); }
	public FDivExp    FDivExp.createEmptyNode()    { return new FDivExp(); }
	public FPowExp    FPowExp.createEmptyNode()    { return new FPowExp(); }
	public FDotAddExp FDotAddExp.createEmptyNode() { return new FDotAddExp(); }
	public FDotSubExp FDotSubExp.createEmptyNode() { return new FDotSubExp(); }
	public FDotMulExp FDotMulExp.createEmptyNode() { return new FDotMulExp(); }
	public FDotDivExp FDotDivExp.createEmptyNode() { return new FDotDivExp(); }
	public FDotPowExp FDotPowExp.createEmptyNode() { return new FDotPowExp(); }
	public FNegExp    FNegExp.createEmptyNode()    { return new FNegExp(); }
	
	// Logical operators
	public FLtExp  FLtExp.createEmptyNode()  { return new FLtExp(); }
	public FLeqExp FLeqExp.createEmptyNode() { return new FLeqExp(); }
	public FGtExp  FGtExp.createEmptyNode()  { return new FGtExp(); }
	public FGeqExp FGeqExp.createEmptyNode() { return new FGeqExp(); }
	public FEqExp  FEqExp.createEmptyNode()  { return new FEqExp(); }
	public FNeqExp FNeqExp.createEmptyNode() { return new FNeqExp(); }
	public FNotExp FNotExp.createEmptyNode() { return new FNotExp(); }
	public FOrExp  FOrExp.createEmptyNode()  { return new FOrExp(); }
	public FAndExp FAndExp.createEmptyNode() { return new FAndExp(); }
	
	// Literal expressions (all have different children, so mostly here for completeness)
	public FRealLitExp         FRealLitExp.createEmptyNode()         { return new FRealLitExp(); }
	public FIntegerLitExp      FIntegerLitExp.createEmptyNode()      { return new FIntegerLitExp(); }
	public FBooleanLitExpTrue  FBooleanLitExpTrue.createEmptyNode()  { return new FBooleanLitExpTrue(); }
	public FBooleanLitExpFalse FBooleanLitExpFalse.createEmptyNode() { return new FBooleanLitExpFalse(); }
	public FStringLitExp       FStringLitExp.createEmptyNode()       { return new FStringLitExp(); }
	
	// Misc expressions
	public FSumRedExp  FSumRedExp.createEmptyNode()  { return new FSumRedExp(); }
	public FSumExp     FSumExp.createEmptyNode()     { return new FSumExp(); }
	public FIfExp      FIfExp.createEmptyNode()      { return new FIfExp(); }
	public FElseIfExp  FElseIfExp.createEmptyNode()  { return new FElseIfExp(); }
	public FNoExp      FNoExp.createEmptyNode()      { return new FNoExp(); }
	public FTimeExp    FTimeExp.createEmptyNode()    { return new FTimeExp(); }
	public FNoEventExp FNoEventExp.createEmptyNode() { return new FNoEventExp(); }
	
	// Identifier expressions
	public FIdUseExp      FIdUseExp.createEmptyNode()      { return new FIdUseExp(); }
	public InstDerExp     InstDerExp.createEmptyNode()     { return new InstDerExp(); }
	public FDerExp        FDerExp.createEmptyNode()        { return new FDerExp(); }
	public FInstAccessExp FInstAccessExp.createEmptyNode() { return new FInstAccessExp(); }
	
	// Array expressions
	public FArray          FArray.createEmptyNode()          { return new FArray(); }
	public FSubscriptedExp FSubscriptedExp.createEmptyNode() { return new FSubscriptedExp(); }
	public FRangeExp       FRangeExp.createEmptyNode()       { return new FRangeExp(); }
	public FEndExp         FEndExp.createEmptyNode()         { return new FEndExp(); }
	
	// Function calls
	public FFunctionCall    FFunctionCall.createEmptyNode()    { return new FFunctionCall(); }
	public InstFunctionCall InstFunctionCall.createEmptyNode() { return new InstFunctionCall(); }
	
	// Calls to built-in mathematical functions
	public FSinExp   FSinExp.createEmptyNode()   { return new FSinExp(); }
	public FCosExp   FCosExp.createEmptyNode()   { return new FCosExp(); }
	public FTanExp   FTanExp.createEmptyNode()   { return new FTanExp(); }
	public FAsinExp  FAsinExp.createEmptyNode()  { return new FAsinExp(); }
	public FAcosExp  FAcosExp.createEmptyNode()  { return new FAcosExp(); }
	public FAtanExp  FAtanExp.createEmptyNode()  { return new FAtanExp(); }
	public FAtan2Exp FAtan2Exp.createEmptyNode() { return new FAtan2Exp(); }
	public FSinhExp  FSinhExp.createEmptyNode()  { return new FSinhExp(); }
	public FCoshExp  FCoshExp.createEmptyNode()  { return new FCoshExp(); }
	public FTanhExp  FTanhExp.createEmptyNode()  { return new FTanhExp(); }
	public FExpExp   FExpExp.createEmptyNode()   { return new FExpExp(); }
	public FLogExp   FLogExp.createEmptyNode()   { return new FLogExp(); }
	public FLog10Exp FLog10Exp.createEmptyNode() { return new FLog10Exp(); }
	public FSqrtExp  FSqrtExp.createEmptyNode()  { return new FSqrtExp(); }
	
	// Built-in function calls and function call-like operators
	public FSizeExp   FSizeExp.createEmptyNode()   { return new FSizeExp(); }
	public FScalar    FScalar.createEmptyNode()    { return new FScalar(); }
	public FTranspose FTranspose.createEmptyNode() { return new FTranspose(); }
	public FIdentity  FIdentity.createEmptyNode()  { return new FIdentity(); }
	public FOnes      FOnes.createEmptyNode()      { return new FOnes(); }
	public FZeros     FZeros.createEmptyNode()     { return new FZeros(); }
	public FMinExp    FMinExp.createEmptyNode()    { return new FMinExp(); }
	public FMaxExp    FMaxExp.createEmptyNode()    { return new FMaxExp(); }
	
	/**
	 * \brief Create new node of same class as this, with the specified 
	 *        children.
	 */
	public FBinExp FBinExp.createNode(FExp left, FExp right) {
		FBinExp node = createEmptyNode();
		node.setLeft(left);
		node.setRight(right);
		return node;
	}
	
	/**
	 * \brief Create new node of same class as this, with the specified 
	 *        children.
	 */
	public FUnaryExp FUnaryExp.createNode(FExp exp) {
		FUnaryExp node = createEmptyNode();
		node.setFExp(exp);
		return node;
	}
	
	/**
	 * \brief Create new node of same class as this, with the specified 
	 *        children.
	 */
	public FIdUseExp FIdUseExp.createNode(FIdUse use) {
		FIdUseExp node = createEmptyNode();
		node.setFIdUse(use);
		return node;
	}
	
	/**
	 * \brief Create new node of same class as this, with the specified 
	 *        children.
	 */
	public FMathematicalFunctionCall FMathematicalFunctionCall.createNode(FExp exp) {
		FMathematicalFunctionCall node = createEmptyNode();
		node.setFExp(exp);
		return node;
	}
	
	/**
	 * \brief Create new node of same class as this, with the specified 
	 *        children. For missing y, use null.
	 */
	public FMinMaxExp FMinMaxExp.createNode(FExp x, FExp y) {
		FMinMaxExp node = createEmptyNode();
		node.setX(x);
		if (y != null)
			node.setY(y);
		return node;
	}
	
	/**
	 * \brief Create new node of same class as this, with the specified 
	 *        children.
	 */
	public FInfArgsFunctionCall FInfArgsFunctionCall.createNode(List<FExp> exps) {
		FInfArgsFunctionCall node = createEmptyNode();
		node.setFExpList(exps);
		return node;
	}
	
	/**
	 * \brief Create new node of same class as this, with the specified 
	 *        children.
	 */
	public FInfArgsFunctionCall FInfArgsFunctionCall.createNode(ArrayList<FExp> exps) {
		FInfArgsFunctionCall node = createEmptyNode();
		for (FExp e : exps)
			node.addFExp(e);
		return node;
	}

}