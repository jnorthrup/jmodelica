
/**
 * \brief Contains transformations on the flattened model which converts
 * it into a canonical form.
 */
aspect TransformCanonical{

	/**
	 * \brief Transform the raw flattened model into a structured form.
	 * 
	 * Currently, the following operations are performed:
	 *  <ul>
	 *    <li> Binding equations for variables are converted into regular
	 *         equations by calling genBindingEquations().
	 *    <li> Derivative variables are generated and inserted in the
	 *         list of FVariables by calling addFDerivativeVariables().
	 *    <li> Generate initial equations based on start attribute.
	 *    <li> Sort dependent parameters.
	 *  </ul>
	 */
	public void FClass.transformCanonical() {
		genBindingEquations();
		if (root().options.getBooleanOption("eliminate_alias_variables")) {
			genAlias();
			eliminateAliasVariables();
		}
		addFDerivativeVariables();
		genInitialEquations();
		sortDependentParameters();
		//System.out.println(prettyPrint(""));
		root().flushAllRecursive();
		
	}
		
	/**
	 * \brief Convert variable binding equations into regular equations.
	 */
	public void FClass.genBindingEquations() {
		for (FVariable fv : getFVariables()) {
			if (fv.hasBindingExp() && !fv.isParameter() && !fv.isConstant()) {
				FExp bexp = fv.getBindingExp();
				fv.setBindingExpOpt(new Opt());
				// Do not copy array indices
				FQName var_name = fv.getFQName().fullCopy();
				var_name.getFQNamePart(var_name.getNumFQNamePart()-1).
				   setFArraySubscriptsOpt(new Opt());
				FEquation feq = new FEquation(new FIdUseExp(
						new FIdUse(var_name)),bexp);
				getFEquationBlock(0).addFAbstractEquation(feq);
			}
		}
//		flush();
		flushAllRecursive();
	}

	/**
	 * \brief Add derivative variables to the list of FVariables, one for each
	 * differentiate variable.
	 */
	public void FClass.addFDerivativeVariables() {
		ArrayList<FDerivativeVariable> l = new ArrayList<FDerivativeVariable>();
		for (FVariable fv : differentiatedRealVariables()) {
			l.add(new FDerivativeVariable((FVisibilityType)fv.getFVisibilityType().fullCopy(),
					(FTypePrefixVariability)fv.getFTypePrefixVariability().fullCopy(),
					new Opt(),
					new List(),
					new Opt(),
					new Opt(),
					fv.getFQName().fullCopy()));
		}
		for (FVariable fv : l) {
			addFVariable(fv);
		}
//		flush();
				root().flushAllRecursive();
	}

	/**
	 * \brief Generate initial equations from variables with fixed start
	 * attributes.
	 * 
	 * Intitial equations corresponding to explicitly set start attributes of 
	 * differentiated variables are also generated, without taking the fixed
	 * attribute into account.
	 */
	public void FClass.genInitialEquations() {
		for (FRealVariable fv : realVariables()) {
			if (fv.fixedAttribute() ||
					(root().options.getBooleanOption("state_start_values_fixed") 
							&&  fv.isDifferentiatedVariable() && fv.startAttributeSet())) {
				addFInitialEquation(new FEquation(new FIdUseExp(
						new FIdUse(fv.getFQName().fullCopy())),
						fv.startAttributeExp()));
			}	
		}
		for (FIntegerVariable fv : integerVariables()) {
			if (fv.fixedAttribute()) {
				addFInitialEquation(new FEquation(new FIdUseExp(
						new FIdUse(fv.getFQName().fullCopy())),
						fv.startAttributeExp()));
			}	
		}
		for (FBooleanVariable fv : booleanVariables()) {
			if (fv.fixedAttribute()) {
				addFInitialEquation(new FEquation(new FIdUseExp(
						new FIdUse(fv.getFQName().fullCopy())),
						fv.startAttributeExp()));
			}	
		}		
		//flush();
				root().flushAllRecursive();
	}
	
	ArrayList<String> FClass.aliasErrors = new ArrayList<String>();
	
	public class AliasPair {
		public FVariable fv1;
		public FVariable fv2;
		public boolean negated;
		public AliasPair(FVariable fv1, FVariable fv2, boolean negated) {
			this.fv1 = fv1;
			this.fv2 = fv2;
			this.negated = negated;
		}
	}
	
	public AliasPair FAbstractEquation.aliasVariables() {
		return null;
	}
	
	public AliasPair FEquation.aliasVariables() {

		AbstractFVariable afv1 = null;
		AbstractFVariable afv2 = null;
		
		FVariable fv1 = null;
		FVariable fv2 = null;
		boolean negated = false;
		
		if (getLeft() instanceof FIdUseExp && // x = y
					getRight() instanceof FIdUseExp) {
			afv1 = ((FIdUseExp)getLeft()).myFV();
			afv2 = ((FIdUseExp)getRight()).myFV();
			if (!afv1.isUnknown() && !afv2.isUnknown()) {
				fv1 = (FVariable)afv1;
				fv2 = (FVariable)afv2;
				negated = false;
			}
		} else if (getLeft() instanceof FNegExp && // -x = y
				((FNegExp)getLeft()).getFExp() instanceof FIdUseExp &&
				getRight() instanceof FIdUseExp) {
			afv1 = ((FIdUseExp)((FNegExp)getLeft()).getFExp()).myFV();
			afv2 = ((FIdUseExp)getRight()).myFV();
			if (!afv1.isUnknown() && !afv2.isUnknown()) {
				fv1 = (FVariable)afv1;
				fv2 = (FVariable)afv2;
				negated = true;
			}
		} else if (getLeft() instanceof FIdUseExp && // x = -y
					getRight() instanceof FNegExp &&
				((FNegExp)getRight()).getFExp() instanceof FIdUseExp) {
			afv1 = ((FIdUseExp)getLeft()).myFV();
			afv2 = ((FIdUseExp)((FNegExp)getRight()).getFExp()).myFV();	
			if (!afv1.isUnknown() && !afv2.isUnknown()) {
				fv1 = (FVariable)afv1;
				fv2 = (FVariable)afv2;
				negated = true;
			}
		} else if (getLeft() instanceof FNegExp && // -x = -y
				((FNegExp)getLeft()).getFExp() instanceof FIdUseExp &&
				getRight() instanceof FNegExp &&
				((FNegExp)getRight()).getFExp() instanceof FIdUseExp
				) {
			afv1 = ((FIdUseExp)((FNegExp)getLeft()).getFExp()).myFV();
			afv2 = ((FIdUseExp)((FNegExp)getRight()).getFExp()).myFV();	
			if (!afv1.isUnknown() && !afv2.isUnknown()) {
				fv1 = (FVariable)afv1;
				fv2 = (FVariable)afv2;
				negated = false;
			}
		} 
		
		if (fv1!=null && fv2!=null) {
			return new AliasPair(fv1,fv2,negated);
		} else {
			return null;
		}
		
	}
	
	syn lazy boolean FAbstractEquation.isAliasEquation() = false;
	eq FEquation.isAliasEquation() = aliasVariables()!=null;
	
	/**
	 * \brief Generate alias information and remove alias equations.
	 */
	public void FClass.genAlias() {
		aliasManager = new AliasManager();
		
		for (FAbstractEquation equation : 
			getFEquationBlock(0).getFAbstractEquations()) {
			// Iterate over all equations

			if (equation.isAliasEquation()) {
				AliasPair aliasPair = equation.aliasVariables();
				aliasManager.addAliasVariables(aliasPair.fv1,
						aliasPair.fv2, aliasPair.negated);
			}			
		}	
		//flush();
				root().flushAllRecursive();
	}

	public boolean FClass.aliasVariablesEliminated = false;
	
	public void FClass.eliminateAliasVariables() {
		List<FVariable> nonAliasVars = new List<FVariable>();
		List<FVariable> aliasVars = new List<FVariable>();
		List<FAbstractEquation> eqns = new List<FAbstractEquation>();
		
		for (FVariable fv : getFVariables()) {
			if (fv.isAlias()) {
				aliasVars.add(fv);
			} else {
				nonAliasVars.add(fv);
			}
		}

		for (FAbstractEquation equation : 
			getFEquationBlock(0).getFAbstractEquations()) {
			// Iterate over all equations
			if (!equation.isAliasEquation()) {
				eqns.add(equation);
			}			
		}	

		setFVariableList(nonAliasVars);
		setAliasVariableList(aliasVars);
		getFEquationBlock(0).setFAbstractEquationList(eqns);
		
		aliasVariablesEliminated = true;
		
		//root().flushAllRecursive();
		flush();
	}
	
	boolean FIdUseExp.rewritten = false;
	rewrite FIdUseExp {
		when (!rewritten && myFClass() != null && 
				myFClass().aliasVariablesEliminated &&
				!myFV().isUnknown() && myFV().isAlias()) to FIdUseExp {
			FQName new_name = (FQName)((FVariable)myFV()).alias().getFQName().fullCopy();
			FQName old_name = getFIdUse().getFQName();
			FIdUseExp new_exp = new FIdUseExp(new FIdUse(new_name));
			new_exp.rewritten = true;
			return new_exp;
		}
	}
	
	rewrite FDer {
		when (!rewritten && myFClass() != null && 
				myFClass().aliasVariablesEliminated &&
				!getFIdUse().myFV().isUnknown() && getFIdUse().myFV().isAlias()) to FDer {
			FQName new_name = (FQName)((FVariable)getFIdUse().myFV()).alias().getFQName().fullCopy();
			FQName old_name = getFIdUse().getFQName();
			FDer new_exp = new FDer(new FIdUse(new_name));
			new_exp.rewritten = true;
			return new_exp;
		}
	}
	
	/**
	 * \brief Flush all caches, including collection attributes.
	 */
	public void ASTNode.flushAll() {
		flushCache();
		flushCollectionCache();
	}

	/**
	 * \brief Flush all caches, including collection attributes, and also
	 * flush all children.
	 */
	public void ASTNode.flushAllRecursiveClearFinal() {
		flushAll();
		//is$Final = false;
		for (int i=0;i<getNumChild();i++) {
			getChild(i).flushAllRecursiveClearFinal();
		}
	}
	
	public void FIdUseExp.flushAllRecursiveClearFinal() {
		flushAll();
		is$Final = false;
		for (int i=0;i<getNumChild();i++) {
			getChild(i).flushAllRecursiveClearFinal();
		}
	}

	public void FDer.flushAllRecursiveClearFinal() {
		flushAll();
		is$Final = false;
		for (int i=0;i<getNumChild();i++) {
			getChild(i).flushAllRecursiveClearFinal();
		}
	}
	
	public void ASTNode.flushAllRecursive() {
		flushAll();
		for (int i=0;i<getNumChild();i++) {
			getChild(i).flushAllRecursive();
		}
	}
	
	public void FClass.flush() {
		flushAllRecursiveClearFinal();
		//is$Final = true;
	}
	
	
}

aspect ParameterSorting {

	/**
	 * \brief Indicate if there exist cyclic parameter dependencies.
	 */
	public boolean FClass.cyclicParameters = false;
	
	/**
	 * \brief Sort dependent parameters.
	 * 
	 * This is a simple implementation of Kahn's topological sorting algorithm.
	 * This implementation will most likely be replaced by other graph 
	 * algorithms later on.
	 */
	public void FClass.sortDependentParameters() {
		
		// Retrieve the dependent parameter that will be sorted
		ArrayList<FVariable> dps = dependentParameters();
		
		// Create data structures for the adjacency graph.
		ArrayList<ArrayList<FVariable>> toNodes = new ArrayList<ArrayList<FVariable>>();	
		ArrayList<ArrayList<FVariable>> fromNodes = new ArrayList<ArrayList<FVariable>>();	
		
		// Initialize data structures.
		for(int i=0;i<numDependentParameters();i++) {
			toNodes.add(new ArrayList<FVariable>());
			fromNodes.add(new ArrayList<FVariable>());
		}
		
		// For each flat variable
		for (FVariable fv : dps) {
			// Retreive all variables referenced in binding expression
			ArrayList<FVariable> deps = fv.referencedFVariablesInBindingExp();
			// Build the actual adjacency graph.
			for (FVariable fv_add : deps) {
				if (!(dps.indexOf(fv_add)<0) && !toNodes.get(dps.indexOf(fv_add)).contains(fv)) {
					toNodes.get(dps.indexOf(fv_add)).add(fv);		
					fromNodes.get(dps.indexOf(fv)).add(fv_add);
				}
			}
		}	
				
		// Sort using algorithm described at
		// http://en.wikipedia.org/wiki/Topological_sorting
		ArrayList<FVariable> L = new ArrayList<FVariable>();
		ArrayList<FVariable> S = new ArrayList<FVariable>();
		
		// Add all nodes without incoming edges to S
		int i = 0;
		for (ArrayList<FVariable> l : fromNodes) {
			if (l.isEmpty()) {
				S.add(dps.get(i));
			}
			i++;
		}
		// Repeat while S is not empty
		while (!S.isEmpty()) {
			// Remove a node n from S
			FVariable n = S.remove(0);
			// Insert n into L
			L.add(n);
			// For each node m with an edge e from n to m
			for (FVariable m : toNodes.get(dps.indexOf(n))) {
				// Remove edge e from fromNodes
				fromNodes.get(dps.indexOf(m)).remove(n);
				// If m has no incoming edges add m to S
				if (fromNodes.get(dps.indexOf(m)).isEmpty()) {
					S.add(m);
				}
			}
			// Remove e from toNodes
			toNodes.get(dps.indexOf(n)).clear();
		}
		
		// Not possible to find an ordering without cycles?
		if (L.size()!=dps.size()) {
			cyclicParameters = true;
			return;
		}
		
		// Remove all dependent parameters from (in reversed order)
		for (i=getNumFVariable()-1;i>=0;i--) {
			if (dps.contains(getFVariable(i))) {
				getFVariableList().removeChild(i);
			}
		}

		// Add all dependent parameters in sorted order.
		for (FVariable fv : L) {
			addFVariable(fv);
		}

		// Flush AST since the structure has changed.
		//flush();
		root().flushAllRecursive();
	}	
		
}

aspect TransformCanonicalErrorCheck {
	
	public void FClass.checkFClassDimensions() {
		// Check dimensions of DAE
		int n_eq_F = numEquations();
		int n_vars_F = numAlgebraicRealVariables() + numDifferentiatedRealVariables();
		if (n_eq_F!=n_vars_F) {
			error("The DAE system has " + n_eq_F + " equations and " + n_vars_F + " free variables.");
		}
		
		// Check dimensions of DAE initialization system
		int n_eq_F0 = numInitialEquations() + numEquations();
		int n_vars_F0 = numAlgebraicRealVariables() + 2*numDifferentiatedRealVariables();
		if (n_eq_F0>n_vars_F0) {
			error("The DAE initialization system has " + n_eq_F0 + " equations and " + n_vars_F0 + " free variables.");
		}
		
	}
	
	public void FClass.collectErrors() {
		if (cyclicParameters) {
			error("The model "+ name() +" contains cyclic parameter dependencies.");
		}
		if (getAliasManager().aliasError()) {
			error(getAliasManager().getAliasErrorMessage());
		}
		for (String str : aliasErrors) {
			error(str);
		}
		checkFClassDimensions();
	}
	
}

