/*
    Copyright (C) 2010 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.StringReader;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.Collection;
import java.util.regex.Pattern;

aspect TestAnnotationizer {

/**
 * \brief Generates a test case annotation for a test model.
 * 
 * Helper class for TestAnnotationizer. This class contains a nmuber of inner 
 * classes that also inherit from it. Each of these inner classes handles the 
 * test case type with the same name as the inner class. An instance of the 
 * inner class associated with the desired test case is created using reflection, 
 * and the task of creating the annotation is then delegeted to that instance.
 * 
 * The behaviour when creating the annotations mirrors the behaviour of the test 
 * case classes.
 * 
 * All subclasses should be inner classes, and implement a constructor with the 
 * same arguments as the constructor of this class. Such inner classes can also be 
 * added in other JastAdd source files.
 */
abstract public class TestAnnotationizerHelper {

	// TODO: Use more code directly from the test case classes.
	
	/**
	 * \brief This is the main method for creating the annotation.
	 * 
	 * @param filePath     the path to the Modelica file containing the test model
	 * @param testType     the type of test case (case sensitive)
	 * @param modelName    the name of the test model
	 * @param description  the text to put in the "description" field of the test annotation
	 * @param data         any extra data to send to the delegate object
	 * @param write        if <code>true</code>, write the annotation directly in the Modelica file
	 */
	public static void doAnnotation(String filePath, String testType, String modelName, 
			String description, String data, boolean write) throws Exception {
		try {
			for (Class cl : TestAnnotationizerHelper.class.getClasses()) {
				if (cl.getSimpleName().startsWith(testType) && !Modifier.isAbstract(cl.getModifiers())) {
					Constructor constructor = cl.getConstructor(String.class, String.class, String.class, String.class);
					TestAnnotationizerHelper ta = (TestAnnotationizerHelper) constructor.newInstance(filePath, modelName, description, data);
					if (write)
						ta.writeAnnotation();
					else
						ta.printAnnotation();
					System.exit(0);
				}
			}
		} catch (InvocationTargetException e) {
			System.out.println("Creating annotation failed:");
			Throwable cause = e.getCause();
			String message = cause.getMessage();
			if (message == null || !(cause instanceof ModelicaException))
				cause.printStackTrace(System.out);
			else
				System.out.println(message);
			System.exit(1);
		}
		
		System.out.println("Test type " + testType + " not found.");
		System.exit(1);
	}

	/**
	 * \brief Prints a help message and exits.
	 * 
	 * Iterates over all available test case types and prints a usage message for each.
	 * 
	 * @param errorLevel  the exit status to pass to System.exit()
	 */
	public static void usageError(int errorLevel) throws Exception {
		System.out.println("Usage: java TestAnnotationizer <.mo file path> [options...] [<description>]");
		System.out.println("  Options:");
		System.out.println("    -w           write result to file instead of stdout");
		System.out.println("    -m/-o        create annotation for Modelica/Optimica (default is infer from file path)");
		System.out.println("    -t=<type>    set type of test, a unique prefix is enough, e.g. Err for ErrorTestCase");
		System.out.println("    -c=<class>   set name of class to generate annotation for, if name ");
		System.out.println("                 does not contain a dot, base name of .mo file is prepended");
		System.out.println("    -d=<data>    set extra data to send to the specific generator");
		System.out.println("    -h           print this help");
		System.out.println("  User will be prompted for type and/or class if not set with options.");
		System.out.println("  Available test types:");
		for (Class cl : TestAnnotationizerHelper.class.getClasses()) 
			if (!Modifier.isAbstract(cl.getModifiers()))
				cl.getMethod("usage", String.class, String.class).invoke(null, cl.getSimpleName(), null);
		System.exit(errorLevel);
	}
	
	/**
	 * \brief Prints a usage message for this test case type.
	 * 
	 * Prints the class name and, if given in <code>extra</code>, a description of 
	 * what extra data passed to the test case type is used for.
	 * 
	 * Subclasses should override and call this implementation if they use the 
	 * <code>data</code> argument of their constructor.
	 */
	public static void usage(String cl, String extra) {
		System.out.print("    " + cl);
		if (extra != null && !extra.equals(""))
			System.out.print(",  data = " + extra);
		System.out.println();
	}

	
	protected String filePath;
	protected String className;
	protected String testName;
	protected String description;
	protected SourceRoot root;
	
	/**
	 * \brief Standard constructor for test case creators.
	 * 
	 * Parses the Modelica file containing the test model and saves the source root.
	 * 
	 * All subclasses should have a constructor with the same arguments that calls this constructor.
	 * 
	 * @param filePath     the path to the Modelica file containing the test model
	 * @param className    the name of the test model
	 * @param description  the text to put in the "description" field of the test annotation
	 * @param data         any extra data to send to the delegate object
	 */
	public TestAnnotationizerHelper(String filePath, String className, String description, String data) throws Exception {
		this.filePath = filePath;
		this.className = className;
		this.description = prepare(description);
		testName = className.substring(className.lastIndexOf('.') + 1);
		
		String filesep = File.separator;
		String optionsfile = System.getenv("JMODELICA_HOME")+filesep+"Options"+filesep+"options.xml";
//		OptionRegistry or = new OptionRegistry(optionsfile);
		String modelicapath = System.getenv("JMODELICA_HOME")+filesep+"ThirdParty"+filesep+"MSL";
//		or.setStringOption("MODELICAPATH", modelicapath);
		
		ParserHandler ph = new ParserHandler();
		try {
			root = ph.parseFile(filePath);
			root.options = new OptionRegistry(optionsfile);
			root.options.setStringOption("MODELICAPATH", modelicapath);
//			root.options.copyAllOptions(or);
		} catch (ParserException e) {
			e.getProblem().setFileName(filePath);
			CompilerException ce = new CompilerException();
			ce.addProblem(e.getProblem());
			throw ce;
		}
		for (StoredDefinition sd : root.getProgram().getUnstructuredEntitys()) 
			sd.setFileName(filePath);
	}

	/**
	 * \brief Prints the resulting test annotation to stdout.
	 */
	public void printAnnotation() throws Exception {
		System.out.println("Annotation:\n=====================");
		outputAnnotation(System.out);
		System.out.println("\n=====================");		
	}

	/**
	 * \brief Writes the resulting test annotation directly in the Modelica file.
	 */
	public void writeAnnotation() throws Exception {
		File old = new File(filePath);
		BufferedReader in = new BufferedReader(new FileReader(old));
        File altered = File.createTempFile(className, ".mo");
        PrintStream out = new PrintStream(altered);
        for (int i = 0, n = getLine(); i < n; i++)
        	out.println(in.readLine());
        try {
        	outputAnnotation(out);
        } catch (Exception e) {
    		out.close();
			altered.delete();
			throw e;
       }
		for (String line = in.readLine(); line != null; line = in.readLine())
			out.println(line);
		out.close();
		if (!altered.renameTo(old)) {
			in = new BufferedReader(new FileReader(altered));
	        out = new PrintStream(old);
			for (String line = in.readLine(); line != null; line = in.readLine())
				out.println(line);
			altered.delete();
		}
		System.out.println("File " + old.getName() + " updated.");
	}

	/**
	 * \brief Generates the test annotation and ouputs it on the given stream.
	 */
	public void outputAnnotation(PrintStream out) throws Exception {
		out.println(" annotation(JModelica(unitTesting = JModelica.UnitTesting(testCase={");
		out.println("     JModelica.UnitTesting." + getClass().getSimpleName() + "(");
		out.println("         name=\"" + testName + "\",");
		out.println("         description=\"" + description + "\",");
		printSpecific(out, "         ");
		out.println(")})));\n");
	}
	
	/**
	 * \brief Gets the line number of the the start of the test model.
	 */
	protected int getLine() throws Exception {
		return root.getProgram().getInstProgramRoot().simpleLookupInstClassDecl(className).beginLine();
	}
	
	/**
	 * \brief Escapes unallowed characters in the fields of the test annotation.
	 */
	protected String prepare(String str) {
		return str.replaceAll("\\\\", "\\\\").replaceAll("\"", "\\\\\"");	
	}

	/**
	 * \brief Performs the instantiation, flattening and transform canonical steps of the compilation.
	 */
	protected FClass compile() throws Exception {
		InstClassDecl icl = instantiate();		
	    FClass fc = flatten(icl);
	    transformCanonical(fc);
	    return fc;
	}

	/**
	 * \brief Performs the instantiation step of the compilation.
	 */
	protected InstClassDecl instantiate() throws Exception {
		InstProgramRoot ipr = root.getProgram().getInstProgramRoot();
		ipr.options = new OptionRegistry(root.options);
		handleCompilerProblems(ipr.checkErrorsInInstClass(className));
		return ipr.simpleLookupInstClassDecl(className);
	}

	/**
	 * \brief Performs the flattening step of the compilation.
	 */
	protected FClass flatten(InstClassDecl icl) {
		FlatRoot flatRoot = new FlatRoot();
	    flatRoot.setFileName(filePath);
	    FClass fc = TestCase.createFClass(icl);
	    flatRoot.setFClass(fc);
		flatRoot.options = new OptionRegistry(icl.root().options);
		icl.flattenInstClassDecl(fc);
		return fc;
	}

	/**
	 * \brief Performs the transform canonical step of the compilation.
	 */
	protected void transformCanonical(FClass fc) throws Exception {
		fc.transformCanonical();
		handleCompilerProblems(fc.errorCheck());
	}
	
	/**
	 * \brief Filters away the Problems that is ignored by test cases and throws an 
	 *        exception if any remain.
	 * 
	 * Called by instantiate() and transformCanonical() after error checking.
	 */
	protected void handleCompilerProblems(Collection<Problem> problems) throws CompilerException {
		CompilerException ce = new CompilerException();
		for (Problem p : problems) 
			if (keepProblem(p)) 
				ce.addProblem(p);
		if (!ce.getProblems().isEmpty())
			throw ce;
	}
	
	/**
	 * \brief Decides what Problems to keep when filtering.
	 * 
	 * This implementation filters out warnings and compliance errors.
	 */
	protected boolean keepProblem(Problem p) {
		return p.isTestError(false);
	}

	/**
	 * \brief Generate and print the part of the annotation that is specific to 
	 *        the test case type.
	 */
	abstract protected void printSpecific(PrintStream out, String indent) throws Exception;

	/**
	 * \brief Base class for code generation tests.
	 * 
	 * Extra data is used as the code template.
	 */
	public static abstract class CodeGenTestCase extends TestAnnotationizerHelper {

		protected String template;
		protected String code;

		/**
		 * \brief Constructor for base code generation test.
		 * 
		 * Compiles the model and generates code using the code template passed in 
		 * <code>data</code> and a code generator created by subclass.
		 */
		public CodeGenTestCase(String filePath, String className, String description, String data) throws Exception {
			super(filePath, className, description, data);
			template = prepare(data.replaceAll("\\\\n", "\n"));
			FClass fc = compile();
			AbstractGenerator generator = createGenerator(fc);
			ByteArrayOutputStream os = new ByteArrayOutputStream();
			generator.generate(new StringReader(template), new PrintStream(os));
			code = prepare(os.toString());
		}
		
		/**
		 * \brief Create the code generator to use.
		 */
		public abstract AbstractGenerator createGenerator(FClass fc);

		/**
		 * \brief Generate and print the part of the annotation that is specific to 
	     *        this test case type.
		 */
		@Override
		protected void printSpecific(PrintStream out, String indent) throws Exception {
			out.print(indent + "template=\"");
			if (template.indexOf('\n') < 0 && template.indexOf('\r') < 0) 
				out.print(template);
			else
				out.print("\n" + template + "\n");
			out.print("\",\n" + indent + "generatedCode=\"\n" + code);
			out.print("\"");
		}
		
	}

	/**
	 * \brief A generic code generation test.
	 */
	public static class GenericCodeGenTestCase extends CodeGenTestCase {

		/**
		 * \brief Constructor for generic code generation test.
		 * 
		 * Delegates to super class.
		 */
		public GenericCodeGenTestCase(String filePath, String className, String description, String data) throws Exception {
			super(filePath, className, description, data);
		}
		
		/**
		 * \brief Prints a usage message for this test case type.
		 */
		public static void usage(String cl, String extra) {
			TestAnnotationizerHelper.usage(cl, "generic code template");
		}

		/**
		 * \brief Create the code generator to use.
		 * 
		 * Creates a GenericGenerator.
		 */
		@Override
		public AbstractGenerator createGenerator(FClass fc) {
			return new GenericGenerator(new PrettyPrinter(), '$', fc);
		}
		
	}

	/**
	 * \brief A flattening test.
	 */
	public static class FlatteningTestCase extends TestAnnotationizerHelper {
		
		protected FClass fc;

		/**
		 * \brief Constructor for flattening test.
		 * 
		 * Performs the flattening and instantiation steps of compilation.
		 */
		public FlatteningTestCase(String filePath, String className, String description, String data) throws Exception {
			super(filePath, className, description, data);
			fc = flatten(instantiate());
		}

		/**
		 * \brief Generate and print the part of the annotation that is specific to 
	     *        this test case type.
		 */
		@Override
		protected void printSpecific(PrintStream out, String indent) throws Exception {
			out.println(indent + "flatModel=\"");
			out.print(prepare(fc.prettyPrint("")));
			out.print("\"");
		}
		
	}

	/**
	 * \brief A transform canonical test.
	 */
	public static class TransformCanonicalTestCase extends FlatteningTestCase {

		/**
		 * \brief Constructor for transform canonical test.
		 * 
		 * Performs the transform canonical step of compilation.
		 * (Superclass performs the flattening and instantiation steps.)
		 */
		public TransformCanonicalTestCase(String filePath, String className, String description, String data) throws Exception {
			super(filePath, className, description, data);
			transformCanonical(fc);
		}
		
	}

	/**
	 * \brief An error test case.
	 */
	public static class ErrorTestCase extends TestAnnotationizerHelper {

		private String message;

		/**
		 * \brief Constructor for error test case.
		 * 
		 * Compiles the model and catches any compiler exceptions thrown. If an 
		 * exception is caught, an error message is composed, to be included in 
		 * the annotation.
		 */
		public ErrorTestCase(String filePath, String className, String description, String data) throws Exception {
			super(filePath, className, description, data);
			try {
				compile();
				throw new ModelicaException(noExceptionMessage());
			} catch (CompilerException e) {
				StringBuilder str = new StringBuilder();
				str.append(e.getProblems().size() + " errors found:\n");
				for (Problem p : e.getProblems()) 
					str.append(p.toString()+"\n");
				message = prepare(str.toString());
			}
		}
		
		/**
		 * \brief Returns an error message for when no errors were detected in test model.
		 */
		protected String noExceptionMessage() {
			return "No errors reported in "+getClass().getSimpleName()+".";
		}

		/**
		 * \brief Generate and print the part of the annotation that is specific to 
	     *        this test case type.
		 */
		@Override
		protected void printSpecific(PrintStream out, String indent) throws Exception {
			out.print(indent + "errorMessage=\"\n" + message + "\"");
		}

	}
	
	/**
	 * \brief A warning test.
	 */
	public static class WarningTestCase extends ErrorTestCase {

		/**
		 * \brief Constructor for warning test.
		 * 
		 * Delegates to super class.
		 */
		public WarningTestCase(String filePath, String className, String description, String data) throws Exception {
			super(filePath, className, description, data);
		}
		
		/**
		 * \brief Returns an error message for when no errors were detected in test model.
		 */
		protected String noExceptionMessage() {
			return "No warnings or errors reported in WarningTestCase.";
		}
		
		/**
		 * \brief Decides what Problems to keep when filtering.
		 * 
		 * This implementation keeps all problems.
		 */
		protected boolean keepProblem(Problem p) {
			return true;
		}

	}
	
	/**
	 * \brief A compliance error test.
	 */
	public static class ComplianceErrorTestCase extends ErrorTestCase {

		/**
		 * \brief Constructor for compliance error test.
		 * 
		 * Delegates to super class.
		 */
		public ComplianceErrorTestCase(String filePath, String className, String description, String data) throws Exception {
			super(filePath, className, description, data);
		}
		
		/**
		 * \brief Decides what Problems to keep when filtering.
		 * 
		 * This implementation filters out compliance errors.
		 */
		protected boolean keepProblem(Problem p) {
			return p.severity() == Problem.Severity.ERROR;
		}

	}

	/**
	 * \brief An FClass method test case.
	 */
	public static class FClassMethodTestCase extends TestAnnotationizerHelper {

		private String methodName;
		private String methodResult;
		protected FClass fc;
		
		/**
		 * \brief Constructor for FClass method test case.
		 * 
		 * Compiles the model.
		 */
		public FClassMethodTestCase(String filePath, String className, String description, String data) throws Exception {
			super(filePath, className, description, data);
			fc = compile();
			methodName = data;
	    	Method method = fc.getClass().getMethod(methodName);
			methodResult = method.invoke(fc).toString();
		}
		
		/**
		 * \brief Generate and print the part of the annotation that is specific to 
	     *        this test case type.
		 */
		@Override
		protected void printSpecific(PrintStream out, String indent) throws Exception {
			int nl = Math.max(methodResult.lastIndexOf('\n'), methodResult.lastIndexOf('\r'));
			if (nl >= 0) 
				methodResult = "\n" + methodResult + (nl < methodResult.length() - 1 ? "\n" : "");
			out.print(indent + "methodName=\"" + methodName + "\",\n");
			out.print(indent + "methodResult=\"" + methodResult + "\"");
			if (nl < 0) 
				out.print("\n ");
		}
		
		/**
		 * \brief Prints a usage message for this test case type.
		 */
		public static void usage(String cl, String extra) {
			TestAnnotationizerHelper.usage(cl, "method name");
		}

	}

}

}
