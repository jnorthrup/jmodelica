/*
    Copyright (C) 2010 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package org.jmodelica.util;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.StringReader;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.Collection;

abstract public class TestAnnotationizerHelper {

	public static void doAnnotation(String filePath, String testType, String modelName, 
			String description, String data, boolean write) throws Exception {
		try {
			for (Class cl : TestAnnotationizerHelper.class.getClasses()) {
				if (cl.getSimpleName().equals(testType) && !Modifier.isAbstract(cl.getModifiers())) {
					Constructor constructor = cl.getConstructor(String.class, String.class, String.class, String.class);
					TestAnnotationizerHelper ta = (TestAnnotationizerHelper) constructor.newInstance(filePath, modelName, description, data);
					if (write)
						ta.writeAnnotation();
					else
						ta.printAnnotation();
					System.exit(0);
				}
			}
		} catch (InvocationTargetException e) {
			System.out.println("Creating annotation failed:");
			Throwable cause = e.getCause();
			String message = cause.getMessage();
			if (message == null || !(cause instanceof ModelicaException))
				cause.printStackTrace(System.out);
			else
				System.out.println(message);
			System.exit(1);
		}
		
		System.out.println("Test type " + testType + " not found.");
		System.exit(1);
	}

	public static void usageError(int errorLevel) throws Exception {
		System.out.println("Usage: java TestAnnotationizer <.mo file path> [options...] [<description>]");
		System.out.println("  Options:");
		System.out.println("    -w           write result to file instead of stdout");
		System.out.println("    -m/-o        create annotation for Modelica/Optimica (default is infer from file path)");
		System.out.println("    -t=<type>    set type of test, e.g. CCodeGenTestCase");
		System.out.println("    -c=<class>   set name of class to generate annotation for, if name ");
		System.out.println("                 does not contain a dot, base name of .mo file is prepended");
		System.out.println("    -d=<data>    set extra data to send to the specific generator");
		System.out.println("    -h           print this help");
		System.out.println("  User will be prompted for type and/or class if not set with options.");
		System.out.println("  Available test types:");
		for (Class cl : TestAnnotationizerHelper.class.getClasses()) 
			if (!Modifier.isAbstract(cl.getModifiers()))
				cl.getMethod("usage", String.class, String.class).invoke(null, cl.getSimpleName(), null);
		System.exit(errorLevel);
	}
	
	public static void usage(String cl, String extra) {
		System.out.print("    " + cl);
		if (extra != null && !extra.equals(""))
			System.out.print(",  data = " + extra);
		System.out.println();
	}

	
	protected String filePath;
	protected String className;
	protected String testName;
	protected String description;
	protected SourceRoot root;
	
	public TestAnnotationizerHelper(String filePath, String className, String description, String data) throws Exception {
		this.filePath = filePath;
		this.className = className;
		this.description = prepare(description);
		testName = className.substring(className.lastIndexOf('.') + 1);
		
		String filesep = File.separator;
		String optionsfile = System.getenv("JMODELICA_HOME")+filesep+"Options"+filesep+"options.xml";
//		OptionRegistry or = new OptionRegistry(optionsfile);
		String modelicapath = System.getenv("JMODELICA_HOME")+filesep+"ThirdParty"+filesep+"MSL";
//		or.setStringOption("MODELICAPATH", modelicapath);
		
		ParserHandler ph = new ParserHandler();
		try {
			root = ph.parseFile(filePath);
			root.options = new OptionRegistry(optionsfile);
			root.options.setStringOption("MODELICAPATH", modelicapath);
//			root.options.copyAllOptions(or);
		} catch (ParserException e) {
			e.getProblem().setFileName(filePath);
			CompilerException ce = new CompilerException();
			ce.addProblem(e.getProblem());
			throw ce;
		}
		for (StoredDefinition sd : root.getProgram().getUnstructuredEntitys()) 
			sd.setFileName(filePath);
	}

	public void printAnnotation() throws Exception {
		System.out.println("Annotation:\n=====================");
		outputAnnotation(System.out);
		System.out.println("\n=====================");		
	}

	public void writeAnnotation() throws Exception {
		File old = new File(filePath);
		BufferedReader in = new BufferedReader(new FileReader(old));
        File altered = File.createTempFile(className, ".mo");
        PrintStream out = new PrintStream(altered);
        for (int i = 0, n = getLine(); i < n; i++)
        	out.println(in.readLine());
        try {
        	outputAnnotation(out);
        } catch (Exception e) {
    		out.close();
			altered.delete();
			throw e;
       }
		for (String line = in.readLine(); line != null; line = in.readLine())
			out.println(line);
		out.close();
		if (!altered.renameTo(old)) {
			in = new BufferedReader(new FileReader(altered));
	        out = new PrintStream(old);
			for (String line = in.readLine(); line != null; line = in.readLine())
				out.println(line);
			altered.delete();
		}
		System.out.println("File " + old.getName() + " updated.");
	}

	public void outputAnnotation(PrintStream out) throws Exception {
		out.println(" annotation(JModelica(unitTesting = JModelica.UnitTesting(testCase={");
		out.println("     JModelica.UnitTesting." + getClass().getSimpleName() + "(");
		out.println("         name=\"" + testName + "\",");
		out.println("         description=\"" + description + "\",");
		printSpecific(out, "         ");
		out.println(")})));\n");
	}
	
	protected int getLine() throws Exception {
		return root.getProgram().getInstProgramRoot().simpleLookupInstClassDecl(className).beginLine();
	}
	
	protected String prepare(String str) {
		return str.replaceAll("\\\\", "\\\\").replaceAll("\"", "\\\\\"");	
	}

	protected FClass compile() throws Exception {
		InstClassDecl icl = instantiate();		
	    FClass fc = flatten(icl);
	    transformCanonical(fc);
	    return fc;
	}

	protected FClass flatten(InstClassDecl icl) {
		FlatRoot flatRoot = new FlatRoot();
	    flatRoot.setFileName(filePath);
	    FClass fc = TestCase.createFClass(icl);
	    flatRoot.setFClass(fc);
		flatRoot.options = new OptionRegistry(icl.root().options);
		icl.flattenInstClassDecl(fc);
		return fc;
	}

	protected InstClassDecl instantiate() throws Exception {
		InstProgramRoot ipr = root.getProgram().getInstProgramRoot();
		ipr.options = new OptionRegistry(root.options);
		handleCompilerProblems(ipr.checkErrorsInInstClass(className));
		return ipr.simpleLookupInstClassDecl(className);
	}

	protected void transformCanonical(FClass fc) throws Exception {
		fc.transformCanonical();
		handleCompilerProblems(fc.errorCheck());
	}
	
	protected void handleCompilerProblems(Collection<Problem> problems) throws CompilerException {
		CompilerException ce = new CompilerException();
		for (Problem p : problems) 
			if (p.severity() == Problem.Severity.ERROR) 
				ce.addProblem(p);
		if (!ce.getProblems().isEmpty())
			throw ce;
	}

	abstract protected void printSpecific(PrintStream out, String indent) throws Exception;

	public static abstract class CodeGenTestCase extends TestAnnotationizerHelper {

		protected String template;
		protected String code;

		public CodeGenTestCase(String filePath, String className, String description, String data) throws Exception {
			super(filePath, className, description, data);
			template = prepare(data.replaceAll("\\\\n", "\n"));
			FClass fc = compile();
			AbstractGenerator generator = createGenerator(fc);
			ByteArrayOutputStream os = new ByteArrayOutputStream();
			generator.generate(new StringReader(template), new PrintStream(os));
			code = prepare(os.toString());
		}
		
		public abstract AbstractGenerator createGenerator(FClass fc);

		@Override
		protected void printSpecific(PrintStream out, String indent) throws Exception {
			out.print(indent + "template=\"");
			if (template.indexOf('\n') < 0 && template.indexOf('\r') < 0) 
				out.print(template);
			else
				out.print("\n" + template + "\n");
			out.print("\",\n" + indent + "generatedCode=\"\n" + code);
			out.print("\"");
		}
		
	}

	public static class CCodeGenTestCase extends CodeGenTestCase {

		public CCodeGenTestCase(String filePath, String className, String description, String data) throws Exception {
			super(filePath, className, description, data);
		}
		
		public static void usage(String cl, String extra) {
			TestAnnotationizerHelper.usage(cl, "C code template");
		}

		@Override
		public AbstractGenerator createGenerator(FClass fc) {
			return new CGenerator(new PrettyPrinter(), '$', fc);
		}
		
	}

	public static class GenericCodeGenTestCase extends CodeGenTestCase {

		public GenericCodeGenTestCase(String filePath, String className, String description, String data) throws Exception {
			super(filePath, className, description, data);
		}
		
		public static void usage(String cl, String extra) {
			TestAnnotationizerHelper.usage(cl, "generic code template");
		}

		@Override
		public AbstractGenerator createGenerator(FClass fc) {
			return new GenericGenerator(new PrettyPrinter(), '$', fc);
		}
		
	}

	public static class FlatteningTestCase extends TestAnnotationizerHelper {
		
		protected FClass fc;

		public FlatteningTestCase(String filePath, String className, String description, String data) throws Exception {
			super(filePath, className, description, data);
			fc = flatten(instantiate());
		}

		@Override
		protected void printSpecific(PrintStream out, String indent) throws Exception {
			out.println(indent + "flatModel=\"");
			out.print(prepare(fc.prettyPrint("")));
			out.print("\"");
		}
		
	}

	public static class TransformCanonicalTestCase extends FlatteningTestCase {

		public TransformCanonicalTestCase(String filePath, String className, String description, String data) throws Exception {
			super(filePath, className, description, data);
			transformCanonical(fc);
		}
		
	}

	public static class ErrorTestCase extends TestAnnotationizerHelper {

		private String message;

		public ErrorTestCase(String filePath, String className, String description, String data) throws Exception {
			super(filePath, className, description, data);
			try {
				compile();
				throw new ModelicaException("No errors reported in ErrorTestCase.");
			} catch (CompilerException e) {
				StringBuilder str = new StringBuilder();
				str.append(e.getProblems().size() + " errors found:\n");
				for (Problem p : e.getProblems()) {
					str.append(p.toString()+"\n");
				}
				message = prepare(str.toString());
			}
		}

		@Override
		protected void printSpecific(PrintStream out, String indent) throws Exception {
			out.print(indent + "errorMessage=\"\n" + message + "\"");
		}

	}

}
