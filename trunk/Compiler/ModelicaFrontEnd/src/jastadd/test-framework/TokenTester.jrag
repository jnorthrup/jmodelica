/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * 
 */

import org.jmodelica.modelica.parser.FlatModelicaScanner;
import java.io.StringReader;
import java.io.FileReader;
import java.io.Reader;
import java.io.BufferedReader;

/**
 * @author jakesson
 *
 */
public class TokenTester {

	public boolean test(String s1, String s2) {
		boolean testSuccess = true;
		boolean done = false;

		FlatModelicaScanner fms1 = new FlatModelicaScanner(new StringReader(s1));
		FlatModelicaScanner fms2 = new FlatModelicaScanner(new StringReader(s2));

		try {
			while (!done && testSuccess) {
				String t1 = fms1.nextToken();
				String t2 = fms2.nextToken();
				System.out.println("t1: " + t1 + " t2: " + t2);

				boolean match;
				if (t1 == null || t2 == null) {
					done = true;
					match = t1 == t2;
				} else {
					match = t1.equals(t2);
				}

				if (!match) {
					System.out.println("Token error - test failed");
					testSuccess = false;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}

		return testSuccess;
	}
/*
	public static void main(String args[]) {
	
		if(args.length != 3) {
			System.out.println("TokenTester expects a .mo file name, a class name and a .mof file name as command line arguments");
			System.exit(1);
		}

		String moFile = args[0];
		String cName = args[1];
		String mofFile = args[2];

		
		ModelicaParser parser = new ModelicaParser();
		FlatModelicaParser fparser = new FlatModelicaParser();
		SourceRoot sr = null;
		FlatRoot fr = null;
		InstProgramRoot ipr = null;
		
		try {
			String cl = args[1];
			Reader reader = new FileReader(moFile);
			ModelicaScanner scanner = new ModelicaScanner(new BufferedReader(reader));
			//System.out.println("Parsing "+moFile+"...");
			sr = (SourceRoot)parser.parse(scanner);
		    ipr = sr.getProgram().getInstProgramRoot();
		} catch (Error e) {
			System.out.println("In file: '"+moFile + "':");
			System.err.println(e.getMessage());
			System.exit(1);
		} catch (Exception e) {e.printStackTrace();}
		
		FClass fc1 = new FClass();
		InstNode ir;
		try {
			ir = ipr.findFlattenInst(cName,fc1);
		} catch (ModelicaClassNotFoundException e) {
			System.exit(0);
		}
		sr.setFileName(moFile);
		
		StringBuffer fm1_str = new StringBuffer();
		//fc1.prettyPrint(fm1_str, "");

		try {
			Reader reader = new FileReader(mofFile);
			FlatModelicaScanner scanner = new FlatModelicaScanner(new BufferedReader(reader));
			//System.out.println("Parsing "+mofFile+"...");
			fr = (FlatRoot)fparser.parse(scanner);
		} catch (Error e) {
			System.out.println("In file: '"+mofFile + "':");
			System.err.println(e.getMessage());
			System.exit(1);
		} catch (Exception e) {e.printStackTrace();}
		
		StringBuffer fm2_str = new StringBuffer();
		fr.setFileName(mofFile);
		//fr.prettyPrint(fm2_str, "");
		
		TokenTester tt = new TokenTester();
		boolean testSuccess = tt.test(fm1_str.toString(),fm2_str.toString());

		if (testSuccess)
			System.out.println("Test succeeded!");
		else
			System.out.println("Test failed!");

	}

*/
}
