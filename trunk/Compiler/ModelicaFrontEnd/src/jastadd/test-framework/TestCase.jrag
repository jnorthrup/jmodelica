/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import java.util.Iterator;

aspect TestCases {

/**
 * \brief base class for test cases.
 * 
 * Note that for each attribute (e.g. "attributeName") in the test case 
 * annotation, there must be a corresponding method (e.g. "setAttributeName()") 
 * in that subclass of TestCase.
 * 
 * @author jakesson
 */
abstract public class TestCase {

	private String name;
	private String description;
	private String sourceFileName;
	private String className;
	
	private boolean filter = false;
	private boolean checkWarnings = false;

	public TestCase() {}
	
	/**
	 * @param name
	 * @param description
	 * @param sourceFileName
	 * @param className
	 */
	public TestCase(String name, 
			        String description, 
			        String sourceFileName,
			        String className) {
		super();
		this.name = name;
		this.description = description;
		this.sourceFileName = sourceFileName;
		this.className = className;
	}
		
	public void dumpJunit(StringBuilder str, int index) {
		str.append("  @Test public void " + getName() + "() {\n");
		str.append("    assertTrue(ts.get("+index+").getDescription(), ts.get("+index+").testMe());\n");
	    str.append("  }\n\n");
	}
	
	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @return the description
	 */
	public String getDescription() {
		return description;
	}

	/**
	 * @param description the description to set
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * @return the sourceFileName
	 */
	public String getSourceFileName() {
		return sourceFileName;
	}

	/**
	 * @param sourceFileName the sourceFileName to set
	 */
	public void setSourceFileName(String sourceFileName) {
		this.sourceFileName = sourceFileName;
	}

	/**
	 * @return the className
	 */
	public String getClassName() {
		return className;
	}

	/**
	 * @param className the className to set
	 */
	public void setClassName(String className) {
		this.className = className;
	}
	
	/**
	 * \brief Activate or deactivate filtering (see {@link #filter(String)}).
	 */
	public void setFilter(boolean val) {
		filter = val;
	}
	
	/**
	 * \brief Activate or deactivate incusion of warnings in error check (see {@link #filterProblems(Collection<Problem>)}).
	 */
	public void setCheckWarnings(boolean val) {
		checkWarnings = val;
	}
	
	/**
	 * \brief Perform filtering on string, if activated.
	 */
	protected String filter(String str) {
		if (filter) {
			// TODO: Add more filters
			String dir = getSourceFileName().replaceFirst("[\\\\/][^\\\\/]*$", "");
			str = str.replace("%dir%", dir);
		}
		return str;
	}
	
	/**
	 * \brief Remove all whitespaces.
	 * @param str
	 * @return
	 */
	public String removeWhitespace(String str) {
		String str_res = str;
    	str_res = str_res.replaceAll("\\r", "");
    	str_res = str_res.replaceAll("\\n", "");
    	str_res = str_res.replaceAll(" ", "");
		return str_res;
	}
	
	/**
	 * \brief Thrown when the options file could not be openend.
	 */
	public static class CouldNotLoadOptionsException extends RuntimeException {
		public CouldNotLoadOptionsException(Throwable t) {
			super(t);
		}
	}
	
	/**
	 * \brief Describes the result of a test performed by a method called by testMe().
	 */
	protected enum Result { PASS, FAIL, CONTINUE }
	
	public boolean testMe() {
		// Parse
		ParserHandler ph = new ParserHandler();
		SourceRoot sr = null;
		try {
			sr = ph.parseFile(getSourceFileName());
		} catch (Exception e) {
			return false;
		}
		
		String filesep = System.getProperty("file.separator");
		String optionsfile = System.getenv("JMODELICA_HOME")+filesep+"Options"+filesep+"options.xml";
		OptionRegistry or;
		try {
			or = new OptionRegistry(optionsfile);
		} catch (Exception e) {
			throw new CouldNotLoadOptionsException(e);
		}
		String modelica_path = System.getenv("JMODELICA_HOME")+filesep+"ThirdParty/MSL";
		or.setStringOption("MODELICAPATH",modelica_path);
		sr.options = or;
		
		sr.setFileName(getSourceFileName());
		
		
		// Instantiate and check for errors
	    InstProgramRoot ipr = sr.getProgram().getInstProgramRoot();
	    Collection<Problem> problems;
	    try {
	    	problems = ipr.checkErrorsInInstClass(getClassName());
	    } catch (ModelicaClassNotFoundException e) {
	    	return false;
	    }
	    
		Result res = testSemanticProblems(problems);
		if (res != Result.CONTINUE)
			return res == Result.PASS;
		
		
		// Flatten class and test it
	    FlatRoot flatRoot = new FlatRoot();
	    flatRoot.setFileName(getSourceFileName());
	    FClass fc = createFClass(ipr.simpleLookupInstClassDecl(getClassName()));
	    flatRoot.setFClass(fc);
	    flatRoot.options = new OptionRegistry(or);
	    
	    InstNode ir;
	    try {
	    	ir = ipr.findFlattenInst(getClassName(), fc);
	    } catch (ModelicaClassNotFoundException e) {
	    	return false;
	    }
	    
	    res = testFlattened(fc);
		if (res != Result.CONTINUE)
			return res == Result.PASS;
		
		
		// Transform canonical and check for errors again
	    fc.transformCanonical();
		problems = fc.errorCheck();
		
		res = testTransformedProblems(problems);
		if (res != Result.CONTINUE)
			return res == Result.PASS;
		
		
		// Test transformed class
	    res = testTransformed(fc);
		if (res != Result.CONTINUE)
			return res == Result.PASS;
		
		
		// No test has returned FAIL
		return true;
	}

	/**
	 * \brief Perform tests on the set of semantic problems found in the instance tree.
	 * 
	 * Default implementation returns FAIL if any errors other than COMPLIANCE were found, CONTINUE otherwise.
	 */
	protected Result testSemanticProblems(Collection<Problem> problems) {
		return testProblems(problems);
	}
	
	/**
	 * \brief Perform tests on flattened class.
	 */
	protected Result testFlattened(FClass fc) {
		return Result.CONTINUE;
	}

	/**
	 * \brief Perform tests on flat class after transform canonical step.
	 */
	protected Result testTransformed(FClass fc) {
		return Result.CONTINUE;
	}

	/**
	 * \brief Perform tests on the set of semantic problems found after transform canonical step.
	 * 
	 * Default implementation returns FAIL if any errors other than COMPLIANCE were found, CONTINUE otherwise.
	 */
	protected Result testTransformedProblems(Collection<Problem> problems) {
		return testProblems(problems);
	}
	
	/**
	 * \brief Perform tests on a set of semantic problems.
	 * 
	 * Default implementation returns FAIL if any errors other than COMPLIANCE were found, CONTINUE otherwise.
	 */
	protected Result testProblems(Collection<Problem> problems) {
		filterProblems(problems);
		return (problems.size() > 0) ? Result.FAIL : Result.CONTINUE;
	}
	
	/**
	 * \brief Filters out any uninteresting problems from a set of semantic problems.
	 * 
	 * Default implementation removes any warnings and any COMPLIANCE errors.
	 */
	protected void filterProblems(Collection<Problem> problems) {
		for (Iterator<Problem> it = problems.iterator(); it.hasNext(); )
			if (!it.next().isTestError(checkWarnings))
				it.remove();
	}
	
	/**
	 * \brief Compare a flat class to a pretty-printed correct model and return PASS or FAIL.
	 */
	protected Result testPrettyPrint(FClass fc, String correct) {
		TokenTester tt = new TokenTester();
		String test = fc.prettyPrint("");
		return tt.test(test, correct) ? Result.PASS : Result.FAIL;
	}
	
	/**
	 * \brief Transforms any CONTINUE result into FAIL.
	 * 
	 * @see Result
	 */
	protected Result stop(Result res) {
		return (res == Result.CONTINUE) ? Result.FAIL : res;
	}

}
	
	public static FClass TestCase.createFClass(InstClassDecl icd) {
		return new FClass();
	}

}
