/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import java.util.Iterator;
import java.util.Collection;

aspect TestCases {

/**
 * \brief base class for test cases.
 * 
 * Note that for each attribute (e.g. "attributeName") in the test case 
 * annotation, there must be a corresponding method (e.g. "setAttributeName()") 
 * in that subclass of TestCase. Any attribute in the test case annotation with 
 * a name containing an underscore ("_"), is instead interpreted as a compiler
 * option, and is set with setXXXOption().
 * 
 * @author jakesson
 */
abstract public class TestCase {

	private String name;
	private String description;
	private String sourceFileName;
	private String className;
	
	private boolean filter = false;
	private boolean checkWarnings = false;
	
	private OptionRegistry options;

	public TestCase() {
		options = createOptionsRegistry();
	}
	
	/**
	 * @param name
	 * @param description
	 * @param sourceFileName
	 * @param className
	 */
	public TestCase(String name, 
			        String description, 
			        String sourceFileName,
			        String className) {
		this();
		this.name = name;
		this.description = description;
		this.sourceFileName = sourceFileName;
		this.className = className;
	}
	
	/**
	 * \brief Create the OptionsRegistry to be used during compilation.
	 * 
	 * Options may be further changed by test annotation.
	 */
	protected OptionRegistry createOptionsRegistry() {
		OptionRegistry or = new OptionRegistry();
		String modelica_path = System.getenv("JMODELICA_HOME") + File.separator + 
				"ThirdParty" + File.separator + "MSL";
		or.setStringOption("MODELICAPATH", modelica_path);
		return or;
	}
	
	/**
	 * \brief Set a string option to be used during compilation.
	 */
	public void setStringOption(String key, String value) {
		options.setStringOption(key, value);
	}
	
	/**
	 * \brief Set a boolean option to be used during compilation.
	 */
	public void setBooleanOption(String key, boolean value) {
		options.setBooleanOption(key, value);
	}
	
	/**
	 * \brief Set an integer option to be used during compilation.
	 */
	public void setIntegerOption(String key, int value) {
		options.setIntegerOption(key, value);
	}
	
	/**
	 * \brief Set a real option to be used during compilation.
	 */
	public void setRealOption(String key, double value) {
		options.setRealOption(key, value);
	}
		
	public void dumpJunit(StringBuilder str, int index) {
		str.append("  @Test public void " + getName() + "() {\n");
		str.append("    ts.get("+index+").testMe(asserter);\n");
	    str.append("  }\n\n");
	}
	
	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @return the description
	 */
	public String getDescription() {
		return description;
	}

	/**
	 * @param description the description to set
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * @return the sourceFileName
	 */
	public String getSourceFileName() {
		return sourceFileName;
	}

	/**
	 * @param sourceFileName the sourceFileName to set
	 */
	public void setSourceFileName(String sourceFileName) {
		this.sourceFileName = sourceFileName;
	}

	/**
	 * @return the className
	 */
	public String getClassName() {
		return className;
	}

	/**
	 * @param className the className to set
	 */
	public void setClassName(String className) {
		this.className = className;
	}
	
	/**
	 * \brief Activate or deactivate filtering (see {@link #filter(String)}).
	 */
	public void setFilter(boolean val) {
		filter = val;
	}
	
	/**
	 * \brief Activate or deactivate incusion of warnings in error check (see {@link #filterProblems(Collection<Problem>)}).
	 */
	public void setCheckWarnings(boolean val) {
		checkWarnings = val;
	}
	
	/**
	 * \brief Perform filtering on string, if activated.
	 */
	protected String filter(String str) {
		if (filter) {
			// TODO: Add more filters
			String dir = getSourceFileName().replaceFirst("[\\\\/][^\\\\/]*$", "");
			str = str.replace("%dir%", dir);
		}
		return str;
	}
	
	/**
	 * \brief Replace all sequences of whitespace with a single space each.
	 */
	public String removeWhitespace(String str) {
	    /* TODO: Removing all whitespace can conceal errors. 
	     * Perhaps all sequences of whitespace should be replaced with a single space instead? */ 
		String str_res = str;
    	str_res = str_res.replaceAll("\\s+", "");
		return str_res;
	}
	
	/**
	 * \brief Interface for proxy class used to remove dependency on junit from TestCase.
	 */
	public static interface Assert {
		public void fail(String msg);
	}
	
	private Assert asserter;
	
	/**
	 * \brief Signal that the test failed.
	 * 
	 * @param msg  a message describing what went wrong
	 */
	protected void fail(String msg) {
		asserter.fail(getDescription() + "\n" + getClass().getSimpleName() + ": " + msg);
	}
	
	/**
	 * \brief Signal that the test failed.
	 * 
	 * @param e  the exception that caused the failure
	 */
	protected void fail(Exception e) {
		if (e instanceof ModelicaException) 
			fail(e.getMessage());

		ByteArrayOutputStream out = new ByteArrayOutputStream();
		e.printStackTrace(new PrintStream(out));
		fail("Exception caught in test case: " + out.toString());
	}
	
	public void testMe(Assert a) {
		try {
			asserter = a;
			performTest();
		} catch (Exception e) {
			fail(e);
		}
	}
	
	public void performTest() throws Exception {
		// Parse
		ParserHandler ph = new ParserHandler();
		SourceRoot sr = null;
		sr = ph.parseFile(getSourceFileName());
		sr.options = options;
		sr.setFileName(getSourceFileName());
		
		
		// Instantiate and check for errors
	    InstProgramRoot ipr = sr.getProgram().getInstProgramRoot();
	    Collection<Problem> problems = ipr.checkErrorsInInstClass(getClassName());
		if (testSemanticProblems(problems)) return;
		
		
		// Flatten class and test it
	    FlatRoot flatRoot = new FlatRoot();
	    flatRoot.setFileName(getSourceFileName());
	    FClass fc = createFClass(ipr.simpleLookupInstClassDecl(getClassName()));
	    
	    flatRoot.setFClass(fc);
	    flatRoot.options = new OptionRegistry(options);
    	ipr.findFlattenInst(getClassName(), fc);
		if (testFlattened(fc)) return;
		
		
		// Transform canonical and check for errors again
	    fc.transformCanonical();
		problems = fc.errorCheck();
		if (testTransformedProblems(problems)) return;
		
		
		// Test transformed class
	    testTransformed(fc);
	}

	/**
	 * \brief Perform tests on the set of semantic problems found in the instance tree.
	 * 
	 * Default implementation fails if any errors other than COMPLIANCE were found, and returns false otherwise.
	 * 
	 * @return  <code>true</code> if test case shoule stop after this method
	 */
	protected boolean testSemanticProblems(Collection<Problem> problems) {
		return testProblems(problems);
	}
	
	/**
	 * \brief Perform tests on flattened class.
	 * 
	 * @return  <code>true</code> if test case shoule stop after this method
	 */
	protected boolean testFlattened(FClass fc) {
		return false;
	}

	/**
	 * \brief Perform tests on flat class after transform canonical step.
	 * 
	 * @return  <code>true</code> if test case shoule stop after this method
	 */
	protected boolean testTransformed(FClass fc) {
		return false;
	}

	/**
	 * \brief Perform tests on the set of semantic problems found after transform canonical step.
	 * 
	 * Default implementation fails if any errors other than COMPLIANCE were found, and returns false otherwise.
	 * 
	 * @return  <code>true</code> if test case shoule stop after this method
	 */
	protected boolean testTransformedProblems(Collection<Problem> problems) {
		return testProblems(problems);
	}
	
	/**
	 * \brief Perform tests on a set of semantic problems.
	 * 
	 * Default implementation fails if any errors other than COMPLIANCE were found, and returns false otherwise.
	 * 
	 * @return  <code>true</code> if test case shoule stop after this method
	 */
	protected boolean testProblems(Collection<Problem> problems) {
		filterProblems(problems);
		if (problems.size() > 0)
			fail(new CompilerException(problems));
		return false;
	}
	
	/**
	 * \brief Filters out any uninteresting problems from a set of semantic problems.
	 * 
	 * Default implementation removes any warnings and any COMPLIANCE errors.
	 */
	protected void filterProblems(Collection<Problem> problems) {
		for (Iterator<Problem> it = problems.iterator(); it.hasNext(); )
			if (!it.next().isTestError(checkWarnings))
				it.remove();
	}
	
	/**
	 * \brief Compare a flat class to a pretty-printed correct model and fail if different.
	 */
	protected void testPrettyPrint(FClass fc, String correct) {
		TokenTester tt = new TokenTester();
		String test = fc.prettyPrint("");
		if (!tt.test(test, correct)) 
			fail("Flat class does not match expected." + compareMsg(test, correct));
	}
	
	/**
	 * \brief Generate the part of an error message that shows expected and actual result.
	 */
	protected String compareMsg(String actual, String expected) {
		expected =  expected.trim();
		return "\n--- Expected: ---\n" + expected + "\n\n--- Actual: ---\n" + actual;
	}

}
	
	/**
	 * \brief Create a new instance of the proper FClass (sub)class.
	 */
	public static FClass TestCase.createFClass(InstClassDecl icd) {
		return new FClass();
	}

}
