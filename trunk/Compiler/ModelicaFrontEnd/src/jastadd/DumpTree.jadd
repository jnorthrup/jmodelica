/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect DumpTree {
/* 	
 	public void FullClassDecl.dumpTree(String indent) {
 		getImportList().dumpTree(indent);
 		super.dumpTree(indent);
 	}
 */
 
 
  	public void ASTNode.dumpTree(String indent) {
     	//log.debug("*** ASTNode.dumpTree(): " + toString());
    	System.out.println(indent + dump() + " at line: " + beginLine());
    	for(int i = 0; i < getNumChild(); i++)
    		if (getChild(i) instanceof ASTNode)
	      		getChild(i).dumpTree(indent + "  ");
  	}
  
  	/**
  	 * 
  	 */
  	public String ASTNode.dump() {
    	//log.debug("*** ASTNode.dump(): " + toString());
    	String str = getClass().getName();
		return str.substring(str.lastIndexOf('.')+1);
  	}


	public void IdDecl.dumpTree(String indent) {
    	System.out.println(indent + dump() +": "+getID() + " at line: " + beginLine());
  	} 

 	public void ClassAccess.dumpTree(String indent) {
    	String s = indent + dump() +": "+getID() + " at line: " + beginLine();
    	System.out.println(s);
  } 
  
   	public void ComponentAccess.dumpTree(String indent) {
    	String s = indent + dump() +": "+getID() + " at line: " + beginLine();
    	System.out.println(s);
    	for(int i = 0; i < getNumChild(); i++)
      		getChild(i).dumpTree(indent + "  ");
    	
   } 
  
	public void Access.dumpTree(String indent) {
  		String s = indent + dump() +": "+qualifiedName() + " at line: " + beginLine();
  		System.out.println(s);
   	}
  
 
  public void Dot.dumpTree(String indent) {
  	super.dumpTree(indent);
  	indent += ' ';
  	for (Access ia : getAccesss())
  		ia.dumpTree(indent);
  }
 
  public void GlobalAccess.dumpTree(String indent) {
  	super.dumpTree(indent);
  	getAccess().dumpTree(indent+" ");
  }
 
  
 /*
 public void AmbiguousAccess.dumpTree(String indent) {
    String s = indent + dump() +": "+getID() + " at line: " + beginLine()+ ", ClassDecl at: ";
    if (myClass()==null)
    	s+="UnknownClass";
    else
    	s+=	myClass().beginLine();
    	s+=" Kind: ";
    	if (kind() == Kind.AMBIGUOUS_ACCESS) s+= "AMBIGUOUS_NAME";
    	
    System.out.println(s);
  } 
   
  public void ClassAccess.dumpTree(String indent) {
    String s = indent + dump() +": "+getID() + " at line: " + beginLine()+ 
               ", ClassDecl at: ";
               
    if (myClass() instanceof RealClass) 
    	s+="Real";
    else if (myClass()==null)
    	s+="UnknownDef (null)";
    else {
    	s+=	myClass().getName().beginLine() + " (" + myClass().getName().getID() + ")";
    }	
    System.out.println(s);
  } 

  public void ComponentAccess.dumpTree(String indent) {
  	//super.dumpTree("");
  	ComponentDecl decl = myDecl();
  	StringBuilder s = new StringBuilder();
    if (decl==null) {
  		s.append(": Undeclared");
  	} else {
  		s.append(": Declared at line "+decl.getName().getLine(decl.getName().getStart()));
  		//myDecl().dumpTree("");
  	}
    System.out.println(indent + dump() +": "+getID() +   " at line: " + beginLine() + s.toString());
    for(int i = 0; i < getNumChild(); i++)
      getChild(i).dumpTree(indent + "  ");
  } 
*/

 public void Opt.dumpTree(String indent) {
  	if (getNumChild()>0)
  		super.dumpTree(indent);
  }
  
  public void List.dumpTree(String indent) {
  	if (getNumChild()>0)
  		super.dumpTree(indent);
  }

  public void RealLitExp.dumpTree(String indent) {
  	System.out.println(indent+dump() + " " + getUNSIGNED_NUMBER());
  }

  public void FunctionCall.dumpTree(String indent) {
  	log.debug("** FunctionCall.dumpTree");
  	super.dumpTree(indent);
  }

}


aspect InstDumpTree {

 	public void InstClassAccess.dumpTree(String indent) {
    	String s = indent + dump() +": "+getID() + " at line: " + beginLine()+ ", ClassDecl at: ";
    	if (myInstClassDecl().isUnknown())
    		s+="Unknown";
    	else
    		s+=	myInstClassDecl().beginLine();
    	
    	System.out.println(s);
  } 
  
   	public void InstComponentAccess.dumpTree(String indent) {
    	String s = indent + dump() +": "+getID() + " at line: " + beginLine()+ ", ComponentDecl at: ";
/*    	if (myComponentDecl().isUnknown())
    		s+="Unknown";
    	else
    		s+=	myComponentDecl().beginLine();
    	*/	
    	System.out.println(s);
    	for(int i = 0; i < getNumChild(); i++)
      		getChild(i).dumpTree(indent + "  ");
    	
   } 
  
	public void InstAccess.dumpTree(String indent) {
  		String s = indent + dump() +": "+qualifiedName() + " at line: " + beginLine();
  		System.out.println(s);
   	}
  
 
  public void InstDot.dumpTree(String indent) {
  	super.dumpTree(indent);
	for (InstAccess ia : getInstAccesss())
		ia.dumpTree(indent+" ");
   }
 
  public void InstGlobalAccess.dumpTree(String indent) {
  	super.dumpTree(indent);
  	getInstAccess().dumpTree(indent+" ");
  }


}


aspect DumpTreeBasic {
 
  public void ASTNode.dumpTreeBasic(String indent) {
    System.out.println(indent + dumpBasic() + " at line: " + getLine(getStart()));
    for(int i = 0; i < getNumChild(); i++) 
   		if (getChild(i) instanceof ASTNode)
      		getChild(i).dumpTreeBasic(indent + "  ");
  }
  
  
  public void IdDecl.dumpTreeBasic(String indent) {
  	System.out.println(indent + dumpBasic() + " at line: " + getLine(getStart()) + " decl name: " + getID());
  }
  
  public void NamedAccess.dumpTreeBasic(String indent) {
  	System.out.println(indent + dumpBasic() + " at line: " + getLine(getStart()) + " access name: " + getID());
  }
  
  public void Dot.dumpTreeBasic(String indent) {
  	for(int i = 0; i < getNumChild(); i++)
      getChild(i).dumpTreeBasic(indent + "  ");
  }
  
  public void GlobalAccess.dumpTreeBasic(String indent) {
  	for(int i = 0; i < getNumChild(); i++)
      getChild(i).dumpTreeBasic(indent + "  ");
  }
  
  public void Opt.dumpTreeBasic(String indent) {
  	if (getNumChild()>0)
  		super.dumpTreeBasic(indent);
  }
  
  public void List.dumpTreeBasic(String indent) {
  	if (getNumChild()>0)
  		super.dumpTreeBasic(indent);
  }
  
  public void RealLitExp.dumpTreeBasic(String indent) {
  	System.out.println(indent+dumpBasic() + " " + getUNSIGNED_NUMBER());
  }
	
  
  public String ASTNode.dumpBasic() {
    String str = getClass().getName();
	return str.substring(str.lastIndexOf('.')+1);
  }

}

aspect FlatDumpTree {
/*
	public void FIdUse.dumpTree(String indent) {
		String s = indent + dump() +": " + name() + " at line: " + beginLine();
		System.out.println(s);
	}
	
	public void FIdDecl.dumpTree(String indent) {
		String s = indent + dump() +": " + name() + " at line: " + beginLine();
		System.out.println(s);
	}
	*/
	
	public void FVariable.dumpTree(String indent) {
		super.dumpTree(indent);
		System.out.print(indent + indent + "** Evaluated attributes: ");
		dumpAttributes();
		System.out.println("\n");
	}
	
	public void FVariable.dumpAttributes() {
		
	}
	
	public void FRealVariable.dumpAttributes() {
		System.out.print("(");
		boolean someAttrSet = false;
		if (quantityAttributeSet()) {
			someAttrSet = true;
			System.out.print("quantity="+quantityAttribute());
		}
		if (unitAttributeSet()) {
			System.out.print(", ");
			System.out.print("unit="+unitAttribute());
			someAttrSet = true;
		}
		if (displayUnitAttributeSet()) {
			System.out.print(", ");
			System.out.print("displayUnit="+displayUnitAttribute());
			someAttrSet = true;
		}
		if (minAttributeSet()) {
			System.out.print(", ");
			System.out.print("min="+minAttribute());
			someAttrSet = true;
		}
		if (maxAttributeSet()) {
			System.out.print(", ");
			System.out.print("max="+maxAttribute());
			someAttrSet = true;
		}
		if (startAttributeSet()) {
			System.out.print(", ");
			System.out.print("start="+startAttribute());
			someAttrSet = true;
		}
		if (fixedAttributeSet()) {
			System.out.print(", ");
			System.out.print("fixed="+fixedAttribute());
			someAttrSet = true;
		}
		if (nominalAttributeSet()) {
			System.out.print(", ");
			System.out.print("nominal="+nominalAttribute());
			someAttrSet = true;
		}

		
		System.out.print(")");
		
	}

	public void FIntegerVariable.dumpAttributes() {
		System.out.print("(");
		boolean someAttrSet = false;
		if (quantityAttributeSet()) {
			someAttrSet = true;
			System.out.print("quantity="+quantityAttribute());
		}
		if (minAttributeSet()) {
			System.out.print(", ");
			System.out.print("min="+minAttribute());
			someAttrSet = true;
		}
		if (maxAttributeSet()) {
			System.out.print(", ");
			System.out.print("max="+maxAttribute());
			someAttrSet = true;
		}
		if (startAttributeSet()) {
			System.out.print(", ");
			System.out.print("start="+startAttribute());
			someAttrSet = true;
		}
		if (fixedAttributeSet()) {
			System.out.print(", ");
			System.out.print("fixed="+fixedAttribute());
			someAttrSet = true;
		}
		System.out.print(")");
		
	}

	public void FBooleanVariable.dumpAttributes() {
		System.out.print("(");
		boolean someAttrSet = false;
		if (quantityAttributeSet()) {
			someAttrSet = true;
			System.out.print("quantity="+quantityAttribute());
		}
		if (startAttributeSet()) {
			System.out.print(", ");
			System.out.print("start="+startAttribute());
			someAttrSet = true;
		}
		if (fixedAttributeSet()) {
			System.out.print(", ");
			System.out.print("fixed="+fixedAttribute());
			someAttrSet = true;
		}
		System.out.print(")");
		
	}

	public void FStringVariable.dumpAttributes() {
		System.out.print("(");
		boolean someAttrSet = false;
		if (quantityAttributeSet()) {
			someAttrSet = true;
			System.out.print("quantity="+quantityAttribute());
		}
		if (startAttributeSet()) {
			System.out.print(", ");
			System.out.print("start="+startAttribute());
			someAttrSet = true;
		}
		System.out.print(")");
		
	}
	
	
	public void FQName.dumpTree(String indent) {
		log.debug("FQName.dumpTree");
		String s = indent + dump() +": " + name() + " at line: " + beginLine();
		System.out.println(s);
		for(int i = 0; i < getNumChild(); i++)
      		getChild(i).dumpTree(indent + "  ");
	}
	
	
	/*
	public void FSubExp.dumpTree(String indent) {
		log.debug("FSubExp.dumpTree, Left: "+
		            getLeftNoTransform().getClass().getName()+ " Right: "+
		            getRightNoTransform().getClass().getName());
		for(int i = 0; i < getNumChild(); i++)
      		getChild(i).dumpTree(indent + "  ");
	}
	*/
	
	public void FQNamePart.dumpTree(String indent) {
		String s = indent + dump() +": " + name() + " at line: " + beginLine();
		System.out.println(s);
		for(int i = 0; i < getNumChild(); i++)
      		getChild(i).dumpTree(indent + "  ");
    }
}

aspect DumpClasses {

	public void Program.dumpClasses(String indent) {
		for (StoredDefinition sd : getUnstructuredEntitys()) {
//		    System.out.println("### #" + sd.getFileName());
		    for (Element e : sd.getElements()) {
				e.dumpClasses(indent + " ");
			}
		}	
		/*
		for (LibNode ln : getLibNodes()) {
//		    System.out.println("### #" + ln.getStoredDefinition().getFileName());
			for (Element el : ln.getStoredDefinition().getElements()) {
				el.dumpClasses(indent + " ");
			}
		}
		*/
	}

	public void Element.dumpClasses(String indent) {}
	
	public void FullClassDecl.dumpClasses(String indent) {
		System.out.println(indent + name());
		for (ClassDecl cd : getClassDecls()) {
			cd.dumpClasses(indent + " ");
		}
	}

	public void LibClassDecl.dumpClasses(String indent) {
		super.dumpClasses(indent);
		for (LibNode ln : getLibNodes()) {
//			    System.out.println("### #" + ln.getStoredDefinition().getFileName());
			for (Element el : ln.getStoredDefinition().getElements()) {
				el.dumpClasses(indent + " ");
			}
		}
	
	}



}
