/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package org.jmodelica.util;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Random;
import java.util.Stack;

aspect Graphs {

public class EquationBlockFactory {

	/*
	 * This method groups the Eq objects in a BLT block so that Eqs that
	 * originates from the same FAbstractEquation are grouped together.
	 */
	static ArrayList<Stack<Eq>> groupComponent(Stack<Eq> component) {
	
		Eq eqn1 = null;
		Eq eqn2 = null;
		Stack<Eq> newStack = null;
		ArrayList<Stack<Eq>> l = new ArrayList<Stack<Eq>>();

		for (Eq eqn : component) {
			eqn1 = eqn2;
			eqn2 = eqn;
			if (eqn1==null || (eqn1.getEquation() != eqn2.getEquation())) {
				newStack = new Stack<Eq>();
				l.add(newStack);
				newStack.add(eqn2);	
			} else {
				newStack.add(eqn2);
			}
		}	
		return l;
	}

	static SimpleEquationBlock createSimpleEquationBlock(ArrayList<FAbstractEquation> eqns, 
	                                                     ArrayList<FVariable> fvs, boolean solve) {
				
		if (eqns.size()==1 ) {
			FAbstractEquation e = eqns.get(0);
			FVariable fv = fvs.get(0);
			if (e instanceof FEquation) {
				FEquation ee = (FEquation)e;
				if (solve && ee.isSolved(fv.name())) { // Solved scalar equation
					return new SolvedScalarEquationBlock(ee,fv);
				} else { // Unsolved scalar equation
					return new UnsolvedScalarEquationBlock(ee,fv);				
				}
			}

			// If equation TODO
		}
		
		// Check if if the component corresponds to one single function 
		// call equation or when equation
		FAbstractEquation e = eqns.get(0);
		boolean one_equation = true;
		for (FAbstractEquation eqn : eqns) {
			if (eqn != e) {
				one_equation = false;
				break;
			}
		}

		// When Equation
		if (e instanceof FWhenEquation && one_equation) {
			FWhenEquation ee = (FWhenEquation)e;
				return new WhenEquationBlock(ee);
		}

		
		// Check if the component contains a single function call equation		
		if (e instanceof FFunctionCallEquation && one_equation) {		
			FFunctionCallEquation fce = (FFunctionCallEquation)e;
			// Loop over all unknowns in the component
			boolean isSolvable = true;
			ArrayList<FVariable> l = new ArrayList<FVariable>();
			for (int i=0;i<eqns.size();i++) {
				l.add(fvs.get(i));
				if (!eqns.get(i).isSolved(fvs.get(i).name())) {
					isSolvable = false;
				}
			} // Solved FunctionCallEquation				
			if (isSolvable && solve) {
				return new SolvedFunctionCallEquationBlock(fce,l);
			} else { // Unsolved FunctionCallEquation
				return new UnsolvedFunctionCallEquationBlock(fce,l);
			}				
		}
		return null;
	}


	/*
	 * This method takes a list of Eq objects and reate an equation blocks
	 * of types ScalarEquationBlock, WhenEquationBlock or FFunctionCallEquationBlock.
	 */
	static SimpleEquationBlock createSimpleEquationBlock(Stack<Eq> component, boolean solve) {
		ArrayList<FAbstractEquation> eqns = new ArrayList<FAbstractEquation>();
		ArrayList<FVariable> fvs = new ArrayList<FVariable>();
		
		for (Eq eqn : component) {
			fvs.add(eqn.getMatching().getVariable());
			eqns.add(eqn.getEquation());
		} 

		return createSimpleEquationBlock(eqns,fvs,solve);
		
	}

	/*
	 * This method takes as input a set of Eq objects corresponeing to
	 * a BLT block. First the, the Eq objects are grouped using
	 * groupComponent to simplify the analysis. Then, if there is
	 * only one Eq, a SimpleEquationBlock is created, if possible. Otherwise
	 * a real or mixed equation block is created.
	 */
	static AbstractEquationBlock createEquationBlock(Stack<Eq> component) {
		
		// System of equations
		ArrayList<Stack<Eq>> l = EquationBlockFactory.groupComponent(component);

		if (l.size()==1) {
			SimpleEquationBlock seb = createSimpleEquationBlock(l.get(0),true);
			if (seb!=null && seb.isSolvable()) {
				return seb;
			}	
		}

		ArrayList<SimpleEquationBlock> ls = new ArrayList<SimpleEquationBlock>();	
			
		for (Stack<Eq> s : l) {
			ls.add(createSimpleEquationBlock(s,false));	
		}	
			
		EquationBlock b = null;
		boolean isMixed = false;
		for (SimpleEquationBlock seb : ls) {
			for (FAbstractEquation e : seb.equations()) {
				if (!e.isReal()) {
					isMixed = true;
				}
			}
		}
		
		if (isMixed) {
			b = new MixedEquationBlock(ls);		
		} else {
			b = new EquationBlock(ls);	
		}

		return b;
	}	
}

public class MunkresProblem {

	private long originalCost[][];
	private int n;
	private int m;
	private long cost[][];
	private boolean rowCover[];
	private boolean columnCover[];
	private boolean starred[][];
	private boolean primed[][];

	private final int COVER_MATCHED_COLUMNS = 0;
	private final int PRIME_ZEROS = 1;
	private final int AUGMENT_PATH = 2;
	private final int ADD_SUB_MIN_VALUE = 3;	
	
	int rp;
	int cp;
	
	ArrayList<Integer> pathRow;
	ArrayList<Integer> pathColumn;
	
	private int nextStep = COVER_MATCHED_COLUMNS;

	/** Implementation of the Munkres (Hungarian) algorithm: based on the description at:
	 * http://csclab.murraystate.edu/bob.pilgrim/445/munkres.html
	 */
	public MunkresProblem(long[][] cost) {
		n = cost.length;
		m = cost[0].length;
		originalCost = new long[n][m];	
		this.cost = new long[n][m];		
		rowCover = new boolean[n];
		columnCover = new boolean[m];
		starred = new boolean[n][m];
		primed = new boolean[n][m];	
		
		for (int i=0;i<n;i++) {
			for (int j=0;j<m;j++) {
				this.cost[i][j] = cost[i][j];
				originalCost[i][j] = cost[i][j];
				starred[i][j] = false;
				primed[i][j] = false;
			}
		}
		for (int i=0;i<n;i++) {	
			rowCover[i] = false;
		}
		for (int j=0;j<m;j++) {	
			columnCover[j] = false;
		}		
		//System.out.println(this);
	}
	
	public int[][] solve() {
		minimizeRows();
		//System.out.println(this);
		
		match();
		//System.out.println(this);
		
		nextStep = COVER_MATCHED_COLUMNS;
		
		boolean done = false;
		while (!done) {
			
			switch (nextStep) {
				case COVER_MATCHED_COLUMNS:
					//System.out.println("Step: COVER_MATCHED_COLUMNS");
					int nbrMatchedColumns = coverMatchedColumns();
					//System.out.println(this);
					if (nbrMatchedColumns == n) {
						done = true;
					}
					break;
				case PRIME_ZEROS:
					//System.out.println("Step: PRIME_ZEROS");
					primeZeros();
					//System.out.println(this);
					break;
				case AUGMENT_PATH:
					//System.out.println("Step: AUGMENT_PATH");
				    augmentPath(rp,cp);
				    //System.out.println(this);
				    break;
				case ADD_SUB_MIN_VALUE:
					//System.out.println("Step: ADD_SUB_MIN_VALUE");
					addSubMinValue();
					//System.out.println(this);
					break;
				default:
					done = true;
					break;
			}
		}
		
		int[][] result = new int[n][2];
		int ind = 0;
		for (int i=0;i<n;i++) {
			for (int j=0;j<m;j++) {
				if (starred[i][j]) {
					result[ind][0] = i;
					result[ind][1] = j;
					ind++;
				}		
			}
		}
		return result;
	}
	
	public void minimizeRows() {
		long row_min = 0;
		for (int i=0;i<n;i++) {
			row_min = -1;
			for (int j=0;j<m;j++) {
				if (row_min<0 || cost[i][j]<row_min) {
					row_min = cost[i][j];
				}
			}
			for (int j=0;j<m;j++) {
				cost[i][j] -= row_min;
			}
		}	
	}
	
	public void match() {
		// Greedy matching: Hopcorft Karp would be better
		for (int i=0;i<n;i++) {
			for (int j=0;j<m;j++) {
				if (cost[i][j]==0 && !rowCover[i] && !columnCover[j]) {
					starred[i][j] = true;
					rowCover[i] = true;
					columnCover[j] = true;
				}
			}
		}		
		resetCovers();
	}
	
	public int coverMatchedColumns() {
		int nStarred = 0;
		for (int j=0;j<m;j++) {
			if (columnContainsStarred(j)) {
				columnCover[j] = true;
				nStarred++;
			}
		}
		nextStep = PRIME_ZEROS;
		return nStarred;	
	}
	
	public void primeZeros() {
		boolean done = false;
//		int iter = 0;
		while (!done) {
//			iter++;
//			if (iter>10) 
//				break;
			findUncoveredZero();
			if (rp==-1) {
				break;
			}
			primed[rp][cp] = true;
			if (!rowContainsStarred(rp)) {
				nextStep = AUGMENT_PATH;
				return;	
			} else {
				int si = starIndexInRow(rp);
				rowCover[rp] = true;
				columnCover[si] = false;
			}
		}
		nextStep = ADD_SUB_MIN_VALUE;
		rp = -1;
		cp = -1;		
		return;
	}
	
	public void augmentPath(int primedRow, int primedCol) {
		pathRow = new ArrayList<Integer>();
		pathColumn = new ArrayList<Integer>();
		pathRow.add(new Integer(primedRow));
		pathColumn.add(new Integer(primedCol));
		boolean done = false;
		while (!done) {
			int rs = starIndexInColumn(pathColumn.get(pathColumn.size()-1).intValue());
			if (rs>=0) {
				pathRow.add(new Integer(rs));
				pathColumn.add(new Integer(pathColumn.get(pathColumn.size()-1).intValue()));
			} else {
				break;
			}
			int cp = primedIndexInRow(pathRow.get(pathRow.size()-1).intValue());
			pathRow.add(new Integer(pathRow.get(pathRow.size()-1).intValue()));
			pathColumn.add(new Integer(cp));
		}
		// Flip stars
		for (int k=0;k<pathColumn.size();k++) {
			if (starred[pathRow.get(k).intValue()][pathColumn.get(k).intValue()]) {
				starred[pathRow.get(k).intValue()][pathColumn.get(k).intValue()] = false;
			} else {
				starred[pathRow.get(k).intValue()][pathColumn.get(k).intValue()] = true;
			}
		}
		resetCovers();
		resetPrimed();
		nextStep = COVER_MATCHED_COLUMNS;
	}
	
	public void addSubMinValue() {
		long minValue = findMinUncoveredValue();
		for (int i=0;i<n;i++) {
			for (int j=0;j<m;j++) {
				if (rowCover[i]) {
					cost[i][j] = cost[i][j] + minValue;	
				}
				if (!columnCover[j]) {
					cost[i][j] = cost[i][j] - minValue;	
				}
				
			}
		}
		nextStep = PRIME_ZEROS;
	}
	
	public void findUncoveredZero() {
		for (int j=0;j<m;j++) {
			if (!columnCover[j]) {
				for (int i=0;i<n;i++) {
					if (!rowCover[i]) {
						if (cost[i][j]==0) {
							rp = i;
							cp = j;
							return;
						}	
					}
				}
			}		
		}	
		rp = -1;
		cp  =-1;
		return;
	}
	
	public long findMinUncoveredValue() {
		long minValue = -1;
		for (int j=0;j<m;j++) {
			if (!columnCover[j]) {
				for (int i=0;i<n;i++) {
					if (!rowCover[i] && (minValue<0 || cost[i][j]<minValue)) {
						minValue = cost[i][j];
					}
				}
			}
		}
		return minValue;		
	}
	
	public boolean rowContainsStarred(int row) {
		for (int j=0;j<m;j++) {
			if (starred[row][j]) {
				return true;
			}
		}	
		return false;
	}

	public boolean rowContainsPrimed(int row) {
		for (int j=0;j<m;j++) {
			if (primed[row][j]) {
				return true;
			}
		}	
		return false;
	}

	public boolean columnContainsStarred(int col) {
		for (int i=0;i<n;i++) {
			if (starred[i][col]) {
				return true;
			}
		}	
		return false;
	}

	public boolean columnContainsPrimed(int col) {
		for (int i=0;i<n;i++) {
			if (primed[i][col]) {
				return true;
			}
		}	
		return false;
	}
	
	public int starIndexInRow(int row) {
		for (int j=0;j<m;j++) {
			if (starred[row][j]) {
				return j;
			}
		}
		return -1;				
	}

	public int starIndexInColumn(int col) {
		for (int i=0;i<n;i++) {
			if (starred[i][col]) {
				return i;
			}
		}
		return -1;	
	}

	public int primedIndexInRow(int row) {
		for (int j=0;j<m;j++) {
			if (primed[row][j]) {
				return j;
			}
		}
		return -1;				
	}
	
	public void resetCovers() {
		for (int i=0;i<n;i++) {
			rowCover[i] = false;
		}	
		for (int j=0;j<m;j++) {
			columnCover[j] = false;
		}	
	}

	public void resetStarred() {
		for (int i=0;i<n;i++) {
			for (int j=0;j<m;j++) {
				starred[i][j] = false;
			}
		}	
	}

	public void resetPrimed() {
		for (int i=0;i<n;i++) {
			for (int j=0;j<m;j++) {
				primed[i][j] = false;
			}
		}	
	}
	
	public String toString() {
		StringBuffer str = new StringBuffer();
		for (int j=0;j<m;j++) {
			if (columnCover[j]) {
				str.append(String.format("%8s","x"));
			} else {
				str.append(String.format("%8s"," "));
			}	
		}
		str.append("\n");
		for (int i=0;i<n;i++) {
			if (rowCover[i]) {
				str.append("x");
			} else {
				str.append(" ");
			}	
			for (int j=0;j<m;j++) {
				str.append(String.format("%6s",cost[i][j]));
				if (starred[i][j]) {
					str.append("*");
				} else {
					str.append(" ");
				}
				if (primed[i][j]) {
					str.append("'");
				} else {
					str.append(" ");
				}	
			}	
			str.append("\n");
		}
		return str.toString();
	}
	
}

public class BiPGraph {

	public static int DERIVATIVE_VARIABLES = 1;
	public static int DIFFERENTIATED_VARIABLES = 2;
	public static int ALGEBRAIC_VARIABLES = 4;
	public static int CONTINUOUS_ALGEBRAIC_VARIABLES = 8;
	public static int DISCRETE_ALGEBRAIC_VARIABLES = 16;
	public static int DISCRETE_PRE_VARIABLES = 32;

	public static int MAX_N_EQ_DIFFS = 5;

	private String name;
	private String description;
	
	private FClass fclass;
	
	protected ArrayList<Eq> equations = new ArrayList<Eq>();
	protected LinkedHashMap<String,Var> variableMap = new LinkedHashMap<String,Var>();
	protected LinkedHashMap<String,Eq> equationMap = new LinkedHashMap<String,Eq>();
	protected LinkedHashMap<FAbstractEquation,ArrayList<Eq>> equationIndexMap = new LinkedHashMap<FAbstractEquation,ArrayList<Eq>>();
	
	public BiPGraph(FClass fclass, String name, String description) {
		this.fclass = fclass;
		this.name = name;
		this.description = description;
	}

	public FClass getFClass() {
		return fclass;	
	}

	public Eq getEquation(String name) {
		return equationMap.get(name);
	}
	

	public ArrayList<Eq> getEquations(FAbstractEquation eqn) {
		ArrayList<Eq> l = new ArrayList<Eq>();
		l.addAll(equationIndexMap.get(eqn));
		return l;
	}

	public Eq addEquation(String name, String description,
		                      FAbstractEquation eqn) {
		Eq e = equationMap.get(name);
		if (e==null) {
			e = new Eq(name,description,eqn);
			equations.add(e);
			equationMap.put(name,e);
			insertIntoEquationIndexMap(eqn,e);
		}
		return e;
	}
	
	public Var addVariable(String name, String description, FVariable var) {
		Var v = variableMap.get(name);
		if (v==null) {
			v = new Var(name,description,var);
			variableMap.put(name,v);
		}	
		return v;
	}
	
	public Eq replaceEquation(String name, String description, FAbstractEquation eqn) {
		Eq e = equationMap.get(name);
		
		if (e==null) {
			e = new Eq(name,description,eqn);
			equations.add(e);
			equationMap.put(name,e);
			insertIntoEquationIndexMap(eqn,e);
		} else {
			// Remove the old equation
			for (Var v : e.getVariables()) {
				if (v.getMatching() == e) {
					v.setMatching(null);
				}
			}
			e.setMatching(null);
			e.getVariables().clear();
			// Insert the new equation
			Eq ee = new Eq(name,description,eqn);
			equations.set(equations.indexOf(e),ee);
			equationMap.put(e.getName(),ee);
			ArrayList<Eq> l = equationIndexMap.get(e.getEquation());
			removeFromEquationIndexMap(e.getEquation(),e);
			insertIntoEquationIndexMap(e.getEquation(),ee);
			e = ee;
		}
		return e;
	}

	public void removeEquation(Eq e) {
		for (Var v : e.getVariables()) {
			if (v.getMatching() == e) {
				v.setMatching(null);
			}
		}
		e.setMatching(null);
		e.getVariables().clear();
		equations.remove(e);
		equationMap.remove(e.getName());
		removeFromEquationIndexMap(e.getEquation(),e);
	}
	
	
	
	public Var addVariable(String name, String description) {
		Var v = variableMap.get(name);
		if (v==null) {
			v = new Var(name,description);
			variableMap.put(name,v);
		}	
		return v;
	}

	public void removeVariable(Var v) {
		for (Eq e : getEquations()) {
			if (e.getMatching() == v) {
				e.setMatching(null);
				e.setSolvableMatching(null);
			}
			e.getVariables().remove(v);
			e.getSolvableVariables().remove(v);
		}
		v.setMatching(null);
		variableMap.remove(v.getName());
	}
	
	public Var getVariable(String name) {
		return variableMap.get(name);
	}
	
	public boolean addEdge(String equationName, String variableName) {
		Eq e = equationMap.get(equationName);
		Var v = variableMap.get(variableName);
		if (v==null || e==null) {
			return false;
		}
		if (e.getVariables().contains(v)) {
			return false;
		}
		e.addVariable(v);
		return true;
	}

	public boolean addEdge(Eq e, Var v) {
		return addEdge(e.getName(),v.getName());
	}
		
		
	public void addVariables(FClass fclass, int variableMask) {
	
		if ((variableMask & DERIVATIVE_VARIABLES) != 0) {
			for (FVariable fv : fclass.derivativeVariables()) {
				addVariable(fv.name(),"",fv);     
			}
		}

		if ((variableMask & DIFFERENTIATED_VARIABLES) != 0) {
			for (FVariable fv : fclass.differentiatedRealVariables()) {
				addVariable(fv.name(),"",fv);     
			}	
		}
		
		if ((variableMask & ALGEBRAIC_VARIABLES) != 0) {
			for (FVariable fv : fclass.algebraicRealVariables()) {
				addVariable(fv.name(),"",fv);     
			}
		
			for (FVariable fv : fclass.discreteRealVariables()) {
				addVariable(fv.name(),"",fv);     
			}
			for (FVariable fv : fclass.discreteIntegerVariables()) {
				addVariable(fv.name(),"",fv);     
			}
			for (FVariable fv : fclass.discreteBooleanVariables()) {
				addVariable(fv.name(),"",fv);     
			}
			for (FVariable fv : fclass.discreteStringVariables()) {
				addVariable(fv.name(),"",fv);     
			}
			for (FVariable fv : fclass.discreteEnumVariables()) {
				addVariable(fv.name(),"",fv);     
			}
		}
	
		if ((variableMask & CONTINUOUS_ALGEBRAIC_VARIABLES) != 0) {
			for (FVariable fv : fclass.algebraicRealVariables()) {
				addVariable(fv.name(),"",fv);     
			}
		}
	
		if ((variableMask & DISCRETE_ALGEBRAIC_VARIABLES) != 0) {
		
			for (FVariable fv : fclass.discreteRealVariables()) {
				addVariable(fv.name(),"",fv);     
			}
			for (FVariable fv : fclass.discreteIntegerVariables()) {
				addVariable(fv.name(),"",fv);     
			}
			for (FVariable fv : fclass.discreteBooleanVariables()) {
				addVariable(fv.name(),"",fv);     
			}
			for (FVariable fv : fclass.discreteStringVariables()) {
				addVariable(fv.name(),"",fv);     
			}
			for (FVariable fv : fclass.discreteEnumVariables()) {
				addVariable(fv.name(),"",fv);     
			}
		}
	
		if ((variableMask & DISCRETE_PRE_VARIABLES) != 0) {
			for (FVariable fv : fclass.discretePreVariables()) {
				addVariable(fv.name(),"",fv);     
			}
		}
	
	}	
		
	public void addEquations(ArrayList<FAbstractEquation> eqns, int variableMask, String eqNamePrefix, int startIndex) {	
    	int k = startIndex;
    	Eq eqn = null;
    	Var v = null;
		for (FAbstractEquation e : eqns) {

			int n_eq = e.numScalarEquations();
			LinkedHashSet<Eq> groupMembers = new LinkedHashSet<Eq>();
			for (int i=0;i<n_eq;i++) {
				eqn = addEquation(eqNamePrefix+k,e.prettyPrint(""),e);
				groupMembers.add(eqn);
				k++;

				if ((variableMask & DERIVATIVE_VARIABLES) != 0) {
					for (FDerivativeVariable dx : e.derivativeVariables()) { 
						v = getVariable(dx.name());     
						addEdge(eqn,v); 
					} 
				}

				if ((variableMask & DIFFERENTIATED_VARIABLES) != 0) {
					for (FVariable x : e.differentiatedVariables()) { 
						v = getVariable(x.name());     
						addEdge(eqn,v); 
					} 			
				}

				if ((variableMask & ALGEBRAIC_VARIABLES) != 0) {
					for (FVariable y : e.algebraicVariables()) { 
						v = getVariable(y.name()); 
						addEdge(eqn,v); 
					} 
				}
				
				if ((variableMask & CONTINUOUS_ALGEBRAIC_VARIABLES) != 0) {
					for (FVariable y : e.algebraicRealVariables()) { 
						v = getVariable(y.name()); 
						addEdge(eqn,v); 
					} 
				}
	
				if ((variableMask & DISCRETE_ALGEBRAIC_VARIABLES) != 0) {
					for (FVariable y : e.discreteRealVariables()) { 
						v = getVariable(y.name()); 
						addEdge(eqn,v); 
					} 
			
					for (FVariable y : e.discreteIntegerVariables()) { 
						v = getVariable(y.name()); 
						addEdge(eqn,v); 
					} 

					for (FVariable y : e.discreteBooleanVariables()) { 
						v = getVariable(y.name()); 
						addEdge(eqn,v); 
					} 

					for (FVariable y : e.discreteStringVariables()) { 
						v = getVariable(y.name()); 
						addEdge(eqn,v); 
					} 

					for (FVariable y : e.discreteEnumVariables()) { 
						v = getVariable(y.name()); 
						addEdge(eqn,v); 
					} 
				}
				
				if ((variableMask & DISCRETE_PRE_VARIABLES) != 0) {
					for (FVariable x : e.discretePreVariables()) { 
						v = getVariable(x.name());     
						addEdge(eqn,v);
					} 			
				}			
			}
			for (Eq ee : groupMembers) {
				for (Eq eee : groupMembers) {
					ee.addGroupMember(eee);
				}	
			}
		}			
	}
	
	public void greedyMatching() {
		for (Eq e : getEquations()) {
			for (Var v : e.getVariables()) {
				if (v.getMatching()==null) {
					v.setMatching(e);
					e.setMatching(v);
					break;
				}
			}
		}
	}
	
	public ArrayList<Eq> greedySM(ArrayList<Eq> SUME) {
		Iterator<Eq> itr = SUME.iterator();
		while (itr.hasNext()) {
			Eq e = itr.next();
			for (Var v : e.getSolvableVariables()) {
				if (v.getSolvableMatching()==null) {
					v.setSolvableMatching(e);
					e.setSolvableMatching(v);
					itr.remove();
					break;
				}
			}
		}
		return SUME;
	}
	
	public ArrayList<LinkedHashMap<Var,LinkedHashSet<Eq>>> bfs(LinkedHashSet<Eq> startingNodes) {
		ArrayList<LinkedHashMap<Var,LinkedHashSet<Eq>>> Lv = new ArrayList<LinkedHashMap<Var,LinkedHashSet<Eq>>>();
		LinkedHashSet<Eq> Le_current = new LinkedHashSet<Eq>();
		LinkedHashSet<Eq> Le_next = new LinkedHashSet<Eq>();
		
		Le_current.addAll(startingNodes);
		// Reset nodes
		lightReset();
		
		int layer = 0;
		boolean freeVarNodeFound = false;
		//System.out.println("************** BFS ************* starting nodes: " + startingNodes);
		
		while (Le_current.size()>0 && !freeVarNodeFound) {
			//System.out.println("*** layer: " + layer);
			//System.out.println(Lv);
			//System.out.println(Le_current);
			Lv.add(new LinkedHashMap<Var,LinkedHashSet<Eq>>());
			
			for (Eq s : Le_current) {
				//System.out.println(" eq: " + s.getName());
				for (Var t : s.getVariables()) {
					//System.out.println("  " + t.getName() + " layer: " + t.getLayer());
					if (t.getLayer() >= layer) {
						//System.out.println("    adding " + t.getName());
						t.setLayer(layer);
						LinkedHashSet<Eq> h = Lv.get(layer).get(t);
						if (h==null) {
							h = new LinkedHashSet<Eq>();
							Lv.get(layer).put(t,h);
						}
						h.add(s);
						Eq u = t.getMatching();
						if (u!=null) {
							//System.out.println("     " + t.getName() + "'s matching is " + u.getName());
							u.setLayer(layer);
							Le_next.add(u);
						} else {
							//System.out.println("     " + t.getName() + "has no matching");
							freeVarNodeFound = true;
					
						}
					}
				}
			}
			layer++;
			Le_current = Le_next;
			Le_next = new LinkedHashSet<Eq>();
		}
		
		ArrayList<Var> delQueue = new ArrayList<Var>();
		for (Var v : Lv.get(Lv.size()-1).keySet()) {
			if (v.getMatching()!=null) {
				delQueue.add(v);
			}
		}
		for (Var v : delQueue) {
			Lv.get(Lv.size()-1).remove(v);
		}
		//System.out.println(Lv);
		//System.out.println("************** BFS ends *************");
		return Lv;
	}

	public ArrayList<ArrayList<Edge>> dfs(ArrayList<LinkedHashMap<Var,LinkedHashSet<Eq>>> Lv) {
		lightReset();
		ArrayList<ArrayList<Edge>> P = new ArrayList<ArrayList<Edge>>();
	
		boolean found_path = true;
		for (Var v : Lv.get(Lv.size()-1).keySet()) {
			ArrayList<Edge> P_tmp = new ArrayList<Edge>();
			
			ListIterator<LinkedHashMap<Var,LinkedHashSet<Eq>>> iter = 
				Lv.listIterator(Lv.size());
			while (iter.hasPrevious()) {
				LinkedHashMap<Var,LinkedHashSet<Eq>> l = iter.previous();
				v.setVisited(true);
				if (!found_path) {
					break;
				}
				found_path = false;
				for (Eq e : l.get(v)) {
					if (!e.isVisited()) {
						e.setVisited(true);
						P_tmp.add(new Edge(e,v));
						v = e.getMatching();
						found_path = true;
						break;
					}
				}
			}
			if (P_tmp.size() == Lv.size()) {
				P.add(P_tmp);
			}
		}
		//System.out.println(P);
		return P;
	}
		
	public void reassign(ArrayList<ArrayList<Edge>> P) {
		for (ArrayList<Edge> l : P) {
			for (Edge ed : l) {
				ed.getEquation().setMatching(ed.getVariable());
				ed.getVariable().setMatching(ed.getEquation());
			}
		}
	}
	
	public void maximumMatching(boolean resetMatching) {
		if (resetMatching) {
			reset();
			greedyMatching();
		}
		//System.out.println(printMatching());
		
		// Initialize set of free equations
		LinkedHashSet<Eq> startingNodes = new LinkedHashSet<Eq>();
		for (Eq e : getEquations()) {
			if (e.getMatching()==null) {
				startingNodes.add(e);
			}
		}
	
		LinkedHashSet<Eq> unmatchedEquations = new LinkedHashSet<Eq>();
		for (Eq e : equations) {
			if (e.getMatching()==null) {
				unmatchedEquations.add(e);
			}
		}
		
		ArrayList<LinkedHashMap<Var,LinkedHashSet<Eq>>> Lv = null;
		ArrayList<ArrayList<Edge>> P = null;
		
		while (unmatchedEquations.size()>0) {
		
			Lv = bfs(unmatchedEquations);
			P = dfs(Lv);

			if (Lv.get(Lv.size()-1).size()==0) {
				break;
			}
			
			reassign(P);
		
			//System.out.println(printMatching());

			for (ArrayList<Edge> l : P) {
				unmatchedEquations.remove(l.get(l.size()-1).getEquation());
			}
			
			/*
			unmatchedEquations = new LinkedHashSet<Eq>();
			for (Eq e : equations) {
				if (e.getMatching()==null) {
					unmatchedEquations.add(e);
				}
			}
*/
			
		}
	}
	
	public void matchMunkres(HashMap<String,Integer> weights) {

		if (equationMap.size()==0 || variableMap.size()==0) {
			return;	
		}

		long cost[][] = new long[equationMap.size()][variableMap.size()];	

		int i = 0;		
		
		//System.out.println("DD Jacobian:");
		for (Eq e : getEquations()) {
			int j = 0;
			//System.out.println(e.getEquation().prettyPrint(""));
			for (String vName : variableMap.keySet()) {
				Var v = variableMap.get(vName);
				if (e.getVariables().contains(v)) {
					//System.out.println("  " + vName + " " + e.getEquation().diff(vName));
					cost[i][j] = v.stateSelectionWeight();
				} else {
					cost[i][j] = FVariable.SS_UNMATCHED_WEIGHT;	
				}
				Integer weight = weights.get(vName);
				if (weight!=null) {
					cost[i][j] += weight.intValue();
				}
				j++;
			}
			i++;
		}
		
//		long cost[][] = {{1,2,3,4},{2,4,6,8},{3,6,9,12}};
		MunkresProblem munk = new MunkresProblem(cost);
		int[][] result = munk.solve();
		long opt_cost = 0L;
		ASTNode.log.info("Munkres result:");		
		for (i=0;i<result.length;i++) {
			opt_cost += cost[result[i][0]][result[i][1]];
			Eq eqn = getEquations().get(result[i][0]);
			Var var = variableMap.get(variableMap.keySet().toArray()[result[i][1]]);
			eqn.setMatching(var);
			var.setMatching(eqn);
			ASTNode.log.info(eqn.toString() + ": " + var.getVariable().name() + " " + cost[result[i][0]][result[i][1]]);
		}
		ASTNode.log.info("Optimal cost: " + opt_cost);
	}
	
	public ArrayList<MatchingPair> getMatching() {
			
		ArrayList<MatchingPair> l = new ArrayList<MatchingPair>();
		Var v = null;
		
		for (Eq e : getEquations()) {				
			int n_eq = e.getEquation().numScalarEquations();
			
			for (int i=0;i<n_eq;i++) {
				v = e.getMatching();
				if (v!=null) {
					l.add(new MatchingPair(e.getEquation(),v.getVariable()));
				}
			}
		}		
		return l;
	}	
	
	/*
	public String buildIndent(int n) {
		String s = "";
		for (int i=0;i<n;i++){
			s += " ";
		}
		return s;
	}	
	
	public int n_ind = 0;
	*/
	
	public boolean augmentPath(Eq e, ArrayList<Eq> visitedEquations,
	                                 ArrayList<Var> visitedVariables) {
		e.setVisited(true);
		visitedEquations.add(e);
		//System.out.println(n_ind + buildIndent(n_ind) + " augmentPath start: " + e.getEquation().prettyPrint(""));	
		//for (Var v : e.getVariables()) {
		//	System.out.println(n_ind + buildIndent(n_ind) + " ** " + v.getVariable().name());	
		//}
		for (Var v : e.getVariables()) {
			//System.out.println(n_ind + buildIndent(n_ind) + " augmentPath: " + e.getEquation().prettyPrint("") + " about to visit: " + v.getVariable().name());		
			if (v.getMatching()==null) {
				//System.out.println(n_ind + buildIndent(n_ind) + " augmentPath: " + e.getEquation().prettyPrint("") + " unmatched: " + v.getVariable().name());		
				v.setMatching(e);
				e.setMatching(v);
				return true;
			} else if (!v.isVisited()) {
				//System.out.println(n_ind + buildIndent(n_ind) + " augmentPath: " + e.getEquation().prettyPrint("") + " matched and unvisited: " + v.getVariable().name());		
				v.setVisited(true);
				visitedVariables.add(v);
				//n_ind++;
				if (augmentPath(v.getMatching(),visitedEquations,visitedVariables)) {
					//n_ind--;
					//System.out.println(n_ind + buildIndent(n_ind) + " augmentPath: " + e.getEquation().prettyPrint("") + " matched and unvisited path found!: " + v.getVariable().name());		
					v.setMatching(e);
					e.setMatching(v);
					return true;	
				} else {
					//n_ind--;
					//System.out.println(n_ind + buildIndent(n_ind) + " augmentPath: " + e.getEquation().prettyPrint("") + " matched and unvisited path not found!: " + v.getVariable().name());				
				}
			}
		}
		//System.out.println(n_ind + buildIndent(n_ind) + "augmentPath end: " + e.getEquation().prettyPrint(""));	
		return false;
	}

	public boolean SAP(Eq e) {
		e.setVisited(true);
		for (Var v : e.getSolvableVariables()) {
			if (v.getSolvableMatching()==null) {
				v.setSolvableMatching(e);
				e.setSolvableMatching(v);
				return true;
			} else if (!v.isVisited()) {
				v.setVisited(true);
				if (SAP(v.getSolvableMatching())) {
					v.setSolvableMatching(e);
					e.setSolvableMatching(v);
					return true;	
				} 
			}
		}
		return false;
	}
	
	public int collectResiduals(Eq e, int maxVars, int minSVars) {
		e.setVisited(true);
		for (Var v : e.getSolvableVariables()) {
			if(!v.isVisited()){
				Eq ee = v.getSolvableMatching();
				if(!ee.isVisited()){
					int vars = ee.getVariables().size();
					for(Var vv: ee.getSolvableVariables()){
						if(vv.isTear()){
							vars = vars-1;
						}
					}
					int sVars = ee.getSolvableVariables().size();
					if(vars>maxVars || (vars==maxVars && sVars < minSVars)){
						maxVars = vars;
						minSVars = minSVars;
						ee.isRes(true);
						
					}
			
				}
			}
		}
		return 0;
	}
	
	public IndexReductionResult reduceIndex(boolean resetMatching) {
		if (resetMatching) {
			reset();
			//greedyMatching();
		}
						
		//_maximumMatching(resetMatching);	
		IndexReductionResult result = new IndexReductionResult();		
				
		ArrayList<Eq> visitedEquations;
		ArrayList<Var> visitedVariables;		
				
		LinkedHashSet<Eq> es = new LinkedHashSet<Eq>();
		for (Eq e : getEquations()) {
			if (e.getEquation().isContinuous()) {
				es.add(e);
			}
		}
				
		// If there are no equations, we cannot do index reduction.
		if (es.size()==0) {
			return null;
		}
		
		FClass fc = es.iterator().next().getEquation().myFClass();	
		
		Eq eqToMatch;
		
		boolean pathFound = false;		
		ArrayList<FVariable> newDiffedVars = new ArrayList<FVariable>();	
		Stack<Eq> eqToMatchStack = new Stack<Eq>();
		// Algoritm step numbering from the original Pantelides paper		
		// Loop over all equations (step 3)
		for (Eq e : es) {
			// If the equation is not matched
			eqToMatchStack.push(e);
			while (!eqToMatchStack.empty()){
				eqToMatch = eqToMatchStack.pop(); // Step 3a
				if (eqToMatch.getMatching()==null && eqToMatch.getMeDifferentiated()==null) {

					pathFound = false; // Step
					while (!pathFound) { // Step 3b
						// Since the states are not added to the graph,
						// Step 3b-1 is skipped and is done at the end of 
						// the iteration 
						visitedEquations = new ArrayList<Eq>();
						visitedVariables = new ArrayList<Var>();	
						lightReset(); // Step 3b-2
						pathFound = false; // Step 3b-3
						// Find an augmenting path, step 3b-4
						//n_ind = 0;
						pathFound = augmentPath(eqToMatch, visitedEquations, visitedVariables); 
						ASTNode.log.info("*************");
						ASTNode.log.info("Looking for augmented path starting in equation: " + eqToMatch.toString());
						if (pathFound) {
							ASTNode.log.info("Path found!");
						} else {	
						 	ASTNode.log.info("Path not found!");
						}
						ASTNode.log.info("Visisted equations:");
						for (Eq ee : visitedEquations) {
							ASTNode.log.info("  " + ee.getDescription());
						}
						ASTNode.log.info("Visisted variables:");
						for (Var vv : visitedVariables) {
							ASTNode.log.info("  " + vv.toString());
						}
						
						if (!pathFound) { // Step 3b-5
							for (Var vv : visitedVariables) { // Loop over all visited variables, Step 3b-5i
							    // Create a new differentiated variable
								FVariable newVar = vv.getVariable().myFClass().addFDerivativeVariable(vv.getVariable());
								newDiffedVars.add(newVar);
								// Add the differentiated variable to the graph 
								Var vvv = addVariable(newVar.name(),"",newVar);
								// Set the "A vector" in the paper: 
								// a reference from the visited variable to its 
								// differentiated counterpart
								vv.setMeDifferentiated(vvv); 
								vvv.setMeIntegrated(vv);
							}
							for (Eq ee : visitedEquations) { // Step 3b-5ii
								FAbstractEquation eee = ee.getEquation();
								if (ee.numDifferentiations() > MAX_N_EQ_DIFFS) {
									for (FVariable v : newDiffedVars) {
										int ind = v.myFClass().getFVariableList().getIndexOfChild(v);
										if (ind>=0) {
											v.myFClass().getFVariableList().removeChild(ind);
										}
									}
									return null;
								}
								// Create a new differentiated equation
								FAbstractEquation deee = eee.diff("time");
								result.addEquation(deee);
								ASTNode.log.info("About to add equation: " + deee);
								// Add the differentiated equation		
								// Loop over all equations in the group 
								for (Eq groupMemberEquation : ee.getGroupMembers()) {				
									Eq eqn = addEquation("eq_" + (getEquations().size() + 1), 
								             deee.prettyPrint(""), deee);
							
									// Add edges
									for (FVariable fv : deee.variables()) {
										Var vvv = variableMap.get(fv.name());
										ASTNode.log.info("*** " + fv.name());
										if (vvv!=null) {
											addEdge(eqn,vvv);
										}
									}
									// Set a reference from the visited equation to
									// its differentiated counterpart
									groupMemberEquation.setMeDifferentiated(eqn);
									eqn.setMeIntegrated(groupMemberEquation);
								}
								ASTNode.log.info("Equation added");
							}
							for (Var vv : visitedVariables) {
								// Set matchings, Step 3b-5iii
								Eq ee = vv.getMatching();
								vv.getMeDifferentiated().setMatching(ee.getMeDifferentiated());
								ee.getMeDifferentiated().setMatching(vv.getMeDifferentiated());
								// Remove variables that have been differentiated, Step 3b-1
								removeVariable(vv);
							}
						
							// Set the next equation to start matching from, 
							// Step 3b-5iv
							// Push all differentiated equations in the group to the stack
							// of equations to be matched
							for (Eq groupMemberEquation : eqToMatch.getGroupMembers()) {
								eqToMatchStack.push(groupMemberEquation.getMeDifferentiated());
							}

							eqToMatch = eqToMatchStack.pop();
						
							ASTNode.log.info("Graph after addition of equations and variables:");
							ASTNode.log.info(toString());
						}		

						ASTNode.log.info("Matching:");
						ASTNode.log.info(printMatching());
						ASTNode.log.info("*************");
					
					}	
				}
			}
		}

		// Remove equations that are not connected
		ArrayList<Eq> eqToRemove = new ArrayList<Eq>();
		for (Eq e : getEquations()) {
			if (e.getVariables().size()==0) {
				eqToRemove.add(e);
			}
		}
		for (Eq e : eqToRemove) {
			removeEquation(e);
		}
		ASTNode.log.info("Index reduction done!");
		ASTNode.log.info("Matching:");
		ASTNode.log.info(printMatching());
		
		// Selection of dummy derivatives
		/*
			The algorithm is implemented differently than in the original paper
			by Mattsson and S�derlind. In the paper, each block is treated
			individually by selecting all dummy derivatives of one block
			before proceeding to the next block. This approach, however, makes
			it hard to handle user preferences for state selection as defined
			by the stateSelect attribute. This is because selection of
			dummy derivatives in one block may restrict the choices in 
			following blocks, even though a global analysis would yield that
			it would indeed be possible to satisfy user selection.
			
			Therefore, all equations in blocks containing differentiated
			equations are treated in one block.
			
			NOTE: This algorithm is still a prototype and it needs to be refactored.
			This will be done when the final algorithm have been settled.
		*/
		
		BLT blt = computeBLT();
	
		ASTNode.log.info(blt.toString());

		// Lists of equations and variables, notation is the same as in the 
		// paper
		ArrayList<FAbstractEquation> g = 
		   new ArrayList<FAbstractEquation>();
		
		ArrayList<FAbstractEquation> h = 
		   new ArrayList<FAbstractEquation>();

		ArrayList<FVariable> z = 
		   new ArrayList<FVariable>();

		ArrayList<FVariable> zHat = 
		   new ArrayList<FVariable>();

		// Collect all blocks that contain differentiated equations
		for (AbstractEquationBlock eb : blt) {
			ArrayList<FAbstractEquation> diffedEqns = eb.differentiatedEquations();
			if (diffedEqns.size()>0) {
				ASTNode.log.info(" ********* Found block containing diffed equations ***********");
				ASTNode.log.info(eb.toString());
		
				// Step 1: Initialize, add all equations in blocks
				// having differentiated equations
				g.addAll(eb.equations());
				
				// Step 2: Extract all active variables, i.e., highest order 
				// derivatives for each variable
				for (FVariable fv : eb.activeVariables()) {
					if (fv.isDerivativeVariable()) {
						// If the stateSelect attribute equals StateSelect.always,
						// then don't add the variable so that it cannot be
						// selected as dummy derivative.
						FRealVariable frv = (FRealVariable)fv.getMeIntegrated();
						if (frv!=null && frv.stateSelectAttribute()!=FRealVariable.StateSelect.ALWAYS) {
							z.add(fv);
						}
					} else {
						z.add(fv);
					}
				}
			}
		}
		
		// Initialize variable to keep track of there are still 
		// differentiated equations
		boolean remainingDifferentiatedEquations = true;
		
		// Iterate
		while (remainingDifferentiatedEquations) {
		   ASTNode.log.info("----------------");
			// Step 3: Extract differentiated equations 
			h = new ArrayList<FAbstractEquation>();
			for (FAbstractEquation fe : g) {
				if (fe.getMeIntegrated()!=null) {
					h.add(fe);
				}
			}
									
			// Step 4: Select independent columns.
			// In a first attempt we don't add variables with StateSeclect.prefer
			// If it is possible to find a matching, then we proceed. If not, then
			// We start over and all all variables, also the ones with StateSelect.prefer
			// This algorithm is a first approximation of what we need, since we must also
			// have to support avoid and never.
			BiPGraph gd = new BiPGraph(getFClass(),"",""); 
						
			// Add variables to the graph
			for (FVariable fv : z) {
				gd.addVariable(fv.name(),"",fv);     
			}
				
			int k = 1;
			Eq eqn = null;
			Var v = null;
			// Add the equations to the graph
			for (FAbstractEquation e : h) {
			
				int n_eq = e.numScalarEquations();
				
				for (int i=0;i<n_eq;i++) {
					ASTNode.log.info("*** " + e.prettyPrint(""));
					eqn = gd.addEquation("eq_"+k,e.prettyPrint(""),e);
					k++;
				
					for (FVariable y : e.variables()) { 
						//FRealVariable frv = (FRealVariable)((FRealVariable)y).getMeIntegrated();
						if (z.contains(y)) {
							ASTNode.log.info(" ** " + y.prettyPrint("") + " " + z.contains(y));	
							v = gd.getVariable(y.name()); 
							gd.addEdge(eqn,v);
						} 
					} 
				}
			}
					
			ASTNode.log.info(gd.toString());
			//ASTNode.log.info(gd.toStringWeighted());	
			
			// Run matching
			// Compute weights for variables based on linearity
			HashMap<String,Integer> linearityWeights = new HashMap<String,Integer>();
			for (FVariable fv : z) {
		 		int w = 0;
 				for (FAbstractEquation feq : g) {
 					try {
						FAbstractEquation feqd = feq.diff(fv.name());
						//System.out.println(feqd.prettyPrint(""));
						if (!feqd.variability().lessOrEqual(feqd.fParameter())) {
							w += 2;
						} else if (!feqd.variability().lessOrEqual(feqd.fConstant())) {
							w += 1; 
						}
					} catch(Exception e) {}
				}	
				FRealVariable frv = (FRealVariable)fv.getMeIntegrated();
				if (frv!=null) {
					for (FAbstractEquation feq : g) {
						try {
							FAbstractEquation feqd = feq.diff(frv.name());
							//System.out.println(feqd.prettyPrint(""));
							if (!feqd.variability().lessOrEqual(feqd.fParameter())) {
								w += 2;
							} else if (!feqd.variability().lessOrEqual(feqd.fConstant())) {
								w += 1; 
							}
						} catch(Exception e) {}							
					}		
				}
				ASTNode.log.info("Linearity weight: " + fv.name() + " " + w);
				linearityWeights.put(fv.name(),new Integer(w));
			}
			
			gd.matchMunkres(linearityWeights);				
			ASTNode.log.info(gd.printMatching());
			
			// The matched variables are selected as dummy derivatives
			for (Var vv : gd.getMatchedVariables()) {
				zHat.add(vv.getVariable());
			}

					
			// Step 5: prepare for next iteration
			// Get the "integrated" equations
			g = new ArrayList<FAbstractEquation>();
			for (FAbstractEquation ee : h) {
				g.add(ee.getMeIntegrated());
			}
							
			// Get the "integrated" variables 
			z = new ArrayList<FVariable>();
			for (FVariable fv : zHat) {
				FVariable z_test = fv.getMeIntegrated();
				if (z_test.isDerivativeVariable()) {
					// Take into account user defined state selection
					FRealVariable frv = (FRealVariable)z_test.getMeIntegrated();
					if (frv!=null && frv.stateSelectAttribute()!=FRealVariable.StateSelect.ALWAYS) {
						z.add(z_test);
					}
				} else {
					z.add(z_test);
				}
			}

			// Check if there are remaining differentiated equations								
			remainingDifferentiatedEquations = false;
			for (FAbstractEquation fe : g) {
				if (fe.getMeIntegrated()!=null) {
					remainingDifferentiatedEquations = true;
				}
			}
			
			ASTNode.log.info(" --- Equations in iteration: --- ");
			ASTNode.log.info(" Equations: ");
			for (FAbstractEquation fe : g) {
				ASTNode.log.info(fe.prettyPrint("   "));
			}

			ASTNode.log.info(" Dummy derivatives selected in iteration: ");
			for (FVariable fv : zHat) {
				result.addDummyDerivative(fv);
				ASTNode.log.info(fv.prettyPrint("   "));
			}
			ASTNode.log.info("");
				
		}
		
		ASTNode.log.info(" Dummy derivatives: ");
		for (FVariable fv : zHat) {
			result.addDummyDerivative(fv);
			ASTNode.log.info(fv.prettyPrint("   "));
		}
		ASTNode.log.info("");
		
		return result;
	}
	
	public ArrayList<Eq> getUnmatchedEquations() {
		ArrayList<Eq> l = new ArrayList<Eq>();
		for (Eq e : equations) {
			if (e.getMatching()==null) {
				l.add(e);
			}
		}
		return l;
	}

	public ArrayList<Var> getUnmatchedVariables() {
		ArrayList<Var> l = new ArrayList<Var>();
		for (Var v : variableMap.values()) {
			if (v.getMatching()==null) {
				l.add(v);
			}
		}
		return l;
	}
	
	public ArrayList<Eq> getSUME() {
		ArrayList<Eq> l = new ArrayList<Eq>();
		for (Eq e : equations) {
			if (e.getSolvableMatching()==null) {
				l.add(e);
			}
		}
		return l;
	}

	public ArrayList<Var> getSUMV() {
		ArrayList<Var> l = new ArrayList<Var>();
		for (Var v : variableMap.values()) {
			if (v.getSolvableMatching()==null) {
				v.isTear(true);
				l.add(v);
			}
		}
		return l;
	}

	public ArrayList<Eq> getMatchedEquations() {
		ArrayList<Eq> l = new ArrayList<Eq>();
		for (Eq e : equations) {
			if (e.getMatching()!=null) {
				l.add(e);
			}
		}
		return l;
	}

	public ArrayList<Var> getMatchedVariables() {
		ArrayList<Var> l = new ArrayList<Var>();
		for (Var v : variableMap.values()) {
			if (v.getMatching()!=null) {
				l.add(v);
			}
		}
		return l;
	}
	
	private int index = 0;
    private Stack<Eq> S;
    private LinkedList<Stack<Eq>> components;
		
    /* This is an implementation of the recursive Tarjan's algorithm.
     * Possibly it is less efficient than the non-recursive version, but
     * it seems to work fine.
     */
	public BLT computeBLT() {
		
		index = 0;
        S = new Stack<Eq>();
        components = new LinkedList<Stack<Eq>>();
        tarjanReset();
        
        for (Eq e : getEquations()) {
        	if (!e.isVisited()) {
        		tarjan(e);
        	}
        }
				
        BLT blt = new BLT(getFClass());
        
        Var v = null;
		for (Stack<Eq> bl : components) {
			
			blt.add(EquationBlockFactory.createEquationBlock(bl));
					
		}
		return blt;
	}
	
	public LinkedList<Stack<Eq>> computeRawBLT() {
		index = 0;
        S = new Stack<Eq>();
        components = new LinkedList<Stack<Eq>>();
        tarjanReset();
        
        for (Eq e : getEquations()) {
        	if (!e.isVisited()) {
        		tarjan(e);
        	}
        }
        
        return components;	
	}
	
	public void tarjan(Eq e) {
		S.add(e);
		e.setTarjanNbr(index);
		e.setTarjanLowLink(index);
		e.setVisited(true);
		index++;
		for (Var v : e.getVariables()) {
			Eq ee = v.getMatching();
			if (ee != null && e != ee) {
				if (!ee.isVisited()) {
					tarjan(ee);
					e.setTarjanLowLink(Math.min(
							e.getTarjanLowLink(),ee.getTarjanLowLink()));
				} else if (S.contains(ee)) {
					e.setTarjanLowLink(Math.min(
							e.getTarjanLowLink(),ee.getTarjanNbr()));
				}
			}
 		}
		if (e.getTarjanNbr()==e.getTarjanLowLink()) {
			Stack<Eq> component = new Stack<Eq>();
			boolean done = false;
			while (!done) {
				Eq ee = S.pop();
				component.add(ee);
				if (ee==e) {
					done = true;
				}
			}
			components.add(component);
		}
	}
	
	public LinkedList<Stack<Eq>> computeTearBlocks() {
		index = 0;
        S = new Stack<Eq>();
        components = new LinkedList<Stack<Eq>>();
        tarjanReset();
        
        for (Eq e : getEquations()) {
        	if (!e.isVisited() && !e.isRes()) {
        		tarjanTear(e);
        	}
        }
        return components;	
	}
	
	public void tarjanTear(Eq e) {
		S.add(e);
		e.setTarjanNbr(index);
		e.setTarjanLowLink(index);
		e.setVisited(true);
		index++;
		for (Var v : e.getVariables()) {
			if(!v.isTear()){
				Eq ee = v.getSolvableMatching();
				if (ee!=null && !(e==ee)) {
					if (!ee.isVisited()) {
						tarjanTear(ee);
						e.setTarjanLowLink(Math.min(
								e.getTarjanLowLink(),ee.getTarjanLowLink()));
					} else if (S.contains(ee)) {
						e.setTarjanLowLink(Math.min(
								e.getTarjanLowLink(),ee.getTarjanNbr()));
					}
				}
			}
 		}
		if (e.getTarjanNbr()==e.getTarjanLowLink()) {
			Stack<Eq> component = new Stack<Eq>();
			boolean done = false;
			while (!done) {
				Eq ee = S.pop();
				component.add(ee);
				if (ee==e) {
					done = true;
				}
			}
			components.add(component);
		}
	}
	
	/*
	public void randomTest(int n_eq, int n_var, int n_ed) {
		
		BiPGraph g = new BiPGraph("Random Graph","");
		
		for (int i=0;i<n_eq;i++) {
			g.addEquation("e_"+(i+1), "");
		}

		for (int i=0;i<n_var;i++) {
			g.addVariable("v_"+(i+1), "");
		}

		Random r = new Random();
		for (int i=0;i<n_ed;i++) {
			boolean added=false;
			while (!added) {
				int e_ind = r.nextInt(n_eq) + 1;
				int v_ind = r.nextInt(n_var) + 1;
				if (g.addEdge("e_"+e_ind,"v_"+v_ind)) {
					added = true;
				}
			}
		}
		
		//System.out.println(g);
		long before = System.currentTimeMillis();
		g.maximumMatching(true);
		long after = System.currentTimeMillis();
		System.out.println("Matching n_equations="+n_eq+" n_variables="+n_var+" n_edges="+n_ed+" --- " + (((double)(after-before))/1000.));
		
		//System.out.println(g.printMatching());
		
	}
	*/
	
	public void reset() {
		for (Eq e : getEquations()) {
			e.reset();
		}		
		for (Var v : variableMap.values()) {
			v.reset();
		}		
	}

	public void lightReset() {
		for (Eq e : getEquations()) {
			e.lightReset();
		}		
		for (Var v : variableMap.values()) {
			v.lightReset();
		}		
	}

	public void tarjanReset() {
		for (Eq e : getEquations()) {
			e.tarjanReset();
		}		
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public ArrayList<Eq> getEquations() {
		return equations;
	}

	public void insertIntoEquationIndexMap(FAbstractEquation eqn, Eq e) {
		ArrayList<Eq> l = equationIndexMap.get(eqn);
		if (l==null) {
			l = new ArrayList<Eq>();
			equationIndexMap.put(eqn, l);
		}
		l.add(e);
	}

	public void removeFromEquationIndexMap(FAbstractEquation eqn, Eq e) {
		ArrayList<Eq> l = equationIndexMap.get(eqn);
		if (l!=null) {
			for (Eq ee : l) {
				if (e==ee) {
        			l.remove(e);
        			return;
        		}
        	}
		}
	}
	
	public String printMatching() {
		StringBuffer str = new StringBuffer();
		str.append("----------------------------------------\n");
		str.append("BiPGraph " + getName() + " matching:\n");
		for (Eq e : getEquations()) {
			if (e.getMatching()!=null) {
				str.append(e.getName());
//				str.append(e.getName() + "(" + e.getDescription() + ")");
				str.append(" : ");
				str.append(e.getMatching().getName());
				str.append("\n");
			}
		}		
		str.append("Unmatched equations: {");
		for (Eq e : getUnmatchedEquations()) {
			str.append(e.getName() + " ");
		}
		str.append("}\n");

		str.append("Unmatched variables: {");
		for (Var v : getUnmatchedVariables()) {
			str.append(v.getName() + " ");
		}
		str.append("}\n");

		str.append("----------------------------------------\n");
		return str.toString();
	}
	
	public String printSolvableMatching() {
		StringBuffer str = new StringBuffer();
		str.append("----------------------------------------\n");
		str.append("BiPGraph " + getName() + " SolvableMatching:\n");
		for (Eq e : getEquations()) {
			if (e.getSolvableMatching()!=null) {
				str.append(e.getName());
//				str.append(e.getName() + "(" + e.getDescription() + ")");
				str.append(" : ");
				str.append(e.getSolvableMatching().getName());
				str.append("\n");
			}
		}		
		str.append("solvableUnmatched equations: {");
		for (Eq e : getSUME()) {
			str.append(e.getName() + " ");
		}
		str.append("}\n");

		str.append("solvableUnmatched variables: {");
		for (Var v : getSUMV()) {
			str.append(v.getName() + " ");
		}
		str.append("}\n");

		str.append("----------------------------------------\n");
		return str.toString();
	}
	
	public String toString() {
		StringBuffer str = new StringBuffer();
		str.append("BiPGraph " + getName() + "\n");
		if (!getDescription().equals("")) {
			str.append(" (");
			str.append(getDescription());
			str.append(")\n");
		}
		str.append("Variables: {");
		for (String vName : variableMap.keySet()) {
			Var v = variableMap.get(vName);
			str.append(v.getName());
			str.append(" ");
		}
		str.append("}\n");
		for (Eq e : getEquations()) {
			str.append(e.getName());
			str.append(" : ");
			for (Var v : e.getVariables()) {
				str.append(v.getName() + " ");
			}
			str.append("\n");
		}
		return str.toString();
	}
	
	public String toStringWeighted() {
		StringBuffer str = new StringBuffer();
		str.append("eqns = [");
		int i = 0;
		for (Eq e : getEquations()) {
			str.append("'" + e.getDescription() + "'");
			if (i<getEquations().size()-1) {
				str.append(",");
			}
			i++;
		}
		str.append("]\n");
		str.append("vars = [");
		i = 0;
		for (String vName : variableMap.keySet()) {
			Var v = variableMap.get(vName);
			str.append("'" + v.getName() + "'");
			if (i<variableMap.keySet().size()-1) {
				str.append(",");
			}
			i++;
		}
		str.append("]\n");

		i = 0;
		int j = 0;
		
		str.append("cost = [");
		for (Eq e : getEquations()) {
			str.append("array('L',[");
			j = 0;
			for (String vName : variableMap.keySet()) {
				Var v = variableMap.get(vName);
				if (e.getVariables().contains(v)) {
					str.append(v.stateSelectionWeight() + "L");
				} else {
					str.append("10000000000000000L");	
				}
				if (j<variableMap.keySet().size()-1) {
					str.append(",");
				}
				j++;
			}
			str.append("])");
			if (i<getEquations().size()-1) {
				str.append(",\n");
			}
			i++;
		}
		
		
		str.append("]\n");
		return str.toString();
	}
	
	/*
	public boolean hasAP(Eq e, ArrayList<Eq> visitedEquations, ArrayList<Var> visitedVariables) {
		e.setVisited(true);
		visitedEquations.add(e);
		for (Var v : e.getVariables()) {
			if (v.getMatching()==null) {
				return true;
			} else if (!v.isVisited()) {
				v.setVisited(true);
				visitedVariables.add(v);
				if (hasAP(v.getSolvableMatching(),visitedEquations,visitedVariables)) {
					return true;	
				} 
			}
		}
		return false;
	}	
	
	public boolean SAP(Eq e, ArrayList<Eq> visitedEquations, ArrayList<Var> visitedVariables) {
		e.setVisited(true);
		visitedEquations.add(e);
		for (Var v : e.getSolvableVariables()) {
			if (v.getSolvableMatching()==null) {
				v.setSolvableMatching(e);
				e.setSolvableMatching(v);
				v.setMatching(e);
				e.setMatching(v);
				return true;
			} else if (!v.isVisited()) {
				v.setVisited(true);
				visitedVariables.add(v);
				if (SAP(v.getSolvableMatching(),visitedEquations,visitedVariables)) {
					v.setSolvableMatching(e);
					e.setSolvableMatching(v);
					v.setMatching(e);
					e.setMatching(v);
					return true;	
				} 
			}
		}
		return false;
	}

	public void resetAP(){
		for (Eq e : getEquations()) {
			e.setVisited(false);
			e.setDepth(0);
		}		
	}
	
	public boolean initAP(Eq e){
		Var match = e.getMatching();
		e.setMatching(null);
		match.setMatching(null);
		e.isUsed(true);
		resetAP();
		for(Var v: e.getSolvableVariables()){
			if(v.getSolvableMatching()==null){
				System.out.println("START FROM DEPTH 2");
				if(AP(v.getSolvableMatching(),2)){
					v.setSolvableMatching(e);
					e.setSolvableMatching(v);
					v.setMatching(e);
					e.setMatching(v);
					return true;
				}
			}else{
				System.out.println("START FROM DEPTH 1");
				if(AP(v.getSolvableMatching(),1)){
					v.setSolvableMatching(e);
					e.setSolvableMatching(v);
					v.setMatching(e);
					e.setMatching(v);
					return true;
				}
			}
		}
		match.setMatching(e);
		e.setMatching(match);
		return false;	
	}
	
	public boolean AP(Eq e, int d){
		if(e.isVisited()){
			System.out.println("This should not be possible anymore....");
			return false;
		}
		if(e.getDepth()>=d){
			//System.out.println("This equation has been visited in a deeper depth.");
			return false;
		}
		e.setVisited(true);
		if(d>e.getDepth()){
			e.setDepth(d);
			//System.out.println("Equation " + e.getName()+ " now has depth: " +d);
		}
		for(Var v: e.getVariables()){
			if(e.getEquation().isSolved(v.getName(),true)){
				if(v.getMatching()== null){
					//System.out.println("Found unmatched and Solvable matched it!");
					v.setSolvableMatching(e);
					e.setSolvableMatching(v);
					v.setMatching(e);
					e.setMatching(v);
					return true;
				}else if(v.getSolvableMatching()==null && !v.getMatching().isVisited()){
					int newD=d+1;
					//System.out.println("Looking for path at depth S->US: " + newD);
					//System.out.print(e.getName()+ " -> " + v.getMatching().getName());
					//System.out.println(" via " + v.getName());
					if(AP(v.getMatching(),newD)){
						v.setSolvableMatching(e);
						e.setSolvableMatching(v);
						v.setMatching(e);
						e.setMatching(v);
						return true;
					}
				}else if(!v.getMatching().isVisited()){
					//System.out.println("Looking for path at depth S->S: " +d);
					//System.out.println(e.getName()+ " -> " + v.getSolvableMatching().getName());
					if(AP(v.getSolvableMatching(),d)){
						v.setSolvableMatching(e);
						e.setSolvableMatching(v);
						v.setMatching(e);
						e.setMatching(v);
						return true;
					}
				}
			}else if(d>1){ // (if not solvable)
				if(v.getMatching()== null){
					//System.out.println("Found unmatched and matched it");
					v.setMatching(e);
					e.setMatching(v);
					v.setSolvableMatching(null);
					e.setSolvableMatching(null);
					e.isUsed(false);
					return true;
				}else if(v.getSolvableMatching()==null && !v.getMatching().isVisited()){
					//System.out.println("Looking for path at depth US->US: " + d);
					//System.out.println(e.getName()+ " -> " + v.getMatching().getName());
					if(AP(v.getMatching(),d)){
						v.setMatching(e);
						e.setMatching(v);
						v.setSolvableMatching(null);
						e.setSolvableMatching(null);
						e.isUsed(false);
						return true;
					}
				}else if(!v.getMatching().isVisited()){
					int newD = d-1;
					//System.out.println("Looking for path at depth US->S: " + newD);
					//System.out.println(e.getName()+ " -> " + v.getSolvableMatching().getName());
					if(AP(v.getSolvableMatching(),newD)){
						v.setMatching(e);
						e.setMatching(v);
						v.setSolvableMatching(null);
						e.setSolvableMatching(null);
						e.isUsed(false);
						return true;
					}
				}
			}
		}
		e.setVisited(false);
		return false;
	}

	public boolean SAPBuild(Eq e, ArrayList<Eq> visitedEquations, ArrayList<Var> visitedVariables) {
		e.setVisited(true);
		visitedEquations.add(e);
		for (Var v : e.getSolvableVariables()) {
			if (v.getSolvableMatching()==null) {
				if(v.getMatching()==null){
					v.setSolvableMatching(e);
					e.setSolvableMatching(v);
					v.setMatching(e);
					e.setMatching(v);
				}
			} else if (!v.isVisited()) {
				v.setVisited(true);
				visitedVariables.add(v);
				if (SAPBuild(v.getSolvableMatching(),visitedEquations,visitedVariables)) {
					v.setSolvableMatching(e);
					e.setSolvableMatching(v);
					v.setMatching(e);
					e.setMatching(v);
					return true;	
				} 
			}
		}
		return false;
	}
	
	public boolean hasSAP(Eq e, ArrayList<Eq> visitedEquations, ArrayList<Var> visitedVariables) {
		e.setVisited(true);
		visitedEquations.add(e);
		for (Var v : e.getSolvableVariables()) {
			if (v.getSolvableMatching()==null) {
				return true;
			} else if (!v.isVisited()) {
				v.setVisited(true);
				visitedVariables.add(v);
				if (hasAP(v.getSolvableMatching(),visitedEquations,visitedVariables)) {
					return true;	
				} 
			}
		}
		return false;
	}	

	public ArrayList<Eq> removeTearingPair(Eq res, Var tear, boolean unmatch){
		ArrayList<Eq> alteredEquations = new ArrayList<Eq>();
		equations.remove(res);
		equationMap.remove(res.getName());
		removeFromEquationIndexMap(res.getEquation(),res);
		variableMap.remove(tear.getName());	
		if(unmatch){
			// Set the matching to null for the newly unmatched equation and variable
			// (these were matched with tear and res before)
			res.getMatching().setMatching(null);
			if(res.getSolvableMatching()!=null){
				res.getSolvableMatching().setSolvableMatching(null);
			}
			tear.getMatching().setMatching(null);
			if(tear.getSolvableMatching()!=null){
				tear.getSolvableMatching().setSolvableMatching(null);
			}
		}
		// Remove tear from the remaining equations
		for (Eq e : getEquations()) {
			if(e.getVariables().remove(tear)){
				alteredEquations.add(e);
				e.getSolvableVariables().remove(tear);
			}
		}
		return alteredEquations;
	}
	
	public void reinsertTearingPair(Eq res, Var tear, ArrayList<Eq> alteredEquations, boolean match){
		variableMap.put(tear.getName(),tear);
		equations.add(res);
		equationMap.put(res.getName(),res);
		insertIntoEquationIndexMap(res.getEquation(),res);
		for(Eq e: alteredEquations){
			e.addVariable(tear);
			if(e.getEquation().isSolved(tear.getName())){
				e.addSolvableVariable(tear);
			}
		}
		if(match){
			// If an augmentPath was found, the matchings has been altered and a new one must be found.
			tear.setMatching(null);
			tear.setSolvableMatching(null);
			res.setMatching(null);
			res.setSolvableMatching(null);
			lightReset();
			SAP(res, new ArrayList<Eq>(), new ArrayList<Var>());
		} else {
			// Set matching as it was before the removal of the tearing pair. 
			res.getMatching().setMatching(res);
			if(res.getSolvableMatching()!=null){
				res.getSolvableMatching().setSolvableMatching(res);
			}
			tear.getMatching().setMatching(tear);
			if(tear.getSolvableMatching()!=null){
				tear.getSolvableMatching().setSolvableMatching(tear);
			}
		}
	}
	*/
	
	
	
	
    class Edge {
    	private Var variable;
    	private Eq equation;
    	
    	public Edge(Eq e, Var v) {
    		this.equation = e;
    		this.variable = v;
    	}

		public Var getVariable() {
			return variable;
		}

		public void setVariable(Var variable) {
			this.variable = variable;
		}

		public Eq getEquation() {
			return equation;
		}

		public void setEquation(Eq equation) {
			this.equation = equation;
		}
    	
		public String toString() {
			return "(" + equation.getName() + "," + variable.getName() + ")";
		}
    	
    }
}

public class Eq {

	private String name;
	private ArrayList<Var> variables = new ArrayList<Var>();
	private ArrayList<Var> solvableVariables = new ArrayList<Var>();
	private Iterator<Var> varIterator;
	private Var matching = null;
	private Var solvableMatching;
    private boolean visited = false;
    private int layer = 1000000;
    private String description;
    private FAbstractEquation eqn;
	private Eq meDifferentiated = null;
	private Eq meIntegrated = null;
	private boolean isRes = false;
	private int tarjanNbr = 0;
    private int tarjanLowLink = 0;
    private int depth = 1;
    /* In some cases, equations needs to be treated as a group,
       e.g., in the case when several equations are generated from
       a function call equation. In this case, all the "scalar"
       equations generated for the function call equation are
       members of each such equation. Note that every equation
       is member of its own group: scalar equations therefor has
       one member: itself. This approach makes handling of equation
       groups more consistent, e.g., when a function call equation
       needs to be differentiated. 
    */
    private LinkedHashSet<Eq> groupMembers = new LinkedHashSet<Eq>();

	public Eq(String name,String description) {
		this.name = name;
		this.description = description;
		this.groupMembers.add(this);
	}
	
	public Eq(String name,String description,FAbstractEquation eqn) {
		this(name,description);
		this.eqn = eqn;
		this.groupMembers.add(this);	
	}
			
	public void addVariable(Var v) {
		variables.add(v);
	}
	

	public void reset() {
		setMatching(null);
		setVisited(false);
		setLayer(1000000);
	}

	public void lightReset() {
		setVisited(false);
		setLayer(1000000);
	}
	
	public void tarjanReset() {
		setTarjanLowLink(0);
		setTarjanNbr(0);
		resetVariableIterator();
		setVisited(false);
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public ArrayList<Var> getVariables() {
		return variables;
	}

	public Var getMatching() {
		return matching;
	}

	public void setMatching(Var matching) {
		this.matching = matching;
	}
	
	public boolean isVisited() {
		return visited;
	}

	public void setVisited(boolean visited) {
		this.visited = visited;
	}

	public int getLayer() {
		return layer;
	}

	public void setLayer(int layer) {
		this.layer = layer;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}	
	 
	public int getTarjanNbr() {
		return tarjanNbr;
	}

	public void setTarjanNbr(int tarjanNbr) {
		this.tarjanNbr = tarjanNbr;
	}

	public int getTarjanLowLink() {
		return tarjanLowLink;
	}

	public void setTarjanLowLink(int tarjanLowLink) {
		this.tarjanLowLink = tarjanLowLink;
	}

	public int numDifferentiations() {
		return getMeIntegrated()==null? 0: getMeIntegrated().numDifferentiations() + 1;	
	}

	public void setMeDifferentiated(Eq e) {
		this.meDifferentiated = e;
		this.getEquation().setMeDifferentiated(e.getEquation());
	}
	
	public Eq getMeDifferentiated() {
		return this.meDifferentiated;
	}

	public void setMeIntegrated(Eq e) {
		this.meIntegrated = e;
		this.getEquation().setMeIntegrated(e.getEquation());
	}
	
	public Eq getMeIntegrated() {
		return this.meIntegrated;
	}
	
    public void resetVariableIterator() {
        varIterator = variables.iterator();
    }

    public Var getNextVariable() {
        if (varIterator == null) {
            resetVariableIterator();
        }

        if (!varIterator.hasNext()) {
            return null;
        }

        return varIterator.next();
    }
	    
	public String toString() {
		return getName();
	}

	public FAbstractEquation getEquation() {
		return eqn;
	}
		
	public void setEquation(FAbstractEquation eqn) {
		this.eqn = eqn;
	}
	
	public void addSolvableVariable(Var v) {
		solvableVariables.add(v);
	}
	
	public ArrayList<Var> getSolvableVariables() {
		return solvableVariables;
	}
	
	public Var getSolvableMatching() {
		return solvableMatching;
	}

	public void setSolvableMatching(Var v) {
		this.solvableMatching = v;
	}
	
	public void isRes(boolean bol){
		this.isRes=bol;
	}
	
	public boolean isRes(){
		return this.isRes;
	}
	
	public int getDepth(){
		return this.depth;
	}
	
	public void setDepth(int d){
		this.depth = d;
	}
	
	public void addGroupMember(Eq eqn) {
		groupMembers.add(eqn);
	}
	
	public LinkedHashSet<Eq> getGroupMembers() {
		return groupMembers;	
	}
	
}

public class Var {

	private String name;
	private String description;
	private Eq matching = null;
	private Eq solvableMatching = null;
	private boolean visited = false;
	private int layer = 1000000;
	private FVariable v;
	private Var meDifferentiated = null; // A reference to this variable differentiated once
	private Var meIntegrated = null;
	private int nbrV = 0;
	private int nbrSV = 0;
	private boolean isTear=false;
	
	public Var(String name, String description) {
		this.name = name;
		this.description = description;
	}

	public Var(String name, String description, FVariable v) {
		this(name,description);
		this.v = v;
	}
		
	public void reset() {
		setMatching(null);
		setVisited(false);
		setLayer(1000000);
	}

	public void lightReset() {
		setVisited(false);
		setLayer(1000000);
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Eq getMatching() {
		return matching;
	}

	public void setMatching(Eq matching) {
		this.matching = matching;
	}

	public boolean isVisited() {
		return visited;
	}

	public void setVisited(boolean visited) {
		this.visited = visited;
	}

	public int getLayer() {
		return layer;
	}

	public void setLayer(int layer) {
		this.layer = layer;
	}
	
	public FVariable getVariable() {
		return v;
	}
		
	public void setVariable(FVariable v) {
		this.v = v;
	}
	
	public void setMeDifferentiated(Var var) {
		this.meDifferentiated = var;
		this.getVariable().setMeDifferentiated(var.getVariable());
	}
	
	public Var getMeDifferentiated() {
		return this.meDifferentiated;
	}

	public void setMeIntegrated(Var var) {
		this.meIntegrated = var;
		this.getVariable().setMeIntegrated(var.getVariable());
	}
	
	public Var getMeIntegrated() {
		return this.meIntegrated;
	}
	
	public void occurrence(){
		this.nbrV++;
	}
	
	public void solvableOccurrence(){
		this.nbrSV++;
	}
	
	public int getNbrV(){
		return nbrV;
	}
	
	public int getNbrSV(){
		return nbrSV;
	}
	
	public Eq getSolvableMatching() {
		return solvableMatching;
	}

	public void setSolvableMatching(Eq eqn) {
		this.solvableMatching = eqn;
	}
		
	public String toString() {
		return getName();
	}
	
	public void isTear(boolean bol){
		this.isTear=bol;
	}
	
	public boolean isTear(){
		return this.isTear;
	}
	
	public long stateSelectionWeight() {
		return v.stateSelectionWeight();	
	}
		
}

public class IndexReductionResult {

	private ArrayList<FAbstractEquation> addedEquations;
	private ArrayList<FVariable> dummyDerivatives;

	public IndexReductionResult() {
		addedEquations = new ArrayList<FAbstractEquation>();
		dummyDerivatives = new ArrayList<FVariable>();
	}
	
	public void addEquation(FAbstractEquation fe) {
		addedEquations.add(fe);	
	}

	public void addDummyDerivative(FVariable fv) {
		dummyDerivatives.add(fv);	
	}

	public ArrayList<FAbstractEquation> getEquations() {
		return addedEquations;
	}

	public ArrayList<FVariable> getDummyDerivatives() {
		return dummyDerivatives;
	}

}

}