/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

abstract InstNode ::= /InstComponentDecl*/ /InstClassDecl*/ /InstExtends*/ /InstImport*/ /FAbstractEquation*/ /FQName/ /DynamicClassName:InstAccess*/; // /DynamicInst:InstNode*/ /DynamicInstConstraining:InstNode*/;
abstract InstRoot : InstNode ::= ;
InstClassRoot : InstRoot ::= <ClassDecl:ClassDecl>;
//InstFullClassDeclRoot :InstRoot ::= InstFullClassDecl;
InstProgramRoot : InstRoot ::= <Program:Program>
					           /UnknownInstClassDecl/
                               /UnknownInstComponentDecl/
                               /InstPredefinedType:InstClassDecl*/ 
                               /InstBuiltInType:InstClassDecl*/   
                               /InstBuiltInFunction:InstClassDecl*/;

abstract InstClassDecl: InstNode ::= <ClassDecl:ClassDecl>;
abstract InstBaseClassDecl : InstClassDecl ::= [InstConstraining];
InstFullClassDecl : InstBaseClassDecl ::= ;
InstExtendClassDecl : InstFullClassDecl ::= ;
InstShortClassDecl : InstBaseClassDecl ::= ;
InstPrimitiveClassDecl : InstFullClassDecl;
InstBuiltInClassDecl : InstClassDecl ::=;
UnknownInstClassDecl : InstFullClassDecl;

InstReplacingFullClassDecl : InstFullClassDecl ::= <OriginalClassDecl:ClassDecl> /OriginalInstClass:InstClassDecl/ <InstClassRedeclare:InstClassRedeclare>;
InstReplacingShortClassDecl : InstShortClassDecl ::= <OriginalClassDecl:ClassDecl> /OriginalInstClass:InstClassDecl/ <InstClassRedeclare:InstClassRedeclare>;
InstReplacingPrimitiveClassDecl : InstReplacingFullClassDecl ::=;
 
abstract InstImport ::= PackageName:InstAccess <ImportClause:ImportClause>;
InstImportQualified : InstImport;
InstImportUnqualified : InstImport;
InstImportRename : InstImport;

abstract InstConstraining ::=  ClassName:InstAccess [InstClassModification] /InstNode/;
InstConstrainingClass : InstConstraining ::= <BaseClassDecl:BaseClassDecl>;
InstConstrainingComponent : InstConstraining ::= <ComponentDecl:ComponentDecl> /DynamicClassName:InstAccess*/;

// The class to expand may differ from the declared class of the component due to 
// redeclaration of classes.
abstract InstComponentDecl : InstNode ::= ClassName:InstAccess <ComponentDecl:ComponentDecl> [InstModification] [InstConstraining];
InstComposite : InstComponentDecl;
InstPrimitive : InstComponentDecl ;
InstBuiltIn : InstComponentDecl;
UnknownInstComponentDecl : InstComponentDecl;

InstReplacingComposite : InstComposite ::= <OriginalDecl:ComponentDecl> /OriginalInstComponent:InstComponentDecl/ <InstComponentRedeclare:InstComponentRedeclare>;
InstReplacingPrimitive : InstPrimitive ::= <OriginalDecl:ComponentDecl> /OriginalInstComponent:InstComponentDecl/ <InstComponentRedeclare:InstComponentRedeclare>;

InstExtends : InstNode ::= ClassName:InstAccess <ExtendsClause:ExtendsClause> [InstClassModification];
InstExtendsShortClass : InstExtends ::=;
//InstReplacingExtendsShortClass : InstReplacingExtendsShortClass ::= <InstExtendsShortClass:InstExtendsShortClass>

// Accesses in the instance tree
abstract InstAccess ::= <ID>;
InstDot : InstAccess ::= Left:InstAccess Right:InstAccess;

InstParseAccess : InstAccess;// ::= [ArraySubscripts];
InstClassAccess : InstAccess;
InstAmbiguousAccess : InstAccess;// ::= [ArraySubscripts];

InstComponentAccess : InstAccess;// ::= [ArraySubscripts];

// These nodes are used to create instance copies of modification trees intended for
// error checking.	
abstract InstModification ::= <Modification:Modification>;
InstCompleteModification : InstModification ::= InstClassModification [InstValueModification];
InstValueModification : InstModification ::= /FExp/;

InstClassModification : InstModification ::= InstArgument*;
abstract InstArgument : InstModification ::=;

abstract InstNamedModification : InstArgument ::= Name:InstAccess;
abstract InstElementModification : InstNamedModification ::= [InstModification];
InstComponentModification : InstElementModification; 
abstract InstElementRedeclare : InstNamedModification;
InstClassRedeclare : InstElementRedeclare ::= /InstClassDecl/;
InstComponentRedeclare : InstElementRedeclare ::= /InstComponentDecl/ /DynamicClassName:InstAccess*/;
	