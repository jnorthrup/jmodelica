import java.util.LinkedHashSet;

/**
 * Computation of alias sets.
 */
aspect AliasVariables {
	
	/**
	 * \brief Check if an FVariable is an alias.
	 * 
	 * Returns true if alias, else false.
	 * 
	 * @return True if alias, else false.
	 */
	syn lazy boolean AbstractFVariable.isAlias() = false; 
	eq FVariable.isAlias() = aliasVariable() != null; 
	
	/**
	 * \brief Get the alias variable of an FVariable. 
	 * 
	 * If the FVariable is not an alias, null is returned.
	 * 
	 * @return An AliasVariable object if the variable is an alias, otherwise
	 * null.
	 */
	syn lazy AliasVariable FVariable.aliasVariable() {
		LinkedHashSet<AliasVariable> aliasSet = myFClass().getAliasManager().
		  getAliasSet(this);
		if (aliasSet==null) {
			return null;
		}
		AliasVariable av = myFClass().getAliasManager().
			getIterationVariable(aliasSet);
		return av.getFVariable()==this? null : av;
	}
	
	/**
	 * \brief Get the iteration variable corresponding to the alias.
	 * 
	 * If the FVariable is an alias, the alias() return corresponding iteration
	 * FVariable, else null.
	 * 
	 * @return The corresponding iteration variable if alias, otherwise null.
	 */
	syn FVariable AbstractFVariable.alias() = null;
	
	eq FVariable.alias() {
		if (aliasVariable()==null) {
			return null;
		} else {
			return aliasVariable().getFVariable();			
		}
	}

	/**
	 * \brief Returns true if the alias is negated otherwise false.
	 * 
	 * @return True if negated alias, otherwise false.
	 */
	syn boolean AbstractFVariable.isNegated() = false;
	
	eq FVariable.isNegated(){
		AliasVariable av = myFClass().getAliasManager().getAliasVariable(this);
		if (av==null) {
			return false;
		} else {
			return av.isNegated();
		}
/*		if (aliasVariable()==null) {
			return false;
		} else {
			return aliasVariable().isNegated();
		}
*/
	}
		
	/**
	 * \brief An FClass has an alias manager.
	 */
	private AliasManager FClass.aliasManager = new AliasManager();

	/**
	 * \brief Get the alias manager.
	 * 
	 * @return the alias manager.
	 */
	public AliasManager FClass.getAliasManager() {
		return aliasManager;
	}
	
	/**
	 * \brief AliasManager contains the connection sets of an FClass.
	 * 
	 * The alias sets are build by adding pairs of FVariables, in addition
	 * to information about whether the alias pair is negated.
	 */
	public class AliasManager {
	
		// Alias error message.
		private String aliasErrorMessage = "";

		// Indicate alias error
		private boolean aliasErrorFlag = false;
		
		// A set of alias sets
		private LinkedHashSet<LinkedHashSet<AliasVariable>> aliasSets = 
			new LinkedHashSet<LinkedHashSet<AliasVariable>>();
		
		/**
		 * \brief Getter for alias error message.
		 * 
		 * @return The error message.
		 */
		public String getAliasErrorMessage() {
			return aliasErrorMessage;
		}
		
		/**
		 * \brief Check if there was an alias error.
		 * 
		 * The error message can be retreived by calling the method
		 * getAliasManagerError.
		 * 
		 * @return True if there was an alias error, otherwise false.
		 */
		public boolean aliasError() {
			return aliasErrorFlag;
		}
		
		/**
		 * \brief Get the set of alias sets.
		 * 
		 * @return A set containing the alias sets.
		 */
		public LinkedHashSet<LinkedHashSet<AliasVariable>> getAliasSets() {
			return aliasSets;
		}
		
		/**
		 * \brief Get the iteration variable of an alias set.
		 * 
		 * @param aliasSet An alias set.
		 * @return The iteration variable of the alias set.
		 */
		public AliasVariable getIterationVariable(LinkedHashSet<AliasVariable> aliasSet) {
			// 1. Select an input in the alias set
			for (AliasVariable av : aliasSet) {
				if (av.getFVariable().isInput()) {
					return av;
				}
			}
			
			// 2. Select a variable whith fixed attribute set to true
			for (AliasVariable av : aliasSet) {
				FExp fixed = av.getFVariable().fixedAttributeExp();
				if (!av.getFVariable().isParameter() && fixed!=null) {
					if (fixed.ceval().booleanValue()) {
						return av;
					}
				}
			}

			// 3. Select a variable that is a parameter
			for (AliasVariable av : aliasSet) {
				if (av.getFVariable().isParameter()) {
					return av;
				}
			}

			return aliasSet.iterator().next();
			
		}

		/**
		 * \brief Get the AliasVariable object corresponding to an FVariable
		 * 
		 * @param fv An FVariable object
		 * @return An AliasVariable object if the FVariable is in an alias
		 * set, otherwise null.
		 */
		public AliasVariable getAliasVariable(FVariable fv) {
			LinkedHashSet<AliasVariable> aliasSet = getAliasSet(fv);
			for (AliasVariable av : aliasSet) {
				if (av.getFVariable().equals(fv)) {
					return av;
				}
			}
			return null;
		}
		
		/**
		 * \brief Retrieve the alias set corresponding to an alias variable.
		 * 
		 * Returns null if alias variable not present in an alias set.
		 * 
		 * @param alias An alias variable.
		 * @return The alias set corresponding to the alias variable.
		 */
		public LinkedHashSet<AliasVariable> getAliasSet(AliasVariable alias) {
			for (LinkedHashSet<AliasVariable> aliasSet : aliasSets) {
				if (aliasSet.contains(alias)) {
					return aliasSet;	
				}
			}
			return null;
		}

		/**
		 * \brief Retrieve the alias set corresponding to an FVariable.
		 * 
		 * Returns null if the FVariable is not present in an alias set.
		 * 
		 * @param alias An FVariable.
		 * @return The alias set corresponding to the alias variable.
		 */
		public LinkedHashSet<AliasVariable> getAliasSet(FVariable alias) {
			for (LinkedHashSet<AliasVariable> aliasSet : aliasSets) {
				if (aliasSet.contains(new AliasVariable(alias,true))) {
					return aliasSet;	
				} else if (aliasSet.contains(new AliasVariable(alias,false))) {
					return aliasSet;	
				}
			}
			return null;
		}
				
		/**
		 * \brief Add a pair of alias variables to the alias manager.
		 * 
		 * @param fv1 An FVariable.
		 * @param fv2 Another FVariable.
		 * @param neg True if the alias pair is negated, otherwise false.
		 * 
		 */
		public void addAliasVariables(FVariable fv1, FVariable fv2, 
				boolean neg) {
			
			//System.out.println("AliasManager.addAliasVariables(): "
			//		+ fv1.name() + " " + fv2.name() + " " + neg);
			
			// Create alias variables with negated  = false
			AliasVariable alias1 = new AliasVariable(fv1,false);
			AliasVariable alias2 = new AliasVariable(fv2,false);

			// Create alias variables with negated = true
			AliasVariable alias1n = new AliasVariable(fv1,true);
			AliasVariable alias2n = new AliasVariable(fv2,true);
				
			/*
			 * Rules for alias sets:
			 * 
			 *  1. An alias variable can only occur in one alias set
			 *  2. An alias variable can occur either negated or
			 *     non-negated in an alias set, not both.
			 *  
			 *  These rules are enforced by the algorithm below: if a
			 *  rule is about to be broken an error message is generated.
			 *  			
			 */
				
			// Create all combinations of alias variables, negated and 
			// non-negated
			LinkedHashSet<AliasVariable> as1 = getAliasSet(alias1);
			LinkedHashSet<AliasVariable> as2 = getAliasSet(alias2);
			LinkedHashSet<AliasVariable> as1n = getAliasSet(alias1n);
			LinkedHashSet<AliasVariable> as2n = getAliasSet(alias2n);

			// Go through all the cases
			if (as1!=null && as2!=null) { // -> as1n==null & as2n==null
				if (as1==as2 && neg) {
					aliasErrorFlag = true;
					aliasErrorMessage = "Alias error: trying to add the " +
							"negated alias pair (" + fv1.name() + ",-" + 
							fv2.name() + ") to the alias set " + 
							printAliasSet(as1);
					return;
				}
				// Merge connection sets
				if (neg) {
					for (AliasVariable a : as2) {
						as1.add(new AliasVariable(a.getFVariable(),
								!a.isNegated()));
					}
					aliasSets.remove(as2);
				} else { 
					as1.addAll(as2);
					aliasSets.remove(as2);
				}				
			} else if (as1!=null && as2n!=null) { // -> as1n==null & as2==null
				if (as1==as2n && !neg) {
					aliasErrorFlag = true;
					aliasErrorMessage = "Alias error: trying to add the " +
					"alias pair (" + fv1.name() + "," + 
					fv2.name() + ") to the alias set " + 
					printAliasSet(as1);
					return;
				}
				// Merge connection sets
				if (neg) {
					as1.addAll(as2n);
					aliasSets.remove(as2n);					
				} else { 
					for (AliasVariable a : as2n) {
						as1.add(new AliasVariable(a.getFVariable(),
								!a.isNegated()));
					}
					aliasSets.remove(as2n);
				}				
			} else if (as1n!=null && as2!=null) { // -> as1==null & as2n==null
				if (as1n==as2 && !neg) {
					aliasErrorFlag = true;
					aliasErrorFlag = true;
					aliasErrorMessage = "Alias error: trying to add the " +
					"alias pair (" + fv1.name() + "," + 
					fv2.name() + ") to the alias set " + 
					printAliasSet(as1n);
					return;
				}					
				if (neg) {
					as1n.addAll(as2);
					aliasSets.remove(as2);					
				} else { 
					for (AliasVariable a : as2) {
						as1n.add(new AliasVariable(a.getFVariable(),
								!a.isNegated()));
					}
					aliasSets.remove(as2);
				}				

			} else if (as1n!=null && as2n!=null) { // -> as1==null & as2==null
				if (as1n==as2n && neg) {
					aliasErrorFlag = true;
					aliasErrorFlag = true;
					aliasErrorMessage = "Alias error: trying to add the " +
					"negated alias pair (" + fv1.name() + ",-" + 
					fv2.name() + ") to the alias set " + 
					printAliasSet(as1n);
					return;
				}
				if (neg) {
					for (AliasVariable a : as2n) {
						as1n.add(new AliasVariable(a.getFVariable(),
								!a.isNegated()));
					}
					aliasSets.remove(as2n);
				} else { 
					as1n.addAll(as2n);
					aliasSets.remove(as2n);					
				}				

			} else if (as1==null && as1n==null && as2!=null) { // -> as2n==null
				if (neg) {
					as2.add(alias1n);
				} else {
					as2.add(alias1);
				}
			} else if (as1==null && as1n==null && as2n!=null) { // -> as2==null
				if (neg) {
					as2n.add(alias1);
				} else {
					as2n.add(alias1n);
				}				
			} else if (as2==null && as2n==null && as1!=null) { // -> as1n==null
				if (neg) {
					as1.add(alias2n);
				} else {
					as1.add(alias2);
				}
			} else if (as2==null && as2n==null && as1n!=null) { // -> as1==null
				if (neg) {
					as1n.add(alias2);
				} else {
					as1n.add(alias2n);
				}				
			} else {
				LinkedHashSet<AliasVariable> as = 
					new LinkedHashSet<AliasVariable>();
				if (neg) {
					as.add(alias1);
					as.add(alias2n);
				} else {
					as.add(alias1);
					as.add(alias2);
				}
				aliasSets.add(as);
			}
		}
		
		public String printAliasSet(LinkedHashSet<AliasVariable> aliasSet) {
			StringBuffer str = new StringBuffer();
			str.append("{");
			int i=0;
			for (AliasVariable alias : aliasSet) {
				if (alias.isNegated()) {
					str.append("-");
				}
				str.append(alias.getFVariable().name());
				if ((i<(aliasSet.size())-1)) {
					str.append(",");
				}
				i++;
			}
			str.append("}");
			return str.toString();
		}
		
		/**
		 * \brief Print the alias sets.
		 * 
		 * @return A string containing the alias sets.
		 */
		public String printAliasSets() {
			StringBuffer str = new StringBuffer();
			for (LinkedHashSet<AliasVariable> aliasSet : aliasSets) {
				str.append(printAliasSet(aliasSet)+"\n");
			}
			return str.toString();		
		}
	}	
	
	/**
	 * \brief AliasVariable is used to encapsulate an FVariable and whether
	 * the alias is negated. 
	 * 
	 * AliasVariable implements the Comparable interface and objects of the 
	 * class are used in the alias sets.
	 */
	public class AliasVariable implements Comparable{
		
		// The FVariable
		private FVariable fv;
		// Negated attribute
		private boolean negated = false;
		
		/**
		 * \brief Constructor.
		 * 
		 * @param fv An FVariable.
		 * @param negated True if the alias is negated, otherwise false.
		 */
		public AliasVariable(FVariable fv,boolean negated) {
			this.fv = fv;
			this.negated = negated;
		}
	
		/**
		 * \brief Returns true if the alias is negated.
		 * 
		 * @return True if the alias is negated, otherwise false.
		 */
		public boolean isNegated() {
			return negated;
		}
	
		/**
		 * \brief Getter for the FVariable.
		 * 
		 * @return The FVariable.
		 */
		public FVariable getFVariable() {
			return fv;
		}	
		
		/**
		 * \brief Compute the hash code of the alias variable. 
		 * 
		 * Both the name of the variable and the negated attribute is used
		 * to compute the hash code.
		 * 
		 * @return The hash code.
		 */
		public int hashCode() {
			String tr = "true";
			String fa = "false";
			return fv.name().intern().hashCode() + 
				(negated? tr.intern().hashCode() : fa.intern().hashCode());
		}
		
		/**
		 * \brief Implementation of the equals method in the Comparable 
		 * interface.
		 * 
		 * @param o An object to compare.
		 * @return True if o is equal to the alias, otherwise false.
		 */
		public boolean equals(Object o) {
			
			AliasVariable alias = (AliasVariable)o;
			return (getFVariable().name().equals(alias.getFVariable().name())) &
			       (isNegated()==alias.isNegated());
		
		}

		/**
		 * \brief Implementation of the compareTo method in the Comparable
		 * interface.
		 * 
		 * @param o An object to compare with.
		 * @return Result of comparison.
		 */
		public int compareTo(Object o) {
		
			AliasVariable alias = (AliasVariable)o;
			return getFVariable().name().compareTo(alias.getFVariable().name());
		
		}
	
	}

}