/*
    Copyright (C) 2016 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect Components {
    
    /**
     * Extract a subcomponent of this record expression. Creates new nodes when necessary.
     * Similar to getArray() for arrays.
     */
    syn FExp FExp.component(String name) = dynamicFExp(extractRecordFExp(name));
    eq InstRecordConstructor.component(String name) {
        int i = 0;
        for (InstComponentDecl icd : myInstClassDecl().allInstComponentDecls()) {
            if (icd.name().equals(name)) {
                break;
            }
            i++;
        }
        return getArg(i).getFExp();
    }
    eq FRecordConstructor.component(String name)    = getRecord().myFRecordDecl().extractArg(this, name);
    eq FIfExp.component(String name) = dynamicFExp(new FIfExp(getIfExp().treeCopy(), getThenExp().component(name).unboundCopy(), getElseExp().component(name).unboundCopy()));
    eq FSubscriptedExp.component(String name) {
        if (indexVariability().indexParameterOrLess()) {
            try {
                return dynamicFExp(select().extractRecordFExp(name));
            } catch (ConstantEvaluationException e) {
                
            }
        }
        FExp e = getFExp().component(name);
        FArraySubscripts fas = getFArraySubscripts().treeCopy();
        for (int i = 0; i < e.ndims() - getFArraySubscripts().getNumFSubscript(); i++) {
            fas.addFSubscriptNoTransform(new FColonSubscript());
        }
        return dynamicFExp(new FSubscriptedExp(e.treeCopy(), fas));
    }
    
    eq FAssert.component(String name) = dynamicFExp(new FAssert(
            getTest().component(name).treeCopy(), getMsg().treeCopy(), getLevelOpt().treeCopy()));
    
    eq FBinExp.component(String name) = dynamicFExp(createNode(getLeft().component(name), getRight().component(name)));
    
    eq FFunctionCall.component(String name) {
        FClass fc = myFClass();
        if (!isComposite() || fc == null) {
            return super.component(name);
        }
        return dynamicFExp(dynamicFExp(new FIdUseExp(tempVarName())).component(name));
    }
}
