/*
    Copyright (C) 2009-2015 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

aspect Variability {

    syn boolean FTypePrefixVariability.constantVariability() = false;
    eq FConstant.constantVariability() = true;	
    syn boolean FTypePrefixVariability.structParameterVariability() = false;
    eq FStructParameter.structParameterVariability() = true;
    syn boolean FTypePrefixVariability.evalParameterVariability() = false;
    eq FEvalParameter.evalParameterVariability() = true;
    syn boolean FTypePrefixVariability.finalParameterVariability() = false;
    eq FFinalParameter.finalParameterVariability() = true;
    syn boolean FTypePrefixVariability.knownParameterVariability() = false;
    eq FKnownParameter.knownParameterVariability() = true;
    syn boolean FTypePrefixVariability.indexParameterVariability() = false;
    eq FIndexParameter.indexParameterVariability() = true;
    syn boolean FTypePrefixVariability.fixedParameterVariability()    = false;
    eq FFixedParameter.fixedParameterVariability()                    = true;
    syn boolean FTypePrefixVariability.initialParameterVariability() = false;
    eq FInitialParameter.initialParameterVariability()              = true;
    syn boolean FTypePrefixVariability.parameterVariability()         = false;
    eq FParameter.parameterVariability()                              = true;
    syn boolean FTypePrefixVariability.discreteVariability() = false;
    eq FDiscrete.discreteVariability() = true;	
    syn boolean FTypePrefixVariability.continuousVariability() = false;
    eq FContinuous.continuousVariability() = true;	
    syn boolean FTypePrefixVariability.compositeVariability() = false;
    eq FCompositeVariability.compositeVariability() = true;  


    syn int FTypePrefixVariability.compareTo(FTypePrefixVariability other)
        = variabilityLevel() - other.variabilityLevel();
    syn boolean FTypePrefixVariability.equals(FTypePrefixVariability other)
        = compareTo(other) == 0;

    /**
     * Test if variability is at most the same as <code>other</code>.
     * 
     * Uses ordering of variabilities imposed by {@link #variabilityLevel()}.
     */
    syn boolean FTypePrefixVariability.lessOrEqual(FTypePrefixVariability other) = 
            compareTo(other) <= 0;
	
    syn boolean FTypePrefixVariability.evalOrLess()           = lessOrEqual(fEvalParameter());
    syn boolean FTypePrefixVariability.knownParameterOrLess() = lessOrEqual(fFinalParameter());
    syn boolean FTypePrefixVariability.parameterOrLess()      = lessOrEqual(fInitialParameter());
    syn boolean FTypePrefixVariability.indexParameterOrLess() = lessOrEqual(fIndexParameter());
    syn boolean FTypePrefixVariability.fixedParameterOrLess() = lessOrEqual(fFixedParameter());
    syn boolean FTypePrefixVariability.discreteOrLess()       = lessOrEqual(fDiscrete());
    syn boolean FTypePrefixVariability.continuousOrLess()     = lessOrEqual(fContinuous());

    /**
     * An ordering of the variability types.
     * 
     * To be used by methods for comparing variabilities. 
     * Should <em>never</em> be compared to literals, only to the return value from other 
     * FTypePrefixVariability objects. This simplifies adding new variabilities.
     *  
     * Also used to determine the behaviour of {@link #combine(FTypePrefixVariability)}.
     */
    abstract protected int FTypePrefixVariability.variabilityLevel();
    protected int FConstant.variabilityLevel()        { return VARIABILITY_LEVEL; }
    protected int FStructParameter.variabilityLevel() { return VARIABILITY_LEVEL; }
    protected int FEvalParameter.variabilityLevel()   { return VARIABILITY_LEVEL; }
    protected int FFinalParameter.variabilityLevel()  { return VARIABILITY_LEVEL; }
    protected int FIndexParameter.variabilityLevel()  { return VARIABILITY_LEVEL; }
    protected int FFixedParameter.variabilityLevel()  { return VARIABILITY_LEVEL; }
    protected int FInitialParameter.variabilityLevel() { return VARIABILITY_LEVEL; }
    protected int FDiscrete.variabilityLevel()        { return VARIABILITY_LEVEL; }
    protected int FContinuous.variabilityLevel()      { return VARIABILITY_LEVEL; }
    protected int FCompositeVariability.variabilityLevel() { return combine().variabilityLevel(); }
    protected static final int FConstant.VARIABILITY_LEVEL          = 0;
    protected static final int FEvalParameter.VARIABILITY_LEVEL     = 3;
    protected static final int FStructParameter.VARIABILITY_LEVEL   = 4;
    protected static final int FFinalParameter.VARIABILITY_LEVEL    = 5;
    protected static final int FIndexParameter.VARIABILITY_LEVEL    = 8;
    protected static final int FFixedParameter.VARIABILITY_LEVEL    = 10;
    protected static final int FInitialParameter.VARIABILITY_LEVEL = 11;
    protected static final int FDiscrete.VARIABILITY_LEVEL          = 20;
    protected static final int FContinuous.VARIABILITY_LEVEL        = 30;
    
    /**
     * Combines (up) component variabilities to a single primitive variability.
     */
    syn FTypePrefixVariability FTypePrefixVariability.combine() {
        return this;
    }
    
    eq FCompositeVariability.combine() {
        FTypePrefixVariability high = fConstant();
        for (FComponentVariability v : getComponents()) {
            high = high.combine(v.getVariability().combine());
        }
        return high;
    }
    
    /**
     * Combines (down) component variabilities to a single primitive variability.
     */
    syn FTypePrefixVariability FTypePrefixVariability.combineDown() {
        return this;
    }
    
    eq FCompositeVariability.combineDown() {
        FTypePrefixVariability high = fConstant();
        for (FComponentVariability v : getComponents()) {
            high = high.combineDown(v.getVariability().combineDown());
        }
        return high;
    }
    
    /**
     * If this is a composite variability, return the named component, else this.
     */
    syn FTypePrefixVariability FTypePrefixVariability.component(String name) = this;
    
    private Map<String,Integer> FCompositeVariability.nameMap = null;
    public FTypePrefixVariability FCompositeVariability.component(String name) {
        if (nameMap==null) {
            nameMap = new HashMap<String,Integer>();
            for (int i = 0; i < getNumComponent(); i++) {
                nameMap.put(getComponent(i).getName(), i);
            }
        }
        return getComponent(nameMap.get(name)).getVariability();
    }
    
    syn FTypePrefixVariability FAbstractEquation.variability() = fContinuous();
    eq FEquation.variability() = isWhen() ? fDiscrete() : getLeft().variability().combine(getRight().variability());
    eq FIfWhenElseEquation.variability() {
        FTypePrefixVariability var = fConstant();
        for (FAbstractEquation equation : getFAbstractEquations())
            var = var.combine(equation.variability());
        return var;
    }
    eq FIfEquation.variability() {
        if (isWhen())
            return fDiscrete();
        FTypePrefixVariability var = super.variability();
        if (hasElse())
            var = var.combine(getElse().variability());
        return var;
    }
    eq FFunctionCallEquation.variability() {
        FTypePrefixVariability var = fConstant();
        // Check all output arguments
        for (FFunctionCallLeft fl : getLefts()) {
            if (fl.hasFExp()) {
                var = var.combine(fl.getFExp().variability());
            }
        }
        // Check call
        return var.combine(getCall().variability());
    }
    eq FAlgorithm.variability() {
        FTypePrefixVariability variability = fConstant();
        for (FAbstractVariable variable : referencedFVariablesInLHS()) {
            variability = variability.combine(variable.variability());
        }
        return variability;
    }
    
    syn FTypePrefixVariability FAlgorithm.variabilityRHS() {
        FTypePrefixVariability variability = fConstant();
        for (FVariable variable : variableDependenciesRHS()) {
            variability = variability.combine(variable.variability());
        }
        for (FExp exp : timeExps()) {
            variability = variability.combine(exp.variability());
        }
        return variability;
    }
    
    coll Set<FExp> FAbstractEquation.timeExps() [new LinkedHashSet<FExp>()]
            with add root FAbstractEquation;
    FTimeExp contributes this to FAbstractEquation.timeExps() for myFEquation();
    
    syn boolean FAbstractEquation.isConstant()   = variability().constantVariability();
    syn boolean FAbstractEquation.isParameter()  = variability().parameterVariability();
    syn boolean FAbstractEquation.isDiscrete()   = variability().discreteVariability();
    syn boolean FAbstractEquation.isContinuous() = variability().continuousVariability();

    syn boolean FAbstractVariable.isConstant()   = false;
    syn boolean FAbstractVariable.isParameter()  = false;
    syn boolean FAbstractVariable.isDiscrete()   = false;
    syn boolean FAbstractVariable.isContinuous() = false;
    
    eq FVariable.isConstant()   = variability().constantVariability();
    eq FVariable.isParameter()  = variability().parameterVariability();
    eq FVariable.isDiscrete()   = variability().discreteVariability();
    eq FVariable.isContinuous() = variability().continuousVariability();


    syn FTypePrefixVariability FType.funcOutputVariability() = fDiscrete();
    eq FRealType.funcOutputVariability() = fContinuous();
    eq FRecordType.funcOutputVariability() {
        FTypePrefixVariability var = fConstant();
        for (FRecordComponentType component : getComponents()) {
            var = var.combine(component.getFType().funcOutputVariability());
        }
        return var;
    }
    eq FFunctionType.funcOutputVariability() {
        FTypePrefixVariability var = fConstant();
        for (FRecordComponentType component : getOutputs()) {
            var = var.combine(component.getFType().funcOutputVariability());
        }
        return var;
    }


    /**
     * Convert all continous variables that are assigned in when equations into discrete variables.
     */
    public void FClass.updateVariabilityForVariablesInWhen() {
        beginStep("updateVariabilityForVariablesInWhen()");
        getFAbstractEquations().updateVariabilityForVariablesInWhen(false);
        checkDiscreteOperations();
        endStep("updateVariabilityForVariablesInWhen()");
    }

    /**
     * Convert all continous variables that are assigned in when equations and statements into discrete variables.
     * 
     * @param inWhen  is this node in a when equation?
     */
    public void ASTNode.updateVariabilityForVariablesInWhen(boolean inWhen) {
        for (ASTNode n : this) {
            n.updateVariabilityForVariablesInWhen(inWhen);
        }
    }
    
    public void FWhenEquation.updateVariabilityForVariablesInWhen(boolean inWhen) {
        super.updateVariabilityForVariablesInWhen(true);
    }
    
    public void FWhenStmt.updateVariabilityForVariablesInWhen(boolean inWhen) {
        super.updateVariabilityForVariablesInWhen(true);
    }
    
    public void FIfEquation.updateVariabilityForVariablesInWhen(boolean inWhen) {
        if (getTest().variability().knownParameterOrLess()) {
            try {
                if (getTest().ceval().booleanValue()) {
                    getFAbstractEquations().updateVariabilityForVariablesInWhen(inWhen);
                } else if (hasElse()) {
                    getElse().updateVariabilityForVariablesInWhen(inWhen);
                }
                return;
            } catch (ConstantEvaluationException e) {
                
            }
        }
        super.updateVariabilityForVariablesInWhen(inWhen);
    }

    public void FEquation.updateVariabilityForVariablesInWhen(boolean inWhen) {
        if (inWhen) {
            getLeft().makeContinuousVariablesDiscrete();
        }
    }
    
    public void FFunctionCallEquation.updateVariabilityForVariablesInWhen(boolean inWhen) {
        if (inWhen) {
            for (FFunctionCallLeft left : getLefts()) {
                if (left.hasFExp()) {
                    left.getFExp().makeContinuousVariablesDiscrete();
                }
            }
        }
    }
    
    public void FAssignStmt.updateVariabilityForVariablesInWhen(boolean inWhen) {
        if (inWhen) {
            getLeft().makeContinuousVariablesDiscrete();
        }
    }

    public void FFunctionCallStmt.updateVariabilityForVariablesInWhen(boolean inWhen) {
        if (inWhen) {
            for (FFunctionCallLeft left : getLefts()) {
                if (left.hasFExp()) {
                    left.getFExp().makeContinuousVariablesDiscrete();
                }
            }
        }
    }

    /**
     * Convert all continous variables that this expression refers to into discrete variables.
     */
    public void FExp.makeContinuousVariablesDiscrete() {}
    
    public void FIdUseExp.makeContinuousVariablesDiscrete() {
        myFV().makeContinuousVariableDiscrete();
    }
    
    public void FArray.makeContinuousVariablesDiscrete() {
        for (FExp e : getFExps())
            e.makeContinuousVariablesDiscrete();
    }
    
    public void FRecordConstructor.makeContinuousVariablesDiscrete() {
        for (FExp e : getArgs())
            e.makeContinuousVariablesDiscrete();
    }
    
    public void FSubscriptedExp.makeContinuousVariablesDiscrete() {
        getFExp().makeContinuousVariablesDiscrete();
    }
    
    /**
     * If this is a normal continous variable, convert it to a discrete variable.
     */
    public void FAbstractVariable.makeContinuousVariableDiscrete() {}
    
    public void FVariable.makeContinuousVariableDiscrete() {
        if (getFTypePrefixVariability().continuousVariability())
            setFTypePrefixVariability(fDiscrete());
    }


    /**
     * If this is an assignment equation, return the variable assigned.
     * 
     * Only works in flat tree.
     */
    syn FAbstractVariable FAbstractEquation.assignedFV() = null;
    eq FEquation.assignedFV()                            = getLeft().assignedFV();

    /**
     * If this is an flat tree access, return set containing accessed var, otherwise empty set.
     */
    syn FAbstractVariable FExp.assignedFV() = null;
    eq FIdUseExp.assignedFV()               = myFV();


    syn FTypePrefixVariability FAbstractVariable.variability() {
        throw new UnsupportedOperationException("Unable to get variability of FAbstractVariable type " + getClass().getSimpleName());
    }
    eq FVariable.variability() = getFTypePrefixVariability();
    
    syn boolean FExp.isConstantExp()   = variability().constantVariability();
    syn boolean FExp.isParameterExp()  = variability().parameterVariability();
    syn boolean FExp.isDiscreteExp()   = variability().discreteVariability();
    syn boolean FExp.isContinuousExp() = variability().continuousVariability();
    
    syn boolean FSubscript.isConstant() = true;
    eq FExpSubscript.isConstant() = getFExp().isConstantExp();

    syn boolean FExp.inDiscreteLocation() = inWhen() || inFunction();

    syn FTypePrefixVariability FExp.variability() = expVariability();
    syn lazy FTypePrefixVariability FAbstractExp.variability() = 
        inDiscreteLocation() ? expVariability().combineDown(fDiscrete()) : expVariability();

    syn FTypePrefixVariability FExp.expVariability() = combineFExpListVariability(childFExps());

    syn FTypePrefixVariability FExp.variabilityInNoEventExp() = 
        variabilityInNoEventExp(combineFExpListVariability(childFExps()));
    syn FTypePrefixVariability FExp.variabilityInNoEventExp(FTypePrefixVariability var) =
        inNoEventExp() ? var : var.combineDown(fDiscrete());

    eq FUnsupportedExp.expVariability() = fContinuous(); // Only here to avoid null pointer 
    
    eq FSubscriptedExp.expVariability() = getFExp().variability().combine(indexVariability());
    eq FComponentExp.expVariability()   = getFExp().variability().component(getName());

    public static FTypePrefixVariability FExp.combineFExpListVariability(Iterable<? extends FExp> exps) {
        Iterator<? extends FExp> it = exps.iterator();
        FTypePrefixVariability total = it.hasNext() ? it.next().variability() : fConstant();
        while (it.hasNext()) 
            total = total.combine(it.next().variability());
        return total;
    }

    eq FLitExp.expVariability()   = fConstant();
    eq FNoExp.expVariability()    = fConstant();
    eq FNdimsExp.expVariability() = fConstant();
    eq FEndExp.expVariability()   = fStructParameter();
    eq FTimeExp.expVariability()  = fContinuous();
    eq FRelExp.expVariability()   = inNoEventExp() ? super.expVariability() : super.expVariability().combineDown(fDiscrete());

    eq FSizeExp.expVariability() {
        FTypePrefixVariability res = ASTNode.fConstant();
        if (hasDim()) {
            if (getDim().variability().knownParameterOrLess()) {
                try {
                    int dim = getDim().ceval().intValue() - 1;
                    if (getFExp().size().has(dim)) {
                        return getFExp().size().variability(dim);
                    }
                } catch (ConstantEvaluationException e) {
                    
                }
            }
            res = res.combine(getDim().variability());
        }
        res = res.combine(getFExp().size().variability());
        return res;
    }
    eq FUnknownSizeExp.expVariability() = fParameter().combine(getDim().variability());
    
    public FTypePrefixVariability Size.variability() {
        FTypePrefixVariability res = ASTNode.fConstant();
        for (int i = 0; i < ndims(); i++) {
            res = res.combine(variability(i));
        }
        return res;
    }
    
    public FTypePrefixVariability Size.variability(int d) {
        return (size[d] == Size.UNKNOWN) ? ASTNode.fDiscrete() : ASTNode.fConstant();
    }
    public FTypePrefixVariability MutableSize.variability(int d) {
        return (exps[d] != null) ? getFExp(d).variability() : super.variability(d);
    }
    
    eq FSignExp.expVariability() = getFExp().variability().combineDown(fDiscrete());

    eq FEventGenExp.expVariability()    = getX().variability().combineDown(fDiscrete());
    eq FBinEventGenExp.expVariability() = getX().variability().combine(getY().variability());
    eq FDivFuncExp.expVariability()     = getX().variability().combine(getY().variability()).combineDown(fDiscrete());

    eq FHomotopyExp.expVariability() = getActual().variability();

    eq FCardinality.expVariability() = fParameter();
    eq FDecouple.expVariability()    = getFExp().variability();

	eq FIterExp.expVariability() {
        FTypePrefixVariability total;
        if (size().isUnknown())
            total = getFExp().variability();
        else if (size().isEmpty())
            total = fConstant();
        else
            total = getArray().iteratorFExp().next().variability();
        
        for (CommonForIndex ind : getForIndexList())
            total = total.combine(ind.variability());
        return total;
    }

    syn FTypePrefixVariability CommonForIndex.variability() = getFExp().variability();
    eq InstForIndexNoExp.variability()                      = fParameter();
    
    eq FMulExp.expVariability() {
        // Refined by variability propagation
        return super.expVariability();
    }
    
    eq FDivExp.expVariability() {
        // Refined by variability propagation
        return super.expVariability();
    }


    eq FConnectionsOp.expVariability() = fConstant();
    eq FConnBoolOp.expVariability()    = fConstant();

    eq FTerminate.expVariability() = getFExp().variability();
    eq FReinit.expVariability() = fDiscrete();
    eq FAssert.expVariability() = getTest().variability().combine(getMsg().variability());

    eq FDelayExp.expVariability() = getFExp().variability();

    eq FIdUseExp.expVariability() = getFIdUse().variability();
    eq FAbstractDerExp.expVariability() = 
        getFIdUse().variability().discreteOrLess() ? fConstant() : getFIdUse().variability();
    eq FPreExp.expVariability() = super.expVariability().combineDown(fDiscrete());
    eq InstPreExp.expVariability() = getFExp().variability().combineDown(fDiscrete());

    syn FTypePrefixVariability FIdUse.variability() {
        FAbstractVariable variable = myFV();
        if (variable instanceof FVariable) {
            FVariable fVariable = (FVariable) variable;
            return(fVariable.variability());
        } else {
            return (fContinuous());
        }
    }

    syn FTypePrefixVariability FSubscript.variability() = fConstant();
	eq FExpSubscript.variability() = getFExp().variability();
	
	syn FTypePrefixVariability FArraySubscripts.variability() {
		FTypePrefixVariability total = fConstant();
		for (FSubscript arg : getFSubscripts()) 
			total = total.combine(arg.variability());
		return total;
	}

    eq FLinspace.expVariability() = getStartExp().variability().combine(getStopExp().variability());

    eq FIdentity.expVariability()  = fConstant();
    eq FOnes.expVariability()      = fConstant();
    eq FZeros.expVariability()     = fConstant();
    eq FFillExp.expVariability()   = getFillExp().variability();

    eq FExInStream.expVariability() {
        FTypePrefixVariability stream = getDefault().variability();
        FTypePrefixVariability total = fConstant();
        int n = 0;
        for (InStreamPart cont : contributors()) {
            stream = cont.stream.variability();
            total = total.combine(stream).combine(cont.flow.variability());
            n++;
        }
        if (n < 2) {
            return stream;
        } else {
            return total;
        }
    }

    eq FEdgeExp.expVariability()   = getFExp().variability().combineDown(fDiscrete());
    eq FChangeExp.expVariability() = getFExp().variability().combineDown(fDiscrete());
    eq FLoadResource.expVariability() = fParameter();
    eq FSampleExp.expVariability() = fDiscrete();

    eq FSimulationStateBuiltIn.expVariability() = fParameter();
    eq FInitialExp.expVariability()             = fDiscrete();

    eq FFunctionCall.expVariability() = inputVariability().combineDown(type().funcOutputVariability());
    syn FTypePrefixVariability FFunctionCall.inputVariability() = super.expVariability();

    syn int FTypePrefixVariability.combineLevel() = variabilityLevel() * 10;

    public FTypePrefixVariability FTypePrefixVariability.combine(FTypePrefixVariability other) {
        return (other.combineLevel() > combineLevel()) ? other : this;
    }
    
    @Override
    public FTypePrefixVariability FCompositeVariability.combine(FTypePrefixVariability other) {
        return combine(other, upCombiner);
    }

    public FTypePrefixVariability FTypePrefixVariability.combineDown(FTypePrefixVariability other) {
        return (other.combineLevel() < combineLevel()) ? other : this;
    }
    
    @Override
    public FTypePrefixVariability FCompositeVariability.combineDown(FTypePrefixVariability other) {
        return combine(other, downCombiner);
    }
    
    class FTypePrefixVariability {
        protected static abstract class Combiner {
            public abstract FTypePrefixVariability combine(FTypePrefixVariability v1, FTypePrefixVariability v2);
        }
    }
    
    class FCompositeVariability {
        protected static final Combiner upCombiner = new Combiner() {
            public FTypePrefixVariability combine(FTypePrefixVariability v1, FTypePrefixVariability v2) {
                return v1.combine(v2);
            }
        };
        
        protected static final Combiner downCombiner = new Combiner() {
            public FTypePrefixVariability combine(FTypePrefixVariability v1, FTypePrefixVariability v2) {
                return v1.combineDown(v2);
            }
        };
    }
    
    
    public FTypePrefixVariability FTypePrefixVariability.combine(FTypePrefixVariability other, Combiner combiner) {
        return combiner.combine(this, other);
    }
    
    public FTypePrefixVariability FCompositeVariability.combine(FTypePrefixVariability other, Combiner combiner) {
        FTypePrefixVariability low = fContinuous();
        FTypePrefixVariability high = fConstant();
        boolean containsComposite = false;
        ArrayList<FComponentVariability> l = new ArrayList<FComponentVariability>();
        for (FComponentVariability fcv : getComponents()) {
            String name = fcv.getName();
            FTypePrefixVariability v = fcv.getVariability();
            FTypePrefixVariability nv = other.component(name);
            nv = v.combine(nv, combiner);
            l.add(new FComponentVariability(fcv.getName(), nv));
            low = low.combineDown(nv.combineDown());
            high = high.combine(nv.combine());
            containsComposite = containsComposite || nv.compositeVariability();
        }
        if (!containsComposite && low.equals(high))
            return low;
        return new FCompositeVariability(new List<FComponentVariability>(l));
    }


    syn FTypePrefixVariability FExp.indexVariability() {
        throw new UnsupportedOperationException();
    }
    eq FSubscriptedExp.indexVariability() = getFArraySubscripts().variability();
    eq FIdUseExp.indexVariability()       = getFIdUse().indexVariability();

    syn FTypePrefixVariability FIdUse.indexVariability() {
        FQName fqn = getFQName();
        FTypePrefixVariability variability = fConstant();
        if (fqn.isSimple())
            return variability;
        for (FQNamePart part : fqn.asFQNameFull().getFQNameParts())
            if (part.hasFArraySubscripts())
                variability = variability.combine(part.getFArraySubscripts().variability());
        return variability;
    }
}

aspect VariabilitySingletons {

    public static final FContinuous      FContinuous.instance      = new FContinuous();
    public static final FDiscrete        FDiscrete.instance        = new FDiscrete();
    public static final FInitialParameter FInitialParameter.instance = new FInitialParameter();
    public static final FFixedParameter  FFixedParameter.instance  = new FFixedParameter();
    public static final FIndexParameter  FIndexParameter.instance  = new FIndexParameter();
    public static final FFinalParameter  FFinalParameter.instance  = new FFinalParameter();
    public static final FEvalParameter   FEvalParameter.instance   = new FEvalParameter();
    public static final FStructParameter FStructParameter.instance = new FStructParameter();
    public static final FConstant        FConstant.instance        = new FConstant();

    public static FContinuous ASTNode.fContinuous() {
        return FContinuous.instance;
    }

    public static FDiscrete ASTNode.fDiscrete() {
        return FDiscrete.instance;
    }

    /**
     * @deprecated Delegates to fFixedParameter(). Use correct specific parameter sub-variability.
     */
    public static FParameter ASTNode.fParameter() {
        return fFixedParameter();
    }
    
    public static FParameter ASTNode.fInitialParameter() {
        return FInitialParameter.instance;
    }
    
    public static FParameter ASTNode.fFixedParameter() {
        return FFixedParameter.instance;
    }
    
    public static FParameter ASTNode.fIndexParameter() {
        return FIndexParameter.instance;
    }
    
    public static FFinalParameter ASTNode.fFinalParameter() {
        return FFinalParameter.instance;
    }
    
    public static FEvalParameter ASTNode.fEvalParameter() {
        return FEvalParameter.instance;
    }
    
    public static FStructParameter ASTNode.fStructParameter() {
        return FStructParameter.instance;
    }
    
    public static FConstant ASTNode.fConstant() {
        return FConstant.instance;
    }
}

