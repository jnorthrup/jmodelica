/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

aspect FlatNameBinding {

    inh FAbstractVariable FQName.lookupFV(FQName fqn);
    inh FAbstractVariable FIdUse.lookupFV(FQName fqn);
    inh FAbstractVariable FIdUse.lookupDerFV(FQName fqn, int index);
    inh FAbstractVariable FIdUse.lookupOutermostFV(FQName fqn);
    inh FAbstractVariable FExp.lookupFV(FQName fqn);
    inh FAbstractVariable FAbstractVariable.lookupFV(FQName fqn);
    inh FAbstractVariable FAbstractVariable.lookupDerFV(FQName fqn, int index);
    inh FAbstractVariable FRecordDecl.lookupFV(FQName fqn);
    inh FAbstractVariable FActualStream.lookupFV(FQName fqn);

    syn FAbstractVariable FIdUse.myFV() = lookupFV(getFQName());
    syn lazy FAbstractVariable FIdUseExp.myFV() = getFIdUse().myFV();
    eq FAbstractDerExp.myFV() = getFIdUse().lookupDerFV(getFIdUse().getFQName(), order());
    syn FAbstractVariable FReinit.myFV() = getVar().myFVForUse();

    syn FAbstractVariable FExp.myFVForUse() = null;
    eq FIdUseExp.myFVForUse()               = myFV();

    syn FFunctionVariable FIdUseExp.myFuncVar() = getFIdUse().myFuncVar();
    syn FFunctionVariable FIdUse.myFuncVar() {
        FAbstractVariable fv = lookupOutermostFV(getFQName());
        return (fv instanceof FFunctionVariable) ? (FFunctionVariable) fv: null;
    }

    syn CommonVariableDecl FIdUseExp.myCommonVarDecl() = getFIdUse().myCommonVarDecl();
    syn CommonVariableDecl FIdUse.myCommonVarDecl() = myFV();
    eq  FIdUseInstAccess.myCommonVarDecl() = getInstAccess().myInstComponentDecl();

    eq Root.getChild().lookupFV(FQName fqn)               = null;
    eq Root.getChild().lookupDerFV(FQName fqn, int index) = null;
    eq Root.getChild().lookupOutermostFV(FQName fqn)      = null;

    eq FClass.getChild().lookupFV(FQName fqn)               = lookupFV(fqn);
    eq FClass.getChild().lookupDerFV(FQName fqn, int index) = lookupFV(fqn.derName(index));
    eq FClass.getChild().lookupOutermostFV(FQName fqn)      = lookupOutermostFV(fqn);
	
	// TODO: kolla om lookupFV kan tas bort
	
	/**
	 * Generic lookup function. Can find normal variables, records and record members.
	 * 
	 * Use for normal FIdUseExp.
	 */
	syn FAbstractVariable FClass.lookupFV(FQName fqn) = nullUnknown(variablesMap().lookup(fqn));
	
	/**
	 * Generic lookup function. Can find everything except record members.
	 * 
	 * Use for der, pre, etc, and when it is known that the name does not have a dot 
	 * (e.g. when searching for free temp names).
	 */
	syn FAbstractVariable FClass.lookupFV(String name) = nullUnknown(variablesMap().lookup(name));
	
	/**
	 * Lookup function for finding the outermost record variable. 
	 * 
	 * Can also find normal variables.
	 */
	syn FAbstractVariable FClass.lookupOutermostFV(FQName fqn) = nullUnknown(variablesMap().lookupOutermost(fqn));
	
	
    eq FFunctionDecl.getChild().lookupFV(FQName fqn)               = lookupFV(fqn);
    eq FFunctionDecl.getChild().lookupDerFV(FQName fqn, int index) = lookupFV(fqn.createDerPrefixedName(index));
    eq FFunctionDecl.getChild().lookupOutermostFV(FQName fqn)      = lookupOutermostFV(fqn);
	
	/**
	 * Generic lookup function. Can find normal variables, records and record members.
	 */
	syn FAbstractVariable FFunctionDecl.lookupFV(FQName fqn) {
		FAbstractVariable res = (tempLookupMap == null) ? null : tempLookupMap.lookup(fqn);
		if (res == null)
			res = variablesMap().lookup(fqn);
		return nullUnknown(res);
	}
	
	/**
	 * Lookup function for finding the outermost record variable. 
	 * 
	 * Can also find normal variables.
	 */
	syn FAbstractVariable FFunctionDecl.lookupOutermostFV(FQName fqn) {
		FAbstractVariable res = (tempLookupMap == null) ? null : tempLookupMap.lookupOutermost(fqn);
		if (res == null)
			res = variablesMap().lookupOutermost(fqn);
		return nullUnknown(res);
	}

	private FlatVariableMap FFunctionDecl.tempLookupMap = null;

	
	eq FRecordDecl.getChild().lookupFV(FQName fqn) {
		FAbstractVariable variable = lookupHierarchical(fqn, 0);
		return (variable == null) ? lookupFV(fqn) : variable;
	}
	
	inh FAbstractVariable FForClauseE.lookupFV(FQName fqn);
	inh FAbstractVariable FForStmt.lookupFV(FQName fqn);
	inh FAbstractVariable FIterExp.lookupFV(FQName fqn);
	
	eq FForClauseE.getChild().lookupFV(FQName fqn) {
		FAbstractVariable res = localLookupFV(fqn);
		return (res == null) ? lookupFV(fqn) : res;
	}
	eq FForStmt.getChild().lookupFV(FQName fqn) {
		FAbstractVariable res = localLookupFV(fqn);
		return (res == null) ? lookupFV(fqn) : res;
	}
	eq FIterExp.getChild().lookupFV(FQName fqn) {
		FAbstractVariable res = localLookupFV(fqn);
		return (res == null) ? lookupFV(fqn) : res;
	}
	
	inh FAbstractVariable FForClauseE.lookupOutermostFV(FQName fqn);
	inh FAbstractVariable FForStmt.lookupOutermostFV(FQName fqn);
	inh FAbstractVariable FIterExp.lookupOutermostFV(FQName fqn);
	
	eq FForClauseE.getChild().lookupOutermostFV(FQName fqn) {
		FAbstractVariable res = localLookupFV(fqn);
		return (res == null) ? lookupOutermostFV(fqn) : res;
	}
	eq FForStmt.getChild().lookupOutermostFV(FQName fqn) {
		FAbstractVariable res = localLookupFV(fqn);
		return (res == null) ? lookupOutermostFV(fqn) : res;
	}
	eq FIterExp.getChild().lookupOutermostFV(FQName fqn) {
		FAbstractVariable res = localLookupFV(fqn);
		return (res == null) ? lookupOutermostFV(fqn) : res;
	}
	
	syn FAbstractVariable FForClauseE.localLookupFV(FQName fqn) {
		String name = fqn.name();
		for (FForIndex fi : getFForIndexs()) {
			if (fi.getFVariable().name().equals(name)) {
				return fi.getFVariable();
			}
		}
		return null;
	}
	
	syn FAbstractVariable FForStmt.localLookupFV(FQName fqn) {
		String name = fqn.name();
		FVariable index = getIndex().getFVariable();
		if (index.name().equals(name)) 
			return index;
		return null;
	}
	
	syn FAbstractVariable FIterExp.localLookupFV(FQName fqn) {
		String name = fqn.name();
		for (CommonForIndex fi : getForIndexs()) {
			if (fi instanceof FForIndex) {
				FForIndex ffi = (FForIndex) fi;
				if (ffi.getFVariable().name().equals(name)) 
					return ffi.getFVariable();
			}
		}
		return null;
	}
	
	/**
	 * Return unknown if variable is null, variable otherwise.
	 * 
	 * Convenience method to facilitate one-liners.
	 */
	public FAbstractVariable ASTNode.nullUnknown(FAbstractVariable variable) {
		return (variable == null) ? unknownFVariable() : variable;
	}
	
	public void FClass.clearFlatNameBinding() {
	    variablesMap_computed = false;
	}
	
	syn lazy FlatVariableMap FClass.variablesMap() {
		FlatVariableMap map = new FlatVariableMap();
		map.addVariables(getFVariables());
        map.addVariables(getAliasVariables());
        map.addVariables(getAliasConstants());
		return map;
	}
	
	syn lazy FlatVariableMap FFunctionDecl.variablesMap() {
		FlatVariableMap map = new FlatVariableMap();
		map.addVariables(getFFunctionVariables());
		return map;
	}
	
	public class FlatVariableMap {
		
        private Map<String,FAbstractVariable> flatMap;
        private ArrayList<OnDemandMap> aliasMaps = new ArrayList<OnDemandMap>();
		private Map<String,HierarchicalMapNode> hierMap;
		private boolean scalar;
		
		public FlatVariableMap() {
			this(false);
		}
		
		public FlatVariableMap(boolean scalarized) {
			scalar = scalarized;
		}
		
		public FlatVariableMap(Iterable<? extends FAbstractVariable>... fvs) {
			this(false, fvs);
		}
		
		public FlatVariableMap(boolean scalarized, Iterable<? extends FAbstractVariable>... fvs) {
			this(scalarized);
			for (Iterable<? extends FAbstractVariable> fvi : fvs)
				addVariables(fvi);
		}
		
		public void addVariable(FAbstractVariable fv) {
			fv.addToVariableMap(this);
		}
		
		public void addVariables(Iterable<? extends FAbstractVariable> fvs) {
			for (FAbstractVariable fv : fvs)
				addVariable(fv);
		}
		
        public void addAliasVariables(Iterable<? extends FAbstractVariable> fvs) {
            aliasMaps.add(new OnDemandMap(fvs));
        }
		
		public void addVariableFlat(FAbstractVariable fv) {
			if (flatMap == null)
				flatMap = new HashMap<String,FAbstractVariable>();
			flatMap.put(fv.name(), fv);
		}
		
		public void addVariableHierarchical(FAbstractVariable fv) {
			if (hierMap == null)
				hierMap = new HashMap<String,HierarchicalMapNode>();
			FQName fqn = fv.getFQName().asFQNameFull();
			String pn = fqn.partName(0);
			HierarchicalMapNode n = hierMap.get(pn);
			if (n != null)
				n.addHierarchical(fv, fqn, 1);
			else
				hierMap.put(pn, (fqn.numParts() > 1) ? new HierarchicalMap(fv, fqn, 1) : fv);
		}

		public FAbstractVariable lookup(String name) {
			FAbstractVariable res = null;
			if (flatMap != null) 
				res = flatMap.get(name);
            if (doLookupAlias(res)) {
                res = lookupAlias(name);
            }
			if (res == null && hierMap != null) {
				HierarchicalMapNode n = hierMap.get(name);
				if (n instanceof FAbstractVariable)
					res = (FAbstractVariable) n;
			}
			return res;
		}

		public FAbstractVariable lookup(FQName name) {
			FAbstractVariable res = null;
			if (flatMap != null) 
				res = flatMap.get(name.resolvedName());
            if (doLookupAlias(res)) {
                res = lookupAlias(name.resolvedName());
            }
			if (res == null && hierMap != null) {
				name = name.asFQNameFull();
				HierarchicalMapNode n = hierMap.get(name.partName(0));
				if (n != null)
					res = n.lookupHierarchical(name, 1, false);
			}
			return res;
		}

		public FAbstractVariable lookupOutermost(FQName name) {
			FAbstractVariable res = null;
			if (res == null && hierMap != null) {
				HierarchicalMapNode n = hierMap.get(name.partName(0));
				if (n != null)
					res = n.lookupHierarchical(name, 1, true);
			}
			if (flatMap != null) 
				res = flatMap.get(name.name());
            if (doLookupAlias(res)) {
                res = lookupAlias(name.name());
            }
			return res;
		}
		
        public boolean doLookupAlias(FAbstractVariable res) {
            return res == null && aliasMaps.size() > 0;
        }
        
        public FAbstractVariable lookupAlias(String name) {
            FAbstractVariable res = null;
            for (FlatVariableMap fvm : aliasMaps) {
                res = fvm.lookup(name);
                if (res != null) {
                    break;
                }
            }
            return res;
        }
        
        private static class OnDemandMap extends FlatVariableMap {
            
            Iterable<? extends FAbstractVariable> fvs;
            boolean init = false;
            
            public OnDemandMap(Iterable<? extends FAbstractVariable> fvs) {
                this.fvs = fvs;
            }
            
            @Override
            public FAbstractVariable lookup(String name) {
                if (!init) {
                    addVariables(fvs);
                    init = true;
                }
                return super.lookup(name);
            }
        }
        
		public interface HierarchicalMapNode {
			public FAbstractVariable lookupHierarchical(FQName name, int part, boolean outermost);
			public void addHierarchical(FAbstractVariable fv, FQName name, int part);
		}
		
		private static class HierarchicalMap implements HierarchicalMapNode {
			
			private Map<String,HierarchicalMapNode> map;
			
			public HierarchicalMap(FAbstractVariable fv, FQName name, int part) {
				map = new HashMap<String,HierarchicalMapNode>();
				String pn = name.partName(part++);
				map.put(pn, (name.numParts() > part) ? new HierarchicalMap(fv, name, part) : fv);
			}
			
			public FAbstractVariable lookupHierarchical(FQName name, int part, boolean outermost) {
				if (name.numParts() <= part)
					return null;
				String pn = name.partName(part++);
				HierarchicalMapNode n = map.get(pn);
				return (n != null) ? n.lookupHierarchical(name, part, outermost) : null;
			}
			
			public void addHierarchical(FAbstractVariable fv, FQName name, int part) {
				String pn = name.partName(part++);
				if (name.numParts() <= part) {
					map.put(pn, fv);
				} else {
					HierarchicalMapNode n = map.get(pn);
					if (n != null)
						n.addHierarchical(fv, name, part);
					else
						map.put(pn, new HierarchicalMap(fv, name, part));
				}
			}
			
		}
		
	}
	
	FAbstractVariable implements FlatVariableMap.HierarchicalMapNode;
	
	public FAbstractVariable FAbstractVariable.lookupHierarchical(FQName name, int part, boolean outermost) {
		return (outermost || name.numParts() <= part) ? this : null;
	}
	
	public FAbstractVariable FFunctionVariable.lookupHierarchical(FQName name, int part, boolean outermost) {
		if (outermost || name.numParts() <= part)
			return this;
		else
			return isRecord() ? myFRecordDecl().lookupHierarchical(name, part) : null;
	}
	
	public FAbstractVariable FRecordVariable.lookupHierarchical(FQName name, int part, boolean outermost) {
		if (outermost || name.numParts() <= part) 
			return this;
		else
			return myFRecordDecl().lookupHierarchical(name, part);
	}
	
	public FAbstractVariable FRecordDecl.lookupHierarchical(FQName name, int part) {
		// TODO: Improve performance with map?
		FAbstractVariable res = null;
		String pn = name.partName(part);
		for (FVariable fv : getFVariables())
			if (fv.name().equals(pn))
				res = fv;
		return (res != null) ? res.lookupHierarchical(name, part + 1, false) : null;
	}

	public void FAbstractVariable.addHierarchical(FAbstractVariable fv, FQName name, int part) {
		throw new UnsupportedOperationException();
	}
	
	public void FAbstractVariable.addToVariableMap(FlatVariableMap map) {
		map.addVariableFlat(this);
	}
	
	public void FFunctionVariable.addToVariableMap(FlatVariableMap map) {
		map.addVariableHierarchical(this);
	}
	
	public void FRecordVariable.addToVariableMap(FlatVariableMap map) {
		map.addVariableHierarchical(this);
	}
	
	syn boolean FIdUse.isForIndex()            = myFV().isForIndex();
	syn boolean FIdUseExp.isForIndex()         = getFIdUse().isForIndex();
	syn boolean FIdUseInstAccess.isForIndex()  = getInstAccess().isForIndex();
	syn boolean InstAccess.isForIndex()        = myInstComponentDecl().isForIndex();
	syn boolean FAbstractVariable.isForIndex() = false;
	inh boolean FVariable.isForIndex();
	inh boolean InstComponentDecl.isForIndex();
	eq FForIndex.getFVariable().isForIndex()        = true;
	eq InstForIndex.getInstPrimitive().isForIndex() = true;
	eq InstNode.getChild().isForIndex()             = false;
	eq FClass.getChild().isForIndex()               = false;
	
}

aspect ParameterEquations {

	syn boolean FAbstractVariable.hasBindingExp() = false;
	
	syn boolean FAbstractVariable.hasParameterEquation() = 
		!hasBindingExp() && parameterEquation() != null;
	
	inh lazy FAbstractEquation FAbstractVariable.parameterEquation();
	eq FClass.getFVariable(int i).parameterEquation()     = 
		parameterEquationsMap().get(getFVariable(i));
	eq FClass.getAliasVariable(int i).parameterEquation() = 
		parameterEquationsMap().get(getAliasVariable(i));
	eq FForIndex.getChild().parameterEquation()           = null;
	eq FFunctionDecl.getChild().parameterEquation()       = null;
	eq FRecordDecl.getChild().parameterEquation()         = null;
    eq FClass.getChild().parameterEquation()              = null;
	
	syn lazy Map<FAbstractVariable,FAbstractEquation> FClass.parameterEquationsMap() {
		Map<FAbstractVariable,FAbstractEquation> map = new HashMap<FAbstractVariable,FAbstractEquation>();
		for (FAbstractEquation equ : getFParameterEquations())
			equ.addToParameterEquationsMap(map);
		return map;
	}
	
	public void FAbstractEquation.addToParameterEquationsMap(
			Map<FAbstractVariable,FAbstractEquation> map) {}
	
	public void FEquation.addToParameterEquationsMap(
			Map<FAbstractVariable,FAbstractEquation> map) {
		getLeft().addToParameterEquationsMap(map, this);
	}
	
	public void FFunctionCallEquation.addToParameterEquationsMap(
			Map<FAbstractVariable,FAbstractEquation> map) {
		for (FFunctionCallLeft left : getLefts())
			if (left.hasFExp())
				left.getFExp().addToParameterEquationsMap(map, this);
	}
	
	public void FExp.addToParameterEquationsMap(
			Map<FAbstractVariable,FAbstractEquation> map, FAbstractEquation equ) {
		for (FExp e : childFExps())
			e.addToParameterEquationsMap(map, equ);
	}
	
	public void FIdUseExp.addToParameterEquationsMap(
			Map<FAbstractVariable,FAbstractEquation> map, FAbstractEquation equ) {
		FAbstractVariable fv = getFIdUse().myFV();
		if (!fv.isUnknown())
			map.put(fv, equ);
	}
	
	/**
	 * Is this expression in a parameter equation?
	 */
	inh boolean FExp.inParameterEquation();
	eq FClass.getFParameterEquation().inParameterEquation() = true;
	eq FClass.getChild().inParameterEquation()              = false;
	eq FFunctionDecl.getChild().inParameterEquation()       = false;
	eq Root.getChild().inParameterEquation()                = false;
	
	/**
	 * Is this expression in the value of an attribute?
	 */
	inh boolean FExp.inAttributeValue();
	eq FAttribute.getValue().inAttributeValue()    = true;
	eq FClass.getChild().inAttributeValue()        = false;
	eq FFunctionDecl.getChild().inAttributeValue() = false;
	eq Root.getChild().inAttributeValue()          = false;
	
}

aspect FlatFunctionBinding {
    
    syn FCallable FFunctionCall.myFCallable()       = getName().myFCallable();
    syn FCallable FIdUse.myFCallable()              = lookupFCallable(name());
    syn FCallable FFunctionVariable.myFCallable()   = lookupFCallable(type().name());
    
    inh FCallable FIdUse.lookupFCallable(String name);
    inh FCallable FFunctionDecl.lookupFCallable(String name);
    inh FCallable FFunctionVariable.lookupFCallable(String name);
    eq Root.getChild().lookupFCallable(String name)          = null;
    eq FClass.getChild().lookupFCallable(String name)        = lookupFunc(name);
    eq FFunctionDecl.getChild().lookupFCallable(String name) = lookupFunc(name);
    
	syn FFunctionDecl FClass.lookupFunc(String name) {
		for (FFunctionDecl f : getFFunctionDecls())
			if (f.name().equals(name))
				return f;
		return null;
	}
    
    syn FCallable FFunctionDecl.lookupFunc(String name) {
        for (FFunctionVariable ffv : getFFunctionVariables())
            if (ffv.name().equals(name) && ffv.type().isFunction())
                return ffv;
        return lookupFCallable(name);
    }
    
}

aspect FlatRecordBinding {
	
	/**
	 * Get the outermost record variable of this access.
	 * 
	 * Access is assumed to be refering to a member of a record and be in a function.
	 */
	syn FAbstractVariable FIdUse.myRecordFV() = lookupFV(getFQName().copyFirstPrefix());
	
	syn lazy FRecordDecl FAbstractVariable.myFRecordDecl() = null;
	eq FRecordVariable.myFRecordDecl()   = lookupFRec(getRecord().name());
	eq FFunctionVariable.myFRecordDecl() = type().myFRecordDecl();
	
	syn lazy FRecordDecl FIdUse.myFRecordDecl() = lookupFRec(name());
	
	syn lazy FRecordDecl FType.myFRecordDecl() = null;
	eq FRecordType.myFRecordDecl()             = 
		(getFClass() != null) ? getFClass().lookupFRec(getName()) : null;
    syn lazy FFunctionDecl FType.myFFunctionDecl() = null;
    eq FFunctionType.myFFunctionDecl() = 
        (getFClass() != null) ? getFClass().lookupFunc(getName()) : null;
	
	inh FRecordDecl FRecordVariable.lookupFRec(String name);
	inh FRecordDecl FRecordType.lookupFRec(String name);
	inh FRecordDecl FIdUse.lookupFRec(String name);
	eq Root.getChild().lookupFRec(String name) = null;
	eq FClass.getChild().lookupFRec(String name) = lookupFRec(name);
	syn FRecordDecl FClass.lookupFRec(String name) {
		for (FRecordDecl r : getFRecordDecls())
			if (r.name().equals(name))
				return r;
		return null;
	}
	
}

aspect FlatEnumBinding {
	
	syn FAbstractVariable FIdUse.myEnumFV() = lookupFV(getFQName().copyPrefix());
	
	syn lazy FEnumDecl FAbstractVariable.myFEnumDecl() = null;
	eq FEnumVariable.myFEnumDecl()     = lookupFEnum(getEnum().name());
	eq FFunctionVariable.myFEnumDecl() = type().myFEnumDecl();
	eq FEnumLiteral.myFEnumDecl()      = retrieveFEnumDecl();
	
	inh FEnumDecl FEnumLiteral.retrieveFEnumDecl();
	eq FEnumDecl.getChild().retrieveFEnumDecl() = this;
	eq FlatRoot.getChild().retrieveFEnumDecl()  = null;
	
	syn lazy FEnumDecl FIdUse.myFEnumDecl()      = lookupFEnum(name());
	syn lazy FEnumDecl FEnumLitExp.myFEnumDecl() = lookupFEnum(getEnum());
	syn lazy FEnumDecl FType.myFEnumDecl()       = null;
	eq FEnumType.myFEnumDecl()                   = lookupFEnum(getName());
	
	inh FEnumDecl FEnumVariable.lookupFEnum(String name);
	inh FEnumDecl FEnumType.lookupFEnum(String name);
	inh FEnumDecl FEnumLitExp.lookupFEnum(String name);
	inh FEnumDecl FIdUse.lookupFEnum(String name);
	eq Root.getChild().lookupFEnum(String name) = null;
	eq FClass.getChild().lookupFEnum(String name) = lookupFEnum(name);
	syn FEnumDecl FClass.lookupFEnum(String name) {
		for (FEnumDecl r : getFEnumDecls()) {
			if (r.name().equals(name))
				return r;
		}
		return null;
	}
	/*
	syn FAbstractVariable FEnumDecl.findComponent(FQName name) {
		UnknownFVariable unknown = unknownFVariable();
		FEnumDecl rec = this;
		FAbstractVariable res = unknown;
		for (FQNamePart p : name.getFQNameParts()) {
			if (rec == null)
				return unknown;
			res = unknown;
			for (FVariable v : rec.getFVariables()) {
				if (v.getFQName().getFQNamePart(0).getName().equals(p.getName())) {
					res = v;
					rec = v.myFEnumDecl();
					break;
				}
			}
			if (res == unknown)
				return unknown;
		}
		return res;
	}
	*/
}

aspect FlatExternalObjectBinding {
    
    syn FExternalStmt FExternalObjectType.myConstructorStmt() = getConstructor().myFExternalStmt();
    syn FExternalStmt FExternalObjectType.myDestructorStmt()  = getDestructor().myFExternalStmt();
    
    syn FExternalStmt FIdUse.myFExternalStmt()           = myFCallable().asFFunctionDecl().getFAlgorithm().getFExternalStmt();
    syn FExternalStmt FIdUseInstAccess.myFExternalStmt() = getInstAccess().myInstClassDecl().findFunctionExternal().getFAlgorithm().getFExternalStmt();
}

aspect FlatPreBinding {

	inh FAbstractVariable FIdUse.lookupPreFV(FQName fqn);	
	inh FAbstractVariable FExp.lookupPreFV(FQName fqn);	
	inh FAbstractVariable FAbstractVariable.lookupPreFV(FQName fqn);	
	syn FAbstractVariable FPreExp.myFV() = lookupPreFV(getFIdUse().getFQName());
	syn FAbstractVariable FPreExp.myNonPreFV() = lookupFV(getFIdUse().getFQName());
	eq Root.getChild().lookupPreFV(FQName fqn)   = null;
	eq FClass.getChild().lookupPreFV(FQName fqn) = lookupFV(fqn.preName());

}

aspect UnknownFVariables {

	syn lazy UnknownFVariable FClass.getUnknownFVariable() = new UnknownFVariable();

	syn UnknownFVariable ASTNode.unknownFVariable() = root().unknownFVariable();
	eq FlatRoot.unknownFVariable() = getFClass().getUnknownFVariable();

	syn boolean FAbstractVariable.isUnknown() = false;
	eq UnknownFVariable.isUnknown() = true;
	   
}

