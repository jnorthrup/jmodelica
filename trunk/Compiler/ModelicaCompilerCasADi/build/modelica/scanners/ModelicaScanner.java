/* The following code was generated by JFlex 1.4.3 on 2019-03-21, 17:00 */

/*
    Copyright (C) 2009-2014 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package org.jmodelica.modelica.parser;

import org.jmodelica.modelica.parser.ModelicaParser.Terminals;
import org.jmodelica.util.AbstractModelicaScanner;
import org.jmodelica.util.AbstractAdjustableSymbol;
import org.jmodelica.util.formatting.FormattingType;
import org.jmodelica.modelica.compiler.ASTNode;
import beaver.Scanner;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2019-03-21, 17:00 from the specification file
 * <tt>C:/stuff/workspace/JModelica/Compiler/ModelicaCompilerCasADi/build/modelica/scanners/ModelicaScanner.flex</tt>
 */
public final class ModelicaScanner extends AbstractModelicaScanner<ASTNode<?>> {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NORMAL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\15\1\5\1\0\1\15\1\14\22\0\1\15\1\0\1\4"+
    "\4\0\1\3\1\47\1\50\1\17\1\12\1\57\1\13\1\7\1\16"+
    "\12\6\1\56\1\55\1\62\1\60\1\63\2\0\4\1\1\11\25\1"+
    "\1\53\1\2\1\54\1\61\1\1\1\0\1\30\1\35\1\26\1\34"+
    "\1\10\1\44\1\43\1\24\1\22\1\1\1\36\1\27\1\32\1\25"+
    "\1\33\1\40\1\46\1\41\1\31\1\23\1\45\1\1\1\21\1\37"+
    "\1\42\1\1\1\51\1\0\1\52\ufe81\0\1\20\u0100\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\4\1\6"+
    "\1\7\1\10\1\5\1\11\1\12\1\6\1\13\1\14"+
    "\1\15\17\5\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\4\0"+
    "\1\33\1\1\1\0\1\1\1\34\1\35\1\36\1\37"+
    "\1\40\5\5\1\41\1\0\2\5\1\42\1\5\1\43"+
    "\15\5\1\44\16\5\1\45\1\46\1\47\1\50\1\51"+
    "\1\5\1\0\1\5\1\52\6\5\2\41\1\0\13\5"+
    "\1\53\4\5\1\54\5\5\1\55\16\5\1\56\2\5"+
    "\1\0\1\5\1\57\1\60\4\5\1\61\5\5\1\62"+
    "\1\63\1\64\1\65\3\5\1\66\24\5\1\67\3\5"+
    "\1\70\1\0\3\70\10\5\1\71\1\5\1\72\1\73"+
    "\1\5\1\74\5\5\1\75\1\5\1\76\2\5\1\77"+
    "\1\100\11\5\1\101\1\102\2\5\2\0\1\70\1\103"+
    "\1\70\2\5\1\104\4\5\1\105\1\5\1\106\5\5"+
    "\1\107\1\5\1\110\5\5\1\111\1\112\1\113\4\5"+
    "\3\70\1\114\2\5\1\115\4\5\1\116\6\5\1\117"+
    "\1\120\6\5\1\121\1\70\1\5\1\122\1\123\1\5"+
    "\1\124\1\0\1\5\1\125\3\5\1\126\1\127\4\5"+
    "\1\130\1\5\1\131\2\5\2\0\1\132\2\5\1\133"+
    "\1\134\1\135\1\136\3\5\1\137\2\0\1\5\1\140"+
    "\2\5\1\141\2\0\1\5\1\142\1\143\2\0\1\5"+
    "\2\0\1\144\4\0\1\145\1\0\1\146";

  private static int [] zzUnpackAction() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\150\0\150\0\234\0\320\0\u0104"+
    "\0\150\0\u0138\0\u016c\0\u01a0\0\150\0\150\0\u01d4\0\u0208"+
    "\0\u023c\0\150\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374"+
    "\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514"+
    "\0\u0548\0\150\0\150\0\150\0\150\0\150\0\150\0\150"+
    "\0\u057c\0\150\0\u05b0\0\150\0\u05e4\0\u0618\0\u064c\0\u0680"+
    "\0\u0104\0\u06b4\0\150\0\u06e8\0\u071c\0\u0750\0\150\0\150"+
    "\0\150\0\150\0\150\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854"+
    "\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\234\0\u09c0"+
    "\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60"+
    "\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\234\0\u0c64\0\u0c98\0\u0ccc"+
    "\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c"+
    "\0\u0ea0\0\u0ed4\0\u0f08\0\150\0\150\0\150\0\150\0\150"+
    "\0\150\0\u0750\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040"+
    "\0\u1074\0\u10a8\0\150\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac"+
    "\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c"+
    "\0\234\0\u1380\0\u13b4\0\u13e8\0\u141c\0\234\0\u1450\0\u1484"+
    "\0\u14b8\0\u14ec\0\u1520\0\234\0\u1554\0\u1588\0\u15bc\0\u15f0"+
    "\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790"+
    "\0\u17c4\0\u17f8\0\234\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc"+
    "\0\234\0\u1930\0\u1964\0\u1998\0\u19cc\0\234\0\u1a00\0\u1a34"+
    "\0\u1a68\0\u1a9c\0\u1ad0\0\234\0\234\0\234\0\234\0\u1b04"+
    "\0\u1b38\0\u1b6c\0\234\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70"+
    "\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10"+
    "\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\234"+
    "\0\u1fb0\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c"+
    "\0\u2150\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc"+
    "\0\234\0\u22f0\0\234\0\234\0\u2324\0\234\0\u2358\0\u238c"+
    "\0\u23c0\0\u23f4\0\u2428\0\234\0\u245c\0\234\0\u2490\0\u24c4"+
    "\0\234\0\234\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc"+
    "\0\u2630\0\u2664\0\u2698\0\234\0\234\0\u26cc\0\u2700\0\u2734"+
    "\0\u2768\0\u279c\0\u204c\0\u27d0\0\u2804\0\u2838\0\234\0\u286c"+
    "\0\u28a0\0\u28d4\0\u2908\0\234\0\u293c\0\234\0\u2970\0\u29a4"+
    "\0\u29d8\0\u2a0c\0\u2a40\0\234\0\u2a74\0\234\0\u2aa8\0\u2adc"+
    "\0\u2b10\0\u2b44\0\u2b78\0\234\0\234\0\234\0\u2bac\0\u2be0"+
    "\0\u2c14\0\u2c48\0\150\0\u2c7c\0\u2cb0\0\u204c\0\u2ce4\0\u2d18"+
    "\0\234\0\u2d4c\0\u2d80\0\u2db4\0\u2de8\0\u2e1c\0\u2e50\0\u2e84"+
    "\0\u2eb8\0\u2eec\0\u2f20\0\u2f54\0\234\0\234\0\u2f88\0\u2fbc"+
    "\0\u2ff0\0\u3024\0\u3058\0\u308c\0\u204c\0\u30c0\0\u30f4\0\234"+
    "\0\234\0\u3128\0\234\0\u315c\0\u3190\0\234\0\u31c4\0\u31f8"+
    "\0\u322c\0\234\0\234\0\u3260\0\u3294\0\u32c8\0\u32fc\0\234"+
    "\0\u3330\0\u204c\0\u3364\0\u3398\0\u33cc\0\u3400\0\234\0\u3434"+
    "\0\u3468\0\234\0\234\0\234\0\234\0\u349c\0\u34d0\0\u3504"+
    "\0\234\0\u3538\0\u356c\0\u35a0\0\234\0\u35d4\0\u3608\0\234"+
    "\0\u363c\0\u3670\0\u36a4\0\234\0\234\0\u36d8\0\u370c\0\u3740"+
    "\0\u3774\0\u37a8\0\234\0\u37dc\0\u3810\0\u3844\0\u3878\0\150"+
    "\0\u38ac\0\150";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\20\3\1\4\43\3\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\6\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\5\1\23\1\24\1\25\1\6"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\2\6\1\37\1\40\2\6\1\41\2\6\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\65\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\26\6\15\0\2\57\1\60\1\0"+
    "\60\57\2\61\1\62\1\61\1\63\57\61\6\0\1\12"+
    "\1\64\2\65\60\0\1\66\3\0\1\67\1\70\2\0"+
    "\1\71\1\72\41\0\1\73\3\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\4\6\1\74\1\6\1\75\1\76"+
    "\6\6\1\77\6\6\1\100\22\0\1\11\73\0\1\20"+
    "\64\0\1\101\1\102\45\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\1\6\1\103\1\6\1\104\22\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\4\6\1\105"+
    "\4\6\1\106\11\6\1\107\2\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\1\6\1\110\1\6\1\111"+
    "\14\6\1\112\1\113\4\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\12\6\1\114\13\6\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\6\6\1\115\3\6"+
    "\1\116\13\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\12\6\1\117\13\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\4\6\1\120\1\6\1\121\17\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\2\6"+
    "\1\122\23\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\12\6\1\123\13\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\17\6\1\124\1\125\3\6\1\126"+
    "\1\6\16\0\1\6\4\0\1\6\1\0\1\127\1\6"+
    "\7\0\1\6\1\130\24\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\6\6\1\131\11\6\1\132\5\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\7\6"+
    "\1\133\10\6\1\134\3\6\1\135\1\6\16\0\1\6"+
    "\4\0\1\6\1\0\1\136\1\6\7\0\26\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\1\6\1\137"+
    "\4\6\1\140\1\141\2\6\1\142\11\6\1\143\1\6"+
    "\75\0\1\144\63\0\1\145\63\0\1\146\2\0\1\147"+
    "\60\0\1\150\3\0\2\57\1\60\1\151\65\57\1\0"+
    "\56\57\5\61\1\0\56\61\6\0\1\64\1\0\2\65"+
    "\60\0\1\66\3\0\2\152\56\0\1\66\56\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\5\6\1\153\5\6"+
    "\1\154\10\6\1\155\1\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\10\6\1\156\15\6\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\5\6\1\157\20\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\2\6"+
    "\1\160\14\6\1\161\6\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\24\6\1\162\1\6\15\0\5\101"+
    "\1\163\6\101\1\164\47\101\17\102\1\165\44\102\1\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\2\6\1\166"+
    "\23\6\16\0\1\6\4\0\1\6\1\0\1\167\1\6"+
    "\7\0\1\6\1\170\24\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\1\6\1\171\2\6\1\172\12\6"+
    "\1\173\6\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\17\6\1\174\6\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\11\6\1\175\14\6\16\0\1\6"+
    "\4\0\1\6\1\0\1\176\1\6\7\0\26\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\24\6\1\177"+
    "\1\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\17\6\1\200\6\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\2\6\1\201\23\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\7\6\1\202\16\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\4\6\1\203"+
    "\21\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\12\6\1\204\13\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\4\6\1\205\6\6\1\206\12\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\22\6\1\207"+
    "\3\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\20\6\1\210\5\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\13\6\1\211\12\6\16\0\1\6\4\0"+
    "\1\6\1\0\1\212\1\6\7\0\26\6\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\2\6\1\213\23\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\20\6"+
    "\1\214\5\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\10\6\1\215\15\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\12\6\1\216\13\6\16\0\1\6"+
    "\4\0\1\6\1\0\1\217\1\6\7\0\26\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\5\6\1\220"+
    "\12\6\1\221\5\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\12\6\1\222\13\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\14\6\1\223\11\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\2\6\1\224"+
    "\2\6\1\225\5\6\1\226\3\6\1\227\6\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\4\6\1\230"+
    "\21\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\12\6\1\231\13\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\6\6\1\232\17\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\20\6\1\233\5\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\4\6\1\234"+
    "\21\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\7\6\1\235\16\6\16\0\1\6\3\0\1\236\1\6"+
    "\1\0\2\6\2\0\2\236\3\0\26\6\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\11\6\1\237\14\6"+
    "\16\0\1\6\4\0\1\6\1\0\1\240\1\6\7\0"+
    "\26\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\3\6\1\241\22\6\16\0\1\6\4\0\1\6\1\0"+
    "\1\242\1\6\7\0\26\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\7\6\1\243\16\6\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\7\6\1\244\16\6"+
    "\22\0\1\163\56\0\16\102\1\163\1\165\44\102\1\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\3\6\1\245"+
    "\22\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\4\6\1\246\21\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\6\6\1\247\17\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\2\6\1\250\23\6\16\0"+
    "\1\6\4\0\1\6\1\0\1\251\1\6\7\0\26\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\24\6"+
    "\1\252\1\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\12\6\1\253\13\6\16\0\1\6\4\0\1\6"+
    "\1\0\1\254\1\6\7\0\26\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\4\6\1\255\21\6\16\0"+
    "\1\6\4\0\1\6\1\0\1\256\1\6\7\0\26\6"+
    "\16\0\1\6\4\0\1\6\1\0\1\257\1\6\7\0"+
    "\26\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\10\6\1\260\15\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\4\6\1\261\3\6\1\262\15\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\17\6\1\263"+
    "\6\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\12\6\1\264\13\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\12\6\1\265\13\6\16\0\1\6\4\0"+
    "\1\6\1\0\1\266\1\6\7\0\26\6\16\0\1\6"+
    "\4\0\1\6\1\0\1\267\1\6\7\0\26\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\20\6\1\270"+
    "\5\6\16\0\1\6\4\0\1\6\1\0\1\271\1\6"+
    "\7\0\17\6\1\272\6\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\5\6\1\273\20\6\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\5\6\1\274\20\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\7\6"+
    "\1\275\16\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\15\6\1\276\10\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\2\6\1\277\4\6\1\300\16\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\2\6"+
    "\1\301\23\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\6\6\1\302\17\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\24\6\1\303\1\6\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\12\6\1\304\13\6"+
    "\16\0\1\6\4\0\1\6\1\0\1\305\1\6\7\0"+
    "\26\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\6\6\1\306\17\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\7\6\1\307\16\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\1\310\25\6\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\10\6\1\311\15\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\5\6"+
    "\1\312\20\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\17\6\1\313\6\6\16\0\1\314\1\0\1\315"+
    "\1\0\1\236\2\0\2\314\2\0\2\236\3\0\1\316"+
    "\1\317\21\314\1\320\2\314\16\0\1\6\4\0\1\6"+
    "\1\0\1\321\1\6\7\0\26\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\1\322\1\323\24\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\4\6\1\324"+
    "\13\6\1\325\5\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\4\6\1\326\21\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\2\6\1\327\23\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\1\6\1\330"+
    "\24\6\16\0\1\6\4\0\1\6\1\0\1\331\1\6"+
    "\7\0\26\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\1\6\1\332\24\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\20\6\1\333\5\6\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\2\6\1\334\23\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\20\6"+
    "\1\335\5\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\10\6\1\336\15\6\16\0\1\6\4\0\1\6"+
    "\1\0\1\337\1\6\7\0\26\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\2\6\1\340\23\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\2\6\1\341"+
    "\23\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\20\6\1\342\5\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\7\6\1\343\16\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\6\6\1\344\17\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\7\6\1\345"+
    "\16\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\20\6\1\346\5\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\24\6\1\347\1\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\20\6\1\350\5\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\15\6\1\351"+
    "\10\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\15\6\1\352\10\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\7\6\1\353\16\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\1\6\1\354\24\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\11\6\1\355"+
    "\14\6\16\0\1\6\4\0\1\6\1\0\1\356\1\6"+
    "\7\0\26\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\1\6\1\357\24\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\20\6\1\360\5\6\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\20\6\1\361\5\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\5\6"+
    "\1\362\20\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\7\6\1\363\16\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\6\6\1\364\17\6\16\0\1\6"+
    "\4\0\1\6\1\0\1\365\1\6\7\0\26\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\2\6\1\366"+
    "\23\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\10\6\1\367\15\6\16\0\1\314\4\0\1\314\1\0"+
    "\2\314\7\0\26\314\15\0\2\370\1\371\1\0\60\370"+
    "\1\0\1\314\4\0\1\314\1\0\2\314\7\0\3\314"+
    "\1\372\22\314\16\0\1\314\4\0\1\314\1\0\2\314"+
    "\7\0\23\314\1\373\2\314\16\0\1\314\4\0\1\314"+
    "\1\0\2\314\7\0\12\314\1\374\13\314\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\20\6\1\375\5\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\3\6"+
    "\1\376\22\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\23\6\1\377\2\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\13\6\1\u0100\12\6\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\4\6\1\u0101\21\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\13\6"+
    "\1\u0102\12\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\1\6\1\u0103\24\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\4\6\1\u0104\21\6\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\7\6\1\u0105\16\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\2\6"+
    "\1\u0106\23\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\5\6\1\u0107\20\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\7\6\1\u0108\10\6\1\u0109\5\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\7\6"+
    "\1\u010a\16\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\1\6\1\u010b\24\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\11\6\1\u010c\14\6\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\2\6\1\u010d\23\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\2\6"+
    "\1\u010e\23\6\16\0\1\6\4\0\1\6\1\0\1\u010f"+
    "\1\6\7\0\26\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\22\6\1\u0110\3\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\7\6\1\u0111\16\6\16\0"+
    "\1\6\4\0\1\6\1\0\1\u0112\1\6\7\0\26\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\5\6"+
    "\1\u0113\20\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\5\6\1\u0114\20\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\4\6\1\u0115\21\6\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\13\6\1\u0116\12\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\6\6"+
    "\1\u0117\17\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\5\6\1\u0118\20\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\1\6\1\u0119\24\6\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\24\6\1\u011a\1\6"+
    "\15\0\2\370\1\371\1\u011b\65\370\1\0\56\370\1\0"+
    "\1\314\4\0\1\314\1\0\1\u011c\1\314\7\0\1\314"+
    "\1\u011d\24\314\16\0\1\314\4\0\1\314\1\0\2\314"+
    "\7\0\20\314\1\u011e\5\314\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\7\6\1\u011f\16\6\16\0\1\6"+
    "\4\0\1\6\1\0\1\u0120\1\6\7\0\26\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\10\6\1\u0121"+
    "\15\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\7\6\1\u0122\16\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\7\6\1\u0123\16\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\12\6\1\u0124\13\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\6\6\1\u0125"+
    "\17\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\2\6\1\u0126\23\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\4\6\1\u0127\21\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\7\6\1\u0128\16\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\2\6\1\u0129"+
    "\23\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\2\6\1\u012a\23\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\12\6\1\u012b\13\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\2\6\1\u012c\23\6\16\0"+
    "\1\6\4\0\1\6\1\0\1\u012d\1\6\7\0\26\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\6\6"+
    "\1\u012e\17\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\2\6\1\u012f\23\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\2\6\1\u0130\23\6\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\7\6\1\u0131\16\6"+
    "\16\0\1\6\4\0\1\6\1\0\1\u0132\1\6\7\0"+
    "\26\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\12\6\1\u0133\13\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\6\6\1\u0134\17\6\16\0\1\314\4\0"+
    "\1\314\1\0\2\314\7\0\4\314\1\u0135\21\314\16\0"+
    "\1\314\4\0\1\314\1\0\2\314\7\0\6\314\1\u0136"+
    "\17\314\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\2\6\1\u0137\23\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\4\6\1\u0138\21\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\6\6\1\u0139\17\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\14\6\1\u013a"+
    "\11\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\4\6\1\u013b\21\6\16\0\1\6\3\0\1\u013c\1\6"+
    "\1\0\2\6\2\0\2\u013c\3\0\26\6\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\12\6\1\u013d\13\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\2\6"+
    "\1\u013e\23\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\1\6\1\u013f\24\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\1\6\1\u0140\24\6\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\3\6\1\u0141\22\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\20\6"+
    "\1\u0142\5\6\16\0\1\6\4\0\1\6\1\0\1\u0143"+
    "\1\6\7\0\26\6\16\0\1\6\4\0\1\6\1\0"+
    "\1\u0144\1\6\7\0\26\6\16\0\1\6\4\0\1\6"+
    "\1\0\1\u0145\1\6\7\0\26\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\20\6\1\u0146\5\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\7\6\1\u0147"+
    "\16\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\4\6\1\u0148\21\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\7\6\1\u0149\16\6\16\0\1\314\4\0"+
    "\1\314\1\0\1\u014a\1\314\7\0\26\314\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\1\6\1\u014b\24\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\6\6"+
    "\1\u014c\17\6\22\0\1\u013c\2\0\1\u014d\3\0\2\u013c"+
    "\12\0\1\u014e\34\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\20\6\1\u014f\5\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\4\6\1\u0150\21\6\16\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\12\6\1\u0151\13\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\11\6"+
    "\1\u0152\14\6\16\0\1\6\4\0\1\6\1\0\2\6"+
    "\7\0\20\6\1\u0153\5\6\16\0\1\6\4\0\1\6"+
    "\1\0\2\6\7\0\13\6\1\u0154\12\6\16\0\1\6"+
    "\4\0\1\6\1\0\1\u0155\1\6\7\0\26\6\16\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\14\6\1\u0156"+
    "\11\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\2\6\1\u0157\23\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\12\6\1\u0158\13\6\16\0\1\6\4\0"+
    "\1\6\1\0\1\u0159\1\6\7\0\26\6\63\0\1\u015a"+
    "\44\0\1\u015b\35\0\1\6\4\0\1\6\1\0\1\u015c"+
    "\1\6\7\0\26\6\16\0\1\6\4\0\1\6\1\0"+
    "\2\6\7\0\4\6\1\u015d\21\6\16\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\6\6\1\u015e\17\6\16\0"+
    "\1\6\4\0\1\6\1\0\1\u015f\1\6\7\0\26\6"+
    "\16\0\1\6\4\0\1\6\1\0\2\6\7\0\4\6"+
    "\1\u0160\21\6\62\0\1\u0161\61\0\1\u0162\21\0\1\6"+
    "\4\0\1\6\1\0\2\6\7\0\13\6\1\u0163\12\6"+
    "\16\0\1\6\4\0\1\6\1\0\1\u0164\1\6\7\0"+
    "\26\6\16\0\1\6\4\0\1\6\1\0\2\6\7\0"+
    "\13\6\1\u0165\12\6\45\0\1\u0166\66\0\1\u0167\31\0"+
    "\1\6\4\0\1\6\1\0\2\6\7\0\14\6\1\u0168"+
    "\11\6\40\0\1\u0169\101\0\1\u016a\23\0\1\6\4\0"+
    "\1\6\1\0\2\6\7\0\21\6\1\u016b\4\6\37\0"+
    "\1\u016c\63\0\1\u016d\74\0\1\u016e\53\0\1\u016f\65\0"+
    "\1\u0170\62\0\1\u0171\71\0\1\u0172\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\3\11\3\1\1\11\3\1\2\11\3\1"+
    "\1\11\17\1\7\11\1\1\1\11\1\1\1\11\2\1"+
    "\4\0\1\11\1\1\1\0\1\1\5\11\6\1\1\0"+
    "\41\1\6\11\1\0\10\1\1\11\1\1\1\0\50\1"+
    "\1\0\56\1\1\0\52\1\2\0\41\1\1\11\40\1"+
    "\1\0\20\1\2\0\13\1\2\0\5\1\2\0\3\1"+
    "\2\0\1\1\2\0\1\1\4\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[370];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * Subclass of Symbol that carries extra information. 
     * Used to give error reporting class for parser access to offset & length 
     * of tokens. Start, end, offset and length are extracted from scanner variables
     * in constructors.
     */
    public class Symbol extends AbstractAdjustableSymbol {
    
        private int offset;
        private int length;
        
        public Symbol(short id) {
            this(id, yytext());
        }
        
        public Symbol(short id, Object value) {
            super(id, yyline + 1, yycolumn + 1, yylength(), value);
            offset = yychar;
            length = yylength();
        }
        
        public Symbol(short id, Object value, int lineOffset, int endColumn) {
            super(id, makePosition(yyline + 1,  yycolumn + 1), makePosition(yyline + 1 + lineOffset, endColumn), value);
            offset = yychar;
            length = yylength();
        }
        
        public int getOffset() {
            return offset;
        }
        
        public int getEndOffset() {
            return offset + length - 1;
        }
        
        public int getLength() {
            return length;
        }
    }


    /**
     * Subclass of Scanner.Exception that carries extra information. 
     * Used to give error reporting class for parser access to offset of error. 
     * Offset is extracted from scanner variables in constructors.
     */
    public class Exception extends Scanner.Exception {
        
        public final int offset;
        
        public Exception(String msg) {
            this(yyline + 1, yycolumn + 1, msg);
        }
        
        public Exception(int line, int column, String msg) {
            super(line, column, msg);
            offset = yychar;
        }
        
    }

    private Symbol newSymbol(short id) {
        return new Symbol(id);
    }

    private Symbol newSymbol(short id, Object value) {
        return new Symbol(id, value);
    }
    
    private Symbol newSymbolCountLineBreaks(short id, String value, int numLineBreaks) {
        if (numLineBreaks > 0) {
            int endColumn = value.length() - value.lastIndexOf('\n');
            return new Symbol(id, value, numLineBreaks, endColumn);
        }
        return new Symbol(id, value);
    }
    
    public void reset(java.io.Reader reader) {
        yyreset(reader);
        resetFormatting();
    }

    protected int matchLine()     { return yyline; }
    protected int matchColumn() { return yycolumn; }
    protected int matchOffset() { return yychar; }
    protected int matchLength() { return yylength(); }
    
    public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
        Symbol res = null;
        while (res == null)
            res = nextTokenInner();
        return res;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ModelicaScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ModelicaScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextTokenInner() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 41: 
          { return newSymbol(Terminals.GEQ);
          }
        case 103: break;
        case 63: 
          { return newSymbol(Terminals.BLOCK);
          }
        case 104: break;
        case 14: 
          { return newSymbol(Terminals.LPAREN);
          }
        case 105: break;
        case 49: 
          { return newSymbol(Terminals.WHEN);
          }
        case 106: break;
        case 42: 
          { return newSymbol(Terminals.END);
          }
        case 107: break;
        case 76: 
          { String s = yytext();
                                addWhiteSpaces(s);
                                addLineBreaks(s); 
                                return newSymbol(Terminals.END_FOR);
          }
        case 108: break;
        case 62: 
          { return newSymbol(Terminals.OUTER);
          }
        case 109: break;
        case 10: 
          { return newSymbol(Terminals.MINUS);
          }
        case 110: break;
        case 86: 
          { return newSymbol(Terminals.OPERATOR);
          }
        case 111: break;
        case 72: 
          { return newSymbol(Terminals.OUTPUT);
          }
        case 112: break;
        case 68: 
          { return newSymbol(Terminals.ELSEIF);
          }
        case 113: break;
        case 59: 
          { return newSymbol(Terminals.INPUT);
          }
        case 114: break;
        case 39: 
          { return newSymbol(Terminals.LEQ);
          }
        case 115: break;
        case 58: 
          { return newSymbol(Terminals.INNER);
          }
        case 116: break;
        case 94: 
          { return newSymbol(Terminals.REDECLARE);
          }
        case 117: break;
        case 47: 
          { return newSymbol(Terminals.ELSE);
          }
        case 118: break;
        case 97: 
          { return newSymbol(Terminals.ENUMERATION);
          }
        case 119: break;
        case 28: 
          { return newSymbol(Terminals.DOTPLUS);
          }
        case 120: break;
        case 3: 
          { yybegin(NORMAL);
          }
        case 121: break;
        case 19: 
          { return newSymbol(Terminals.RBRACK);
          }
        case 122: break;
        case 67: 
          { String s = yytext();
                                addWhiteSpaces(s);
                                addLineBreaks(s); 
                                return newSymbol(Terminals.END_IF);
          }
        case 123: break;
        case 21: 
          { return newSymbol(Terminals.COLON);
          }
        case 124: break;
        case 70: 
          { return newSymbol(Terminals.IMPORT);
          }
        case 125: break;
        case 78: 
          { return newSymbol(Terminals.CONNECT);
          }
        case 126: break;
        case 7: 
          { return newSymbol(Terminals.UNSIGNED_INTEGER, yytext());
          }
        case 127: break;
        case 29: 
          { return newSymbol(Terminals.DOTMINUS);
          }
        case 128: break;
        case 54: 
          { return newSymbol(Terminals.LOOP);
          }
        case 129: break;
        case 77: 
          { return newSymbol(Terminals.EXTENDS);
          }
        case 130: break;
        case 87: 
          { return newSymbol(Terminals.DISCRETE);
          }
        case 131: break;
        case 75: 
          { return newSymbol(Terminals.RECORD);
          }
        case 132: break;
        case 57: 
          { return newSymbol(Terminals.WHILE);
          }
        case 133: break;
        case 101: 
          { addWhiteSpaces(yytext()); 
                                        addLineBreaks(yytext()); 
                                        return newSymbol(Terminals.INITIAL_EQUATION);
          }
        case 134: break;
        case 22: 
          { return newSymbol(Terminals.COMMA);
          }
        case 135: break;
        case 81: 
          { String s = yytext();
                                addWhiteSpaces(s);
                                addLineBreaks(s); 
                                return newSymbol(Terminals.END_WHEN);
          }
        case 136: break;
        case 17: 
          { return newSymbol(Terminals.RBRACE);
          }
        case 137: break;
        case 27: 
          { String s = yytext();
              int numLineBreaks = addLineBreaks(s);
              s = s.substring(1,s.length()-1);
              return newSymbolCountLineBreaks(Terminals.STRING, s, numLineBreaks);
          }
        case 138: break;
        case 18: 
          { return newSymbol(Terminals.LBRACK);
          }
        case 139: break;
        case 82: 
          { return newSymbol(Terminals.ELSEWHEN);
          }
        case 140: break;
        case 33: 
          { int numberOfLineBreaks = addLineBreaks(yytext());
                             if (yytext().charAt(1) == '/') {
                                 numberOfLineBreaks = 0;
                             }
                             addFormattingInformation(FormattingType.COMMENT, yytext(), numberOfLineBreaks); 
                             return null;
          }
        case 141: break;
        case 1: 
          { return newSymbol(Terminals.UNSIGNED_NUMBER, yytext());
          }
        case 142: break;
        case 96: 
          { return newSymbol(Terminals.ANNOTATION);
          }
        case 143: break;
        case 52: 
          { return newSymbol(Terminals.TRUE);
          }
        case 144: break;
        case 69: 
          { return newSymbol(Terminals.WITHIN);
          }
        case 145: break;
        case 100: 
          { return newSymbol(Terminals.CONSTRAINEDBY);
          }
        case 146: break;
        case 24: 
          { return newSymbol(Terminals.POW);
          }
        case 147: break;
        case 80: 
          { return newSymbol(Terminals.PARTIAL);
          }
        case 148: break;
        case 46: 
          { return newSymbol(Terminals.FOR);
          }
        case 149: break;
        case 56: 
          { String s = yytext();
                                addWhiteSpaces(s);
                                addLineBreaks(s); 
                                return newSymbol(Terminals.END_ID, s);
          }
        case 150: break;
        case 9: 
          { return newSymbol(Terminals.PLUS);
          }
        case 151: break;
        case 83: 
          { return newSymbol(Terminals.EXTERNAL);
          }
        case 152: break;
        case 74: 
          { return newSymbol(Terminals.RETURN);
          }
        case 153: break;
        case 26: 
          { return newSymbol(Terminals.GT);
          }
        case 154: break;
        case 12: 
          { return newSymbol(Terminals.DIV);
          }
        case 155: break;
        case 38: 
          { return newSymbol(Terminals.EQ);
          }
        case 156: break;
        case 16: 
          { return newSymbol(Terminals.LBRACE);
          }
        case 157: break;
        case 71: 
          { return newSymbol(Terminals.STREAM);
          }
        case 158: break;
        case 90: 
          { return newSymbol(Terminals.CONNECTOR);
          }
        case 159: break;
        case 45: 
          { return newSymbol(Terminals.DER);
          }
        case 160: break;
        case 79: 
          { return newSymbol(Terminals.PACKAGE);
          }
        case 161: break;
        case 51: 
          { return newSymbol(Terminals.THEN);
          }
        case 162: break;
        case 6: 
          { addLineBreak();
                             addFormattingInformation(FormattingType.LINE_BREAK, yytext()); 
                             return null;
          }
        case 163: break;
        case 55: 
          { return newSymbol(Terminals.FLOW);
          }
        case 164: break;
        case 20: 
          { return newSymbol(Terminals.SEMICOLON);
          }
        case 165: break;
        case 25: 
          { return newSymbol(Terminals.LT);
          }
        case 166: break;
        case 73: 
          { return newSymbol(Terminals.PUBLIC);
          }
        case 167: break;
        case 48: 
          { return newSymbol(Terminals.EACH);
          }
        case 168: break;
        case 89: 
          { String s = yytext();
                                addWhiteSpaces(s);
                                addLineBreaks(s); 
                                return newSymbol(Terminals.END_WHILE);
          }
        case 169: break;
        case 88: 
          { return newSymbol(Terminals.FUNCTION);
          }
        case 170: break;
        case 61: 
          { return newSymbol(Terminals.MODEL);
          }
        case 171: break;
        case 92: 
          { return newSymbol(Terminals.PARAMETER);
          }
        case 172: break;
        case 31: 
          { return newSymbol(Terminals.DOTMULT);
          }
        case 173: break;
        case 60: 
          { return newSymbol(Terminals.CLASS);
          }
        case 174: break;
        case 40: 
          { return newSymbol(Terminals.NEQ);
          }
        case 175: break;
        case 93: 
          { return newSymbol(Terminals.PROTECTED);
          }
        case 176: break;
        case 85: 
          { return newSymbol(Terminals.CONSTANT);
          }
        case 177: break;
        case 32: 
          { return newSymbol(Terminals.DOTPOW);
          }
        case 178: break;
        case 34: 
          { return newSymbol(Terminals.IN);
          }
        case 179: break;
        case 8: 
          { return newSymbol(Terminals.DOT);
          }
        case 180: break;
        case 2: 
          { yypushback(1); yybegin(NORMAL);
          }
        case 181: break;
        case 36: 
          { return newSymbol(Terminals.OR);
          }
        case 182: break;
        case 98: 
          { return newSymbol(Terminals.REPLACEABLE);
          }
        case 183: break;
        case 64: 
          { return newSymbol(Terminals.BREAK);
          }
        case 184: break;
        case 44: 
          { return newSymbol(Terminals.AND);
          }
        case 185: break;
        case 15: 
          { return newSymbol(Terminals.RPAREN);
          }
        case 186: break;
        case 66: 
          { return newSymbol(Terminals.FALSE);
          }
        case 187: break;
        case 30: 
          { return newSymbol(Terminals.DOTDIV);
          }
        case 188: break;
        case 5: 
          { String s = yytext();
              int numLineBreaks = addLineBreaks(s);
              return newSymbolCountLineBreaks(Terminals.ID, s, numLineBreaks);
          }
        case 189: break;
        case 37: 
          { return newSymbol(Terminals.ASSIGN);
          }
        case 190: break;
        case 50: 
          { return newSymbol(Terminals.TIME);
          }
        case 191: break;
        case 43: 
          { return newSymbol(Terminals.NOT);
          }
        case 192: break;
        case 99: 
          { return newSymbol(Terminals.ENCAPSULATED);
          }
        case 193: break;
        case 11: 
          { addFormattingInformation(FormattingType.NON_BREAKING_WHITESPACE, yytext()); 
                             return null;
          }
        case 194: break;
        case 4: 
          { throw new Exception("Character '" + yytext() + "' is not legal in this context");
          }
        case 195: break;
        case 23: 
          { return newSymbol(Terminals.EQUALS);
          }
        case 196: break;
        case 53: 
          { return newSymbol(Terminals.TYPE);
          }
        case 197: break;
        case 84: 
          { return newSymbol(Terminals.EQUATION);
          }
        case 198: break;
        case 102: 
          { addWhiteSpaces(yytext());
                                        addLineBreaks(yytext()); 
                                        return newSymbol(Terminals.INITIAL_ALGORITHM);
          }
        case 199: break;
        case 95: 
          { return newSymbol(Terminals.EXPANDABLE);
          }
        case 200: break;
        case 91: 
          { return newSymbol(Terminals.ALGORITHM);
          }
        case 201: break;
        case 35: 
          { return newSymbol(Terminals.IF);
          }
        case 202: break;
        case 13: 
          { return newSymbol(Terminals.MULT);
          }
        case 203: break;
        case 65: 
          { return newSymbol(Terminals.FINAL);
          }
        case 204: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return newSymbol(Terminals.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
