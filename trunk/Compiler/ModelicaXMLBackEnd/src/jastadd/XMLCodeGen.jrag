import java.io.PrintStream;

/*
Copyright (C) 2009 Modelon AB

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect XMLCodeGen {
	
	class XMLPrettyPrinter extends Printer {
 		public void toString(ASTNode node, PrintStream str, String indent, Object o) { 
 			node.prettyPrint_XML(this, str, indent, o); 
 		}
	}
	
	public String ASTNode.prettyPrint_XML(String indent) {
		StringOutputStream os = new StringOutputStream();
		PrintStream str = new PrintStream(os);
		prettyPrint_XML(str,indent,null);
		return os.toString();
	}

	public String ASTNode.prettyPrint_XML(String indent,Object o) {
		StringOutputStream os = new StringOutputStream();	
		PrintStream str = new PrintStream(os);
		prettyPrint_XML(str,indent,o);
		return os.toString();
	}

	
	public void ASTNode.prettyPrint_XML(PrintStream str,String indent) {
 		prettyPrint_XML(new XMLPrettyPrinter(),str,indent,null);
	}

	public void ASTNode.prettyPrint_XML(PrintStream str,String indent, Object o) {
 		prettyPrint_XML(new XMLPrettyPrinter(),str,indent,o);
	}
	
	public void ASTNode.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o) {
		prettyPrint(p,str,indent,o);
		/*for(int i = 0; i < getNumChild(); i++)
   			p.toString(getChild(i),str,indent,o); // distpatch through Printer
	    */
	}
	
	//PrettyPrint of equation in residual form: expression1-expression2 = 0
	public void FEquation.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		ASTNode left = getLeft();
		ASTNode right = getRight();
		String eqXMLtag = this.xmlTag();
		FSubExp fsubexp = new FSubExp();
		String subXMLtag = fsubexp.xmlTag();
		String eqNamespace = "equ";
		String expNamespace = "exp";
		
		str.println(indent+"<" +eqNamespace+ ":" + eqXMLtag + ">");
		str.println(indent+"\t<" + expNamespace + ":" + subXMLtag + ">");
		left.prettyPrint_XML(str,indent+"\t\t");
		right.prettyPrint_XML(str,indent+"\t\t");
		str.println(indent+"\t</" + expNamespace + ":" + subXMLtag + ">");
		str.println(indent+"</" +eqNamespace+ ":" + eqXMLtag + ">");
	}

	
	public void FLitExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace ="exp";
		String tag = this.xmlTag();
		
		if (tag.equals("FBooleanLitExpTrue") || tag.equals("FBooleanLitExpFalse") )
			tag="FBooleanLitExp";
			
		str.print(indent + "<" + namespace + ":" + tag + ">");
		prettyPrint(p,str,"",o);
		str.println("</"+ namespace + ":" + tag + ">");
		
	}
	
	public void FArtmBinExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace = "exp";
		String tag = this.xmlTag();		
		ASTNode left = getLeft();
		ASTNode right= getRight();
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		left.prettyPrint_XML(str,indent+"\t");
		right.prettyPrint_XML(str,indent+"\t");
		str.println(indent + "</"+ namespace + ":" + tag + ">");	
	}
	
	
	public void FLogBinExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace = "exp";
		String tag = this.xmlTag();
		ASTNode left = getLeft();
		ASTNode right= getRight();
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		left.prettyPrint_XML(str,indent+"\t");
		right.prettyPrint_XML(str,indent+"\t");
		str.println(indent + "</"+ namespace + ":" + tag + ">");	
	}
	
	
	public void FUnaryExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace="exp";
		String tag = this.xmlTag();
		ASTNode child = getChild(this,0);	
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		child.prettyPrint_XML(str,indent+"\t");
		str.println(indent + "</"+ namespace + ":" + tag + ">");
	}
	
	
	public void FMathematicalFunctionCall.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace ="exp";
		String tag = this.xmlTag();
		ASTNode child = getChild(this,0);
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		child.prettyPrint_XML(str,indent+"\t");
		str.println(indent + "</"+ namespace + ":" + tag + ">");
	}
	
	
	//TODO: test ************************************************
	public void FAtan2Exp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace="exp";
		String tag= this.xmlTag();
		ASTNode x_arg = getChild(this,0);
		ASTNode y_arg= getChild(this,1);
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		x_arg.prettyPrint_XML(str,indent+"\t");
		y_arg.prettyPrint_XML(str,indent+"\t");
		str.println(indent + "</"+ namespace + ":" + tag + ">");
	}
	
	
	public void FDerExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		ASTNode child = getChild(this,0);	
		String namespace = "exp";
		String tag = this.xmlTag();
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		child.prettyPrint_XML(str,indent+"\t");
		str.println(indent + "</"+ namespace + ":" + tag + ">");
	}
	
	public void FIdUseExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		ASTNode child = getChild(this,0);
		ASTNode idUse = child.getChild(0);
		String namespace = "exp";
		String tag = this.xmlTag();
		
		str.print(indent + "<" + namespace + ":" + tag + ">");
		idUse.prettyPrint_XML(str,"");
		str.println("</" + namespace + ":" + tag + ">");		
	}
	
	
	public void FIdUse.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		ASTNode child = getChild(this,0);
		String namespace = "exp";
		String tag = this.xmlTag();
		
		str.print(indent + "<" + namespace + ":" + tag + ">");
		child.prettyPrint_XML(str,"");
		str.println("</" + namespace + ":" + tag + ">");
	}
}


aspect XMLTagBinding{
			
		//XML tags definition for expressions
		syn String FIdUse.xmlTag();
		//syn String FIdUseExp.xmlTag();
		syn String FExp.xmlTag();
		
		eq FIdUse.xmlTag() = "FIdUse";
		eq FIdUseExp.xmlTag() = "FIdUse";
		eq FAddExp.xmlTag() = "FAddExp";
		eq FSubExp.xmlTag() = "FSubExp";
		eq FMulExp.xmlTag() = "FMulExp";
		eq FDivExp.xmlTag() = "FDivExp";
		eq FPowExp.xmlTag() = "FPowExp";
		eq FNegExp.xmlTag() = "FNegExp";
		eq FLtExp.xmlTag() = "FLogLtExp";
		eq FLeqExp.xmlTag() = "FLogLeqExp";
		eq FGtExp.xmlTag() = "FLogGtExp";
		eq FGeqExp.xmlTag()= "FLogGeqExp";
		eq FEqExp.xmlTag()= "FLogEqExp";
		eq FNeqExp.xmlTag()= "FLogNeqExp";
		eq FNotExp.xmlTag() = "FNotExp";
		eq FOrExp.xmlTag() = "FOrExp";
		eq FAndExp.xmlTag() = "FAndExp";
		eq FIntegerLitExp.xmlTag() = "FIntegerLitExp";
		eq FRealLitExp.xmlTag() = "FRealLitExp";
		eq FBooleanLitExpFalse.xmlTag() = "FBooleanLitExp";
		eq FBooleanLitExpTrue.xmlTag() = "FBooleanLitExp";
		eq FStringLitExp.xmlTag() = "FIntegerLitExp";
		eq FDerExp.xmlTag() = "FDerExp";
		eq FSinExp.xmlTag() = "FSinExp";
		eq FCosExp.xmlTag() = "FCosExp";
		eq FTanExp.xmlTag() = "FTanExp";
		eq FAsinExp.xmlTag() = "FAsinExp";
		eq FAcosExp.xmlTag() = "FAcosExp";
		eq FAtanExp.xmlTag() = "FAtanExp";
		eq FSinhExp.xmlTag() = "FSinhExp";
		eq FCoshExp.xmlTag() = "FCoshExp";
		eq FTanhExp.xmlTag() = "FTanhExp";
		eq FExpExp.xmlTag() = "FExpExp";
		eq FLogExp.xmlTag() = "FLogExp";
		eq FLog10Exp.xmlTag() = "FLog10Exp";
		eq FSqrtExp.xmlTag() = "FSqrtExp";
		eq FAtan2Exp.xmlTag() = "FAtan2Exp";
		
		eq FExp.xmlTag() = "*** Not supported expression ***";
		eq FUnsupportedExp.xmlTag() = "*** not supported tag ***";
		
		syn String FEquation.xmlTag();
		eq FEquation.xmlTag() = "FEquation";
				
		//System.out.println("Warning: the model can cointains unsopported expressions and the generated XML document can be unvalid");
	
}