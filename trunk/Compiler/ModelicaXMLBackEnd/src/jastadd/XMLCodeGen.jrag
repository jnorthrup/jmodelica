//import java.awt.List;
//import java.util.List;
//import java.util.ArrayList;
import java.io.PrintStream;
import java.io.ByteArrayOutputStream;

/*
Copyright (C) 2009 Modelon AB

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect XMLCodeGen {
	
	class XMLPrettyPrinter extends Printer {
		public XMLPrettyPrinter() {
			super("\t");
		}
		
 		public void toString(ASTNode node, PrintStream str, String indent, Object o) { 
 			node.prettyPrint_XML(this, str, indent, o); 
 		}
	}
	
	public String ASTNode.prettyPrint_XML(String indent) {
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		PrintStream str = new PrintStream(os);
		prettyPrint_XML(str,indent,null);
		return os.toString();
	}

	public String ASTNode.prettyPrint_XML(String indent,Object o) {
		ByteArrayOutputStream os = new ByteArrayOutputStream();	
		PrintStream str = new PrintStream(os);
		prettyPrint_XML(str,indent,o);
		return os.toString();
	}

	
	public void ASTNode.prettyPrint_XML(PrintStream str,String indent) {
 		prettyPrint_XML(new XMLPrettyPrinter(),str,indent,null);
	}

	public void ASTNode.prettyPrint_XML(PrintStream str,String indent, Object o) {
 		prettyPrint_XML(new XMLPrettyPrinter(),str,indent,o);
	}
	
	public void ASTNode.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o) {
		prettyPrint(p,str,indent,o);
		/*for(int i = 0; i < getNumChild(); i++)
   			p.toString(getChild(i),str,indent,o); // distpatch through Printer
	    */
	}
	
	//------------------------ Expressions -------------------------
	public void FLitExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace ="exp";
		String tag = this.xmlTag();
		
		if (tag.equals("FBooleanLitExpTrue") || tag.equals("FBooleanLitExpFalse") )
			tag="FBooleanLitExp";
			
		str.print(indent + "<" + namespace + ":" + tag + ">");
		prettyPrint(p,str,"",o);
		str.println("</"+ namespace + ":" + tag + ">");
		
	}
	
	public void FArtmBinExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace = "exp";
		String tag = this.xmlTag();		
		ASTNode left = getLeft();
		ASTNode right= getRight();
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		left.prettyPrint_XML(str,p.indent(indent));
		right.prettyPrint_XML(str,p.indent(indent));
		str.println(indent + "</"+ namespace + ":" + tag + ">");	
	}
	
	
	public void FBoolBinExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace = "exp";
		String tag = this.xmlTag();
		ASTNode left = getLeft();
		ASTNode right= getRight();
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		left.prettyPrint_XML(str,p.indent(indent));
		right.prettyPrint_XML(str,p.indent(indent));
		str.println(indent + "</"+ namespace + ":" + tag + ">");	
	}
	
	
	public void FUnaryExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace="exp";
		String tag = this.xmlTag();
		ASTNode child = getFExp();	
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		child.prettyPrint_XML(str,p.indent(indent));
		str.println(indent + "</"+ namespace + ":" + tag + ">");
	}
	
	
	public void FMathematicalFunctionCall.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace ="exp";
		String tag = this.xmlTag();
		ASTNode child = getFExp();
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		child.prettyPrint_XML(str,p.indent(indent));
		str.println(indent + "</"+ namespace + ":" + tag + ">");
	}
	
	
	public void FAtan2Exp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace="exp";
		String tag= this.xmlTag();
		ASTNode x_arg = getFExp();
		ASTNode y_arg= getY();
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		x_arg.prettyPrint_XML(str,p.indent(indent));
		y_arg.prettyPrint_XML(str,p.indent(indent));
		str.println(indent + "</"+ namespace + ":" + tag + ">");
	}
	
	
	public void FDerExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		ASTNode child = getFIdUse();	
		String namespace = "exp";
		String tag = this.xmlTag();
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		child.prettyPrint_XML(str,p.indent(indent));
		str.println(indent + "</"+ namespace + ":" + tag + ">");
	}
	
	public void FIdUseExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){	
		this.getFIdUse().prettyPrint_XML(str,p.indent(indent));
	}
	
	
	public void FIdUse.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace = "exp";
		String tag = this.xmlTag();
		FQName qname = this.getFQName();
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		qname.prettyPrint_XML(str,p.indent(indent));
		str.println(indent + "</" + namespace + ":" + tag + ">");
	}
	
	public void FTimeExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace="exp";
		String tag = this.xmlTag();
		
		str.print(indent + "<" + namespace + ":" + tag + ">");
		prettyPrint(str,"");
		str.println("</"+ namespace + ":" + tag + ">");
	}
	
	public void FBuiltInFunctionCall.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace = "exp";
		String tag = this.xmlTag();
		
		str.print(indent + "<" + namespace + ":" + tag + ">\n");
		for (int i=0; i<this.getNumChild();i++)
			getChild(i).prettyPrint_XML(str,p.indent(indent));		
		str.println(indent + "</"+ namespace + ":" + tag + ">");	
	}
	
	public void FArray.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace = "exp";
		String tag = this.xmlTag();
		
		str.print(indent + "<" + namespace + ":" + tag + ">\n");
		for (FExp e : this.getFExpList())
			e.prettyPrint_XML(str,p.indent(indent));
		str.println(indent + "</"+ namespace + ":" + tag + ">");
	}
	
    public void FRangeExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace = "exp";
		String tag = this.xmlTag();
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		for (FExp e : this.getFExpList())
			e.prettyPrint_XML(str,p.indent(indent));
		str.println(indent + "</" + namespace + ":" + tag + ">");
     
    }
    
	public void FFunctionCall.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String tag = this.xmlTag();
		String namespace = "exp";
		FQName qname = this.getName().getFQName(); 
		str.println(indent + "<" + namespace + ":" + tag + ">");
		
		str.println(indent + "\t<" + namespace + ":Name>");
		qname.prettyPrint_XML(str,p.indent(indent+"\t"));
		str.println(indent + "\t</" + namespace + ":Name>");
		
		str.println(indent + "\t<" + namespace + ":Arguments>");
		for (FExp e : this.getArgList())
			e.prettyPrint_XML(str,p.indent(indent+"\t"));
		str.println(indent + "\t</" + namespace + ":Arguments>");
		
		str.println(indent + "</" + namespace + ":" + tag  + ">");	
	}
	
	//------------------------ Equations -------------------------
	public void FEquation.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		ASTNode left = getLeft();
		ASTNode right = getRight();
		String eqXMLtag = this.xmlTag();
		FSubExp fsubexp = new FSubExp();
		String subXMLtag = fsubexp.xmlTag();
		String eqNamespace = "equ";
		String expNamespace = "exp";
		
		str.println(indent+"<" +eqNamespace+ ":" + eqXMLtag + ">");
		str.println(indent+"\t<" + expNamespace + ":" + subXMLtag + ">");
		left.prettyPrint_XML(str,indent+"\t\t");
		right.prettyPrint_XML(str,indent+"\t\t");
		str.println(indent+"\t</" + expNamespace + ":" + subXMLtag + ">");
		str.println(indent+"</" +eqNamespace+ ":" + eqXMLtag + ">");
	}
		
	public void FFunctionCallEquation.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		FFunctionCall call = (FFunctionCall)this.getCall();
		String tag = this.xmlTag();
		String namespace = "equ";

		str.println(indent + "<" + namespace + ":" + tag  + ">");
		
		//output arguments
		for (FFunctionCallLeft f : this.getLeftList()){
			str.println(indent + "\t<" + namespace + ":OutputArgument>");
			
			if(!f.hasFExp()){
				str.println(indent + "\t<" + namespace + ":EmptyOutputArgument/>");
			}else{
				f.getFExp().prettyPrint_XML(str,p.indent(indent+"\t"));
			}
			
			str.println(indent + "\t</" + namespace + ":OutputArgument>");
		}
		
		//function call
		call.prettyPrint_XML(str,p.indent(indent+"\t"));
				
		str.println(indent + "</" + namespace + ":" + tag  + ">");	
	}
	
	//-------------------- Functions ---------------------------
    public void FFunctionDecl.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
        String namespace="fun";
        String tag = this.xmlTag();
        FQName fName = this.getFQName();
        
        str.print(indent + "<" + namespace + ":" + tag + ">\n");
        
        str.print(indent + "\t<" + namespace + ":Name>\n");
        fName.prettyPrint_XML(str,p.indent(indent+"\t"));
        str.print(indent + "\t</" + namespace + ":Name>\n");
        
        	for(FFunctionVariable var : this.myOutputs())
        		var.prettyPrint_XML(str,p.indent(indent));
        	for(FFunctionVariable var : this.myInputs())
                var.prettyPrint_XML(str,p.indent(indent));
            for(FFunctionVariable var : this.myProtected())
                var.prettyPrint_XML(str,p.indent(indent));
            
            this.getFAlgorithmBlock().prettyPrint_XML(str,p.indent(indent));
        
        str.println(indent + "</"+ namespace + ":" + tag + ">");
    }
    
    public void FFunctionVariable.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
        String namespace = "fun";
        String tag = "";
        FQName name = this.getFQName();
        String typeAttr = " type=\"" + this.getType().scalarType().toString() + "\"";
        	
        if(this.isOutput()){
        	tag = "OutputVariable";
        }else{
        	if(this.isInput()){
        		tag="InputVariable";
        	}else{
        		tag="ProtectedVariable";
        	}
        }
              
        	str.print(indent + "<" + namespace + ":" + tag + typeAttr + ">\n");
        	
        	str.print(indent + "\t<" + namespace + ":Name>\n");
        	name.prettyPrint_XML(str,p.indent(indent+"\t"));
        	str.println(indent + "\t</"+ namespace + ":Name>");
        	
        	for(int j=0; j<this.size().ndims();j++){
        		str.print(indent + "\t<" + namespace + ":Size>\n");
            	
        		if(this.size().isComplete()){
        			this.size().createFExp(j).prettyPrint_XML(str,p.indent(indent+"\t"));
            	}else{
            		str.println(indent + "\t\t<exp:UndefinedDimension/>");
            	}
           
            	str.println(indent + "\t</"+ namespace + ":Size>");
        	}
        	
        	if(this.hasBindingExp()){
            	str.print(indent + "\t<" + namespace + ":BindingExpression>\n");
            	this.getBindingExp().prettyPrint_XML(str,p.indent(indent+"\t"));
            	str.println(indent + "\t</"+ namespace + ":BindingExpression>");
        	}
          
        	
        	str.println(indent + "</"+ namespace + ":" + tag + ">");
    }
    
    //-------------------- Algorithms ---------------------------
    public void FAlgorithmBlock.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
        String namespace="fun";
        String tag = this.xmlTag();
        
		str.println(indent + "<" + namespace + ":" + tag + ">");
    	for (FStatement s : this.getFStatementList())
    		s.prettyPrint_XML(str,p.indent(indent));
		str.println(indent + "</"+ namespace + ":" + tag + ">");
    }
    
    public void FStatement.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
    	return;
    }
    
    public void FBreakStmt.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
        String namespace="fun";
        String tag = this.xmlTag();
        str.println(indent + "<" + namespace + ":" + tag + "/>");        
    }
    
    public void FReturnStmt.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
        String namespace="fun";
        String tag = this.xmlTag();
        str.println(indent + "<" + namespace + ":" + tag + "/>");        
    }
    
    public void FAssignStmt.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
        String namespace="fun";
        String tag = this.xmlTag();
        String rightTag = "Expression";
        
        str.println(indent + "<" + namespace + ":" + tag + ">"); 
        this.getLeft().prettyPrint_XML(str,p.indent(indent));
        str.println(indent + "\t<" + namespace + ":" + rightTag + ">"); 
        this.getRight().prettyPrint_XML(str,p.indent(indent+"\t"));
        str.println(indent + "\t</" + namespace + ":" + rightTag + ">"); 
        str.println(indent + "</" + namespace + ":" + tag + ">");        
    }
    
    public void FIfStmt.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
        String namespace="fun";
        String tag = this.xmlTag();
        String elseIfTag = "ElseIf";
        String elseTag = "Else";
        
        //opening tag
        str.println(indent + "<" + namespace + ":" + tag + ">"); 
        
        //then branch
        this.getFIfWhenClause(0).prettyPrint_XML(str,p.indent(indent));
        
        //elseif branches
        if(this.getNumFIfWhenClause()>1){
        	for (int i=1; i< this.getNumFIfWhenClause(); i++){
        		str.println(indent + "\t<" + namespace + ":" + elseIfTag + ">");
        		this.getFIfWhenClause(i).prettyPrint_XML(str,p.indent(indent+"\t"));
        		str.println(indent + "\t</" + namespace + ":" + elseIfTag + ">");
        	}
        }
        
       //else branch
        if (this.getNumElseStmt()!=0){
            str.println(indent + "\t<" + namespace + ":" + elseTag + ">");
        	for (FStatement s : this.getElseStmtList())
        		s.prettyPrint_XML(str,p.indent(indent+"\t"));
    		str.println(indent + "\t</" + namespace + ":" + elseTag + ">");
        }
	
		//closing tag
        str.println(indent + "</" + namespace + ":" + tag + ">");        
    }
    
    public void FIfWhenClause.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
        String namespace="fun";
        String testTag = "Condition";
        String stmtTag = "Statements";
        
        str.println(indent + "<" + namespace + ":" + testTag + ">"); 
        this.getTest().prettyPrint_XML(str,p.indent(indent));
        str.println(indent + "</" + namespace + ":" + testTag + ">");  
        
        str.println(indent + "<" + namespace + ":" + stmtTag + ">"); 
    	for (FStatement s : this.getFStatementList())
    		s.prettyPrint_XML(str,p.indent(indent));
        str.println(indent + "</" + namespace + ":" + stmtTag + ">");  
    }
    
    public void FForStmt.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
        String namespace="fun";
        String tag = this.xmlTag();
        String stmtTag = "Statements";
        
        str.println(indent + "<" + namespace + ":" + tag + ">"); 
        //Index
        this.getIndex().prettyPrint_XML(str,p.indent(indent));
        //Statements
        str.println(indent + "\t<" + namespace + ":" + stmtTag + ">");
    	for (FStatement s : this.getForStmtList())
    		s.prettyPrint_XML(str,p.indent(indent+"\t"));
		str.println(indent + "\t</" + namespace + ":" + stmtTag + ">");;
    	
        str.println(indent + "</" + namespace + ":" + tag + ">"); 
     
    }
    
    public void FForIndex.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
        String namespace="fun";
        String tag = "Index";      
        String varTag = "IterationVariable";
        FQName qVarName = this.getFVariable().getFQName();
        String expTag = "IterationSet";       
        
        str.println(indent + "<" + namespace + ":" + tag + ">"); 
        
        str.println(indent + "\t<" + namespace + ":" + varTag + ">"); 
        qVarName.prettyPrint_XML(str,p.indent(indent+"\t"));
        str.println(indent + "\t</" + namespace + ":" + varTag + ">"); 
        
        if (this.hasFExp()){
        	str.println(indent + "\t<" + namespace + ":" + expTag + ">");
        	this.getFExp().prettyPrint_XML(str,p.indent(indent+"\t"));
        	str.println(indent + "\t</" + namespace + ":" + expTag + ">");
        }     	
        str.println(indent + "</" + namespace + ":" + tag + ">"); 
     
    }
      
    public void FWhileStmt.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
        String namespace="fun";
        String tag = this.xmlTag();
        String testTag = "Condition";
        String stmtTag = "Statements";
        
        str.println(indent + "<" + namespace + ":" + tag + ">"); 
        //test
        str.println(indent + "\t<" + namespace + ":" + testTag + ">"); 
        this.getTest().prettyPrint_XML(str,p.indent(indent+"\t"));
        str.println(indent + "\t</" + namespace + ":" + testTag + ">");  
        //statements
        str.println(indent + "\t<" + namespace + ":" + stmtTag + ">"); 
    	for (FStatement s : this.getWhileStmtList())
    		s.prettyPrint_XML(str,p.indent(indent+"\t"));
        str.println(indent + "\t</" + namespace + ":" + stmtTag + ">"); 
        
        str.println(indent + "</" + namespace + ":" + tag + ">"); 
    }
    
	public void FFunctionCallStmt.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		FFunctionCall call = (FFunctionCall)this.getCall();
		String tag = this.xmlTag();
		String namespace = "fun";
		
		str.println(indent + "<" + namespace + ":" + tag  + ">");
		
		for (FFunctionCallLeft f : this.getLeftList()){
			
			str.println(indent + "\t<" + namespace + ":OutputArgument>");
			
			if(!f.hasFExp()){
				str.println(indent + "\t\t<" + namespace + ":EmptyOutputArgument/>");
			}else{
				f.getFExp().prettyPrint_XML(str,p.indent(indent+"\t"));
			}
			
			str.println(indent + "\t</" + namespace + ":OutputArgument>");
		}
		
		call.prettyPrint_XML(str,p.indent(indent+"\t"));
	
		str.println(indent + "</" + namespace + ":" + tag  + ">");	
	}
	
	//-------------------- Qualified Names ---------------------------
	
	public void FQName.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		
		for (FQNamePart np : this.getFQNamePartList())
			np.prettyPrint_XML(str,p.indent(indent));
		
	}
	
	public void FQNamePart.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace = "exp";
		String tag = this.xmlTag();
		String nameAttr = " name=\"" + this.getName() + "\"";
		
		if (this.hasFArraySubscripts()){
			str.println(indent + "<" + namespace + ":" + tag + nameAttr + ">");
			this.getFArraySubscripts().prettyPrint_XML(str,p.indent(indent));	
			str.println(indent + "</" + namespace + ":" + tag + ">");
		}else{
			str.println(indent + "<" + namespace + ":" + tag + nameAttr + "/>");
		}

	}
	
	public void FArraySubscripts.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace = "exp";
		String tag = this.xmlTag();
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		
		for (FSubscript s : this.getFSubscriptList())
			s.prettyPrint_XML(str,p.indent(indent+"\t"));
		
		str.println(indent + "</" + namespace + ":" + tag + ">");
	}
    
	public void FSubscript.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		return;
	}
	
	public void FColonSubscript.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace = "exp";
		String tag = this.xmlTag();
		
		str.println(indent + "<" + namespace + ":" + tag + "/>");
	}
	
	public void FExpSubscript.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace = "exp";
		String tag = this.xmlTag();
		
		str.println(indent + "<" + namespace + ":" + tag +  ">");
		this.getFExp().prettyPrint_XML(str,p.indent(indent));
		str.println(indent + "</" + namespace + ":" + tag +  ">");
			
	}
	
}//aspect end

aspect XMLTagBinding{
           
        //XML tags definition for expressions
        syn String FIdUse.xmlTag();
        syn String FExp.xmlTag();
       
        //literals and identifiers
        eq FIdUse.xmlTag() = "Identifier";
        eq FIdUseExp.xmlTag() = "Identifier";
        eq FIntegerLitExp.xmlTag() = "IntegerLiteral";
        eq FRealLitExp.xmlTag() = "RealLiteral";
        eq FBooleanLitExpFalse.xmlTag() = "BooleanLiteral";
        eq FBooleanLitExpTrue.xmlTag() = "BooleanLiteral";
        eq FStringLitExp.xmlTag() = "StringLiteral";
        //operators
        eq FAddExp.xmlTag() = "Add";
        eq FSubExp.xmlTag() = "Sub";
        eq FMulExp.xmlTag() = "Mul";
        eq FDivExp.xmlTag() = "Div";
        eq FPowExp.xmlTag() = "Pow";
        eq FDotAddExp.xmlTag() = "DotAdd";
        eq FDotSubExp.xmlTag() = "DotSub";
        eq FDotMulExp.xmlTag() = "DotMul";
        eq FDotDivExp.xmlTag() = "DotDiv";
        eq FDotPowExp.xmlTag() = "DotPow";
        eq FNegExp.xmlTag() = "Neg";
        eq FLtExp.xmlTag() = "LogLt";
        eq FLeqExp.xmlTag() = "LogLeq";
        eq FGtExp.xmlTag() = "LogGt";
        eq FGeqExp.xmlTag()= "LogGeq";
        eq FEqExp.xmlTag()= "LogEq";
        eq FNeqExp.xmlTag()= "LogNeq";
        eq FNotExp.xmlTag() = "Not";
        eq FOrExp.xmlTag() = "Or";
        eq FAndExp.xmlTag() = "And";
        //built-in functions
        eq FMinExp.xmlTag() = "Min";
        eq FMaxExp.xmlTag() = "Max";
        eq FAbsExp.xmlTag() = "Abs";
        eq FDerExp.xmlTag() = "Der";
        eq FSinExp.xmlTag() = "Sin";
        eq FCosExp.xmlTag() = "Cos";
        eq FTanExp.xmlTag() = "Tan";
        eq FAsinExp.xmlTag() = "Asin";
        eq FAcosExp.xmlTag() = "Acos";
        eq FAtanExp.xmlTag() = "Atan";
        eq FSinhExp.xmlTag() = "Sinh";
        eq FCoshExp.xmlTag() = "Cosh";
        eq FTanhExp.xmlTag() = "Tanh";
        eq FExpExp.xmlTag() = "Exp";
        eq FLogExp.xmlTag() = "Log";
        eq FLog10Exp.xmlTag() = "Log10";
        eq FSqrtExp.xmlTag() = "Sqrt";
        eq FAtan2Exp.xmlTag() = "Atan2";       
        eq FTimeExp.xmlTag() = "Time";
        eq FRangeExp.xmlTag() = "Range";
        eq FNoEventExp.xmlTag() = "NoEvent";
        //other expressions
        eq FArray.xmlTag() = "Array";   
        eq FFunctionCall.xmlTag() = "FunctionCall";
        //unsupported expressions       
        eq FExp.xmlTag() = "*** Not supported expression ***";
        eq FUnsupportedExp.xmlTag() = "*** not supported tag ***";
       
        //equations
        syn String FEquation.xmlTag();
        eq FEquation.xmlTag() = "Equation";
        syn String FFunctionCallEquation.xmlTag();
        eq FFunctionCallEquation.xmlTag() = "FunctionCallEquation";
       
        //functions
        syn String FFunctionDecl.xmlTag();
        eq FFunctionDecl.xmlTag() = "Function";
        syn String FAlgorithmBlock.xmlTag();
        eq FAlgorithmBlock.xmlTag() = "Algorithm";
        syn String FStatement.xmlTag();
        eq FBreakStmt.xmlTag() = "Break";
        eq FReturnStmt.xmlTag() = "Return";
        eq FAssignStmt.xmlTag() = "Assign";
        eq FFunctionCallStmt.xmlTag() = "FunctionCallStatement";
        eq FIfStmt.xmlTag() = "If";
        eq FForStmt.xmlTag() = "For";
        eq FWhileStmt.xmlTag() = "While";
        
        //qualified names
        syn String FQName.xmlTag();
        eq FQName.xmlTag() = "QualifiedName";
        syn String FQNamePart.xmlTag();
        eq FQNamePart.xmlTag() = "QualifiedNamePart";
        syn String FArraySubscripts.xmlTag();
        eq FArraySubscripts.xmlTag() = "ArraySubscripts";
        syn String FSubscript.xmlTag();
        eq FColonSubscript.xmlTag() = "UndefinedDimension";
        eq FExpSubscript.xmlTag() = "IndexExpression";
        
        eq InstForStmt.xmlTag() = "For";
        eq InstAssignStmt.xmlTag() = "Assign";
        eq FExternalStmt.xmlTag() = "--- Not Supported Statement ---";
        eq FWhenStmt.xmlTag() = "--- Not Supported Statement ---";

        //log.warning("Warning: the model can cointains unsopported expressions and the generated XML document can be unvalid");
   
}