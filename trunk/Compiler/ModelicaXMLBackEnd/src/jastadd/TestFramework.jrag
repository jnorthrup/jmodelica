

aspect TestFramework_XML {
	refine TestFramework public void FunctionCall.collectTestCasesFC(String name, TestSuite ts) {
		//System.out.println("+FunctionCall.collectTestCasesFC: " + name);
		if (name.equals(getName().qualifiedName())) {
			if (name.equals("JModelica.UnitTesting"))
				getFunctionArguments().collectTestCasesNA("testCase",ts);
			else if (name.equals("JModelica.UnitTesting.FlatteningTestCase")) {
				FlatteningTestCase ftc = new FlatteningTestCase();
				for (int i=0;i<getFunctionArguments().getNumNamedArgument();i++) {
					NamedArgument na = getFunctionArguments().getNamedArgument(i);
					if (na.getName().name().equals("name"))
						ftc.setName(((StringLitExp)na.getExp()).getSTRING());
					else if (na.getName().name().equals("description"))
						ftc.setDescription(((StringLitExp)na.getExp()).getSTRING());	
					else if (na.getName().name().equals("flatModel"))
						ftc.setFlatModel((((StringLitExp)na.getExp()).getSTRING()).replace("\\\"","\""));		
						//ftc.setFlatModel((((StringLitExp)na.getExp()).getSTRING()));		
				}
				debugPrint(">>>>>>>>");
				debugPrint(ftc.getFlatModel());
				ftc.setSourceFileName(root().fileName());
				ftc.setClassName(enclosingClassDecl().qualifiedName());
				ts.add(ftc);
			} else if (name.equals("JModelica.UnitTesting.FClassMethodTestCase")) {
				FClassMethodTestCase ftc = new FClassMethodTestCase();
				for (int i=0;i<getFunctionArguments().getNumNamedArgument();i++) {
					NamedArgument na = getFunctionArguments().getNamedArgument(i);
					if (na.getName().name().equals("name"))
						ftc.setName(((StringLitExp)na.getExp()).getSTRING());
					else if (na.getName().name().equals("description"))
						ftc.setDescription(((StringLitExp)na.getExp()).getSTRING());	
					else if (na.getName().name().equals("methodName"))
						ftc.setMethodName(((StringLitExp)na.getExp()).getSTRING());	
					else if (na.getName().name().equals("methodResult"))
						ftc.setOutput((((StringLitExp)na.getExp()).getSTRING()).replace("\\\"","\""));		
						//ftc.setFlatModel((((StringLitExp)na.getExp()).getSTRING()));		
				}
				debugPrint(">>>>>>>>");
				ftc.setSourceFileName(root().fileName());
				ftc.setClassName(enclosingClassDecl().qualifiedName());
				ts.add(ftc);
			}else if (name.equals("JModelica.UnitTesting.TransformCanonicalTestCase")) {
				TransformCanonicalTestCase tctc = new TransformCanonicalTestCase();
				for (int i=0;i<getFunctionArguments().getNumNamedArgument();i++) {
					NamedArgument na = getFunctionArguments().getNamedArgument(i);
					if (na.getName().name().equals("name"))
						tctc.setName(((StringLitExp)na.getExp()).getSTRING());
					else if (na.getName().name().equals("description"))
						tctc.setDescription(((StringLitExp)na.getExp()).getSTRING());	
					else if (na.getName().name().equals("flatModel"))
						tctc.setFlatModel((((StringLitExp)na.getExp()).getSTRING()).replace("\\\"","\""));		
						//ftc.setFlatModel((((StringLitExp)na.getExp()).getSTRING()));		
				}
				tctc.setSourceFileName(root().fileName());
				tctc.setClassName(enclosingClassDecl().qualifiedName());
				ts.add(tctc);
		}else if (name.equals("JModelica.UnitTesting.GenericCodeGenTestCase")) {
				GenericCodeGenTestCase cgtc = new GenericCodeGenTestCase();
				for (int i=0;i<getFunctionArguments().getNumNamedArgument();i++) {
					NamedArgument na = getFunctionArguments().getNamedArgument(i);
					if (na.getName().name().equals("name"))
						cgtc.setName(((StringLitExp)na.getExp()).getSTRING());
					else if (na.getName().name().equals("description"))
						cgtc.setDescription(((StringLitExp)na.getExp()).getSTRING());	
					else if (na.getName().name().equals("generatedCode"))
						cgtc.setGenCode((((StringLitExp)na.getExp()).getSTRING()).replace("\\\"","\""));		
					else if (na.getName().name().equals("template"))
						cgtc.setTemplate((((StringLitExp)na.getExp()).getSTRING()).replace("\\\"","\""));			
				}
				debugPrint(">>>>>>>>");
				cgtc.setSourceFileName(root().fileName());
				cgtc.setClassName(enclosingClassDecl().qualifiedName());
				ts.add(cgtc);
			} else if (name.equals("JModelica.UnitTesting.XMLCodeGenTestCase")) {
				XMLCodeGenTestCase cgtc = new XMLCodeGenTestCase();
				for (int i=0;i<getFunctionArguments().getNumNamedArgument();i++) {
					NamedArgument na = getFunctionArguments().getNamedArgument(i);
					if (na.getName().name().equals("name"))
						cgtc.setName(((StringLitExp)na.getExp()).getSTRING());
					else if (na.getName().name().equals("description"))
						cgtc.setDescription(((StringLitExp)na.getExp()).getSTRING());	
					else if (na.getName().name().equals("generatedCode"))
						cgtc.setGenCode((((StringLitExp)na.getExp()).getSTRING()).replace("\\\"","\""));		
					else if (na.getName().name().equals("template"))
						cgtc.setTemplate((((StringLitExp)na.getExp()).getSTRING()).replace("\\\"","\""));			
				}
				debugPrint(">>>>>>>>");
				cgtc.setSourceFileName(root().fileName());
				cgtc.setClassName(enclosingClassDecl().qualifiedName());
				ts.add(cgtc);
			} else if (name.equals("JModelica.UnitTesting.ErrorTestCase")) {
				ErrorTestCase etc = new ErrorTestCase();
				for (int i=0;i<getFunctionArguments().getNumNamedArgument();i++) {
					NamedArgument na = getFunctionArguments().getNamedArgument(i);
					if (na.getName().name().equals("name"))
						etc.setName(((StringLitExp)na.getExp()).getSTRING());
					else if (na.getName().name().equals("description"))
						etc.setDescription(((StringLitExp)na.getExp()).getSTRING());	
					else if (na.getName().name().equals("errorMessage"))
						etc.setErrorMessage(((StringLitExp)na.getExp()).getSTRING().replace("\\\"","\""));		
				}
				etc.setSourceFileName(root().fileName());
				etc.setClassName(enclosingClassDecl().qualifiedName());
				ts.add(etc);
			}else if (name.equals("JModelica.UnitTesting.ComplianceErrorTestCase")) {
				ComplianceErrorTestCase etc = new ComplianceErrorTestCase();
				for (int i=0;i<getFunctionArguments().getNumNamedArgument();i++) {
					NamedArgument na = getFunctionArguments().getNamedArgument(i);
					if (na.getName().name().equals("name"))
						etc.setName(((StringLitExp)na.getExp()).getSTRING());
					else if (na.getName().name().equals("description"))
						etc.setDescription(((StringLitExp)na.getExp()).getSTRING());	
					else if (na.getName().name().equals("errorMessage"))
						etc.setErrorMessage(((StringLitExp)na.getExp()).getSTRING().replace("\\\"","\""));		
				}
				etc.setSourceFileName(root().fileName());
				etc.setClassName(enclosingClassDecl().qualifiedName());
				ts.add(etc);
			} else if (name.equals("JModelica.UnitTesting.WarningTestCase")) {
				WarningTestCase etc = new WarningTestCase();
				for (int i=0;i<getFunctionArguments().getNumNamedArgument();i++) {
					NamedArgument na = getFunctionArguments().getNamedArgument(i);
					if (na.getName().name().equals("name"))
						etc.setName(((StringLitExp)na.getExp()).getSTRING());
					else if (na.getName().name().equals("description"))
						etc.setDescription(((StringLitExp)na.getExp()).getSTRING());	
					else if (na.getName().name().equals("errorMessage"))
						etc.setErrorMessage(((StringLitExp)na.getExp()).getSTRING().replace("\\\"","\""));		
				}
				etc.setSourceFileName(root().fileName());
				etc.setClassName(enclosingClassDecl().qualifiedName());
				ts.add(etc);
			}
		}
	}

	refine TestFramework public void NamedArgument.collectTestCasesNA(String name, TestSuite ts) {
		debugPrint("+NamedArgument.collectTestCasesNA: "+name);
		if (name.equals(getName().qualifiedName())) {
			if (name.equals("testCase")) {
				getExp().collectTestCasesFC("JModelica.UnitTesting.FlatteningTestCase",ts);
				getExp().collectTestCasesFC("JModelica.UnitTesting.ErrorTestCase",ts);
				getExp().collectTestCasesFC("JModelica.UnitTesting.WarningTestCase",ts);
				getExp().collectTestCasesFC("JModelica.UnitTesting.ComplianceErrorTestCase",ts);
				getExp().collectTestCasesFC("JModelica.UnitTesting.GenericCodeGenTestCase",ts);
				getExp().collectTestCasesFC("JModelica.UnitTesting.XMLCodeGenTestCase",ts);
				getExp().collectTestCasesFC("JModelica.UnitTesting.FClassMethodTestCase",ts);
				getExp().collectTestCasesFC("JModelica.UnitTesting.TransformCanonicalTestCase",ts);
			}
		}
	
	}
}