aspect msvs {
	public class MSVSCompilerDelegator extends CCompilerDelegator {
		
		private CompilerConfiguration conf;
		
		public MSVSCompilerDelegator(CompilerConfiguration conf) {
			this.conf = conf;
		}
		
		public MSVSCompilerDelegator(String msvsDir) {
			this(new MSVSCompilerConfiguration(msvsDir));
		}
		
		public MSVSCompilerDelegator(String msvsDir, String[] platforms) {
			this(new MSVSCompilerConfiguration(msvsDir, platforms));
		}

		public MSVSCompilerDelegator() {
			this(findMSVS());
		}
		
		private static String findMSVS() {
			// Let's start a guessing game, where is MSVS?
			//String[] envVarNames = new String[] {
			//	"VS100COMNTOOLS", "VS90COMNTOOLS", "VS80COMNTOOLS"
			//};
			
			String[] paths = new String[] {
					"C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\",
					"C:\\Program Files\\Microsoft Visual Studio 10.0\\",
					"C:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\",
					"C:\\Program Files\\Microsoft Visual Studio 9.0\\",
					"C:\\Program Files (x86)\\Microsoft Visual Studio 8\\",
					"C:\\Program Files\\Microsoft Visual Studio 8\\",
			};
			//for (String envVar : envVarNames) {
			//	String path = System.getenv(envVar);
			//	if (path != null && new File(path).exists())
			//		return path;
			//}
			for (String path : paths) {
				if (new File(path).exists())
					return path;
			}
			
			throw new RuntimeException("Unable to find Microsoft Visual studio. Make sure it is installed, if it still don't work, contact your local JModelica.org guru");
		}
		public String getMsvcDir() {
			return conf.getOptions().get(Constants.PREFERENCE_MSVS_PATH);
		}

		public void compileCCode(String fileName, String target, File workDir, 
				Set<String> ext_libs, Set<String> ext_lib_dirs, Set<String> ext_incl_dirs) {
			String filesep = File.separator;
			String jmodelicaHome = ModelicaCompiler.getJModelicaHome();
			String platformDir = ModelicaCompiler.getPlatform();
			String msvc = getMsvcDir();
			if (msvc == null)
				new CcodeCompilationException("Microsoft Visual C++ install directory not set.");
			
			// Generate environment
			Map<String, String> envMap = new HashMap<String, String>(getEnv());
			envMap.put("JMODELICA_HOME", jmodelicaHome);
			envMap.put("MSVCDir", new File(msvc, "VC").getAbsolutePath());
			
			for (String platform : conf.getTargetPlatforms()) {
				// Generate bat call
				String batFile = new File(new File(new File(jmodelicaHome, "msvs"), platform), "build.bat").getPath();
				batFile = String.format("\"%s\"", batFile);
				
                String extraincdirs = createBatVarDirs(ext_incl_dirs) != null ? createBatVarDirs(ext_incl_dirs) : "";
                String extralibdirs = createBatVarDirs(ext_lib_dirs) != null ? createBatVarDirs(ext_lib_dirs) : "";
				String extralibs = createBatVarLibs(ext_libs) != null ? createBatVarLibs(ext_libs) : "";
				String[] cmd = new String[] { "cmd", "/C", batFile,	fileName, extraincdirs, extralibdirs, extralibs };
				// execute bat file
				if (ModelicaCompiler.loggedProcess(cmd, envMap, workDir) > 0) {
					File cfile = new File(new File(workDir, "sources"), fileName + ".c");
					throw new CcodeCompilationException("Compilation of generated C code failed.\n" + 
							"C file location: " + cfile);
				}
			}
		}
		
		protected String createBatVarDirs(Set<String> vars) {
	        StringBuilder buf = new StringBuilder();
	        String postfix = "";
	        for (String str : vars) {
	            buf.append(postfix);
	            buf.append(str);
	            postfix = ";";
	        }
	        return (buf.length() == 0) ? null : buf.toString();
		}
		
        protected String createBatVarLibs(Set<String> libs) {
            StringBuilder buf = new StringBuilder();
            String postfix = ".lib";
            String prefix = "";
            for (String str : libs) {
                buf.append(prefix);
                buf.append(str);
                buf.append(postfix);
                prefix = " ";
            }
            return (buf.length() == 0) ? null : buf.toString();
        }

		private String[] convertEnv(Map<String, String> envMap) {
			String[] res = new String[envMap.size()];
			int i = 0;
			for (String key : envMap.keySet())
				res[i++] = key + '=' + envMap.get(key);
			return res;
		}

		protected String[] getDefaultTargetPlatforms() {
			return conf.getTargetPlatforms();
		}

	}
	
	public interface CompilerConfiguration {
		
		public String[] getTargetPlatforms();
		
		public Map<String, String> getOptions();
		
	}

	public class MSVSCompilerConfiguration implements CompilerConfiguration {
		
		private String msvsDir;
		private String[] platforms;

		public MSVSCompilerConfiguration(String msvsDir) {
			this(msvsDir, new String[] { "win32" });
		}

		public MSVSCompilerConfiguration(String msvsDir, String[] platforms) {
			this.msvsDir = msvsDir;
			this.platforms = platforms;
		}

		public String[] getTargetPlatforms() {
			return platforms;
		}

		public Map<String, String> getOptions() {
			return Collections.singletonMap(Constants.PREFERENCE_MSVS_PATH, getMsvsDir());
		}

		protected String getMsvsDir() {
			return msvsDir;
		}

		
	}

	public class Constants {
		
		public static final String PLUGIN_ID = "org.jmodelica.rcp";
		
		public static final String PREFERENCE_CCOMPILER = "ccompiler";
		public static final String PREFERENCE_COMPILER_PREFS = PREFERENCE_CCOMPILER + ".prefs";
		public static final String PREFERENCE_MSVS = PREFERENCE_CCOMPILER + ".msvs";
		public static final String PREFERENCE_MSVS_PATH = PREFERENCE_MSVS + ".path";
		public static final String PREFERENCE_GCC = PREFERENCE_CCOMPILER + ".gcc";
		public static final String PREFERENCE_GCC_MAKE = PREFERENCE_GCC + ".make";
		public static final String PREFERENCE_GCC_CC = PREFERENCE_GCC + ".cc";
		public static final String PREFERENCE_GCC_CFLAGS = PREFERENCE_GCC + ".cflags";
		public static final String PREFERENCE_GCC_LDFLAGS = PREFERENCE_GCC + ".ldflags";
		public static final String PREFERENCE_PLATFORMS = PREFERENCE_CCOMPILER + ".platforms";
		
		public static final String WINDOWS_COMPILER_PREFS = PREFERENCE_MSVS_PATH;
		public static final String LINUX_COMPILER_PREFS = 
			PREFERENCE_GCC_MAKE + ',' + PREFERENCE_GCC_CC + ',' + PREFERENCE_GCC_CFLAGS + ',' + PREFERENCE_GCC_LDFLAGS;
		
		public static final String PREFERENCE_VERSION = "version";
		
		public static final String FEATURE_EDITOR    = "FMI_ModelicaEditor";
		public static final String FEATURE_COMPILER  = "FMI_Compiler";
		public static final String FEATURE_SFUNCTION = "FMI_SFunction";
		public static final String FEATURE_MEX       = "FMI_MEX";
		
		public static final String[] ALL_FEATURES = new String[] {
			FEATURE_EDITOR, FEATURE_COMPILER, FEATURE_SFUNCTION, FEATURE_MEX
		};

		public static final String LIMITATION_EDITOR = 
			"* This popup is shown at startup and each time a model is checked for errors.";
		public static final String LIMITATION_COMPILER = 
			"* There is a limitation on how large models can be compiled.\n" + 
			"* Compiled FMU will only work for one hour.";

		public static File COMMON_DIR;

	}
}
