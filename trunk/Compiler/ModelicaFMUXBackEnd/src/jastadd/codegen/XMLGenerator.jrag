
/*
Copyright (C) 2009 Modelon AB

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/** \file XMLGenerator.java
*  XMLGenerator class.
*/


import java.io.PrintStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.Stack;


/**
 * A generator class for XML code generation which takes a model described by
 * <FClass> and provides an XML document for the meta-data in the model. Uses a
 * template for the static general structure of tags and an internal class
 * <TagGenerator> for the parts of the XML that are dynamic, that is, may vary
 * depending on the contents of the underlying model.
 * 
 * @see AbstractGenerator
 * 
 */
public class XMLGenerator extends GenericXMLGenerator {
	
    public static final Creator CREATOR = new Creator()
    {
        public XMLGenerator create(Printer expPrinter, char escapeCharacter, FClass fclass) {
            return new XMLGenerator(expPrinter, escapeCharacter, fclass);
        }
    };
	
	private HashMap<Character,String> illegalCharsSub;
	
	/**
	 * Returns the string denoting the beginning of the copyright blurb.
	 */
	protected String startOfBlurb() { return "<!--"; }
	
	/**
	 * Returns the string denoting the end of the copyright blurb.
	 */
	protected String endOfBlurb() { return "-->"; }
	
	/**
	 * Replace characters that are illegal in XML values with their HTML escape sequences.
	 */
	protected String replaceIllegalChars(String s) {
		StringBuilder buf = new StringBuilder();
		int l = s.length();
		for (int i = 0; i < l; i++) {
			char ch = s.charAt(i);
			if (illegalCharsSub.containsKey(ch))
				buf.append(illegalCharsSub.get(ch));
			else
				buf.append(ch);
		}
		return buf.toString();
	}
	
	/**
	 * Constructor.
	 * 
	 * @param expPrinter Printer object used to generate code for expressions.
	 * @param escapeCharacter Escape characters used to decode tags.
	 * @param fclass An FClass object used as a basis for the code generation.
	 */
	public XMLGenerator(Printer expPrinter, char escapeCharacter,
			FClass fclass) {
		super(expPrinter,escapeCharacter, fclass);
		
		illegalCharsSub = new HashMap<Character,String>();
		illegalCharsSub.put('&',"&amp;");
		illegalCharsSub.put('<',"&lt;");
		illegalCharsSub.put('>',"&gt;");
		illegalCharsSub.put('"', "&quot;");
	}
	
	
	/**
	 * Internal class used to generate the model root attributes.
	 * 
	 * @see DAETag
	 */
	public class DAETag_XML_rootAttributes extends DAETag {
		private static final String df = "yyyy-MM-dd'T'HH:mm:ss";
		
		public DAETag_XML_rootAttributes(AbstractGenerator myGenerator, FClass fclass) {
			super("XML_rootAttributes", myGenerator, fclass);
		}
		
		/*
		 * (non-Javadoc)
		 * @see org.jmodelica.codegen.AbstractTag#generate(java.io.PrintStream)
		 */
		public void generate(CodeStream genPrinter) {
			genPrinter.print("fmiVersion=\"1.0\" ");
			genPrinter.print("modelName=\""+fclass.name()+"\" ");
			genPrinter.print("modelIdentifier=\""+fclass.nameUnderscore()+"\" ");
			genPrinter.print("guid=\""+fclass.guid()+"\" ");
			//genPrinter.print("description=\"String\" ");
			//genPrinter.print("author=\"String\" ");
			//genPrinter.print("version=\"0.0\" ");
			genPrinter.print("generationTool=\"JModelica.org\" ");
			// Todays date for now
			SimpleDateFormat dateformat = new SimpleDateFormat(df);
			genPrinter.print("generationDateAndTime=\""+dateformat.format(new Date())+"\" ");
			genPrinter.print("variableNamingConvention=\"structured\" ");
			genPrinter.print("numberOfContinuousStates=\""+fclass.numDifferentiatedRealVariables()+"\" ");
            if (fclass.getDAEStructuredBLT() == null)
                // Only generating init DAE
                genPrinter.print("numberOfEventIndicators=\"" + (fclass.numEventIndicators() + fclass.numInitialEventIndicators()) + "\"");
            else
                genPrinter.print("numberOfEventIndicators=\"" + fclass.numEventIndicators() + "\"");
		}
	}
	
	/**
	 * Internal class used to generate roots attributes of the XML document.
	 * 
	 * @see DAETag
	 */
	public class DAETag_XML_namespaces extends DAETag {
		
		public DAETag_XML_namespaces(AbstractGenerator myGenerator, FClass fclass) {
			super("XML_namespaces", myGenerator, fclass);
		}
		
		/*
		 * (non-Javadoc)
		 * @see org.jmodelica.codegen.AbstractTag#generate(java.io.PrintStream)
		*/
		
		public void generate(CodeStream genPrinter) {
			
			//XML standard namespace
			String xsiNS = "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"";
			//extensions' namespaces definitions
			String expNS= "xmlns:exp=\"https://svn.jmodelica.org/trunk/XML/daeExpressions.xsd\"";
			String equNS= "xmlns:equ=\"https://svn.jmodelica.org/trunk/XML/daeEquations.xsd\"";
			String funNS= "xmlns:fun=\"https://svn.jmodelica.org/trunk/XML/daeFunctions.xsd\"";
			String optNS= "xmlns:opt=\"https://svn.jmodelica.org/trunk/XML/daeOptimization.xsd\"";
			
			genPrinter.print(expNS + " " + equNS + " " + funNS + " " + optNS + " " + xsiNS);			
		
		}
	}
		
	/**
	 * Internal class used to generate the unit definitions tag.
	 * 
	 * @see DAETag
	 */
	public class DAETag_XML_unitDefinitions extends DAETag {
		
		public DAETag_XML_unitDefinitions(AbstractGenerator myGenerator, FClass fclass) {
			super("XML_unitDefinitions", myGenerator, fclass);
		}
				
		/*
		 * (non-Javadoc)
		 * @see org.jmodelica.codegen.AbstractTag#generate(java.io.PrintStream)
		 */
		public void generate(CodeStream genPrinter) {
			// extract all units and beloning unit definitions
			HashMap<String,HashSet<String>> map = new HashMap<String,HashSet<String>>();
			for(FVariable variable:fclass.allVariables()) {
				if(variable instanceof FRealVariable && ((FRealVariable)variable).unitAttributeSet() && ((FRealVariable)variable).displayUnitAttributeSet()) {
					String attribute = ((FRealVariable)variable).unitAttribute();
					if(map.containsKey(attribute)) {
						HashSet<String> temp=map.get(attribute);
						temp.add(((FRealVariable)variable).displayUnitAttribute());
					} else {
						HashSet<String> set = new HashSet<String>();
						set.add(((FRealVariable)variable).displayUnitAttribute());
						map.put(attribute, set);
					}
				}
			}
			
			//generate code if any units defined
			Set<String> units = map.keySet();
			if(!units.isEmpty()) {
				genPrinter.print("<UnitDefinitions>");
				Iterator<String> it = units.iterator();
				while(it.hasNext()) {
					String unit = it.next();
					genPrinter.print("\n\t\t<BaseUnit unit=\""+unit+"\">");
					HashSet<String> defs = map.get(unit);
					Iterator<String> defsit = defs.iterator();
					while(defsit.hasNext()) {
						genPrinter.print("\n\t\t\t<DisplayUnitDefinition ");
						genPrinter.print("displayUnit=\""+ defsit.next()+"\" ");
						genPrinter.print("gain=\"1\" ");
						genPrinter.print("offset=\"0\"/>");
					}
					genPrinter.print("\n\t\t</BaseUnit>");
				}				
				genPrinter.print("\n\t</UnitDefinitions>");
			}
		}
	}

	/**
	 * Internal class used to generate the type definitions tag.
	 * 
	 * @see DAETag
	 */
	public class DAETag_XML_typeDefinitions extends DAETag {
		
		public DAETag_XML_typeDefinitions(AbstractGenerator myGenerator, FClass fclass) {
			super("XML_typeDefinitions", myGenerator, fclass);
		}
		
		/*
		 * (non-Javadoc)
		 * @see org.jmodelica.codegen.AbstractTag#generate(java.io.PrintStream)
		 */
		public void generate(CodeStream genPrinter) {
			if (fclass.getNumFEnumDecl() > 0) {
				genPrinter.print("<TypeDefinitions>");
				List<FEnumDecl> enumDecls = fclass.getFEnumDecls();
				for (FEnumDecl enumdecl: enumDecls) {
					//name
					genPrinter.print("\n\t\t<Type name=\""+enumdecl.name()+"\" ");
					//description
					if (enumdecl.hasFStringComment()) {
						genPrinter.print("description=\""+enumdecl.getFStringComment().getComment()+"\"");
					}
					// close Type-element
					genPrinter.print(">");
					
					// Enumeration type
					genPrinter.print("\n\t\t\t<EnumerationType ");
					// TODO: add support for quantity attribute on type
					//min
					genPrinter.print("min=\"1\" ");
					//max
					genPrinter.print("max=\""+enumdecl.numEnumLiterals()+"\">");
					
					//Items
					ArrayList<FEnumLiteral> literals = enumdecl.enumLiterals();
					for (FEnumLiteral literal:literals) {
						genPrinter.print("\n\t\t\t\t<Item name=\""+literal.name()+"\" ");
						if (literal.hasFStringComment()) {
							genPrinter.print("description=\""+literal.getFStringComment().getComment()+"\"");
						}
						genPrinter.print("/>");
					}
					genPrinter.print("\n\t\t\t</EnumerationType>");
					genPrinter.print("\n\t\t</Type>");
				}
				genPrinter.print("\n\t</TypeDefinitions>");
			}
		}
	}
	
	/**
	 * Internal class used to generate the default experiment tag.
	 * 
	 * @see DAETag
	 */
	public class DAETag_XML_defaultExperiment extends DAETag {
		
		public DAETag_XML_defaultExperiment(AbstractGenerator myGenerator, FClass fclass) {
			super("XML_defaultExperiment", myGenerator, fclass);
		}
		
		/*
		 * (non-Javadoc)
		 * @see org.jmodelica.codegen.AbstractTag#generate(java.io.PrintStream)
		 */
		public void generate(CodeStream genPrinter) {
			FClass.Experiment e = fclass.experiment;
			if (e != null) {
				genPrinter.print("<DefaultExperiment");
				if (e.hasStart)
					genPrinter.format(" startTime=\"%s\"", Double.toString(e.start));
				if (e.hasStop)
					genPrinter.format(" stopTime=\"%s\"", Double.toString(e.stop));
				if (e.hasTolerance)
					genPrinter.format(" tolerance=\"%s\"", Double.toString(e.tolerance));
				genPrinter.print(" />\n");
			}
		}
	}

	/**
	 * Internal class used to generate the vendor annotations tag.
	 * 
	 * @see DAETag
	 */
	public class DAETag_XML_vendorAnnotations extends DAETag {
		
		public DAETag_XML_vendorAnnotations(AbstractGenerator myGenerator, FClass fclass) {
			super("XML_vendorAnnotations", myGenerator, fclass);
		}
		
		/*
		 * (non-Javadoc)
		 * @see org.jmodelica.codegen.AbstractTag#generate(java.io.PrintStream)
		 */
		public void generate(CodeStream genPrinter) {
			genPrinter.print("<VendorAnnotations>");
			genPrinter.print("\n\t\t<Tool name=\"JModelica\">");
			HashSet<String> extLibraries = fclass.externalLibraries();
			HashSet<String> extIncludes = fclass.externalIncludes();
			HashSet<String> extLibDirs = fclass.externalLibraryDirectories();
			HashSet<String> extInclDirs = fclass.externalIncludeDirectories();
			
			for(String lib : extLibraries) {
				genPrinter.print("\n\t\t\t<Annotation name=\"Library\" value=\""+
						lib+"\"/>");
			}
			for(String inc : extIncludes) {
				genPrinter.print("\n\t\t\t<Annotation name=\"Include\" value=\""+
						replaceIllegalChars(inc)+"\"/>");
			}
			for(String libdir : extLibDirs) {
				genPrinter.print("\n\t\t\t<Annotation name=\"LibraryDirectory\" value=\""+
						libdir+"\"/>");
			}
			for(String incdir : extInclDirs) {
				genPrinter.print("\n\t\t\t<Annotation name=\"IncludeDirectory\" value=\""+
						incdir+"\"/>");
			}
			genPrinter.print("\n\t\t</Tool>");
			genPrinter.print("\n\t</VendorAnnotations>");
		}
	}	

	/**
	 * Internal class used to generate the model variables tags.
	 * 
	 * The model variables tags may vary in number and content. Therefore 
	 * the template file can not be used for this part of the XML. Instead, 
	 * all model variable tags are generated dynamically using this tag class.
	 * 
	 * @see DAETag
	 */
	public class DAETag_XML_modelVariables extends DAETag {
		
		public DAETag_XML_modelVariables(AbstractGenerator myGenerator, FClass fclass) {
			super("XML_variables", myGenerator, fclass);
		}
	
		/*
		 * (non-Javadoc)
		 * @see org.jmodelica.codegen.AbstractTag#generate(java.io.PrintStream)
		 */
		public void generate(CodeStream genPrinter) {
			// get and sort all FVariables
			ArrayList<FVariable> variables = (ArrayList<FVariable>) fclass.allVariables().clone();
			VariableNameComparator comp = new VariableNameComparator();			
			Collections.sort(variables, comp);
			
			for (FVariable variable : variables) {	
				if (!variable.isPreVariable() && !variable.isExternalObject() && !variable.isTemporary()) {
					genPrinter.print("\n\t\t<ScalarVariable ");
					genPrinter.print("name=\""+variable.name()+"\" ");
					genPrinter.print("valueReference=\""+variable.valueReference()+"\" ");
					if (variable.hasFStringComment()) {
						genPrinter.print("description=\"");
						//genPrinter.print("![CDATA[" + variable.getFStringComment().getComment()+"]]"+"\" ");
						genPrinter.print(replaceIllegalChars(variable.getFStringComment().getComment())+"\" ");
					}
					genPrinter.print("variability=\"");
					if (variable.isConstant()) {
						genPrinter.print("constant\" ");
					} else if (variable.isParameter()) {
						genPrinter.print("parameter\" ");
					} else if (variable.isDiscrete()) {
						genPrinter.print("discrete\" ");
					} else {
						//default
						genPrinter.print("continuous\" ");
					}
					genPrinter.print("causality=\"");
					if (variable.isInput()) {
						genPrinter.print("input\" ");
					} else if (variable.isOutput()) {
						genPrinter.print("output\" ");
					} else {
						//default
						genPrinter.print("internal\" ");
					}
   		            genPrinter.print("alias=\"");
   	   		        if (variable.isAlias()) {
   	   	      	    	if (variable.isNegated()) {
   	           	          genPrinter.print("negatedAlias\" ");
   	       		      	} else {
           		         	genPrinter.print("alias\" ");
               		 	}
            	    } else {
                		genPrinter.print("noAlias\"");
   		      	    }
	           	    genPrinter.print(">");

					if (variable.isReal()) {
						// TODO: move this to a method on FVariable that is overridden in subclasses
						genPrinter.print("\n\t\t\t<Real ");
						addRealAttributes(genPrinter, (FRealVariable)variable);
						genPrinter.print("/>");		
					} else if (variable.isInteger()) {
						genPrinter.print("\n\t\t\t<Integer ");
						addIntegerAttributes(genPrinter, (FIntegerVariable)variable);
						genPrinter.print("/>");
					} else if (variable.isBoolean()) {
						genPrinter.print("\n\t\t\t<Boolean ");
						addBooleanAttributes(genPrinter, (FBooleanVariable)variable);
						genPrinter.print("/>");
					} else if (variable.isString()) {
						genPrinter.print("\n\t\t\t<String ");
						addStringAttributes(genPrinter, (FStringVariable)variable);
						genPrinter.print("/>");
					} else if (variable.isEnum()) {
						genPrinter.print("\n\t\t\t<Enumeration ");
						addEnumAttributes(genPrinter, (FEnumVariable)variable);
						genPrinter.print("/>");
					}
					 else {
						//TODO: errorhandling
						System.err.println("Invalid or missing variable type definition");
					}
					
					//direct dependency - not supported
					if (variable.isOutput() && variable.isReal()) {
						genPrinter.print("\n\t\t\t<DirectDependency>");
						for (FVariable dv : variable.dependsOn()) {
							if (dv.isInput()) {
								genPrinter.print("\n\t\t\t\t<Name>");
								genPrinter.print(dv.name());
								genPrinter.print("</Name>");
							}
						}
						genPrinter.print("\n\t\t\t</DirectDependency>");
					}
					
					Boolean generateEqu = fclass.root().options.getBooleanOption("generate_xml_equations");
					if (generateEqu){
						//qualified name
						genPrinter.print("\n\t\t\t<QualifiedName>\n");
						variable.getFQName().prettyPrint_XML(genPrinter,"\t\t\t");
						genPrinter.print("\t\t\t</QualifiedName>");
					}		
					
					Boolean generateFMI = fclass.root().options.getBooleanOption("generate_fmi_me_xml");
					if (!generateFMI) {				
						//is linear?
						addLinearInfo(genPrinter, variable);
					
						//variable category
						genPrinter.print("\n\t\t\t<VariableCategory>");
						if (variable.isDerivativeVariable()) {
							genPrinter.print("derivative");
						} else if (variable.isDifferentiatedVariable()) {
							genPrinter.print("state");
						} else if (variable.isDependentConstant()) {
							genPrinter.print("dependentConstant");
						} else if (variable.isIndependentConstant()) {
							genPrinter.print("independentConstant");
						} else if (variable.isDependentParameter()) {
							genPrinter.print("dependentParameter");
						} else if (variable.isIndependentParameter()) {
							genPrinter.print("independentParameter");
						} else {
							//default is algebraic
							genPrinter.print("algebraic");
						}
						genPrinter.print("</VariableCategory>");
					}
				
					genPrinter.print("\n\t\t</ScalarVariable>");
				}
			}
		}
		
	}


	/*
	 * Helper method generating linear variable tag such that it can be overridden in 
	 * OptimicaXMLVariableGenerator.
	 */
	protected void addLinearInfo(CodeStream genPrinter, FVariable variable){
		//isLinear
		genPrinter.print("\n\t\t\t<isLinear>"+variable.isLinear()+"</isLinear>");
	}
	
	protected void addStartAndFixedAttribute(CodeStream genPrinter, FVariable var) {
		FExp e_start = null;
		Boolean isFixed;
		
		if (var.fixedAttributeSet()) {
		    isFixed = var.fixedAttributeExp().ceval().booleanValue();
		} else {
            isFixed = false; //The default value.
        }
        
		if (!isFixed) {
		    boolean startGenerated = false;
		    if (var.useBindingExpAsStart()) 
		        e_start = var.getBindingExp();
		    else if (var.startAttributeSet() && !var.isDependentParameter())
		        e_start = var.startAttributeExp();
		    else if (var.isInput())
		        e_start = var.createStartAttributeExp();
		    
		    if (!var.root().options.getBooleanOption("generate_xml_equations") && e_start != null && !e_start.isConstantExp())
		        e_start = null;
		    if (e_start != null) {
		        genPrinter.print("start=\"" + var.type().convert(e_start.ceval()).xmlValue() + "\" ");
		        startGenerated = true;
		    }
		    
            if (startGenerated && !var.fixedAttribute()) {
                //Start is generated and fixed equals false => generate this.
                genPrinter.print("fixed=\"false\" ");
            }
		}
	}

	/*
	 * Helper method generating all real attributes.
	 */
	protected void addRealAttributes(CodeStream genPrinter, FRealVariable realvariable) {
		//declaredType
		//genPrinter.print("declaredType=\"String\" ");		
		//quantity
		if(realvariable.quantityAttributeSet()) {
			genPrinter.print("quantity=\""+realvariable.quantityAttribute()+"\" ");
		}
		//unit
		if(realvariable.unitAttributeSet()) {
			genPrinter.print("unit=\""+realvariable.unitAttribute()+"\" ");
		}
		//default display unit
		if(realvariable.displayUnitAttributeSet()) {
			genPrinter.print("displayUnit=\""+realvariable.displayUnitAttribute()+"\" ");
		}		
		//relativeQuantity
		genPrinter.print("relativeQuantity=\"false\" ");
		
		//min
		if(realvariable.minAttributeSet()) {
			genPrinter.print("min=\""+realvariable.minAttribute()+"\" ");
		}
		//max
		if(realvariable.maxAttributeSet()) {
			genPrinter.print("max=\""+realvariable.maxAttribute()+"\" ");
		}
		//nominal
		if(realvariable.nominalAttributeSet()) {
			genPrinter.print("nominal=\""+realvariable.nominalAttribute()+"\" ");
		}
		//start and fixed
		addStartAndFixedAttribute(genPrinter, realvariable);
		// fixed
		//if (realvariable.fixedAttributeSet()) {
		//	genPrinter.print("fixed=\""+realvariable.fixedAttribute()+"\" ");
		//}
	}
	
	/*
	 * Helper method generating all integer attributes.
	 */
	protected void addIntegerAttributes(CodeStream genPrinter, FIntegerVariable integervariable) {
		//declaredType
		//genPrinter.print("declaredType=\"String\" ");		
		//quantity
		if(integervariable.quantityAttributeSet()) {
			genPrinter.print("quantity=\""+integervariable.quantityAttribute()+"\" ");
		}					
		//min
		if(integervariable.minAttributeSet()) {
			genPrinter.print("min=\""+integervariable.minAttribute()+"\" ");
		}
		//max
		if(integervariable.maxAttributeSet()) {
			genPrinter.print("max=\""+integervariable.maxAttribute()+"\" ");
		}
		//start
		addStartAndFixedAttribute(genPrinter, integervariable);
		// fixed
		//if (integervariable.fixedAttributeSet()) {
		//	genPrinter.print("fixed=\""+integervariable.fixedAttribute()+"\" ");
		//}
	}

	/*
	 * Helper method generating all integer attributes.
	 */
	protected void addEnumAttributes(CodeStream genPrinter, FEnumVariable enumvariable) {
		//declaredType
		genPrinter.print("declaredType=\""+enumvariable.myFEnumDecl().name()+"\" ");	
		
		//quantity
		if(enumvariable.quantityAttributeSet()) {
			genPrinter.print("quantity=\""+enumvariable.quantityAttribute()+"\" ");
		}					
		//min
		if(enumvariable.minAttributeSet()) {
			genPrinter.print("min=\""+enumvariable.minAttribute()+"\" ");
		}
		//max
		if(enumvariable.maxAttributeSet()) {
			genPrinter.print("max=\""+enumvariable.maxAttribute()+"\" ");
		}
		//start and fixed
		addStartAndFixedAttribute(genPrinter, enumvariable);
		// fixed
		//if (enumvariable.fixedAttributeSet()) {
		//	genPrinter.print("fixed=\""+enumvariable.fixedAttribute()+"\" ");
		//}
	}

	
	/*
	 * Helper method generating all boolean attributes.
	 */
	protected void addBooleanAttributes(CodeStream genPrinter, FBooleanVariable booleanvariable) {
		//declaredType
		//genPrinter.print("declaredType=\"String\" ");
		//start and fixed attribute
	    addStartAndFixedAttribute(genPrinter, booleanvariable);
		// fixed
		//if (booleanvariable.fixedAttributeSet()) {
		//	genPrinter.print("fixed=\""+booleanvariable.fixedAttribute()+"\" ");
		//}
	}
	
	/*
	 * Helper class generating all string attributes.
	 */
	protected void addStringAttributes(CodeStream genPrinter, FStringVariable stringvariable) {
		//declaredType
		//genPrinter.print("declaredType=\"String\" ");
		//start attribute
		addStartAndFixedAttribute(genPrinter, stringvariable);
		// fixed - not supported
		//if (stringvariable.fixedAttributeSet()) {
		//	genPrinter.print("fixed=\""+stringvariable.fixedAttribute()+"\" ");
		//}		
	}
		
	/**
	 * Internal class used to generate the tags for parameters binding equations.
	 * 
	 * @see DAETag
	 */
	public class DAETag_XML_bindingEquations extends DAETag {
		
		public DAETag_XML_bindingEquations(AbstractGenerator myGenerator, FClass fclass) {
			super("XML_bindingEquations", myGenerator, fclass);
		}
		
		/*
		 * (non-Javadoc)
		 * @see org.jmodelica.codegen.AbstractTag#generate(java.io.PrintStream)
		 */
		public void generate(CodeStream genPrinter) {
			Boolean generateEqu = fclass.root().options.getBooleanOption("generate_xml_equations");
			if(generateEqu) {
				genPrinter.println("<equ:BindingEquations>");			
			
				for(FVariable variable:fclass.independentParameters()){
					if(variable.hasBindingExp()){
						FExp expression = variable.getBindingExp();
						genPrinter.println("\t\t<equ:BindingEquation>");
						genPrinter.print("\t\t\t<equ:Parameter>");
						variable.getFQName().prettyPrint_XML(genPrinter,"\t\t\t");
						genPrinter.println("</equ:Parameter>");
						genPrinter.println("\t\t\t<equ:BindingExp>");
						expression.prettyPrint_XML(genPrinter,"\t\t\t\t");
						genPrinter.println("\t\t\t</equ:BindingExp>");
						genPrinter.println("\t\t</equ:BindingEquation>");
					}
				}
		
				for(FVariable variable:fclass.dependentParameters()){
					if(variable.hasBindingExp() || variable.hasParameterEquation()){
						FExp expression = null;
						if (variable.hasBindingExp()) {
							expression = variable.getBindingExp();
						} else {
							expression = ((FEquation)variable.parameterEquation()).getRight();
						}
				
						genPrinter.println("\t\t<equ:BindingEquation>");
						genPrinter.print("\t\t\t<equ:Parameter>");
						variable.getFQName().prettyPrint_XML(genPrinter,"\t\t\t");
						genPrinter.println("</equ:Parameter>");
						genPrinter.println("\t\t\t<equ:BindingExp>");
						expression.prettyPrint_XML(genPrinter,"\t\t\t\t");
						genPrinter.println("\t\t\t</equ:BindingExp>");
						genPrinter.println("\t\t</equ:BindingEquation>");
					}
				}
			
				genPrinter.println("\t</equ:BindingEquations>");
			}
		}
	}
	
	
	
	/**
	 * Internal class used to generate the tags for dynamic equations.
	 * 
	 * @see DAETag
	 */
	public class DAETag_XML_equations extends DAETag {
		
		public DAETag_XML_equations(AbstractGenerator myGenerator, FClass fclass) {
			super("XML_Equations", myGenerator, fclass);
		}
		
		/*
		 * (non-Javadoc)
		 * @see org.jmodelica.codegen.AbstractTag#generate(java.io.PrintStream)
		 */
		public void generate(CodeStream genPrinter) {
			Boolean generateEqu = fclass.root().options.getBooleanOption("generate_xml_equations");
			if(generateEqu){
				genPrinter.println("<equ:DynamicEquations>");			
				for(FAbstractEquation e : fclass.equations())
					e.prettyPrint_XML(genPrinter,"\t\t");								
				genPrinter.println("\t</equ:DynamicEquations>");
			}
		}
	}
	

	/**
	 * Internal class used to generate the tags for initial equations.
	 * 
	 * @see DAETag
	 */
	public class DAETag_XML_initialEquations extends DAETag {
		
		public DAETag_XML_initialEquations(AbstractGenerator myGenerator, FClass fclass) {
			super("XML_initialEquations", myGenerator, fclass);
		}
		
		/*
		 * (non-Javadoc)
		 * @see org.jmodelica.codegen.AbstractTag#generate(java.io.PrintStream)
		 */
		public void generate(CodeStream genPrinter) {
			Boolean generateEqu = fclass.root().options.getBooleanOption("generate_xml_equations");
			if(generateEqu) {
				genPrinter.println("<equ:InitialEquations>");			
				for(FAbstractEquation e : fclass.initialEquations())
					e.prettyPrint_XML(genPrinter,"\t\t");								
				genPrinter.println("\t</equ:InitialEquations>");
			}
		}
	}
	
	/**
	 * Internal class used to generate the tags for optimization problems
	 * 
	 * @see DAETag
	 */
	public class DAETag_XML_Optimization extends DAETag {
		
		public DAETag_XML_Optimization(AbstractGenerator myGenerator, FClass fclass) {
			super("XML_Optimization", myGenerator, fclass);
		}
		
		/*
		 * (non-Javadoc)
		 * @see org.jmodelica.codegen.AbstractTag#generate(java.io.PrintStream)
		 */
		public void generate(CodeStream genPrinter) {
			//do nothing
		}
		
		
	}
	
	
	/**
	 * Internal class used to generate the tags for user-defined functions declaration.
	 * 
	 * @see DAETag
	 */
	public class DAETag_XML_functions extends DAETag {
		
		public DAETag_XML_functions(AbstractGenerator myGenerator, FClass fclass) {
			super("XML_Functions", myGenerator, fclass);
		}
		
		/*
		 * (non-Javadoc)
		 * @see org.jmodelica.codegen.AbstractTag#generate(java.io.PrintStream)
		 */
		public void generate(CodeStream genPrinter) {
			Boolean generateEqu = fclass.root().options.getBooleanOption("generate_xml_equations");
			if(generateEqu) {
				genPrinter.println("<fun:FunctionsList>");			
				for(FFunctionDecl f : fclass.getFFunctionDeclList())
					f.prettyPrint_XML(genPrinter,"\t\t");								
				genPrinter.println("\t</fun:FunctionsList>");
			}
		}
	}
	
		/*** FMI 2.0 Code Gen ***/	
		
	/**
	 * Internal class used to generate the model structure element in FMI 2.0.
	 * 
	 * @see DAETag
	 */
	public class DAETag_XML_modelStructure extends DAETag {
		
		public DAETag_XML_modelStructure(AbstractGenerator myGenerator, FClass fclass) {
			super("XML_modelStructure", myGenerator, fclass);
		}
		
		/*
		 * (non-Javadoc)
		 * @see org.jmodelica.codegen.AbstractTag#generate(java.io.PrintStream)
		 */
		public void generate(CodeStream genPrinter) {

		if (!fclass.root().options.getStringOption("fmi_version").equals("2.0alpha")) {
			return;
		}
		
		int i;
		genPrinter.print("<ModelStructure>\n");
		genPrinter.print("\t<Inputs>\n");
		for (FVariable v : fclass.inputs()) {
			genPrinter.print("\t\t<Input name=\"");
			genPrinter.print(v.name());
			genPrinter.print("\"/>\n");	
		}	
		genPrinter.print("\t</Inputs>\n");	
		
		genPrinter.print("\t<Derivatives>\n");	
		for (FDerivativeVariable v : fclass.derivativeVariables()) {
			genPrinter.print("\t\t<Derivative name=\"");
			genPrinter.print(v.name());
			genPrinter.print("\" state=\"");
			genPrinter.print(v.myDifferentiatedVariable().name());
			i = 0;
			genPrinter.print("\" stateDependency=\"");
			for (FVariable vv : v.dependsOn()) {
				if (vv.isDifferentiatedVariable()) {
					genPrinter.print(vv.differentiatedRealVariableIndex()+1);
					genPrinter.print(" ");
				}
				i++;
			}
			i = 0;
			genPrinter.print("\" inputDependency=\"");
			for (FVariable vv : v.dependsOn()) {
				if (vv.isInput()) {
					genPrinter.print(vv.inputIndex()+1);
					genPrinter.print(" ");
				}
				i++;
			}
			genPrinter.print("\"/>\n");	
		}	
		genPrinter.print("\t</Derivatives>\n");	
		
		genPrinter.print("\t<Outputs>\n");	
		for (FVariable v : fclass.outputs()) {
			genPrinter.print("\t\t<Output name=\"");
			genPrinter.print(v.name());
			genPrinter.print("\" stateDependency=\"");
			i = 0;
			for (FVariable vv : v.dependsOn()) {
				if (vv.isDifferentiatedVariable()) {
					genPrinter.print(vv.differentiatedRealVariableIndex()+1);
					genPrinter.print(" ");
				}
				i++;
			}
			if (v.isDifferentiatedVariable()) {
					genPrinter.print(v.differentiatedRealVariableIndex()+1);
					genPrinter.print(" ");					
			}
			genPrinter.print("\" inputDependency=\"");
			i = 0;
			for (FVariable vv : v.dependsOn()) {
				if (vv.isInput()) {
					genPrinter.print(vv.inputIndex()+1);
					genPrinter.print(" ");
				}
				i++;
			}
			genPrinter.print("\"/>\n");	
		}	
		genPrinter.print("\t</Outputs>\n");	
	
		genPrinter.print("</ModelStructure>\n");

		}
	}
	
    /**
     * The name of the root tag to use if no template file is given, not 
     * supported for this generator.
     */
    protected String root() {
    	return null;
    }
}

public class VariableNameComparator implements Comparator<FVariable> {
	public int compare(FVariable variable1, FVariable variable2) {
		String name1 = variable1.getFQNameNoTransform().name();
		String name2 = variable2.getFQNameNoTransform().name();
		String regex = "\\[|\\]";
		String[] n1 = name1.split(regex);
		String[] n2 = name2.split(regex);
		
		int nn = Math.min(n1.length, n2.length);
		int res = 0;
		
		for (int i=0; i < nn && res == 0; i++) {
			if (i%2 == 0) {			//even index -> name
				res = n1[i].compareTo(n2[i]);
			} else {				//odd index -> variable index
				String[] i1 = n1[i].split(",");
				String[] i2 = n2[i].split(",");
				int ni = Math.min(i1.length, i2.length);
				
				for (int j = 0; j < ni && res == 0; j++) {
					int ii1 = Integer.parseInt(i1[j]);
					int ii2 = Integer.parseInt(i2[j]);
					res = ii1 - ii2;
				}
				if (res == 0) {
					res = i1.length - i2.length;
				}
			}
		}
		if (res == 0) {
			res = n1.length - n2.length;
		}
		return res;
	}

}

/**
 * A helper class to XMLGenerator classes providing start and end tags with the
 * correct amount of tabs. This class will be used in the XML code generation
 * for the parts which are dynamical and therefore can not use a template.
 * 
 */
public class TagGenerator {
	private String tabs="";
	private Stack<String> stack;
	private String previous;
	
	/**
	 * Constructor.
	 * 
	 * @param tabstart Number of tabs indent at start.
	 */
	public TagGenerator(int tabstart) {
		stack = new Stack<String>();
		for(int i =0; i<tabstart; i++) {
			tabs=tabs+"\t";
		}
	}
	
	/**
	 * Generates a tag with a certain tagname.
	 * 
	 * The first time the tagname is encountered a start tag is created. The
	 * second time the same tagname is used a matching end tag is created. For
	 * each unique tagname a new start tag is created with one more tab indent.
	 * If start and end tags are encountered immediately after each other they
	 * will be on the same line.
	 * 
	 * @param tagname
	 *            The name of the tag to create.
	 * @return Start or end tag with name set to <tagname>.
	 */
	public String generateTag(String tagname) {
		return generateTag(tagname, false);
	}
	
	public String generateTag(String tagname, boolean isAttributeTag) {
		if(stack.isEmpty() || !stack.peek().equals(tagname.trim())) {
			stack.push(tagname.trim());
			return generateStartTag(tagname, isAttributeTag);
		}else {
			return generateEndTag(stack.pop(), isAttributeTag);
		} 

	}
	
	/**
	 * Generates a start tag with the specified tagname.
	 * 
	 * @param tagname
	 *            The name of the tag for which a start tag should be created.
	 * @return The start tag with name set to <tagname>.
	 */
	private String generateStartTag(String tagname, boolean isAttributeTag) {
		String tag;
		if(isAttributeTag) {
			tag = "\n"+tabs+"<"+tagname+" "; 
		}else {
			tag = "\n"+tabs+"<"+tagname+">";			
		}
		tabs=tabs+"\t";
		previous = tagname;
		return tag;
		
	}
	
	/**
	 * Generates an end tag with the specified tagname.
	 * 
	 * @param tagname
	 *            The name of the tag for which an end tag should be created.
	 * @return The end tag with name set to <tagname>.
	 */
	private String generateEndTag(String tagname, boolean isAttributeTag) {
		String tag;
		tabs=tabs.substring(1);
		if(!previous.equals(tagname)) {
			tag=("\n"+tabs);
		} else {
			tag=("");
		}
		if(isAttributeTag) {
			tag = tag +"/>";
		} else {
			tag=tag+("</"+tagname+">");
		}
		return tag;
	}
		
	
}

