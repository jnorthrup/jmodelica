<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Initialization</title>

  <section>
    <title>Initialization</title>

    <para>Before a model can be simulated it must be initialized, i.e.
    consistent initial values must be computed. To do this, JModelica.org
    supplies the JMUmodel member function <literal>initialize</literal>, which
    initializes the JMUmodel. The function is called after compiling and
    creating a JMUModel:</para>

    <programlisting># Compile the stationary initialization model into a DLL
model_name = compile_jmu("My.Model", "/path/to/MyModel.mo")

# Load a model instance into Python
init_model = JMUModel(model_name)
    
# Solve the DAE initialization system
init_result = init_model.initialize()</programlisting>

    <para>The JMUModel instance <literal>init_model</literal> is now
    initialized and is ready to be simulated.</para>

    <section>
      <title>How JModelica.org creates the initialization system of
      equations</title>

      <para>To find a set of consistent initial values a system of non-linear
      equations, called the system of initialization equations, is solved.
      This system is composed from the DAE equations, the initial equations,
      some resulting from start attributes with the fixed attribute set to
      true. Start attributes with the fixed attribute set to false are treated
      as initial guesses for the numerical algorithm used to solve the
      initialization problem</para>

      <para>Some initialization algorithms require the system of initial
      equations to be well defined in the sense that the number of variables
      must be equal to the number of equations. If this is not the case, the
      </para>

      <itemizedlist>
        <listitem>
          <para>If the number of equations is greater than the number of
          variables the system is overdetermined. Such a system may not have a
          solution, and will be treated as ill-defined. An exception is thrown
          in this case.</para>
        </listitem>

        <listitem>
          <para>If the number of equations is less than the number of
          variables the system is underdetermined and such a system has
          infinitely many solutions. In this case, the compiler tries to
          balance the system by setting some fixed attributes to
          <literal>true</literal>. So if the user supplies too few initial
          conditions, some variables with the attribute
          <literal>fixed</literal> set to <literal>false</literal> may be
          changed to <literal>true</literal> during initialization.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Initialization algorithms</title>

      <para>JModelica.org has the ability to support different initialization
      algorithms. The choice of algorithm is done when calling the
      <literal>initialize</literal>:</para>

      <programlisting># Solve the DAE initialization system
init_result = init_model.initialize(algorithm='IpoptInitializationAlg')</programlisting>

      <para>In the example above the default algorithm using IPOPT is chosen.
      This is currently the only fully implemented initialization
      algorithm.</para>
    </section>
  </section>
</chapter>
