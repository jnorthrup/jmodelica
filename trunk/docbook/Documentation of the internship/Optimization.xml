<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter>
  <title>Optimization</title>

  <section>
    <title>Optimization problems</title>

    <para>A typical optimization problem is defined by minimizing or
    maximizing a given cost function f(x,u) with f: A → R, where x describes
    the vector of variables and u the vector of inputs. The problem is solved
    by systematically choosing input values. The set A is thereby defined by
    constraints.</para>

    <para>A distinction is drawn between optimization of dynamic and steady
    state models. For steady state models algebraic equations are given for
    the variables. In the case of a dynamic model a system of differential
    equations has to be solved. JModelica supports both, steady state as well
    as dynamic models.</para>

    <para>Optimization problems can be divided into different classes. In the
    following section I am going to deal with optimal control, minimum time
    and parameter estimation problems.</para>

    <para>Most of the models that are introduced in this chapter are based on
    the Matlab models taken from the " PROPT - Matlab Optimal Control Software
    (DAE, ODE)" page. The challenge thereby was to modify them into the
    Modelica language and to solve the problem in Python. Furthermore it
    offers the possibility to compare and verify my results and plots.</para>

    <para>In JModelica optimization problems are handled with the Modelica
    extension Optimica. In summary the Optimica extension consists of the
    following elements:</para>

    <itemizedlist>
      <listitem>
        <para>a new specialized class: <sgmltag
        class="element">optimization</sgmltag></para>
      </listitem>

      <listitem>
        <para>new attributes for the built-in type Real: <sgmltag
        class="element">free</sgmltag> and <sgmltag
        class="element">initialGuess</sgmltag></para>
      </listitem>

      <listitem>
        <para>a new function for accessing the value of a variable at a
        specified time instant</para>
      </listitem>

      <listitem>
        <para>class attributes for the specialized class <sgmltag
        class="element">optimization: objective, startTime, finalTime and
        static</sgmltag></para>
      </listitem>

      <listitem>
        <para>a new section: <sgmltag
        class="element">constraint</sgmltag></para>
      </listitem>

      <listitem>
        <para>inequality constraints</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Getting started</title>

    <para>I start with introducing an optimal control problem to provide an
    insight into the theme. The example considered is the "Continuous state
    constraint problem".</para>

    <para>At first the model is set up in Dymola equivalent to a simulation
    problem. States, start values, the control input and differential and
    algebraic equations are stated.</para>

    <programlisting>model ContState

     //State start values
     parameter Real x1_0 = 0;
     parameter Real x2_0= -1;

     //States
     Real x1(start = x1_0, fixed=true);
     Real x2(start = x2_0, fixed=true);
     Real p;

     //Control Signal
      Modelica.Blocks.Interfaces.RealInput u
equation 
      p = 8*(time-0.5)^2-0.5-x2;
      der(x1) = x2;
      der(x2) = -x2+u;
end ContState;</programlisting>

    <para>In the next step the optimization problem is formulated using the
    Optimica class <sgmltag class="element">optimization</sgmltag>. The
    <sgmltag class="element">objective</sgmltag>, <sgmltag
    class="element">startTime</sgmltag>, <sgmltag
    class="element">finalTime</sgmltag> and the constraints are established.
    To import variable declarations and equations the comment "extends" is
    provided in Optimica.</para>

    <para>Instead it would also be possible to define an instance of the class
    ContState. In this case the variables and inputs are called by
    <emphasis>instancename</emphasis>.<emphasis>variablename.
    </emphasis></para>

    <programlisting>optimization ContState_opt (objective = J(finalTime),
                            startTime = 0,
                            finalTime = 1)
                            
      extends JMExamples.ContState.ContState(x1(fixed=true),x2(fixed=true),p);
  Real J(fixed=true);     

  equation
     der(J) = x1^2+x2^2+0.005*u^2;
  constraint
     -10&lt;=x1;
     x1&lt;=10;
     -10&lt;=x2;
     x2&lt;=10;
     -20&lt;=u;
     u&lt;=20;
     8*(time-0.5).^2-0.5-x2 &gt;= 0;
end ContState_opt;</programlisting>

    <para>Alternatively the states, control inputs and equations can be stated
    in the <sgmltag class="element">optimization</sgmltag> class as well since
    Optimica as an extension of Modelica supports Modelica constructs such as
    variable declarations and equations. Though the separation of the the
    model into a <sgmltag class="element">model</sgmltag> and an <sgmltag
    class="element">optimization</sgmltag> class offers the possibility to
    experiment with the input in Dymola.</para>

    <para>Now the problem is solved in Python, the results are printed and
    plotted. This is performed similar to the procedure described in the
    simulation chapter. The only difference id that FMUModel is replaced by
    JMUModel, accordingly compile_fmu is replaced by compile_jmu and the
    <emphasis>optimize</emphasis> comment is used instead of
    <emphasis>simulate</emphasis>. The states and the input are
    plotted:</para>

    <figure>
      <title>ContState</title>

      <mediaobject>
        <imageobject>
          <imagedata align="left" fileref="Doc%20pictures/cont_state_doc.png"
                     scale="60"/>
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section>
    <title>Parameter estimation problems</title>

    <para>A model description through variables, parameters and equations
    forms the base for parameter estimation problems. Additional a set of
    measured data for one or more variables over time is given. The aim is now
    to fit the computed state values of the model at the corresponding points
    in time with the measured data by adapting the parameter. This is realized
    by transforming the problem into an optimization problem. The objective is
    then the sum of the squared errors of the computed state values and the
    measured data.</para>

    <section>
      <title>Marine Population</title>

      <para>In this example the given data set represents the size of the
      population of a marine species at each stage over time (for example
      infant, juvenile, adult), which depends on the stage specific growth (g)
      and morality rate (m). It is assumed that the species either dies or
      grows into the next stage, but can not skip a stage. The model equation
      for the population dynamics at each stage is:</para>

      <equation>
        <mathphrase>y'(N)= g(N-1)*y(N-1)- (m(N) + g(N))*y(N) ; for 1≤ N ≤
        8</mathphrase>
      </equation>

      <para>Now the model is set up in Modelica and Optimica. In Modelica m
      and g are at first defined as parameter. In Optimica the attribute
      <sgmltag class="element">each free</sgmltag> (which means free for each
      component of the vector) is set to handle them as variable inputs. The
      first line of the matrix of measured data should be consistent with the
      initial value of y.</para>

      <programlisting>model MarinePopulation

  //parameter
  parameter Real m[8]={0,0,0,0,0,0,0,0};
  parameter Real g[7]={0,0,0,0,0,0,0};

  //states
  Real y[8](start={20000,17000,10000,15000,12000,9000,7000,3000}, each fixed=true);

equation 
  der(y) = cat(1,{0},g).*cat(1,{0},y[1:7]) - (m+cat(1,g,{0})).*y;
end MarinePopulation;</programlisting>

      <programlisting>optimization MarinePopulation_opt (objective = sum(sum((mp.y[j](tm[i])-ym[i,j])^2 
                                   for i in 1:21) for j in 1:8),
                            startTime = 0,
                            finalTime = 20)

  JMExamples.MarinePopulation.MarinePopulation 
   mp(y(each fixed=true),g(each free=true), m(each free=true));

  //parameter
  parameter Real ym[21,8]=
  {{ 20000, 17000, 10000, 15000, 12000, 9000, 7000, 3000},
   { 12445, 15411, 13040, 13338, 13484, 8426, 6615, 4022},
   {  7705, 13074, 14623, 11976, 12453, 9272, 6891, 5020},
   {  4664,  8579, 12434, 12603, 11738, 9710, 6821, 5722},
   {  2977,  7053, 11219, 11340, 13665, 8534, 6242, 5695},
   {  1769,  5054, 10065, 11232, 12112, 9600, 6647, 7034},
   {   943,  3907,  9473, 10334, 11115, 8826, 6842, 7348},
   {   581,  2624,  7421, 10297, 12427, 8747, 7199, 7684},
   {   355,  1744,  5369,  7748, 10057, 8698, 6542, 7410},
   {   223,  1272,  4713,  6869,  9564, 8766, 6810, 6961},
   {   137,   821,  3451,  6050,  8671, 8291, 6827, 7525},
   {    87,   577,  2649,  5454,  8430, 7411, 6423, 8388},
   {    49,   337,  2058,  4115,  7435, 7627, 6268, 7189},
   {    32,   228,  1440,  3790,  6474, 6658, 5859, 7467},
   {    17,   168,  1178,  3087,  6524, 5880, 5562, 7144},
   {    11,    99,   919,  2596,  5360, 5762, 4480, 7256},
   {     7,    65,   647,  1873,  4556, 5058, 4944, 7538},
   {     4,    44,   509,  1571,  4009, 4527, 4233, 6649},
   {     2,    27,   345,  1227,  3677, 4229, 3805, 6378},
   {     1,    20,   231,   934,  3197, 3695, 3159, 6454},
   {     1,    12,   198,   707,  2562, 3163, 3232, 5566}};
  parameter Real tm[21]= 0:20;

 equation 
end MarinePopulation_opt;</programlisting>

      <para>Before solving the optimization problem in Python I ensured that
      the number of computed points for each component of y is adapted to the
      number of measured data to be able to calculate the error at each point
      as well as the objective function. This can be realized by setting
      additional options. If no options are set, default values are
      used.</para>

      <programlisting># optimize
    opts = mp.optimize_options()
    opts['n_e'] = 20
    opts['n_cp'] = 1
    res = mp.optimize(options=opts)</programlisting>

      <para>The parameter 'n_e' represents the number of elements, 'n_cp' the
      number of collocation points at each element, which is equal to the
      order of the used Runge Kutta method. The number of elements of the
      result vector of each variable results from: n_e*n_cp+1. In this example
      the accuracy of the solution does not change if I use a different value
      for n_cp.</para>

      <figure>
        <title>MarinePopulation</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left"
                       fileref="Doc%20pictures/marine_population_doc.png"
                       scale="50"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Optimal parameter values and objective:</para>

      <itemizedlist>
        <listitem>
          <para>g = {0.015, 0.510, 0.231, 0.264, 0.229, 0.315, 0.281}</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>m = {0.015, 0.091, 0.169, 0.030, 0.030, -0.009, 0.141,
          0.222}</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>J = 3277.676</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Minimum time problems</title>

    <para>For this class of problems the objective is the class attribute
    <sgmltag class="element">finalTime</sgmltag>. Hence the attribute
    free=true is set for <sgmltag class="element">finalTime.</sgmltag>
    Additional to the common configurations for optimization problems variable
    values at the <sgmltag class="element">finalTime</sgmltag> have to be
    given. In other words: Instead of searching for a minimal value at a fixed
    time we aim for a fixed value in minimal time.</para>

    <section>
      <title>Coloumb Friction</title>

      <para>The Coloumb Friction optimal time problem is based on a nonlinear
      dynamic system. The nonlinearity occurs due to the presence of a sign()
      term in the state equation which arises from the kinetic friction. Using
      the sign() function a discontinuity occurs when the sign of the variable
      changes. Hence Modelica generates an event which involves that some
      behavior is associated with th event. It is possible and at this point
      necessary to avoid this by using the noEvent() function.</para>

      <para>For both states a restriction at the final time is given.</para>

      <programlisting>optimization ColoumbFriction_opt (objective = finalTime,
                            startTime = 0,
                            finalTime(free=true,min=0))
                            
  //states
  Real q(start = 0, fixed=true);
  Real dq(start = 1, fixed=true);
  Real sign;
  
  //control signal 
  input Real u(free=true, min=-2, max=2);
  
 equation 
  der(q) = dq;
  sign = noEvent(if dq&gt;0 then 1 else if dq&lt;0 then -1 else 0);
      der(dq)= u- sign;
 constraint
  q(finalTime) = -1;
  dq(finalTime) = 0;
end ColoumbFriction_opt;</programlisting>

      <figure>
        <title>ColoumbFriction</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left"
                       fileref="Doc%20pictures/coloumb_friction_doc.png"
                       scale="60"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>A complex example for optimal control: Penicillin Plant</title>

    <para>This example is the most complex and in my opinion most interesting
    model I dealt with. The example represents a penicillin fermentation
    process and the objective is to maximize the concentration of penicillin
    at a certain final time. The occurring isothermal reactions are thereby: S
    -&gt; X and S -&gt; P. The input is the feed flow rate of the substrate
    concentration S. The parameter, states and input can be find in the model
    set up.</para>

    <programlisting>model PenicillinPlant1

  import SI = Modelica.SIunits;

  parameter Real miu_m = 0.02;
  parameter Real Km =   0.05;
  parameter Real Ki = 5;
  parameter Real Yx =    0.5;
  parameter Real Yp =   1.2;
  parameter Real v = 0.004;
  parameter Real Sin =   200;

  //state start values
  parameter Real X1_0=1;
  parameter Real S1_0=0.5;
  parameter Real P1_0=0;
  parameter Real V1_0=150;
  parameter Real u1_0=1;

  //state start values
  Real X1(start=X1_0,fixed=true) "Cell mass concentration";
  Real S1(start=S1_0,fixed=true) "Substrate concentration";
  Real P1(start=P1_0,fixed=true) "Penicillin concentration";
  Real V1(start=V1_0,fixed=true) "Volume of medium";
  Real u1(start=u1_0,fixed=true);
  Real miu1;

  //control signal
  Modelica.Blocks.Interfaces.RealInput du1 "Feed Flowrate derivative";

equation 
  miu1 = (miu_m*S1)/(Km+S1+S1^2/Ki);
  der(X1) = miu1*X1-u1/V1*X1;
  der(S1) = -miu1*X1/Yx - v*X1/Yp + u1/V1*(Sin - S1);
  der(P1) = v*X1 - u1/V1*P1;
  der(V1) = u1;
  der(u1) = du1;

end PenicillinPlant1;</programlisting>

    <section>
      <title>Optimization</title>

      <para>As already mentioned, the objective for this model is to get a
      maximal value for P at the finalTime. Since the objective function is
      minimized in Optimica, it is -P(finalTime) in this case. A constraint is
      put on the biomass concentration. If the biomass concentration reaches
      the value 3.7, the upper input constraint is set to 0.03. This
      guarantees X=3.7 and S=0 in that interval. Therefore a phase change is
      required. Since JModelica does (not yet) support multi phase models
      another solution has to be found. Two problems remain:</para>

      <itemizedlist>
        <listitem>
          <para>How to create a change of constraints in a model?</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para>How can the optimal time for the change be computed (when does
          X reach the value 3.7)?</para>
        </listitem>
      </itemizedlist>

      <para>The first problem I solved by creating a second equivalent model
      with a different upper constraint for u. At first I assumed that after
      half of the time (finalTime=75) the phase change occurs.</para>

      <programlisting>optimization PenicillinPlant_opt1 (objective = -P1(finalTime),
                            startTime = 0,
                            finalTime = 75)              
  extends JMExamples.PenicillinPlant.PenicillinPlant1
  (X1(fixed=true),S1(fixed=true),P1(fixed=true),V1(fixed=true),miu1,u1);   

 equation 
 constraint
  0  &lt;= X1;
  X1 &lt;= 3.7;
  0  &lt;= S1;
  S1 &lt;= 100;
  0  &lt;= P1;
  P1 &lt;= 5;
  1  &lt;= V1;
  V1 &lt;= 300;
  0  &lt;= u1;
  u1 &lt;= 1;
end PenicillinPlant_opt1;</programlisting>

      <para>The values at the final time of the first phase are then set as
      initial values for the second phase in Python.</para>

      <programlisting>#set results of the first state as input for the second state
    X2_init = X1[len(X1)-1]
    S2_init = S1[len(S1)-1]
    P2_init = P1[len(P1)-1]
    V2_init = V1[len(V1)-1]
    u2_init = u1[len(u1)-1]
    du2_init = du1[len(du1)-1]

    pp2.set('X2_0',X2_init)
    pp2.set('S2_0',S2_init)
    pp2.set('P2_0',P2_init)
    pp2.set('V2_0',V2_init)
    pp2.set('u2_0',u2_init)
    pp2.set('du2_0',du2_init)</programlisting>

      <para>The optimization is accomplished for the second phase and the
      results are plotted. The penicillin production is 1.6626.</para>

      <figure>
        <title>PenicillinPlant (phase change time = 75s)</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left"
                       fileref="Doc%20pictures/penicillin_plant_75_doc.png"
                       scale="60"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The second problem can be solved by developing a minimal time
      problem and setting the constraint X(finalTime) = 3.7.</para>

      <programlisting>optimization PenicillinPlant_opttime (objective = finalTime
                            startTime = 0,
                            finalTime(free=true,min=0))              
   extends JMExamples.PenicillinPlant.PenicillinPlant1
   (X1(fixed=true),S1(fixed=true),P1(fixed=true),V1(fixed=true),miu1,u1);  
 
 equation
 constraint
  0  &lt;= X1;
  X1 &lt;= 3.7;
  X1(finalTime) = 3.7;
  0  &lt;= S1;
  S1 &lt;= 0.5;
  0  &lt;= P1;
  P1 &lt;= 5;
  1  &lt;= V1;
  V1 &lt;= 300;
  0  &lt;= u1;
  u1 &lt;= 1;
end PenicillinPlant_opttime;</programlisting>

      <para>The result of 80.277 s seems reasonable because it is relative
      close to 75 s.</para>

      <para>The optimization is performed again with a change of phases at
      80.277 s.</para>

      <figure>
        <title>PenicillinPlant (phase change time = 80.277s)</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left"
                       fileref="Doc%20pictures/penicillin_plant_80_doc.png"
                       scale="60"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Indeed the amount of produced penicillin increased to 1.68 . The
      result can also be justified by the fact that the solver fails for
      change time =82 s.</para>
    </section>
  </section>

  <section>
    <title>Create an own optimization problem</title>

    <para>Here comes the recipe how to create an optimization problem
    yourself. All you need is a model (set up in Modelica), which has some
    input value or at least parameters that can be transformed to inputs.
    Depending on the type of optimization problem (optimal control, minimum
    time, parameter estimation) there are different ways how to set up the
    optimization model in Optimica:</para>

    <itemizedlist>
      <listitem>
        <para>think of an arbitrary objective function, which should be
        minimized depending on states and inputs</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>an optimization problem could be mentioned in the
        references</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>reference values to each variable can be created to minimize the
        absolute error between computed data and reference values,
        alternatively measurements can be executed</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>to avoid an oscillating function for the input a penalty
        function can be set (or added) as an objective</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para>final values can be set to create a minimum time problem</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Example: Blood Glucose</title>

      <para>In the Blood Glucose model the plasma glucose concentration of a
      type-1 diabetic patient should be investigated subject to the insulin
      injection.</para>

      <para>Insulin is a hormone produced by special cells and is needed to
      move glucose into the cells to use them later as energy supply. In type
      1 diabetes the insulin production is detracted. The deficit of insulin
      effects an increased glucose value in the bloodstream, where it can not
      be transformed into energy. Therefore insulin injections are
      necessary.</para>

      <para>The optimization problem is based on the physical model: the input
      in form of insulin injection is supposed to regulate the plasma glucose
      concentration. The function <sgmltag class="element">dist</sgmltag>
      represents the glucose disturbance which is caused by a large
      meal.</para>

      <programlisting>model BloodGlucose1

  //State start values
  parameter Real G_init = 4.5;
  parameter Real X_init = 15;
  parameter Real I_init = 15;

  //States
  Real G(start = G_init, fixed=true) "Plasma Glucose Conc. (mmol/L)";
  Real X(start = X_init, fixed=true) "Plasma Insulin Conc. (mu/L)";
  Real I(start = I_init, fixed=true) "Plasma Insulin Conc. (mu/L)";
  Real dist "Meal glucose disturbance (mmol/L)";

  //parameter
  parameter Real G_basal = 4.5 "mmol/L";
  parameter Real X_basal = 15 "mU/L";
  parameter Real I_basal = 15 "mU/L";
  parameter Real P1 = 0.028735;
  parameter Real P2 = 0.028344;
  parameter Real P3 = 5.035e-5;
  parameter Real V1 = 12;
  parameter Real n = 5/54;

  //Control Signal
  Modelica.Blocks.Interfaces.RealInput D "Insulin Infusion rate"

equation 
  der(G) = -P1 * (G - G_basal) - (X - X_basal) * G + dist;
  der(X) = -P2 * (X - X_basal) + P3 * (I - I_basal);
  der(I) = -n * I + D / V1;
  dist = 3*exp(-0.05*time);

end BloodGlucose1;</programlisting>

      <para>At first some constant values are set for the insulin infusion
      rate.</para>

      <figure>
        <title>BloodGlucose (constant values of D)</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left"
                       fileref="Doc%20pictures/Blood%20Glucose/dymola_dist.png"
                       scale="80"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The pictures evince a dependence of the Plasma Glucose
      concentration from the insulin infusion rate. At first a peak in the
      blood glucose concentration function is observable which is attributed
      to the large meal (disturbance function). The more insulin was injected,
      the lower the glucose concentration in the blood decreases after the
      peak. We can conclude that it is possible to control the glucose
      concentration through an insulin injection in the model and hence an
      optimal control problem can be stated.</para>

      <para>But still the peak value for the blood glucose level seems much
      too high compared to reference values. From different sources I
      ascertained that the normal blood glucose level is between 3 and 6
      mmol/L, where the value gets up to 8 mmol/L after eating but should
      definitely be smaller than 10 mmol/L. Changing the disturbance function
      the peak value of G can be controlled. Therefore dist =
      0.5*exp(-0.05*time) seems to be reasonable since that keeps the value
      for G smaller than 10 mmol/L. Again I set different constant values for
      D.</para>

      <figure>
        <title>BloodGlucose (constant values of D; scaled function
        dist)</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left"
                       fileref="Doc%20pictures/Blood%20Glucose/dymola_betterdist.png"
                       scale="86"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>If the dist function is changed, the value still increases
      unreasonably after the peak which seems to be unphysical. Therefore I
      decided to scale G instead using the factor 5 to keep the peak value
      smaller than 10mmol/L. The ODE for G is replaced by:</para>

      <programlisting>der(G) = (-P1 * (G*5 - G_init) - (X - X_init) * G*5 + dist)/5;</programlisting>

      <para>The suitable values for D should be smaller now:</para>

      <figure>
        <title>BloodGlucose (constant values of D; scaled function G)</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left"
                       fileref="Doc%20pictures/Blood%20Glucose/scaled/dymola_scaled.png"
                       scale="120"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Now the peak value for G is smaller than 10 mmol/L and the
      function is not rising too much after the peak. I will continue based on
      this model.</para>

      <para>After these investigations the optimization problem can be
      created. The aim is to predict the relationship between the insulin
      injection and the blood glucose level. With a sufficient accurate
      mathematical model of a patient, the correct insulin injection rate
      could be prescribed. I chose as an objective to minimize the error
      between the computed value and a reference value for G and D. The
      difficult part is now to choose reference values. As a reference value
      for the blood glucose level I set 5 mmol/L, which represents a normal
      blood glucose level. From the plot above I assume that D = 2 mmol/L
      presents a suitable approximation for D.</para>

      <programlisting>optimization BloodGlucose_opt(objective=(cost(finalTime)),
                      startTime=0,
                      finalTime=400)
 
  input Real u=bc.D; 
  JMExamples.BloodGlucose.BloodGlucose1 bc(G,X,I,D);

  Real cost(start=0,fixed=true);
  parameter Real G_ref = 5;
  parameter Real D_ref = 2;
  
 equation
  der(cost) = (G_ref-bc.G)^2 + (D_ref-u)^2;

 constraint
end BloodGlucose_opt;</programlisting>

      <figure>
        <title>BloodGlucose (reference values for D and G)</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left"
                       fileref="Doc%20pictures/Blood%20Glucose/scaled/G=5,%20D=2.png"
                       scale="65"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>The result looks smooth but does not really offer a big effort
      compared to the simulation. Furthermore if a reference value for D is
      given the example still seems to be a bit constructed. So I want to go
      further and only set the error between the computed and the desired
      value for G as an objective. D should at least be constrained by
      reasonable values, for example 1 and 4 mmol/L.</para>

      <figure>
        <title>BloodGlucose (reference value for G, constraints for D)</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left"
                       fileref="Doc%20pictures/Blood%20Glucose/scaled/with_constraint_osc.png"
                       scale="60"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>During half of the time the input is highly oscillating between
      the constraints before it stabilises at 2 mmol/L. The graph for G looks
      smooth and convenient.</para>

      <para>To prevent oscillations for the input a common method is to add a
      penalty function to the objective. The sum of changes in the input
      function should be decreased and consequentially the penalty function is
      assembled of the sum of the squared derivatives of D. Therefore it is
      necessary to define D as a state variable and set dD as an input with
      der(D) = dD. The optimization source code is then:</para>

      <programlisting>optimization BloodGlucose_optconstraint(objective=(cost(finalTime)),
                      startTime=0,
                      finalTime=400)
 
  input Real u=bc.dD; 
  JMExamples.BloodGlucose.BloodGlucoseconstraint bc(G,X,I,D);

  Real cost(start=0,fixed=true);
  parameter Real G_ref = 5;
 
equation
  der(cost) = (G_ref-bc.G)^2 + u^2;

constraint
  0&lt;=bc.G;
  bc.G&lt;=10;
  bc.D&gt;=1;
  bc.D&lt;=4;
end BloodGlucose_optconstraint;</programlisting>

      <figure>
        <title>BloodGlucose (reference value for G, constraints for D, penalty
        function)</title>

        <mediaobject>
          <imageobject>
            <imagedata align="left"
                       fileref="Doc%20pictures/Blood%20Glucose/scaled/with_constraint_schlussfuerheute.png"
                       scale="60"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Now the graph for G as well as for D is smooth and the variation
      of the input is passable. I achieved a reasonable solution. Depending on
      additional demands the constraints and penalty function could be
      adapted.</para>
    </section>
  </section>
</chapter>
