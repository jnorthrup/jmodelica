<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>AD Conditional Expressions</title>
<meta name="description" id="description" content="AD Conditional Expressions"/>
<meta name="keywords" id="keywords" content=" conditional expression assign "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_condexp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="pow_int.cpp.xml" target="_top">Prev</a>
</td><td><a href="condexp.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>CondExp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>AD-&gt;</option>
<option>Default</option>
<option>ad_copy</option>
<option>Convert</option>
<option>ADValued</option>
<option>BoolValued</option>
<option>VecAD</option>
<option>base_require</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>std_math_ad</option>
<option>MathOther</option>
<option>CondExp</option>
<option>Discrete</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>CondExp-&gt;</option>
<option>CondExp.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Op</option>
<option>Type</option>
<option>left</option>
<option>right</option>
<option>trueCase</option>
<option>falseCase</option>
<option>result</option>
<option>CondExp</option>
<option>Operation Sequence</option>
<option>Example</option>
<option>Test</option>
<option>Atan2</option>
</select>
</td>
</tr></table><br/>







<center><b><big><big>AD Conditional Expressions</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br/>
<code><font color="blue"></font></code><i><span style='white-space: nowrap'>result</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;CondExp</span></font></code><i><span style='white-space: nowrap'>Op</span></i><code><font color="blue"><span style='white-space: nowrap'>(</span></font></code><i><span style='white-space: nowrap'>left</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>right</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>trueCase</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>falseCase</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br/>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
Record, 
as part of an AD of <i>Base</i>
<a href="glossary.xml#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&#xA0;sequence</span></a>
,
a the conditional result of the form 
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;if(&#xA0;</span></font></code><i><span style='white-space: nowrap'>left</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font></code><i><span style='white-space: nowrap'>op</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font></code><i><span style='white-space: nowrap'>right</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;)<br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>result</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font></code><i><span style='white-space: nowrap'>trueCase</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;else&#xA0;</span></font></code><i><span style='white-space: nowrap'>result</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font></code><i><span style='white-space: nowrap'>falseCase</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>The notation <i>Op</i> and <i>op</i> 
above have the following correspondence: 
<table><tr><td align='left'  valign='top'>

<i>Op</i> 
	<code><span style='white-space: nowrap'>&#xA0;&#xA0;</span></code> </td><td align='left'  valign='top'>
 <code><font color="blue">Lt</font></code>
	<code><span style='white-space: nowrap'>&#xA0;&#xA0;</span></code> </td><td align='left'  valign='top'>
 <code><font color="blue">Le</font></code>
	<code><span style='white-space: nowrap'>&#xA0;&#xA0;</span></code> </td><td align='left'  valign='top'>
 <code><font color="blue">Eq</font></code>
	<code><span style='white-space: nowrap'>&#xA0;&#xA0;</span></code> </td><td align='left'  valign='top'>
 <code><font color="blue">Ge</font></code>
	<code><span style='white-space: nowrap'>&#xA0;&#xA0;</span></code> </td><td align='left'  valign='top'>
 <code><font color="blue">Gt</font></code>
</td></tr><tr><td align='left'  valign='top'>

<i>op</i> 
	</td><td align='left'  valign='top'>
 <code><font color="blue">&lt;</font></code>
	</td><td align='left'  valign='top'>
 <code><font color="blue">&lt;=</font></code>
	</td><td align='left'  valign='top'>
 <code><font color="blue">==</font></code>
	</td><td align='left'  valign='top'>
 <code><font color="blue">&gt;=</font></code>
	</td><td align='left'  valign='top'>
 <code><font color="blue">&gt;</font></code>
</td></tr>
</table>
If <i>f</i> is the <a href="adfun.xml" target="_top"><span style='white-space: nowrap'>ADFun</span></a>
 object corresponding to the
AD operation sequence,
the choice in an AD conditional expression is made each time
<a href="forward.xml" target="_top"><span style='white-space: nowrap'>f.Forward</span></a>
 is used to evaluate the zero order Taylor
coefficients with new values for the 
<a href="glossary.xml#Tape.Independent Variable" target="_top"><span style='white-space: nowrap'>independent&#xA0;variables</span></a>
.
This is in contrast to the <a href="compare.xml" target="_top"><span style='white-space: nowrap'>AD&#xA0;comparison&#xA0;operators</span></a>

which are boolean valued and not included in the AD operation sequence. 

<br/>
<br/>
<b><big><a name="Op" id="Op">Op</a></big></b>
<br/>
In the syntax above, <i>Op</i> represents one of the following
two characters: <code><font color="blue">Lt</font></code>, <code><font color="blue">Le</font></code>, <code><font color="blue">Eq</font></code>, <code><font color="blue">Ge</font></code>, <code><font color="blue">Gt</font></code>. 
As in the table above,
<i>Op</i> determines the comparison operator <i>op</i>.

<br/>
<br/>
<b><big><a name="Type" id="Type">Type</a></big></b>
<br/>
These functions are defined in the CppAD namespace for arguments of
<i>Type</i> is <code><font color="blue">float</font></code> , <code><font color="blue">double</font></code>, or any type of the form
<code><font color="blue"><span style='white-space: nowrap'>AD&lt;</span></font></code><i><span style='white-space: nowrap'>Base</span></i><code><font color="blue"><span style='white-space: nowrap'>&gt;</span></font></code>.
(Note that all four arguments must have the same type.)
 
<br/>
<br/>
<b><big><a name="left" id="left">left</a></big></b>
<br/>
The argument <i>left</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>left</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>It specifies the value for the left side of the comparison operator.
 
<br/>
<br/>
<b><big><a name="right" id="right">right</a></big></b>
<br/>
The argument <i>right</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>right</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>It specifies the value for the right side of the comparison operator.

<br/>
<br/>
<b><big><a name="trueCase" id="trueCase">trueCase</a></big></b>
<br/>
The argument <i>trueCase</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>trueCase</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>It specifies the return value if the result of the comparison is true.

<br/>
<br/>
<b><big><a name="falseCase" id="falseCase">falseCase</a></big></b>
<br/>
The argument <i>falseCase</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;const&#xA0;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>falseCase</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>It specifies the return value if the result of the comparison is false.

<br/>
<br/>
<b><big><a name="result" id="result">result</a></big></b>
<br/>
The <i>result</i> has prototype
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;&amp;</span></font></code><i><span style='white-space: nowrap'>falseCase</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code><br/>
<b><big><a name="CondExp" id="CondExp">CondExp</a></big></b>
<br/>
Previous versions of CppAD used 
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CondExp(</span></font></code><i><span style='white-space: nowrap'>flag</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>trueCase</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>falseCase</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>for the same meaning as 
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;CondExpGt(</span></font></code><i><span style='white-space: nowrap'>flag</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>Type</span></i><code><font color="blue"><span style='white-space: nowrap'>(0),&#xA0;</span></font></code><i><span style='white-space: nowrap'>trueCase</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>falseCase</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>Use of <code><font color="blue">CondExp</font></code> is deprecated, but continues to be supported.

<br/>
<br/>
<b><big><a name="Operation Sequence" id="Operation Sequence">Operation Sequence</a></big></b>
<br/>
This is an AD of <i>Base</i>
<a href="glossary.xml#Operation.Atomic" target="_top"><span style='white-space: nowrap'>atomic&#xA0;operation</span></a>

and hence is part of the current
AD of <i>Base</i>
<a href="glossary.xml#Operation.Sequence" target="_top"><span style='white-space: nowrap'>operation&#xA0;sequence</span></a>
.


<br/>
<br/>
<b><big><a name="Example" id="Example">Example</a></big></b>


<br/>
<br/>
<b><big><a name="Test" id="Test">Test</a></big></b>

<br/>
The file
<a href="condexp.cpp.xml" target="_top"><span style='white-space: nowrap'>CondExp.cpp</span></a>

contains an example and test of this function.   
It returns true if it succeeds and false otherwise.

<br/>
<br/>
<b><big><a name="Atan2" id="Atan2">Atan2</a></big></b>
<br/>
The following implementation of the
AD <a href="atan2.xml" target="_top"><span style='white-space: nowrap'>atan2</span></a>
 function is a more complex
example of using conditional expressions:
<code><font color="blue">
<pre style='display:inline'> 
template &lt;class Base&gt;
AD&lt;Base&gt; atan2 (const AD&lt;Base&gt; &amp;y, const AD&lt;Base&gt; &amp;x)
{	AD&lt;Base&gt; alpha;
	AD&lt;Base&gt; beta;
	AD&lt;Base&gt; theta;

	AD&lt;Base&gt; zero = 0;
	AD&lt;Base&gt; pi2  = 2. * atan(1.);
	AD&lt;Base&gt; pi   = 2. * pi2;

	AD&lt;Base&gt; ax = abs(x);
	AD&lt;Base&gt; ay = abs(y);

	// if( ax &gt; ay )
	// 	theta = atan(ay / ax);
	// else	theta = pi2 - atan(ax / ay);
	alpha = atan(ay / ax);
	beta  = pi2 - atan(ax / ay);
	theta = CondExpGt(ax, ay, alpha, beta);         // use of CondExp

	// if( x &lt;= 0 )
	// 	theta = pi - theta;
	theta = CondExpLe(x, zero, pi - theta, theta);  // use of CondExp
	
	// if( y &lt;= 0 )
	// 	theta = - theta;
	theta = CondExpLe(y, zero, -theta, theta);      // use of CondExp

	return theta;
}</pre>
</font></code>



<hr/>Input File: cppad/local/cond_exp.hpp

</body>
</html>
