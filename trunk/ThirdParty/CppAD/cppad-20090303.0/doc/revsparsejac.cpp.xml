<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Reverse Mode Jacobian Sparsity: Example and Test</title>
<meta name="description" id="description" content="Reverse Mode Jacobian Sparsity: Example and Test"/>
<meta name="keywords" id="keywords" content=" Revsparsejac example sparsity reverse test "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_revsparsejac.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="revsparsejac.xml" target="_top">Prev</a>
</td><td><a href="revsparsehes.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>FunEval</option>
<option>Sparse</option>
<option>RevSparseJac</option>
<option>RevSparseJac.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>FunEval-&gt;</option>
<option>Forward</option>
<option>Reverse</option>
<option>Sparse</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Sparse-&gt;</option>
<option>ForSparseJac</option>
<option>RevSparseJac</option>
<option>RevSparseHes</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>RevSparseJac-&gt;</option>
<option>RevSparseJac.cpp</option>
</select>
</td>
<td>RevSparseJac.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>Reverse Mode Jacobian Sparsity: Example and Test</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 

# include &lt;cppad/cppad.hpp&gt;
namespace { // -------------------------------------------------------------
// define the template function RevSparseJacCases&lt;Vector&gt; in empty namespace
template &lt;typename Vector&gt; 
bool RevSparseJacCases(void)
{	bool ok = true;
	using CppAD::AD;

	// domain space vector
	size_t n = 2; 
	CPPAD_TEST_VECTOR&lt; AD&lt;double&gt; &gt; X(n);
	X[0] = 0.; 
	X[1] = 1.;

	// declare independent variables and start recording
	CppAD::Independent(X);

	// range space vector
	size_t m = 3;
	CPPAD_TEST_VECTOR&lt; AD&lt;double&gt; &gt; Y(m);
	Y[0] = X[0];
	Y[1] = X[0] * X[1];
	Y[2] = X[1];

	// create f: X -&gt; Y and stop tape recording
	CppAD::ADFun&lt;double&gt; f(X, Y);

	// sparsity pattern for the identity matrix
	Vector s(m * m);
	size_t i, j;
	for(i = 0; i &lt; m; i++)
	{	for(j = 0; j &lt; m; j++)
			s[ i * m + j ] = false;
		s[ i * m + i ] = true;
	}

	// sparsity pattern for F'(x)
	Vector r(m * n);
	r = f.RevSparseJac(m, s);

	// check values
	ok &amp;= (r[ 0 * n + 0 ] == true);  // Y[0] does     depend on X[0]
	ok &amp;= (r[ 0 * n + 1 ] == false); // Y[0] does not depend on X[1]
	ok &amp;= (r[ 1 * n + 0 ] == true);  // Y[1] does     depend on X[0]
	ok &amp;= (r[ 1 * n + 1 ] == true);  // Y[1] does     depend on X[1]
	ok &amp;= (r[ 2 * n + 0 ] == false); // Y[2] does not depend on X[0]
	ok &amp;= (r[ 2 * n + 1 ] == true);  // Y[2] does     depend on X[1]

	return ok;
}
} // End empty namespace
# include &lt;vector&gt;
# include &lt;valarray&gt;
bool RevSparseJac(void)
{	bool ok = true;
	// Run with Vector equal to four different cases
	// all of which are Simple Vectors with elements of type bool.
	ok &amp;= RevSparseJacCases&lt; CppAD::vectorBool     &gt;();
	ok &amp;= RevSparseJacCases&lt; CppAD::vector  &lt;bool&gt; &gt;();
	ok &amp;= RevSparseJacCases&lt; std::vector    &lt;bool&gt; &gt;(); 
	ok &amp;= RevSparseJacCases&lt; std::valarray  &lt;bool&gt; &gt;(); 

	return ok;
}
</pre>
</font></code>


<hr/>Input File: example/rev_sparse_jac.cpp

</body>
</html>
