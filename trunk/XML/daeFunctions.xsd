<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2010 (http://www.altova.com) by Magnus GÃ¤fvert (Modelon AB) -->
<xs:schema xmlns:fun="https://svn.jmodelica.org/trunk/XML/daeFunctions.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:alg="https://svn.jmodelica.org/trunk/XML/daeAlgorithms.xsd" xmlns:exp="https://svn.jmodelica.org/trunk/XML/daeExpressions.xsd" targetNamespace="https://svn.jmodelica.org/trunk/XML/daeFunctions.xsd" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:import namespace="https://svn.jmodelica.org/trunk/XML/daeAlgorithms.xsd" schemaLocation="daeAlgorithms.xsd"/>
	<xs:import namespace="https://svn.jmodelica.org/trunk/XML/daeExpressions.xsd" schemaLocation="daeExpressions.xsd"/>
	<xs:element name="Function">
		<xs:annotation>
			<xs:documentation>Function definition with embedded XML algorithm code</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="OutputVariable" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base="xs:normalizedString">
								<xs:attribute name="type" use="required">
									<xs:simpleType>
										<xs:restriction base="xs:normalizedString">
											<xs:enumeration value="Real"/>
											<xs:enumeration value="Integer"/>
											<xs:enumeration value="Boolean"/>
											<xs:enumeration value="String"/>
										</xs:restriction>
									</xs:simpleType>
								</xs:attribute>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
				<xs:element name="InputVariable" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:complexContent>
							<xs:extension base="exp:Exp">
								<xs:attribute name="type" type="xs:normalizedString" use="required"/>
							</xs:extension>
						</xs:complexContent>
					</xs:complexType>
				</xs:element>
				<xs:element name="ProtectedVariable" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:complexContent>
							<xs:extension base="exp:Exp">
								<xs:attribute name="type" type="xs:normalizedString" use="required"/>
							</xs:extension>
						</xs:complexContent>
					</xs:complexType>
				</xs:element>
				<xs:element name="Algorithm" type="alg:Algorithm" minOccurs="0"/>
				<xs:element name="InverseFunction" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Declaration of the inverse of a function (that must have one output only)</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="OutputVariable">
								<xs:annotation>
									<xs:documentation>Output of the inverse function. The variable must be an input of the source function</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:simpleContent>
										<xs:extension base="xs:normalizedString">
											<xs:attribute name="type" use="required">
												<xs:simpleType>
													<xs:restriction base="xs:normalizedString">
														<xs:enumeration value="Real"/>
														<xs:enumeration value="Integer"/>
														<xs:enumeration value="Boolean"/>
														<xs:enumeration value="String"/>
													</xs:restriction>
												</xs:simpleType>
											</xs:attribute>
										</xs:extension>
									</xs:simpleContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="InputVariable" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>The output variable of the function must be one of the input of the inverse function</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:complexContent>
										<xs:extension base="exp:Exp">
											<xs:attribute name="type" type="xs:normalizedString" use="required"/>
										</xs:extension>
									</xs:complexContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="ProtectedVariable" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:complexContent>
										<xs:extension base="exp:Exp">
											<xs:attribute name="type" type="xs:normalizedString" use="required"/>
										</xs:extension>
									</xs:complexContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="Algorithm" type="alg:Algorithm" minOccurs="0"/>
						</xs:sequence>
						<xs:attribute name="name" type="xs:normalizedString" use="required"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="DerivativeFunction" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Declariation of the derivative of a function.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="OutputVariable" maxOccurs="unbounded">
								<xs:complexType>
									<xs:simpleContent>
										<xs:extension base="xs:normalizedString">
											<xs:attribute name="type" use="required">
												<xs:simpleType>
													<xs:restriction base="xs:normalizedString">
														<xs:enumeration value="Real"/>
														<xs:enumeration value="Integer"/>
														<xs:enumeration value="Boolean"/>
														<xs:enumeration value="String"/>
													</xs:restriction>
												</xs:simpleType>
											</xs:attribute>
										</xs:extension>
									</xs:simpleContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="InputVariable" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>Notice: the function is differentiated with respect the variables in order (from the first to the last). At least one input must be Real and have derivated=true</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:complexContent>
										<xs:extension base="exp:Exp">
											<xs:attribute name="type" use="required">
												<xs:simpleType>
													<xs:restriction base="xs:normalizedString">
														<xs:enumeration value="Real"/>
														<xs:enumeration value="Integer"/>
														<xs:enumeration value="Boolean"/>
														<xs:enumeration value="String"/>
													</xs:restriction>
												</xs:simpleType>
											</xs:attribute>
											<xs:attribute name="default" type="xs:anySimpleType"/>
											<xs:attribute name="derived" type="xs:boolean" use="optional" default="false">
												<xs:annotation>
													<xs:documentation>true if the function is differentiated with respect of the variable. If derived=true, then type must be Real</xs:documentation>
												</xs:annotation>
											</xs:attribute>
											<xs:attribute name="zeroDerivative" type="xs:boolean" use="optional" default="false">
												<xs:annotation>
													<xs:documentation>The derivative function is only valid if variables with zeroDerivative=true are independent of the variables the function is differentiated with respect to (i.e. the derivative of the input variable is "zero")</xs:documentation>
												</xs:annotation>
											</xs:attribute>
											<xs:attribute name="order" type="xs:integer"/>
										</xs:extension>
									</xs:complexContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="ProtectedVariable" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:complexContent>
										<xs:extension base="exp:Exp">
											<xs:attribute name="type" type="xs:normalizedString" use="required"/>
										</xs:extension>
									</xs:complexContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="Algorithm" type="alg:Algorithm" minOccurs="0"/>
						</xs:sequence>
						<xs:attribute name="name" type="xs:normalizedString" use="required"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="name" type="xs:normalizedString" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="ExternalFunction">
		<xs:annotation>
			<xs:documentation>Function definition calling external algorithm procedural code. Element includes the path</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:simpleContent>
				<xs:extension base="xs:normalizedString">
					<xs:attribute name="name" type="xs:ID" use="required"/>
					<xs:attribute name="language" default="C">
						<xs:simpleType>
							<xs:restriction base="xs:normalizedString">
								<xs:enumeration value="C"/>
								<xs:enumeration value="Modelica"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
				</xs:extension>
			</xs:simpleContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="FunctionsList">
		<xs:annotation>
			<xs:documentation>List of user-defined functions</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element ref="fun:Function"/>
				<xs:element ref="fun:ExternalFunction"/>
			</xs:choice>
		</xs:complexType>
	</xs:element>
</xs:schema>
