#Data description

#Collocation matrices
param _p :=
1 0.155051025722
2 0.644948974278
3 1.000000000000;

param _w :=
1 0.376403062700
2 0.512485826188
3 0.111111111111;

param _A: 0 1 2 3  :=
0 -9.000000000000 -4.139387691340 1.739387691340 -3.000000000000
1 10.048809399827 3.224744871392 -3.567840084690 5.531972647422
2 -1.382142733161 1.167840084690 0.775255128608 -7.531972647422
3 0.333333333333 -0.253197264742 1.053197264742 5.000000000000;

param _l0 :=
1 1.558078204725
2 -0.891411538058
3 0.333333333333;

param NFE:=100;
param NCP:=3;

let {_i in FE} _H[_i] := 1/NFE ;

#Parameters
let p2 := 0;
let p3 := 0;

#Bounds
let p1_lb := 0.9;
let p1_ub := 1.1;

#Derivative bounds

#Non-interactive parameters and parameters to be optimized
let p1 := 1;

#Initial conditions
let x1_0 := 0;
let x2_0 := 1;
let x3_0 := 0;
let w_0 := 0.0;
let u_0 := 0.0;
let time_0 := 0.0;

#Initial guesses
let x1_ig := 0;
let DER_x1_ig := 0.0;
let x2_ig := 1;
let DER_x2_ig := 0.0;
let x3_ig := 0;
let DER_x3_ig := 0.0;
let w_ig := 0.0;
let u_ig := 0.0;
let time_ig := 0.0;
let DER_time_ig := 0.0;

# Dump initial guess
let {_i in FE, _j in CPP} x1[_i,_j] := x1_ig;
let {_i in FE, _j in CP} DER_x1[_i,_j] := DER_x1_ig;
let {_i in FE, _j in CPP} x2[_i,_j] := x2_ig;
let {_i in FE, _j in CP} DER_x2[_i,_j] := DER_x2_ig;
let {_i in FE, _j in CPP} x3[_i,_j] := x3_ig;
let {_i in FE, _j in CP} DER_x3[_i,_j] := DER_x3_ig;
let {_i in FE, _j in CP} w[_i,_j] := w_ig;
let {_i in FE, _j in CP} u[_i,_j] := u_ig;
let {_i in FE, _j in CPP} time[_i,_j] := time_ig;
let {_i in FE, _j in CP} DER_time[_i,_j] := DER_time_ig;


