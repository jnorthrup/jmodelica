WARNING: THIS FILE IS OBSOLETE AND NEEDS TO BE UPDATED. DISREGARD THE
CONTENT UNTIL THIS NOTICE IS REMOVED.

JMODELICA PYTHON INTERFACE
===================
The JModelica Python Interface (JMPI) enables you to work with both Modelica and 
Optimica models in Python. As Python is an interpreted language you can work 
interactively or using scripts.

HOW TO USE
===================
1. Add the folder containing the jmodelica package to your PYTHONPATH.
2. Add the environment variable JMODELICA_HOME which should point at your 
JModelica installation root folder.
3. Import the JMPI by adding

     import jmodelica
    
   to your Python source code.

RUNNING TESTS
===================
The JMPI tests requires the Nose Python testing framework that can be
downloaded from:

  http://somethingaboutorange.com/mrl/projects/nose/
  
(should also be included in most Linux distros as "python-nose")

Run the tests in the tests package with

	nosetests
	
standing somewhere in the jmodelica package. Nose then finds all available 
tests and runs them. For details on how to run specific tests, and more, 
have a look at the Nose website.

Some of the tests are run on certain example models that can be found in
the JMI examples directory that comes bundled with the JModelica source
distribution. To run the the unit tests those models _needs to be
compiled_. This is done by invoking

  make examples
  
from the source distribution root.

RUNNING EXAMPLES
===================
There are a number of example models in the examples package which 
demonstrate how the JModelica Python Interface can be used. In all 
examples packages there is one .mo file for the Modelica and Optimica 
code, describing the model and optimization problem, and one demo.py file 
which shows the Python code needed to compile, run the model and solve 
an optimization problem. Take a look at the code or simply run an 
example with 

	import demo
	demo.run_demo()

RUNNING TESTS - FAQ
===================
If the test fails and outputs something similar to

  JMIException: libipopt.so.0: cannot open shared object file: No such
  file or directory
  
you are missing the Ipopt shared library in your library path. This can
be solved in two ways:

 1) By installing Ipopt on your system (so that library ends up in
    /usr/local/lib or similar). See Ipopt documentation for this.
    
 2) By setting an environment variable in your shell by invoking
 
      export LD_LIBRARY_PATH=LD_LIBRARY_PATH:/path/to/ipopt_build/lib
      
    Unless you put this in your shell's resource file (for example
    ~/.bashrc) you will need to run this command every time you open up
    a new shell.
    
CODING GUIDELINES
===================
The Python coding standards used are trying to adhere to Python Coding
Guidelines found in PEP8[1] with the exception of using UTF-8 encoding
and NOT latin-1. Here is a summary:

 * Indent using _spaces_ of width 4.
 * Class names should begin with uppercase and use CamelCase. First
   character should be capitalized.
 * Function names should be short, lowercase and concise. Use
   underscores as word delimiter.
 * Public methods use the same naming convention as with functions. They should
   avoid having an initial underscore.
 * Private methods should have ONE initial underscore, followed by only
   lower case characters. Words should be delimited by underscore.
 * If methods should be hidden when inheritted, use two initial underscores to
   activate Python's naming mangling scheme.
 * Every module/file must at least contain a docstring describing the
   purpose of the module. All public variables, functions and classes
   should be documentated. Preferably according to PEP 257[2].
 * All Python files must use UTF-8 encoding and include
 
     # -*- coding: utf-8 -*-
    
   in their header.
 * All runnable Python files must include
 
     #!/usr/bin/env python
    
   in their header to make them executable on UNIX/Linux and Mac.
 * Constants should be UPPERCASE and use underscores (_).
 * Try to adhere to earlier coding convention as close as possible.
 
 [1] PEP8 - Style Guide for Python Code
     http://www.python.org/dev/peps/pep-0008/
 [2] PEP257 - Python Docstring Conventions;
     http://www.python.org/dev/peps/pep-0257/
