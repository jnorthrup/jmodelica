# 
#    Copyright (C) 2009 Modelon AB
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the Common Public License as published by
#    IBM, version 1.0 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY. See the Common Public License for more details.
#
#    You should have received a copy of the Common Public License
#    along with this program.  If not, see
#     <http://www.ibm.com/developerworks/library/os-cpl.html/>.


#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.61)
AC_INIT([jmodelica.org], 0.0.0, BUG-REPORT-ADDRESS)
AM_INIT_AUTOMAKE
AC_CONFIG_HEADER([config.h])
AC_CONFIG_MACRO_DIR([m4])


# =========== Helper macros =================

# Macros to detect if compiler accepts specific flag

# CXX_FLAG_CHECK [compiler flags]
# check whether compiler supports given C++ flags or not
AC_DEFUN([CXX_FLAG_CHECK], 
[ 
  AC_MSG_CHECKING([if $CXX supports $1])
  AC_LANG_PUSH([C++])
  ac_saved_cxxflags="$CXXFLAGS" 
  CXXFLAGS="-Werror $1" 
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([])], 
    [cxx_flag_check=yes], 
    [cxx_flag_check=no] 
  )
  AC_MSG_RESULT([$cxx_flag_check])
  CXXFLAGS="$ac_saved_cxxflags" 
  AC_LANG_POP([C++])
])

# C_FLAG_CHECK [compiler flags]
# check whether compiler supports given C flags or not
AC_DEFUN([C_FLAG_CHECK], 
[ 
  AC_MSG_CHECKING([if $CC supports $1])
  AC_LANG_PUSH([C])
  ac_saved_cflags="$CFLAGS" 
  CFLAGS="-Werror $1" 
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([])], 
    [c_flag_check=yes], 
    [c_flag_check=no] 
  )
  AC_MSG_RESULT([$c_flag_check])
  CFLAGS="$ac_saved_cflags" 
  AC_LANG_POP([C])
])

# F77_FLAG_CHECK [compiler flags]
# check whether compiler supports given Fortran 77 flags or not
AC_DEFUN([F77_FLAG_CHECK], 
[ 
  AC_MSG_CHECKING([if $F77 supports $1])
  AC_LANG_PUSH([Fortran 77])
  ac_saved_fflags="$FFLAGS" 
  FFLAGS="-Werror $1" 
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([])], 
    [f77_flag_check=yes], 
    [f77_flag_check=no] 
  )
  AC_MSG_RESULT([$f77_flag_check])
  FFLAGS="$ac_saved_fflags" 
  AC_LANG_POP([Fortran 77])
])


# ALL_FLAG_CHECK [compiler flags]
# check whether compilers supports given flags or not for all of C, C++ and Fortran 77
AC_DEFUN([ALL_FLAG_CHECK], 
[
  C_FLAG_CHECK([$1])
  CXX_FLAG_CHECK([$1])
  F77_FLAG_CHECK([$1])
  AS_IF([test "$c_flag_check" = yes -a "$cxx_flag_check" = yes -a "$f77_flag_check" = yes],
        [all_flag_check=yes],
        [all_flag_check=no])
])

# ============= end of helper macros ===================


# Checks for programs.
AC_PROG_CXX
AC_PROG_F77([gfortran])

# Acquire information about the platform
AC_CANONICAL_BUILD
AC_CANONICAL_HOST

# Different platforms use different standard name suffices for 
# shared libraries. Also the flag to gcc for creating a shared library
# differs. Also, on windows we need to make sure that we can build
# dll:s.
AC_SUBST(SHAREDEXT)
AC_SUBST(SHARED_LDFLAGS)
AC_SUBST(SEP)
SEP=':'
# Handle BSD-stype cp - TODO: detect other BSD systems than Mac
AC_SUBST(CP)
CP="cp -au"
AC_SUBST(CURR_DIR)
CURR_DIR=`pwd`
case $build in
  *-cygwin*)
    echo "Cygwin detected"   
    SHAREDEXT=".dll";
    SHARED_LDFLAGS=" -shared ";
    SEP='\;'
    AC_LIBTOOL_WIN32_DLL
    WIN32=yes
    AC_DEFINE([WIN32],[1],[Building on a win32 system (detected Cygwin).])
    ;;
  *-mingw*)
    echo "MinGW detected"   
    SHAREDEXT=".dll";
    SHARED_LDFLAGS=" -shared ";
    SEP='\;'
    AC_LIBTOOL_WIN32_DLL
    WIN32=yes
    AC_DEFINE([WIN32],[1],[Building on a win32 system (detected MinGW).])    
    ;;
  *-apple*)
    echo "Mac OS X detected"   
    WIN32=no
    AC_DEFINE([WIN32],[0],[Not a win32])    
    SHAREDEXT=".dylib";
    SHARED_LDFLAGS=" -dynamiclib ";
    CP="cp -a"
    ;;
  *)
    echo "Linux detected"   
    APP_LIBS="-lipopt -llapack -lblas -lm -lgfortranbegin -lgfortran"
    SHAREDEXT=".so";
    SHARED_LDFLAGS=" -shared ";
    # The fPIC flag is used to make the code independent of position in the
    # memory. This is needed on Linux x86_64 platforms.
    WIN32=no
    AC_DEFINE([WIN32],[0],[Not a win32])
    CFLAGS=" -fPIC $CFLAGS"
    CXXFLAGS=" -fPIC $CXXFLAGS"
    ;;  
esac
AC_PROG_LIBTOOL

# By default, we want to install bin, lib, and include
# in the directory where configure is run.

AC_PREFIX_DEFAULT(["/usr/local/jmodelica"])

#AS_IF([test "x$JMODELICA_HOME" = x],
# 	AC_PREFIX_DEFAULT([`pwd`]),
#        AC_PREFIX_DEFAULT(["$JMODELICA_HOME"]))

AS_IF([test "x$F77" != x],
      [AC_MSG_RESULT([gfortran seems to be working])],
      [AC_MSG_FAILURE([gfortran does not seem to be present or does not work properly])]) 

AS_IF([test "$WIN32" = yes], 
      [
          ALL_FLAG_CHECK([-m64])
          jm_win64=$all_flag_check
          AS_IF([test "$jm_win64" = yes],
                [AC_MSG_RESULT([Will compile 64-bit libs to support 64-bit FMUs.])],
                [AC_MSG_RESULT([Will not compile 64-bit libs - 64-bit FMUs not supported.])]
               )
      ])
AM_CONDITIONAL([JM_WIN64],[test "$jm_win64" = yes])

# Checks for libraries.
AC_ARG_WITH([ipopt],
   [AS_HELP_STRING([--with-ipopt],
     [IPOPT installation directory @<:@default=check@:>@])],
   [ipopt=$withval],
   [with_ipopt=no])

AS_IF([test "x$with_ipopt" = xno],
      [AC_MSG_RESULT([ ])
       AC_MSG_RESULT([***********************************************************************])
       AC_MSG_RESULT([* --with-ipopt option not specified - compiling without IPOPT support *])
       AC_MSG_RESULT([***********************************************************************])
       AC_MSG_RESULT([ ])],
       [AC_MSG_RESULT([ ])
       AC_MSG_RESULT([***********************************************************************])
       AC_MSG_RESULT([* --with-ipopt option specified - compiling with IPOPT support        *])
       AC_MSG_RESULT([***********************************************************************])
       AC_MSG_RESULT([ ])
       AC_CHECK_FILE($ipopt/include/coin/IpStdCInterface.h,
                     [],
                     [AC_MSG_FAILURE([--with-ipopt option was specified but does not seem to point at a valid IPOPT installation])])])

AM_CONDITIONAL([COMPILE_WITH_IPOPT],[test "x$with_ipopt" != xno])

# Set output variables to be exported to the Makefiles
AC_SUBST(IPOPT_INC)
AC_SUBST(IPOPT_LIB)
AC_SUBST(IPOPT_HOME)

IPOPT_INC=$ipopt/include/coin
IPOPT_LIB=$ipopt/lib
IPOPT_HOME=$ipopt

AC_SUBST(WITH_CASADI)
AS_IF([test "x$with_casadi" != xno],
      [WITH_CASADI="true"],
      [WITH_CASADI="false"]) 

AC_ARG_WITH([casadi],
   [AS_HELP_STRING([--with-casadi],
     [CasADI Python-interface installation directory @<:@default=check@:>@])],
   [casadi=$withval],
   [with_casadi=no])

AS_IF([test "x$with_casadi" = xno],
      [AC_MSG_RESULT([CasADi installation not specified.])],
      [AC_CHECK_FILE($casadi/casadi/casadi.py,
                     [],
                     [AC_MSG_FAILURE([CasADi installation specifed, but seems to be corrupt!])])])

# Set output variables to be exported to the Makefiles
AC_SUBST(CASADI_HOME)

CASADI_HOME=$casadi

AC_SUBST(WITH_CASADI)
AS_IF([test "x$with_ipopt" != xno],
      [WITH_CASADI="true"],
      [WITH_CASADI="false"]) 


# Checks for libraries.
# SUNDIALS
AC_ARG_WITH([sundials],
   [AS_HELP_STRING([--with-sundials],
     [SUNDIALS installation directory @<:@default=check@:>@])],
   [sundials=$withval],
   [with_sundials=no])

AS_IF([test "x$with_sundials" = xno],
      [sundials="$CURR_DIR/sundials_install"])

AS_IF([test "x$with_sundials" = xno],
      [with_sundials=automatic])

# Set output variables to be exported to the Makefiles
AC_SUBST(SUNDIALS_HOME)
AC_SUBST(WITH_SUNDIALS)

AM_CONDITIONAL([WITH_SUNDIALS],[test "x$with_sundials" != xno])

AC_SUBST(SUNDIALS_HOME)
SUNDIALS_HOME=$sundials

AC_SUBST(MINPACK_HOME)
MINPACK_HOME="$CURR_DIR/minpack_install"

AC_ARG_WITH([superlu],
  [AS_HELP_STRING([--with-superlu],
    [SuperLU installation directory @<:@default=check@:>@])],
  [superlu=$withval],
  [with_superlu=no])

AS_IF([test "x$with_superlu" = xno],
     [AC_MSG_RESULT([SuperLU installation not specified.])],
     [AC_MSG_RESULT([SuperLU installation specified.])])

AM_CONDITIONAL([WITH_SUPERLU],[test "x$with_superlu" != xno])

AC_SUBST(SUPERLU_HOME)
SUPERLU_HOME=$superlu

AC_ARG_WITH([eclipse],
   [AS_HELP_STRING([--with-eclipse],
     [Eclipse installation directory @<:@default=no@:>@])],
   [eclipse=$withval],
   [with_eclipse=no])

AS_IF([test "x$with_eclipse" = xno],
      [AC_MSG_RESULT([Eclipse installation not specified.])],
      [AC_CHECK_FILE($eclipse/eclipse,
                     [],
                     [AC_MSG_FAILURE([Eclipse installation specifed, but seems to be corrupt!])])])

AM_CONDITIONAL([WITH_ECLIPSE],[test "x$with_eclipse" != xno])

AC_SUBST(ECLIPSE_HOME)
ECLIPSE_HOME=$eclipse

# Checks for mingw.
AC_ARG_WITH([mingw],
   [AS_HELP_STRING([--with-mingw],
     [MinGW installation directory. @<:@default=no@:>@])],
   [mingw=$withval],
   [with_mingw=no])

AS_IF([test "x$with_mingw" = xno],
      [mingw=["$MINGW_HOME"]])

AS_IF([test "x$MINGW_HOME" != x],
      [with_mingw=env])

AS_IF([test "x$with_mingw" = xno],
      [AC_MSG_RESULT([MinGW installation not specified.])],
      [AC_CHECK_FILE($mingw/bin/gcc.exe,
                     [],
                     [AC_MSG_FAILURE([MinGW installation specifed, but seems to be corrupt!])])])

AM_CONDITIONAL([WITH_MINGW],[test "x$with_mingw" != xno])

with_tdm=no
AS_IF([test "$with_mingw" != no],
      [ AC_MSG_CHECKING([for TDM-GCC])
        AS_IF([$CC -v 2>&1 | tail -n1 | grep -q "(tdm"],
              [with_tdm=yes])
        AC_MSG_RESULT([$with_tdm])
      ])

AM_CONDITIONAL([COPY_PTHREADS_LIB],[test "$with_mingw" != no -a "$with_tdm" = no])
AM_CONDITIONAL([NUMPY_NO_MSVCR],[test "$with_mingw" != no -a "$with_tdm" = yes])


# Set output variables to be exported to the Makefiles
AC_SUBST(MINGW_HOME)
MINGW_HOME=$mingw

# Detect Java home directory
AC_SUBST(_JAVA_HOME_)



case $build in
  *-mingw*)
    # The SDK installer sets the environment variable JAVA_HOME, so there we don't need _JAVA_HOME_
	_JAVA_HOME_=
    ;;
  *)
	_JAVA_HOME_=`$(dirname $0)/run_java.sh org.jmodelica.util.GetJavaHome`
    ;;  
esac

AC_SUBST(ipoptlib)
case $build in
  *-cygwin*)
    ipoptlib="-L$ipopt/lib -lipopt -lg2c -ldl"
    ;;
  *-mingw*)
    ipoptlib="-L$ipopt/lib -lipopt -lm \
       -lgfortran -lpthread -lmingw32 -lmoldname -lmingwex -lmsvcrt \
       -luser32 -lkernel32 -ladvapi32 -lshell32 -lstdc++"
    ;;
  *-apple*)
        ipoptlib="-L$ipopt/lib -lipopt -llapack -lblas -lm -lgfortran"
    ;;
  *)
    ipoptlib="-L$ipopt/lib -lipopt -llapack -lblas -lm -lgfortranbegin -lgfortran -lpthread"
    ;;  
esac

#AC_SUBST(JMALLLIBS)
#JMALLLIBS="../ModelInterface/libmodelinterface.la ../OptimicaInterface/liboptimica.la"

# Used in examples
#jmilib="-L\$(JMILIBDIR) -ljmi -ljmi_algorithm";
AS_IF([test "x$with_ipopt" != xno],
      [jmilib="-L\$(JMILIBDIR) -ljmi -ljmi_algorithm -ljmi_solver"], 
      [jmilib="-L\$(JMILIBDIR) -ljmi -ljmi_algorithm"])  
AC_SUBST(jmilib)

AC_PATH_PROG([ANT], [ant], [])
AC_SUBST(ANT_OPTS)
ANT_OPTS="ANT_OPTS=-Xmx2g"

AM_CONDITIONAL([HAVE_ANT],[test "x$ANT" != x])

AS_IF([test "x$ANT" = x],
      [AC_MSG_FAILURE([Cannot find Apache Ant - please install in order to build compiler front-ends.])])

# Detect if Python installation is specified with environment var
AC_ARG_VAR(PYTHON_HOME, [Python installation to use])
AS_IF([test "${PYTHON_HOME}"],
      [
          PYTHON_HOME_ABS="`cd ${PYTHON_HOME}; pwd`"
          AC_MSG_RESULT([Using Python installation ${PYTHON_HOME_ABS}])
          CMAKE_PYTHON_LIB="-DPYTHON_LIBRARY=${PYTHON_HOME_ABS}/libs/libpython27.a"
          CMAKE_PYTHON_INCLUDE="-DPYTHON_INCLUDE_DIR=${PYTHON_HOME_ABS}/include"
      ], [
          AS_IF([test "${PYTHON_LIB}" && test "${PYTHON_INCLUDE}"], 
            [
                AC_MSG_RESULT([Using Python lib ${PYTHON_LIB} and Python include ${PYTHON_INCLUDE}])
                CMAKE_PYTHON_LIB="-DPYTHON_LIBRARY=${PYTHON_LIB}"
                CMAKE_PYTHON_INCLUDE="-DPYTHON_INCLUDE_DIR=${PYTHON_INCLUDE}"
            ], [
                AC_MSG_RESULT([Python installation not specified.])
                # Empty arguments will make cmake fail, so use dummies instead
                CMAKE_PYTHON_LIB="-DPYTHON_LIBRARY_DUMMY="
                CMAKE_PYTHON_INCLUDE="-DPYTHON_INCLUDE_DIR_DUMMY="
            ])
      ])
AC_SUBST(CMAKE_PYTHON_LIB)
AC_SUBST(CMAKE_PYTHON_INCLUDE)


AC_SUBST(PYTHON_HOME)
PYTHON_HOME=$PYTHON_HOME

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([stdlib.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST

#AC_CONFIG_SUBDIRS([ThirdParty/Sundials/sundials-2.5.0])

REQUIRE_IPOPT_HOME=True
REQUIRE_SUNDIALS_HOME=True
REQUIRE_COMPILER_JARS=True
REQUIRE_BEAVER_PATH=True
REQUIRE_MODELICAPATH=True
REQUIRE_JPYPE_JVM=True
REQUIRE_JVM_ARGS=False
REQUIRE_MINGW_HOME=True
REQUIRE_OPTIMICA_COMPILER=True

AC_SUBST(REQUIRE_IPOPT_HOME)
AC_SUBST(REQUIRE_SUNDIALS_HOME)
AC_SUBST(REQUIRE_COMPILER_JARS)
AC_SUBST(REQUIRE_BEAVER_PATH)
AC_SUBST(REQUIRE_MODELICAPATH)
AC_SUBST(REQUIRE_JPYPE_JVM)
AC_SUBST(REQUIRE_JVM_ARGS)
AC_SUBST(REQUIRE_MINGW_HOME)
AC_SUBST(REQUIRE_OPTIMICA_COMPILER)

AC_CONFIG_FILES([
 Makefile
 ThirdParty/Blas/Makefile
 ThirdParty/Lapack/Makefile
 ThirdParty/SuperLU/Makefile
 ThirdParty/Sundials/Makefile
 ThirdParty/Minpack/Makefile
 ThirdParty/CasADi/Makefile
 external/FMILibrary/Makefile
 Python/jm_ipython.sh
 Python/jm_python.sh
 Python/Makefile
 RuntimeLibrary/Makefile
 jm_tests
 Python/src/required_defaults.py
])

AC_OUTPUT

AC_MSG_RESULT([Configure completed successfully!])
