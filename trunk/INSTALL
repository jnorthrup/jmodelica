Build instructions for the JModelica.org project.

0. Requirements.

In order to compile JModelica.org you will need a unix-like
environment. Depending on you operating system, different procedures 
are required.

 - For Linux, make sure that the gcc compiler suite, Subversion and
   Apache Ant are installed.
 - The requirements for Mac OS X are the same as for Linux. The 
   gcc compiler suite is available in the XCode distribution 
   provided by Apple.
 - For Windows, it is recommended to use the JModelica.org-SDK
   installer which contains all the tools necessary to build the
   platform.

1. Get JModelica.org

Check out a working copy of JModelica.org: 

 > svn co https://svn.jmodelica.org/trunk JModelica 

Make sure that the full path to the directory where you check out
JModelica.org does not contain any spaces nor ~ character. Notice that
this step can be (optionally) performed by the JModelica.org-SDK
installer.

2. Get Ipopt (optional)

Download Ipopt from https://projects.coin-or.org/Ipopt. Unzip the
tar-ball and put in a directory that does not hold any spaces nor ~
character in its path. Build the package according to its INSTALL
file. Make sure to run

 > make install

Notice that a compiled version of Ipopt is included in the
JModelica.org-SDK installer.

3. Configure

Run the configure script. It is recommended that you create a new
directory for building the platform

 > cd JModelica
 > mkdir build
 > cd build
 > ../configure --with-ipopt=/path/to/ipopt-install-dir 

The argument --with-ipopt is optional. Notice, however, that if it is
not given, only parts of the software will be built. You may want to
give additional arguments to configure. Type configure --help for
information. By default, the installation directory (--prefix) is set
to /usr/local/jmodelica. 

4. Build and install

In order to build, type 

 > make 

In order to install, type 

 > make install 

which will render the directories 'lib' and 'include' to be created in
the installation directory and the corresponding libraries and
directories and header files will be copied. In addition, templates,
XML schemas, third party dependencies and makefiles used to build the
generated C code are copied into the installation directory. Also, the
Python code is copied into the installation directory. 

5. Generate documentation.

The command 

 > make docs 

will generate documentation in the 'doc' directory. The generated
documentation is also available at www.jmodelica.org, where nightly
generated docs are published.

6. Running JModelica.org from Python

In order to run the JModelica.org compilers from Python, the packages
 
 - JPype (http://jpype.sourceforge.net/) 
 - lxml (http://codespeak.net/lxml/) 
 - NumPy 1.2.0 (http://numpy.scipy.org/)
 - SciPy 0.7 (http://www.scipy.org/)
 - PySundials 2.3 (http://sourceforge.net/projects/pysundials/)
 - pyreadline >=1.5 (http://ipython.scipy.org/dist/)
 - Matplotlib (http://matplotlib.sourceforge.net/)
 - Nose (http://code.google.com/p/python-nose/) (Only needed to run
   the test suits.)

need to be installed. The JModelica.org has been tested on Python 2.5
and Python 2.6. For Windows users, the python(x,y) distribution
(www.pythonxy.com), containing NumPy, SciPy and Matplotlib, is
recommended. Notice that the JModelica.org-SDK and JModelica.org
installers for Windows will install JPype, lxml and Nose
automatically. Linux and Mac OS X users need to install these packages
manually.

JModelica.org supports the following environment variables:

 - JMODELICA_HOME containing the path to the JModelica.org installation
   directory (again, without spaces or ~ in the path).
 - JMODELICA_SDK_HOME containing the path to a JModelica.org-SDK
   installation directory. Serves as an alternative to
   JMODELICA_HOME. (Windows only.)
 - PYTHONPATH containing the path to the directory $JMODELICA_HOME/Python.
 - JAVA_HOME containing the path to a Java JRE or SDK installation.
 - IPOPT_HOME containing the path to an Ipopt installation directory.
 - LD_LIBRARY_PATH containing the path to the $IPOPT_HOME/lib directory
   (Linux only.)
 - MODELICAPATH containing a sequence of paths representing directories
   where Modelica libraries are located. On Windows, the paths are 
   separated by semicolons and on Linux/Mac OS X they are separated
   by colons.

On Windows is only necessary to set the variable JMODELICA_HOME as a
global environment variable, since the other variables are set in the
Python script startup.py, which is executed when the jmodelica package
is imported into Python. 

For Linux and Mac OS X users we recommend using the scripts:

$JMODELICA_HOME/Python/jm_ipython.sh

or

$JMODELICA_HOME/Python/jm_python.sh

to start IPython (recommended) or Python. In these scripts, the
default values of the environment variables are set to match your
particular installation configuration.

The default settings can be overridden either by setting one of the
supported environment variables globally or by adding a local
startup.py file located in the directory $HOME/jmodelica.org and
change a variable there.

7. Test the distribution

Start Python or IPython. Type 

 > import jmodelica.examples.cstr as cstr
 > cstr.run_demo()

You should now see the output of Ipopt and windows containing plots
showing the optimization results should be opened.

8. Check Python packages

There is a function in the jmodelica package to check the 
status of the Python packages required by JModelica. Type

 > import jmodelica
 > jmodelica.check_packages()

This will list all required packages, if they are installed and 
package version (if available). Compare your status output to the 
list of required packages which can be found in this file under: 
'Running JModelica.org from Python' or on the homepage www.jmodelica.org.


=======
Issues:


