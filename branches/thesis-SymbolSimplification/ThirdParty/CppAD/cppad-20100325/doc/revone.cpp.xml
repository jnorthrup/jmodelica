<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>First Order Derivative Driver: Example and Test</title>
<meta name="description" id="description" content="First Order Derivative Driver: Example and Test"/>
<meta name="keywords" id="keywords" content=" derivative example test "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_revone.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="revone.xml" target="_top">Prev</a>
</td><td><a href="hessian.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>Drivers</option>
<option>RevOne</option>
<option>RevOne.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADFun-&gt;</option>
<option>Independent</option>
<option>FunConstruct</option>
<option>Dependent</option>
<option>abort_recording</option>
<option>seq_property</option>
<option>FunEval</option>
<option>Drivers</option>
<option>FunCheck</option>
<option>omp_max_thread</option>
<option>optimize</option>
<option>FunDeprecated</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Drivers-&gt;</option>
<option>Jacobian</option>
<option>ForOne</option>
<option>RevOne</option>
<option>Hessian</option>
<option>ForTwo</option>
<option>RevTwo</option>
<option>sparse_jacobian</option>
<option>sparse_hessian</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>RevOne-&gt;</option>
<option>RevOne.cpp</option>
</select>
</td>
<td>RevOne.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>First Order Derivative Driver: Example and Test</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 
# include &lt;cppad/cppad.hpp&gt;
namespace { // -------------------------------------------------------
// define the template function RevOneCases&lt;Vector&gt; in empty namespace
template &lt;typename Vector&gt;
bool RevOneCases()
{	bool ok = true;
	using CppAD::AD;
	using CppAD::NearEqual;
	using CppAD::exp;
	using CppAD::sin;
	using CppAD::cos;

	// domain space vector
	size_t n = 2;
	<a href="test_vector.xml" target="_top">CPPAD_TEST_VECTOR</a>&lt; <a href="ad.xml" target="_top">AD</a>&lt;double&gt; &gt;  X(n);
	X[0] = 1.;
	X[1] = 2.;

	// declare independent variables and starting recording
	CppAD::<a href="independent.xml" target="_top">Independent</a>(X);

	// range space vector
	size_t m = 3;
	<a href="test_vector.xml" target="_top">CPPAD_TEST_VECTOR</a>&lt; <a href="ad.xml" target="_top">AD</a>&lt;double&gt; &gt;  Y(m);
	Y[0] = X[0] * exp( X[1] );
	Y[1] = X[0] * sin( X[1] );
	Y[2] = X[0] * cos( X[1] );

	// create f: X -&gt; Y and stop tape recording
	CppAD::<a href="funconstruct.xml" target="_top">ADFun</a>&lt;double&gt; f(X, Y);

	// new value for the independent variable vector
	Vector x(n);
	x[0] = 2.;
	x[1] = 1.;

	// compute and check derivative of y[0] 
	Vector dw(n);
	dw  = f.RevOne(x, 0);
	ok &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(dw[0],      exp(x[1]), 1e-10, 1e-10 ); // w.r.t x[0]
	ok &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(dw[1], x[0]*exp(x[1]), 1e-10, 1e-10 ); // w.r.t x[1]

	// compute and check derivative of y[1] 
	dw  = f.RevOne(x, 1);
	ok &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(dw[0],      sin(x[1]), 1e-10, 1e-10 );
	ok &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(dw[1], x[0]*cos(x[1]), 1e-10, 1e-10 );

	// compute and check derivative of y[2] 
	dw  = f.RevOne(x, 2);
	ok &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(dw[0],        cos(x[1]), 1e-10, 1e-10 );
	ok &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(dw[1], - x[0]*sin(x[1]), 1e-10, 1e-10 );

	return ok;
}
} // End empty namespace 
# include &lt;vector&gt;
# include &lt;valarray&gt;
bool RevOne(void)
{	bool ok = true;
	// Run with Vector equal to three different cases
	// all of which are Simple Vectors with elements of type double.
	ok &amp;= RevOneCases&lt; CppAD::vector  &lt;double&gt; &gt;();
	ok &amp;= RevOneCases&lt; std::vector    &lt;double&gt; &gt;();
	ok &amp;= RevOneCases&lt; std::valarray  &lt;double&gt; &gt;();
	return ok;
}</pre>
</font></code>


<hr/>Input File: example/rev_one.cpp

</body>
</html>
