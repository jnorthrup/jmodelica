<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Keyword Index</title>
<meta name="description" id="description" content="Keyword Index"/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='__index_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="_reference.xml" target="_top">Prev</a>
</td><td><a href="_search_xml.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>_index</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>Example</option>
<option>configure</option>
<option>Appendix</option>
</select>
</td>
<td>_index</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>A</option>
<option>B</option>
<option>C</option>
<option>D</option>
<option>E</option>
<option>F</option>
<option>G</option>
<option>H</option>
<option>I</option>
<option>J</option>
<option>K</option>
<option>L</option>
<option>M</option>
<option>N</option>
<option>O</option>
<option>P</option>
<option>Q</option>
<option>R</option>
<option>S</option>
<option>T</option>
<option>U</option>
<option>V</option>
<option>W</option>
<option>Z</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Keyword Index</big></big></b></center>
<b>!=</b><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>operator&#160;<a href="compare.xml" target="_top">AD&#xA0;Binary&#xA0;Comparison&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="compare.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Comparison&#xA0;Operators:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
<b>*</b><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="mul.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Multiplication:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;binary<b>&#xA0;</b>operator&#160;<a href="ad_binary.xml" target="_top">AD&#xA0;Binary&#xA0;Arithmetic&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;computed<b>&#xA0;</b>assignment&#160;<a href="compute_assign.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Operators</a><br/>
<b>*=</b><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="muleq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Multiplication:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
<b>+</b><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="add.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Addition:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>unary<b>&#xA0;</b>operator&#160;<a href="unaryplus.xml" target="_top">AD&#xA0;Unary&#xA0;Plus&#xA0;Operator</a><br/>
&#160;&#160;&#160;&#160;&#160;binary<b>&#xA0;</b>operator&#160;<a href="ad_binary.xml" target="_top">AD&#xA0;Binary&#xA0;Arithmetic&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;computed<b>&#xA0;</b>assignment&#160;<a href="compute_assign.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Operators</a><br/>
<b>+=</b><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="addeq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Addition:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
<b>-</b><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="sub.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Subtraction:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>unary<b>&#xA0;</b>operator&#160;<a href="unaryminus.xml" target="_top">AD&#xA0;Unary&#xA0;Minus&#xA0;Operator</a><br/>
&#160;&#160;&#160;&#160;&#160;binary<b>&#xA0;</b>operator&#160;<a href="ad_binary.xml" target="_top">AD&#xA0;Binary&#xA0;Arithmetic&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;computed<b>&#xA0;</b>assignment&#160;<a href="compute_assign.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Operators</a><br/>
<b>-=</b><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="subeq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Subtraction:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
<b>/</b><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="div.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Division:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;binary<b>&#xA0;</b>operator&#160;<a href="ad_binary.xml" target="_top">AD&#xA0;Binary&#xA0;Arithmetic&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;computed<b>&#xA0;</b>assignment&#160;<a href="compute_assign.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Operators</a><br/>
<b>/=</b><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="diveq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Division:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
<b>&lt;</b><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>operator&#160;<a href="compare.xml" target="_top">AD&#xA0;Binary&#xA0;Comparison&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="compare.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Comparison&#xA0;Operators:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
<b>&lt;&lt;</b><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="output.cpp.xml" target="_top">AD&#xA0;Output&#xA0;Operator:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>output&#160;<a href="output.xml" target="_top">AD&#xA0;Output&#xA0;Stream&#xA0;Operator</a><br/>
<b>&lt;=</b><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>operator&#160;<a href="compare.xml" target="_top">AD&#xA0;Binary&#xA0;Comparison&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="compare.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Comparison&#xA0;Operators:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
<b>==</b><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>operator&#160;<a href="compare.xml" target="_top">AD&#xA0;Binary&#xA0;Comparison&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="compare.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Comparison&#xA0;Operators:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
<b>&gt;</b><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>operator&#160;<a href="compare.xml" target="_top">AD&#xA0;Binary&#xA0;Comparison&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="compare.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Comparison&#xA0;Operators:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
<b>&gt;=</b><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>operator&#160;<a href="compare.xml" target="_top">AD&#xA0;Binary&#xA0;Comparison&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="compare.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Comparison&#xA0;Operators:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
<b>[]</b><br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&#xA0;</b>vector&#160;<a href="cppad_vector.xml#Element Access" target="_top">The&#xA0;CppAD::vector&#xA0;Template&#xA0;Class:&#160;Element&#xA0;Access</a><br/>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="simplevector.xml#Element Access" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Simple&#xA0;Vector:&#160;Element&#xA0;Access</a><br/>

<b><big><a name="A">A</a></big></b>
<br/>
A<b>.</b>1<b>.</b>1c<br/>
&#160;&#160;&#160;&#160;&#160;OpenMP<b>&#xA0;</b>example&#160;<a href="example_a11c.cpp.xml" target="_top">A&#xA0;Simple&#xA0;Parallel&#xA0;Loop</a><br/>
AD&#160;<a href="cppad.xml" target="_top">cppad-20100325:&#xA0;A&#xA0;Package&#xA0;for&#xA0;Differentiation&#xA0;of&#xA0;C++&#xA0;Algorithms</a><br/>
&#160;&#160;&#160;&#160;&#160;arithmetic<b>&#xA0;</b>operator&#160;<a href="arithmetic.xml" target="_top">AD&#xA0;Arithmetic&#xA0;Operators&#xA0;and&#xA0;Computed&#xA0;Assignments</a><br/>
&#160;&#160;&#160;&#160;&#160;assignment&#160;<a href="ad_copy.xml" target="_top">AD&#xA0;Copy&#xA0;Constructor&#xA0;and&#xA0;Assignment&#xA0;Operator</a><br/>
&#160;&#160;&#160;&#160;&#160;binary<b>&#xA0;</b>compare<b>&#xA0;</b>operator&#160;<a href="compare.xml" target="_top">AD&#xA0;Binary&#xA0;Comparison&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;computed<b>&#xA0;</b>assignment&#160;<a href="arithmetic.xml" target="_top">AD&#xA0;Arithmetic&#xA0;Operators&#xA0;and&#xA0;Computed&#xA0;Assignments</a><br/>
&#160;&#160;&#160;&#160;&#160;convert<b>&#xA0;</b>from&#160;<a href="convert.xml" target="_top">Conversion&#xA0;and&#xA0;Printing&#xA0;of&#xA0;AD&#xA0;Objects</a><br/>
&#160;&#160;&#160;&#160;&#160;convert<b>&#xA0;</b>to<b>&#xA0;</b>Base&#160;<a href="value.xml" target="_top">Convert&#xA0;From&#xA0;an&#xA0;AD&#xA0;Type&#xA0;to&#xA0;its&#xA0;Base&#xA0;Type</a><br/>
&#160;&#160;&#160;&#160;&#160;convert<b>&#xA0;</b>to<b>&#xA0;</b>integer&#160;<a href="integer.xml" target="_top">Convert&#xA0;From&#xA0;AD&#xA0;to&#xA0;Integer</a><br/>
&#160;&#160;&#160;&#160;&#160;copy&#160;<a href="ad_copy.xml" target="_top">AD&#xA0;Copy&#xA0;Constructor&#xA0;and&#xA0;Assignment&#xA0;Operator</a><br/>
&#160;&#160;&#160;&#160;&#160;default<b>&#xA0;</b>construct&#160;<a href="default.cpp.xml" target="_top">Default&#xA0;AD&#xA0;Constructor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;default<b>&#xA0;</b>construct&#160;<a href="default.xml" target="_top">AD&#xA0;Default&#xA0;Constructor</a><br/>
&#160;&#160;&#160;&#160;&#160;Ipopt&#160;<a href="cppad_ipopt_nlp.xml" target="_top">Nonlinear&#xA0;Programming&#xA0;Using&#xA0;the&#xA0;CppAD&#xA0;Interface&#xA0;to&#xA0;Ipopt</a><br/>
&#160;&#160;&#160;&#160;&#160;introduction&#160;<a href="introduction.xml" target="_top">An&#xA0;Introduction&#xA0;by&#xA0;Example&#xA0;to&#xA0;Algorithmic&#xA0;Differentiation</a><br/>
&#160;&#160;&#160;&#160;&#160;introduction&#160;<a href="installunix.xml#Introduction.exp_apx" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Introduction.exp_apx</a><br/>
&#160;&#160;&#160;&#160;&#160;level&#160;<a href="glossary.xml#AD Levels Above Base" target="_top">Glossary:&#160;AD&#xA0;Levels&#xA0;Above&#xA0;Base</a><br/>
&#160;&#160;&#160;&#160;&#160;multiple<b>&#xA0;</b>level&#160;<a href="mul_level.cpp.xml" target="_top">Multiple&#xA0;Tapes:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;multiple<b>&#xA0;</b>level&#160;<a href="mul_level.xml" target="_top">Using&#xA0;Multiple&#xA0;Levels&#xA0;of&#xA0;AD</a><br/>
&#160;&#160;&#160;&#160;&#160;object&#160;<a href="ad.xml" target="_top">AD&#xA0;Objects</a><br/>
&#160;&#160;&#160;&#160;&#160;stream<b>&#xA0;</b>output&#160;<a href="output.xml" target="_top">AD&#xA0;Output&#xA0;Stream&#xA0;Operator</a><br/>
&#160;&#160;&#160;&#160;&#160;unary<b>&#xA0;</b>minus<b>&#xA0;</b>operator&#160;<a href="unaryminus.xml" target="_top">AD&#xA0;Unary&#xA0;Minus&#xA0;Operator</a><br/>
&#160;&#160;&#160;&#160;&#160;unary<b>&#xA0;</b>plus<b>&#xA0;</b>operator&#160;<a href="unaryplus.xml" target="_top">AD&#xA0;Unary&#xA0;Plus&#xA0;Operator</a><br/>
ADFun<br/>
&#160;&#160;&#160;&#160;&#160;assignment<b>&#xA0;</b>example&#160;<a href="fun_assign.cpp.xml" target="_top">ADFun&#xA0;Assignment:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;assignment<b>&#xA0;</b>operator&#160;<a href="funconstruct.xml#Assignment Operator" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording:&#160;Assignment&#xA0;Operator</a><br/>
&#160;&#160;&#160;&#160;&#160;CompareChange&#160;<a href="comparechange.xml" target="_top">Comparison&#xA0;Changes&#xA0;During&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;check&#160;<a href="funcheck.xml" target="_top">Check&#xA0;an&#xA0;ADFun&#xA0;Sequence&#xA0;of&#xA0;Operations</a><br/>
&#160;&#160;&#160;&#160;&#160;construct&#160;<a href="funconstruct.xml" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording</a><br/>
&#160;&#160;&#160;&#160;&#160;copy<b>&#xA0;</b>constructor&#160;<a href="funconstruct.xml#Copy Constructor" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording:&#160;Copy&#xA0;Constructor</a><br/>
&#160;&#160;&#160;&#160;&#160;Dependent&#160;<a href="fundeprecated.xml#Dependent" target="_top">ADFun&#xA0;Object&#xA0;Deprecated&#xA0;Member&#xA0;Functions:&#160;Dependent</a><br/>
&#160;&#160;&#160;&#160;&#160;Domain&#160;<a href="seq_property.xml#Domain" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#160;Domain</a><br/>
&#160;&#160;&#160;&#160;&#160;default<b>&#xA0;</b>constructor&#160;<a href="funconstruct.xml#Default Constructor" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording:&#160;Default&#xA0;Constructor</a><br/>
&#160;&#160;&#160;&#160;&#160;evaluate&#160;<a href="funeval.xml" target="_top">Evaluate&#xA0;ADFun&#xA0;Functions,&#xA0;Derivatives,&#xA0;and&#xA0;Sparsity&#xA0;Patterns</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="ad_fun.cpp.xml" target="_top">Creating&#xA0;Your&#xA0;Own&#xA0;Interface&#xA0;to&#xA0;an&#xA0;ADFun&#xA0;Object</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="funcheck.cpp.xml" target="_top">ADFun&#xA0;Check&#xA0;and&#xA0;Re-Tape:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Memory&#160;<a href="fundeprecated.xml#Memory" target="_top">ADFun&#xA0;Object&#xA0;Deprecated&#xA0;Member&#xA0;Functions:&#160;Memory</a><br/>
&#160;&#160;&#160;&#160;&#160;OpenMP&#160;<a href="funconstruct.xml#OpenMP" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording:&#160;OpenMP</a><br/>
&#160;&#160;&#160;&#160;&#160;Order&#160;<a href="fundeprecated.xml#Order" target="_top">ADFun&#xA0;Object&#xA0;Deprecated&#xA0;Member&#xA0;Functions:&#160;Order</a><br/>
&#160;&#160;&#160;&#160;&#160;object&#160;<a href="adfun.xml" target="_top">ADFun&#xA0;Objects</a><br/>
&#160;&#160;&#160;&#160;&#160;operation<b>&#xA0;</b>sequence&#160;<a href="dependent.xml" target="_top">Stop&#xA0;Recording&#xA0;and&#xA0;Store&#xA0;Operation&#xA0;Sequence</a><br/>
&#160;&#160;&#160;&#160;&#160;Parameter&#160;<a href="seq_property.xml#Parameter" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#160;Parameter</a><br/>
&#160;&#160;&#160;&#160;&#160;Range&#160;<a href="seq_property.xml#Range" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#160;Range</a><br/>
&#160;&#160;&#160;&#160;&#160;Size&#160;<a href="fundeprecated.xml#Size" target="_top">ADFun&#xA0;Object&#xA0;Deprecated&#xA0;Member&#xA0;Functions:&#160;Size</a><br/>
&#160;&#160;&#160;&#160;&#160;sequence<b>&#xA0;</b>constructor&#160;<a href="funconstruct.xml#Sequence Constructor" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording:&#160;Sequence&#xA0;Constructor</a><br/>
&#160;&#160;&#160;&#160;&#160;size<b>_</b>par&#160;<a href="seq_property.xml#size_par" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#160;size_par</a><br/>
&#160;&#160;&#160;&#160;&#160;size<b>_</b>VecAD&#160;<a href="seq_property.xml#size_VecAD" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#160;size_VecAD</a><br/>
&#160;&#160;&#160;&#160;&#160;size<b>_</b>var&#160;<a href="seq_property.xml#size_var" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#160;size_var</a><br/>
&#160;&#160;&#160;&#160;&#160;taylor<b>_</b>size&#160;<a href="fundeprecated.xml#taylor_size" target="_top">ADFun&#xA0;Object&#xA0;Deprecated&#xA0;Member&#xA0;Functions:&#160;taylor_size</a><br/>
&#160;&#160;&#160;&#160;&#160;use<b>_</b>VecAD&#160;<a href="fundeprecated.xml#use_VecAD" target="_top">ADFun&#xA0;Object&#xA0;Deprecated&#xA0;Member&#xA0;Functions:&#160;use_VecAD</a><br/>
Adolc<br/>
&#160;&#160;&#160;&#160;&#160;adouble<b>&#xA0;</b>as<b>&#xA0;</b>Base&#160;<a href="base_adolc.hpp.xml" target="_top">Enable&#xA0;use&#xA0;of&#xA0;AD&lt;Base&gt;&#xA0;where&#xA0;Base&#xA0;is&#xA0;Adolc's&#xA0;adouble&#xA0;Type</a><br/>
&#160;&#160;&#160;&#160;&#160;multiple<b>&#xA0;</b>level&#160;<a href="mul_level_adolc.cpp.xml" target="_top">Using&#xA0;Adolc&#xA0;with&#xA0;Multiple&#xA0;Levels&#xA0;of&#xA0;Taping:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="ode_taylor_adolc.cpp.xml" target="_top">Using&#xA0;Adolc&#xA0;with&#xA0;Taylor's&#xA0;Ode&#xA0;Solver:&#xA0;An&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;unix&#160;<a href="installunix.xml#AdolcDir" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;AdolcDir</a><br/>
Algorithmic<b>&#xA0;</b>Differentiation<br/>
&#160;&#160;&#160;&#160;&#160;introduction&#160;<a href="introduction.xml" target="_top">An&#xA0;Introduction&#xA0;by&#xA0;Example&#xA0;to&#xA0;Algorithmic&#xA0;Differentiation</a><br/>
Automatic<b>&#xA0;</b>Differentiation<br/>
&#160;&#160;&#160;&#160;&#160;introduction&#160;<a href="introduction.xml" target="_top">An&#xA0;Introduction&#xA0;by&#xA0;Example&#xA0;to&#xA0;Algorithmic&#xA0;Differentiation</a><br/>
abort<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="abort_recording.cpp.xml" target="_top">Abort&#xA0;Current&#xA0;Recording:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;operation<b>&#xA0;</b>sequence&#160;<a href="abort_recording.xml" target="_top">Abort&#xA0;Recording&#xA0;of&#xA0;an&#xA0;Operation&#xA0;Sequence</a><br/>
&#160;&#160;&#160;&#160;&#160;recording&#160;<a href="abort_recording.cpp.xml" target="_top">Abort&#xA0;Current&#xA0;Recording:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
above&#160;<a href="glossary.xml#AD Levels Above Base" target="_top">Glossary:&#160;AD&#xA0;Levels&#xA0;Above&#xA0;Base</a><br/>
abs<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="abs.xml" target="_top">AD&#xA0;Absolute&#xA0;Value&#xA0;Function</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="abs.cpp.xml" target="_top">AD&#xA0;Absolute&#xA0;Value&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;float<b>&#xA0;</b>and<b>&#xA0;</b>double&#160;<a href="std_math_unary.xml" target="_top">Float&#xA0;and&#xA0;Double&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
absolute<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>value&#160;<a href="abs.xml" target="_top">AD&#xA0;Absolute&#xA0;Value&#xA0;Function</a><br/>
&#160;&#160;&#160;&#160;&#160;difference&#160;<a href="nearequal.xml" target="_top">Determine&#xA0;if&#xA0;Two&#xA0;Values&#xA0;Are&#xA0;Nearly&#xA0;Equal</a><br/>
aclocal&#160;<a href="whats_new_06.xml#01-08" target="_top">Changes&#xA0;and&#xA0;Additions&#xA0;to&#xA0;CppAD&#xA0;During&#xA0;2006:&#160;01-08</a><br/>
acos<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="std_math_ad.xml" target="_top">AD&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="acos.cpp.xml" target="_top">The&#xA0;AD&#xA0;acos&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;float<b>&#xA0;</b>and<b>&#xA0;</b>double&#160;<a href="std_math_unary.xml" target="_top">Float&#xA0;and&#xA0;Double&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>theory&#160;<a href="acosforward.xml" target="_top">Arccosine&#xA0;Function&#xA0;Forward&#xA0;Taylor&#xA0;Polynomial&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>theory&#160;<a href="acosreverse.xml" target="_top">Arccosine&#xA0;Function&#xA0;Reverse&#xA0;Mode&#xA0;Theory</a><br/>
active&#160;<a href="glossary.xml#Tape.Active" target="_top">Glossary:&#160;Tape.Active</a><br/>
ad&#160;<a href="glossary.xml#AD Levels Above Base" target="_top">Glossary:&#160;AD&#xA0;Levels&#xA0;Above&#xA0;Base</a><br/>
&#160;&#160;&#160;<a href="glossary.xml#AD of Base" target="_top">Glossary:&#160;AD&#xA0;of&#xA0;Base</a><br/>
&#160;&#160;&#160;<a href="glossary.xml#AD Function" target="_top">Glossary:&#160;AD&#xA0;Function</a><br/>
add<br/>
&#160;&#160;&#160;&#160;&#160;<b>*=&#xA0;</b>example&#160;<a href="muleq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Multiplication:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;<b>+=&#xA0;</b>example&#160;<a href="addeq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Addition:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;<b>-=&#xA0;</b>example&#160;<a href="subeq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Subtraction:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;<b>/=&#xA0;</b>example&#160;<a href="diveq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Division:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="add.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Addition:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;binary<b>&#xA0;</b>operator&#160;<a href="ad_binary.xml" target="_top">AD&#xA0;Binary&#xA0;Arithmetic&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;computed<b>&#xA0;</b>assignment&#160;<a href="compute_assign.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Operators</a><br/>
adolc<br/>
&#160;&#160;&#160;&#160;&#160;link<b>_</b>det<b>_</b>lu&#160;<a href="adolc_det_lu.cpp.xml#Implementation" target="_top">Adolc&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#160;Implementation</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>lu&#160;<a href="adolc_det_lu.cpp.xml" target="_top">Adolc&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>minor&#160;<a href="adolc_det_minor.cpp.xml" target="_top">Adolc&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>polynomial&#160;<a href="adolc_poly.cpp.xml" target="_top">Adolc&#xA0;Speed:&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>sparse<b>&#xA0;</b>Hessian&#160;<a href="adolc_sparse_hessian.cpp.xml" target="_top">Adolc&#xA0;Speed:&#xA0;Sparse&#xA0;Hessian</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>test&#160;<a href="speed_adolc.xml" target="_top">Speed&#xA0;Test&#xA0;Derivatives&#xA0;Using&#xA0;Adolc</a><br/>
adouble<br/>
&#160;&#160;&#160;&#160;&#160;as<b>&#xA0;</b>Base&#160;<a href="base_adolc.hpp.xml" target="_top">Enable&#xA0;use&#xA0;of&#xA0;AD&lt;Base&gt;&#xA0;where&#xA0;Base&#xA0;is&#xA0;Adolc's&#xA0;adouble&#xA0;Type</a><br/>
algorithm<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="exp_eps.xml" target="_top">An&#xA0;Epsilon&#xA0;Accurate&#xA0;Exponential&#xA0;Approximation</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="exp_2.xml" target="_top">Second&#xA0;Order&#xA0;Exponential&#xA0;Approximation</a><br/>
algorithmic<br/>
&#160;&#160;&#160;&#160;&#160;C<b>&#xA0;</b>differentiation&#160;<a href="ad_in_c.cpp.xml" target="_top">Example&#xA0;and&#xA0;Test&#xA0;Linking&#xA0;CppAD&#xA0;to&#xA0;Languages&#xA0;Other&#xA0;than&#xA0;C++</a><br/>
algorithmic<b>&#xA0;</b>differentiation&#160;<a href="cppad.xml" target="_top">cppad-20100325:&#xA0;A&#xA0;Package&#xA0;for&#xA0;Differentiation&#xA0;of&#xA0;C++&#xA0;Algorithms</a><br/>
any<br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>reverse<b>&#xA0;</b>mode&#160;<a href="reverse_any.xml" target="_top">Any&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
arithmetic<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>operator&#160;<a href="arithmetic.xml" target="_top">AD&#xA0;Arithmetic&#xA0;Operators&#xA0;and&#xA0;Computed&#xA0;Assignments</a><br/>
array<br/>
&#160;&#160;&#160;&#160;&#160;tape<b>&#xA0;</b>index<b>&#xA0;</b>operation&#160;<a href="tapeindex.cpp.xml" target="_top">Taping&#xA0;Array&#xA0;Index&#xA0;Operation:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
asin<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="std_math_ad.xml" target="_top">AD&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="asin.cpp.xml" target="_top">The&#xA0;AD&#xA0;asin&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;float<b>&#xA0;</b>and<b>&#xA0;</b>double&#160;<a href="std_math_unary.xml" target="_top">Float&#xA0;and&#xA0;Double&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>theory&#160;<a href="asinforward.xml" target="_top">Arcsine&#xA0;Function&#xA0;Forward&#xA0;Taylor&#xA0;Polynomial&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>theory&#160;<a href="asinreverse.xml" target="_top">Arcsine&#xA0;Function&#xA0;Reverse&#xA0;Mode&#xA0;Theory</a><br/>
assert<br/>
&#160;&#160;&#160;&#160;&#160;error<b>&#xA0;</b>handler&#160;<a href="errorhandler.xml" target="_top">Replacing&#xA0;the&#xA0;CppAD&#xA0;Error&#xA0;Handler</a><br/>
&#160;&#160;&#160;&#160;&#160;error<b>&#xA0;</b>macro&#160;<a href="cppad_assert.xml" target="_top">CppAD&#xA0;Assertions&#xA0;During&#xA0;Execution</a><br/>
assign<br/>
&#160;&#160;&#160;&#160;&#160;<b>*=&#xA0;</b>example&#160;<a href="muleq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Multiplication:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;<b>+=&#xA0;</b>example&#160;<a href="addeq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Addition:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;<b>-=&#xA0;</b>example&#160;<a href="subeq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Subtraction:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;<b>/=&#xA0;</b>example&#160;<a href="diveq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Division:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;conditional&#160;<a href="condexp.xml" target="_top">AD&#xA0;Conditional&#xA0;Expressions</a><br/>
assignment<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="eq.cpp.xml" target="_top">AD&#xA0;Assignment&#xA0;Operator:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="ad_copy.xml" target="_top">AD&#xA0;Copy&#xA0;Constructor&#xA0;and&#xA0;Assignment&#xA0;Operator</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>computed&#160;<a href="arithmetic.xml" target="_top">AD&#xA0;Arithmetic&#xA0;Operators&#xA0;and&#xA0;Computed&#xA0;Assignments</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>computed<b>&#xA0;</b>add<b>&#xA0;</b>example&#160;<a href="addeq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Addition:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>computed<b>&#xA0;</b>divide<b>&#xA0;</b>example&#160;<a href="diveq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Division:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>computed<b>&#xA0;</b>multiply<b>&#xA0;</b>example&#160;<a href="muleq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Multiplication:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>computed<b>&#xA0;</b>subtract<b>&#xA0;</b>example&#160;<a href="subeq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Subtraction:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun<b>&#xA0;</b>example&#160;<a href="fun_assign.cpp.xml" target="_top">ADFun&#xA0;Assignment:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun<b>&#xA0;</b>operator&#160;<a href="funconstruct.xml#Assignment Operator" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording:&#160;Assignment&#xA0;Operator</a><br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&#xA0;</b>vector&#160;<a href="cppad_vector.xml#Assignment" target="_top">The&#xA0;CppAD::vector&#xA0;Template&#xA0;Class:&#160;Assignment</a><br/>
&#160;&#160;&#160;&#160;&#160;multiple&#160;<a href="compute_assign.xml#Result" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Operators:&#160;Result</a><br/>
&#160;&#160;&#160;&#160;&#160;operator&#160;<a href="faq.xml#Assignment and Independent" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Assignment&#xA0;and&#xA0;Independent</a><br/>
&#160;&#160;&#160;&#160;&#160;operator&#160;<a href="compute_assign.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="simplevector.xml#Assignment" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Simple&#xA0;Vector:&#160;Assignment</a><br/>
atan<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="std_math_ad.xml" target="_top">AD&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="atan.cpp.xml" target="_top">The&#xA0;AD&#xA0;atan&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;float<b>&#xA0;</b>and<b>&#xA0;</b>double&#160;<a href="std_math_unary.xml" target="_top">Float&#xA0;and&#xA0;Double&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>theory&#160;<a href="atanforward.xml" target="_top">Arctangent&#xA0;Function&#xA0;Forward&#xA0;Taylor&#xA0;Polynomial&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>theory&#160;<a href="atanreverse.xml" target="_top">Arctangent&#xA0;Function&#xA0;Reverse&#xA0;Mode&#xA0;Theory</a><br/>
atan2&#160;<a href="wishlist.xml#Atan2" target="_top">The&#xA0;CppAD&#xA0;Wish&#xA0;List:&#160;Atan2</a><br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="atan2.xml" target="_top">AD&#xA0;Two&#xA0;Argument&#xA0;Inverse&#xA0;Tangent&#xA0;Function</a><br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="mathother.xml" target="_top">Other&#xA0;AD&#xA0;Math&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="atan2.cpp.xml" target="_top">The&#xA0;AD&#xA0;atan2&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
atomic&#160;<a href="glossary.xml#Operation.Atomic" target="_top">Glossary:&#160;Operation.Atomic</a><br/>
automatic<br/>
&#160;&#160;&#160;&#160;&#160;C<b>&#xA0;</b>differentiation&#160;<a href="ad_in_c.cpp.xml" target="_top">Example&#xA0;and&#xA0;Test&#xA0;Linking&#xA0;CppAD&#xA0;to&#xA0;Languages&#xA0;Other&#xA0;than&#xA0;C++</a><br/>
automatic<b>&#xA0;</b>differentiation&#160;<a href="cppad.xml" target="_top">cppad-20100325:&#xA0;A&#xA0;Package&#xA0;for&#xA0;Differentiation&#xA0;of&#xA0;C++&#xA0;Algorithms</a><br/>

<b><big><a name="B">B</a></big></b>
<br/>
Base<br/>
&#160;&#160;&#160;&#160;&#160;Adolc<b>'</b>s<b>&#xA0;</b>adouble&#160;<a href="base_adolc.hpp.xml" target="_top">Enable&#xA0;use&#xA0;of&#xA0;AD&lt;Base&gt;&#xA0;where&#xA0;Base&#xA0;is&#xA0;Adolc's&#xA0;adouble&#xA0;Type</a><br/>
&#160;&#160;&#160;&#160;&#160;convert<b>&#xA0;</b>to<b>&#xA0;</b>AD&#160;<a href="ad_copy.xml" target="_top">AD&#xA0;Copy&#xA0;Constructor&#xA0;and&#xA0;Assignment&#xA0;Operator</a><br/>
&#160;&#160;&#160;&#160;&#160;double<b>&#xA0;</b>complex&#160;<a href="base_complex.hpp.xml" target="_top">Enable&#xA0;use&#xA0;of&#xA0;AD&lt;Base&gt;&#xA0;where&#xA0;Base&#xA0;is&#xA0;std::complex&lt;double&gt;</a><br/>
&#160;&#160;&#160;&#160;&#160;from<b>&#xA0;</b>AD&#160;<a href="value.xml" target="_top">Convert&#xA0;From&#xA0;an&#xA0;AD&#xA0;Type&#xA0;to&#xA0;its&#xA0;Base&#xA0;Type</a><br/>
&#160;&#160;&#160;&#160;&#160;require&#160;<a href="base_require.xml" target="_top">AD&lt;Base&gt;&#xA0;Requirements&#xA0;for&#xA0;Base&#xA0;Type</a><br/>
&#160;&#160;&#160;&#160;&#160;require&#160;<a href="ad.xml#Base Type Requirements" target="_top">AD&#xA0;Objects:&#160;Base&#xA0;Type&#xA0;Requirements</a><br/>
BenderQuad&#160;<a href="benderquad.xml" target="_top">Computing&#xA0;Jacobian&#xA0;and&#xA0;Hessian&#xA0;of&#xA0;Bender's&#xA0;Reduced&#xA0;Objective</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="benderquad.cpp.xml" target="_top">BenderQuad:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
base&#160;<a href="glossary.xml#Base Type" target="_top">Glossary:&#160;Base&#xA0;Type</a><br/>
&#160;&#160;&#160;&#160;&#160;<a href="glossary.xml#Base Function" target="_top">Glossary:&#160;Base&#xA0;Function</a><br/>
&#160;&#160;&#160;&#160;&#160;<a href="glossary.xml#AD Levels Above Base" target="_top">Glossary:&#160;AD&#xA0;Levels&#xA0;Above&#xA0;Base</a><br/>
&#160;&#160;&#160;&#160;&#160;<a href="glossary.xml#AD of Base" target="_top">Glossary:&#160;AD&#xA0;of&#xA0;Base</a><br/>
&#160;&#160;&#160;&#160;&#160;convert<b>&#xA0;</b>to<b>&#xA0;</b>AD&#160;<a href="copybase.cpp.xml" target="_top">AD&#xA0;Constructor&#xA0;From&#xA0;Base&#xA0;Type:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
binary<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>bool&#160;<a href="boolfun.xml" target="_top">AD&#xA0;Boolean&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>compare<b>&#xA0;</b>operator&#160;<a href="compare.xml" target="_top">AD&#xA0;Binary&#xA0;Comparison&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;operator&#160;<a href="ad_binary.xml" target="_top">AD&#xA0;Binary&#xA0;Arithmetic&#xA0;Operators</a><br/>
bool<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>function&#160;<a href="boolfun.xml" target="_top">AD&#xA0;Boolean&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>::</b>vector&#160;<a href="vectorbool.cpp.xml" target="_top">CppAD::vectorBool&#xA0;Class:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
boolean&#160;<a href="glossary.xml#Sparsity Pattern.Vector of Boolean" target="_top">Glossary:&#160;Sparsity&#xA0;Pattern.Vector&#xA0;of&#xA0;Boolean</a><br/>
boost<br/>
&#160;&#160;&#160;&#160;&#160;unix&#160;<a href="installunix.xml#BoostDir" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;BoostDir</a><br/>
bug<br/>
&#160;&#160;&#160;&#160;&#160;gcc<b>&#xA0;</b>3<b>.</b>4<b>.</b>4&#160;<a href="bugs.xml#gcc 3.4.4 -O2" target="_top">Know&#xA0;Bugs&#xA0;and&#xA0;Problems&#xA0;Using&#xA0;CppAD:&#160;gcc&#xA0;3.4.4&#xA0;-O2</a><br/>
bugs<br/>
&#160;&#160;&#160;&#160;&#160;reporting&#160;<a href="faq.xml#Bugs" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Bugs</a><br/>
&#160;&#160;&#160;&#160;&#160;using<b>&#xA0;</b>CppAD&#160;<a href="bugs.xml" target="_top">Know&#xA0;Bugs&#xA0;and&#xA0;Problems&#xA0;Using&#xA0;CppAD</a><br/>

<b><big><a name="C">C</a></big></b>
<br/>
C<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="ad_in_c.cpp.xml" target="_top">Example&#xA0;and&#xA0;Test&#xA0;Linking&#xA0;CppAD&#xA0;to&#xA0;Languages&#xA0;Other&#xA0;than&#xA0;C++</a><br/>
&#160;&#160;&#160;&#160;&#160;algorithmic<b>&#xA0;</b>differentiation&#160;<a href="ad_in_c.cpp.xml" target="_top">Example&#xA0;and&#xA0;Test&#xA0;Linking&#xA0;CppAD&#xA0;to&#xA0;Languages&#xA0;Other&#xA0;than&#xA0;C++</a><br/>
&#160;&#160;&#160;&#160;&#160;interface<b>&#xA0;</b>to&#160;<a href="interface2c.cpp.xml" target="_top">Interfacing&#xA0;to&#xA0;C:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
C<b>++</b><br/>
&#160;&#160;&#160;&#160;&#160;algorithm<b>&#xA0;</b>derivative&#160;<a href="cppad.xml" target="_top">cppad-20100325:&#xA0;A&#xA0;Package&#xA0;for&#xA0;Differentiation&#xA0;of&#xA0;C++&#xA0;Algorithms</a><br/>
&#160;&#160;&#160;&#160;&#160;numerical<b>&#xA0;</b>template<b>&#xA0;</b>library&#160;<a href="library.xml" target="_top">The&#xA0;CppAD&#xA0;General&#xA0;Purpose&#xA0;Library</a><br/>
CheckNumericType&#160;<a href="checknumerictype.cpp.xml" target="_top">The&#xA0;CheckNumericType&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
CheckSimpleVector&#160;<a href="checksimplevector.cpp.xml" target="_top">The&#xA0;CheckSimpleVector&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
CompareChange&#160;<a href="faq.xml#CompareChange" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;CompareChange</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="comparechange.xml" target="_top">Comparison&#xA0;Changes&#xA0;During&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
CondExp&#160;<a href="wishlist.xml#CondExp" target="_top">The&#xA0;CppAD&#xA0;Wish&#xA0;List:&#160;CondExp</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="condexp.cpp.xml" target="_top">Conditional&#xA0;Expressions:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Base<b>&#xA0;</b>require&#160;<a href="base_require.xml#CondExp" target="_top">AD&lt;Base&gt;&#xA0;Requirements&#xA0;for&#xA0;Base&#xA0;Type:&#160;CondExp</a><br/>
CPPAD<b>_</b>ASSERT<b>_</b>KNOWN&#160;<a href="cppad_assert.xml#Restriction.Known" target="_top">CppAD&#xA0;Assertions&#xA0;During&#xA0;Execution:&#160;Restriction.Known</a><br/>
CPPAD<b>_</b>ASSERT<b>_</b>UNKNOWN&#160;<a href="cppad_assert.xml#Restriction.Unknown" target="_top">CppAD&#xA0;Assertions&#xA0;During&#xA0;Execution:&#160;Restriction.Unknown</a><br/>
CPPAD<b>_</b>BOOL<b>_</b>BINARY&#160;<a href="boolfun.xml#Create Binary" target="_top">AD&#xA0;Boolean&#xA0;Functions:&#160;Create&#xA0;Binary</a><br/>
CPPAD<b>_</b>BOOL<b>_</b>UNARY&#160;<a href="boolfun.xml#Create Unary" target="_top">AD&#xA0;Boolean&#xA0;Functions:&#160;Create&#xA0;Unary</a><br/>
CPPAD<b>_</b>DISCRETE<b>_</b>FUNCTION&#160;<a href="discrete.xml#Create AD Version" target="_top">Discrete&#xA0;AD&#xA0;Functions:&#160;Create&#xA0;AD&#xA0;Version</a><br/>
CPPAD<b>_</b>TEST<b>_</b>VECTOR&#160;<a href="faq.xml#Namespace.Test Vector Preprocessor Symbol" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Namespace.Test&#xA0;Vector&#xA0;Preprocessor&#xA0;Symbol</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="test_vector.xml" target="_top">Choosing&#xA0;The&#xA0;Vector&#xA0;Testing&#xA0;Template&#xA0;Class</a><br/>
CPPAD<b>_</b>TRACK<b>_</b>COUNT&#160;<a href="tracknewdel.xml#TrackCount.Macro" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#160;TrackCount.Macro</a><br/>
CPPAD<b>_</b>TRACK<b>_</b>DEL<b>_</b>VEC&#160;<a href="tracknewdel.xml#TrackDelVec.Macro" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#160;TrackDelVec.Macro</a><br/>
CPPAD<b>_</b>TRACK<b>_</b>EXTEND&#160;<a href="tracknewdel.xml#TrackExtend.Macro" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#160;TrackExtend.Macro</a><br/>
CPPAD<b>_</b>TRACK<b>_</b>NEW<b>_</b>VEC&#160;<a href="tracknewdel.xml#TrackNewVec.Macro" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#160;TrackNewVec.Macro</a><br/>
CppAD&#160;<a href="cppad.xml" target="_top">cppad-20100325:&#xA0;A&#xA0;Package&#xA0;for&#xA0;Differentiation&#xA0;of&#xA0;C++&#xA0;Algorithms</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="installunix.xml#CppAD Examples" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;CppAD&#xA0;Examples</a><br/>
&#160;&#160;&#160;&#160;&#160;install<b>&#xA0;</b>windows&#160;<a href="installwindows.xml" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;namespace&#160;<a href="cppad.xml#Namespace" target="_top">cppad-20100325:&#xA0;A&#xA0;Package&#xA0;for&#xA0;Differentiation&#xA0;of&#xA0;C++&#xA0;Algorithms:&#160;Namespace</a><br/>
&#160;&#160;&#160;&#160;&#160;nonlinear<b>&#xA0;</b>programming&#160;<a href="cppad_ipopt_nlp.xml" target="_top">Nonlinear&#xA0;Programming&#xA0;Using&#xA0;the&#xA0;CppAD&#xA0;Interface&#xA0;to&#xA0;Ipopt</a><br/>
&#160;&#160;&#160;&#160;&#160;OpenMP&#160;<a href="omp_max_thread.xml" target="_top">OpenMP&#xA0;Maximum&#xA0;Thread&#xA0;Number</a><br/>
&#160;&#160;&#160;&#160;&#160;preprocessor<b>&#xA0;</b>symbol&#160;<a href="cppad.xml#Preprocessor Symbols" target="_top">cppad-20100325:&#xA0;A&#xA0;Package&#xA0;for&#xA0;Differentiation&#xA0;of&#xA0;C++&#xA0;Algorithms:&#160;Preprocessor&#xA0;Symbols</a><br/>
&#160;&#160;&#160;&#160;&#160;tar<b>&#xA0;</b>file&#160;<a href="installunix.xml#Download.Unix Tar Files" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Download.Unix&#xA0;Tar&#xA0;Files</a><br/>
&#160;&#160;&#160;&#160;&#160;unix<b>&#xA0;</b>install&#160;<a href="installunix.xml" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation</a><br/>
&#160;&#160;&#160;&#160;&#160;zip<b>&#xA0;</b>file&#160;<a href="installwindows.xml#Download" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;Download</a><br/>
CppAD<b>::</b>vector<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="cppad_vector.cpp.xml" target="_top">CppAD::vector&#xA0;Template&#xA0;Class:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
CppAD<b>::</b>vectorBool<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="vectorbool.cpp.xml" target="_top">CppAD::vectorBool&#xA0;Class:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
CppADCreateDiscrete<br/>
&#160;&#160;&#160;&#160;&#160;deprecated&#160;<a href="discrete.xml#Deprecated" target="_top">Discrete&#xA0;AD&#xA0;Functions:&#160;Deprecated</a><br/>
CppADTrackDelVec&#160;<a href="tracknewdel.xml#TrackDelVec.Deprecated" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#160;TrackDelVec.Deprecated</a><br/>
CppADTrackExtend&#160;<a href="tracknewdel.xml#TrackExtend.Deprecated" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#160;TrackExtend.Deprecated</a><br/>
CppADTrackNewVec&#160;<a href="tracknewdel.xml#TrackCount.Deprecated" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#160;TrackCount.Deprecated</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="tracknewdel.xml#TrackNewVec.Deprecated" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#160;TrackNewVec.Deprecated</a><br/>
CppADvector<br/>
&#160;&#160;&#160;&#160;&#160;deprecated&#160;<a href="test_vector.xml#Deprecated" target="_top">Choosing&#xA0;The&#xA0;Vector&#xA0;Testing&#xA0;Template&#xA0;Class:&#160;Deprecated</a><br/>
calculate<br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>mode&#160;<a href="forwardany.xml" target="_top">Any&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
capacity<br/>
&#160;&#160;&#160;&#160;&#160;Forward&#160;<a href="capacity_taylor.xml" target="_top">Controlling&#xA0;Taylor&#xA0;Coefficients&#xA0;Memory&#xA0;Allocation</a><br/>
capacity<b>_</b>taylor&#160;<a href="capacity_taylor.xml" target="_top">Controlling&#xA0;Taylor&#xA0;Coefficients&#xA0;Memory&#xA0;Allocation</a><br/>
central<b>&#xA0;</b>difference&#160;<a href="interface2c.cpp.xml" target="_top">Interfacing&#xA0;to&#xA0;C:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
check<br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="funcheck.xml" target="_top">Check&#xA0;an&#xA0;ADFun&#xA0;Sequence&#xA0;of&#xA0;Operations</a><br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&#xA0;</b>speed<b>&#xA0;</b>test&#160;<a href="installunix.xml#Speed Testing.CppAD Derivative Speed Tests" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Speed&#xA0;Testing.CppAD&#xA0;Derivative&#xA0;Speed&#xA0;Tests</a><br/>
&#160;&#160;&#160;&#160;&#160;determinant<b>&#xA0;</b>correct&#160;<a href="det_grad_33.xml" target="_top">Check&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;of&#xA0;3&#xA0;by&#xA0;3&#xA0;matrix</a><br/>
&#160;&#160;&#160;&#160;&#160;determinant<b>&#xA0;</b>correct&#160;<a href="det_33.xml" target="_top">Check&#xA0;Determinant&#xA0;of&#xA0;3&#xA0;by&#xA0;3&#xA0;matrix</a><br/>
&#160;&#160;&#160;&#160;&#160;function<b>&#xA0;</b>speed<b>&#xA0;</b>test&#160;<a href="installunix.xml#Speed Testing.Function Speed Tests" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Speed&#xA0;Testing.Function&#xA0;Speed&#xA0;Tests</a><br/>
&#160;&#160;&#160;&#160;&#160;numeric&#160;<a href="checknumerictype.xml" target="_top">Check&#xA0;NumericType&#xA0;Class&#xA0;Concept</a><br/>
&#160;&#160;&#160;&#160;&#160;simple<b>&#xA0;</b>vector&#160;<a href="checksimplevector.xml" target="_top">Check&#xA0;Simple&#xA0;Vector&#xA0;Concept</a><br/>
checkpoint<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="checkpoint.cpp.xml" target="_top">Checkpoint&#xA0;and&#xA0;Function&#xA0;Composition:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
class<br/>
&#160;&#160;&#160;&#160;&#160;simple<b>&#xA0;</b>vector&#160;<a href="simplevector.xml" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Simple&#xA0;Vector</a><br/>
&#160;&#160;&#160;&#160;&#160;template<b>&#xA0;</b>CppAD<b>&#xA0;</b>vector&#160;<a href="cppad_vector.xml" target="_top">The&#xA0;CppAD::vector&#xA0;Template&#xA0;Class</a><br/>
coefficient&#160;<a href="glossary.xml#Taylor Coefficient" target="_top">Glossary:&#160;Taylor&#xA0;Coefficient</a><br/>
compare<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>binary<b>&#xA0;</b>operator&#160;<a href="compare.xml" target="_top">AD&#xA0;Binary&#xA0;Comparison&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="compare.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Comparison&#xA0;Operators:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;change&#160;<a href="comparechange.cpp.xml" target="_top">CompareChange&#xA0;and&#xA0;Re-Tape:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
compile<br/>
&#160;&#160;&#160;&#160;&#160;OpenMP<b>&#xA0;</b>example&#160;<a href="openmp_run.sh.xml" target="_top">Compile&#xA0;and&#xA0;Run&#xA0;the&#xA0;OpenMP&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;unix<b>&#xA0;</b>flags&#160;<a href="installunix.xml#CompilerFlags" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;CompilerFlags</a><br/>
complex<br/>
&#160;&#160;&#160;&#160;&#160;double<b>&#xA0;</b>Base&#160;<a href="base_complex.hpp.xml" target="_top">Enable&#xA0;use&#xA0;of&#xA0;AD&lt;Base&gt;&#xA0;where&#xA0;Base&#xA0;is&#xA0;std::complex&lt;double&gt;</a><br/>
&#160;&#160;&#160;&#160;&#160;faq&#160;<a href="faq.xml#Complex Types" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Complex&#xA0;Types</a><br/>
&#160;&#160;&#160;&#160;&#160;LuSolve&#160;<a href="lusolve.cpp.xml" target="_top">LuSolve&#xA0;With&#xA0;Complex&#xA0;Arguments:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;polynomial&#160;<a href="not_complex_ad.cpp.xml" target="_top">Not&#xA0;Complex&#xA0;Differentiable:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;polynomial&#160;<a href="complexpoly.cpp.xml" target="_top">Complex&#xA0;Polynomial:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
composition<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="reverse_any.cpp.xml" target="_top">Reverse&#xA0;Mode&#xA0;General&#xA0;Case:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
computed<br/>
&#160;&#160;&#160;&#160;&#160;<b>*=&#xA0;</b>example&#160;<a href="muleq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Multiplication:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;<b>+=&#xA0;</b>example&#160;<a href="addeq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Addition:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;<b>-=&#xA0;</b>example&#160;<a href="subeq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Subtraction:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;<b>/=&#xA0;</b>example&#160;<a href="diveq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Division:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>assignment&#160;<a href="arithmetic.xml" target="_top">AD&#xA0;Arithmetic&#xA0;Operators&#xA0;and&#xA0;Computed&#xA0;Assignments</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>assignment<b>&#xA0;</b>add<b>&#xA0;</b>example&#160;<a href="addeq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Addition:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>assignment<b>&#xA0;</b>divide<b>&#xA0;</b>example&#160;<a href="diveq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Division:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>assignment<b>&#xA0;</b>multiply<b>&#xA0;</b>example&#160;<a href="muleq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Multiplication:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>assignment<b>&#xA0;</b>subtract<b>&#xA0;</b>example&#160;<a href="subeq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Subtraction:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
concept<br/>
&#160;&#160;&#160;&#160;&#160;C<b>++</b>&#160;<a href="library.xml#C++ Concepts" target="_top">The&#xA0;CppAD&#xA0;General&#xA0;Purpose&#xA0;Library:&#160;C++&#xA0;Concepts</a><br/>
&#160;&#160;&#160;&#160;&#160;check<b>&#xA0;</b>numeric&#160;<a href="checknumerictype.xml" target="_top">Check&#xA0;NumericType&#xA0;Class&#xA0;Concept</a><br/>
&#160;&#160;&#160;&#160;&#160;check<b>&#xA0;</b>simple<b>&#xA0;</b>vector&#160;<a href="checksimplevector.xml" target="_top">Check&#xA0;Simple&#xA0;Vector&#xA0;Concept</a><br/>
conditional<br/>
&#160;&#160;&#160;&#160;&#160;expression&#160;<a href="condexp.xml" target="_top">AD&#xA0;Conditional&#xA0;Expressions</a><br/>
config<b>.</b>h&#160;<a href="configure.xml#config.h" target="_top">Preprocessor&#xA0;Definitions&#xA0;Used&#xA0;by&#xA0;CppAD:&#160;config.h</a><br/>
configure&#160;<a href="installunix.xml#Configure" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Configure</a><br/>
&#160;&#160;&#160;&#160;&#160;postfix<b>&#xA0;</b>directory&#160;<a href="installunix.xml#PostfixDir" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;PostfixDir</a><br/>
&#160;&#160;&#160;&#160;&#160;prefix<b>&#xA0;</b>directory&#160;<a href="installunix.xml#PrefixDir" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;PrefixDir</a><br/>
&#160;&#160;&#160;&#160;&#160;symbol&#160;<a href="configure.xml" target="_top">Preprocessor&#xA0;Definitions&#xA0;Used&#xA0;by&#xA0;CppAD</a><br/>
construct<br/>
&#160;&#160;&#160;&#160;&#160;,<b>&#xA0;</b>AD<b>&#xA0;</b>default&#160;<a href="default.cpp.xml" target="_top">Default&#xA0;AD&#xA0;Constructor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="funconstruct.xml" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording</a><br/>
&#160;&#160;&#160;&#160;&#160;default&#160;<a href="default.xml" target="_top">AD&#xA0;Default&#xA0;Constructor</a><br/>
&#160;&#160;&#160;&#160;&#160;from<b>&#xA0;</b>base<b>&#xA0;</b>type&#160;<a href="copybase.cpp.xml" target="_top">AD&#xA0;Constructor&#xA0;From&#xA0;Base&#xA0;Type:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
constructor<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="ad_copy.xml" target="_top">AD&#xA0;Copy&#xA0;Constructor&#xA0;and&#xA0;Assignment&#xA0;Operator</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun<b>&#xA0;</b>constructor&#160;<a href="funconstruct.xml#Default Constructor" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording:&#160;Default&#xA0;Constructor</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun<b>&#xA0;</b>copy&#160;<a href="funconstruct.xml#Copy Constructor" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording:&#160;Copy&#xA0;Constructor</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun<b>&#xA0;</b>sequence&#160;<a href="funconstruct.xml#Sequence Constructor" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording:&#160;Sequence&#xA0;Constructor</a><br/>
&#160;&#160;&#160;&#160;&#160;copy<b>&#xA0;</b>vector&#160;<a href="simplevector.xml#Copy Constructor" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Simple&#xA0;Vector:&#160;Copy&#xA0;Constructor</a><br/>
&#160;&#160;&#160;&#160;&#160;element&#160;<a href="simplevector.xml#Element Constructor and Destructor" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Simple&#xA0;Vector:&#160;Element&#xA0;Constructor&#xA0;and&#xA0;Destructor</a><br/>
&#160;&#160;&#160;&#160;&#160;numeric&#160;<a href="numerictype.xml#Constructor From Integer" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Numeric&#xA0;Type:&#160;Constructor&#xA0;From&#xA0;Integer</a><br/>
&#160;&#160;&#160;&#160;&#160;numeric&#160;<a href="numerictype.xml#Default Constructor" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Numeric&#xA0;Type:&#160;Default&#xA0;Constructor</a><br/>
&#160;&#160;&#160;&#160;&#160;numeric<b>&#xA0;</b>copy&#160;<a href="numerictype.xml#Copy Constructor" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Numeric&#xA0;Type:&#160;Copy&#xA0;Constructor</a><br/>
&#160;&#160;&#160;&#160;&#160;size<b>&#xA0;</b>vector&#160;<a href="simplevector.xml#Sizing Constructor" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Simple&#xA0;Vector:&#160;Sizing&#xA0;Constructor</a><br/>
&#160;&#160;&#160;&#160;&#160;vector<b>&#xA0;</b>default&#160;<a href="simplevector.xml#Default Constructor" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Simple&#xA0;Vector:&#160;Default&#xA0;Constructor</a><br/>
control<br/>
&#160;&#160;&#160;&#160;&#160;ODE<b>&#xA0;</b>error&#160;<a href="odeerrcontrol.xml" target="_top">An&#xA0;Error&#xA0;Controller&#xA0;for&#xA0;ODE&#xA0;Solvers</a><br/>
&#160;&#160;&#160;&#160;&#160;Ode<b>&#xA0;</b>Gear&#160;<a href="odegearcontrol.xml" target="_top">An&#xA0;Error&#xA0;Controller&#xA0;for&#xA0;Gear's&#xA0;Ode&#xA0;Solvers</a><br/>
convert<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>to<b>&#xA0;</b>Base&#160;<a href="value.xml" target="_top">Convert&#xA0;From&#xA0;an&#xA0;AD&#xA0;Type&#xA0;to&#xA0;its&#xA0;Base&#xA0;Type</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>to<b>&#xA0;</b>integer&#160;<a href="integer.xml" target="_top">Convert&#xA0;From&#xA0;AD&#xA0;to&#xA0;Integer</a><br/>
&#160;&#160;&#160;&#160;&#160;from<b>&#xA0;</b>AD&#160;<a href="convert.xml" target="_top">Conversion&#xA0;and&#xA0;Printing&#xA0;of&#xA0;AD&#xA0;Objects</a><br/>
&#160;&#160;&#160;&#160;&#160;to<b>&#xA0;</b>AD&#160;<a href="ad_copy.xml" target="_top">AD&#xA0;Copy&#xA0;Constructor&#xA0;and&#xA0;Assignment&#xA0;Operator</a><br/>
copy<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>object&#160;<a href="copyad.cpp.xml" target="_top">AD&#xA0;Copy&#xA0;Constructor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun<b>&#xA0;</b>constructor&#160;<a href="funconstruct.xml#Copy Constructor" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording:&#160;Copy&#xA0;Constructor</a><br/>
&#160;&#160;&#160;&#160;&#160;numeric<b>&#xA0;</b>constructor&#160;<a href="numerictype.xml#Copy Constructor" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Numeric&#xA0;Type:&#160;Copy&#xA0;Constructor</a><br/>
&#160;&#160;&#160;&#160;&#160;vector<b>&#xA0;</b>constructor&#160;<a href="simplevector.xml#Copy Constructor" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Simple&#xA0;Vector:&#160;Copy&#xA0;Constructor</a><br/>
correct<br/>
&#160;&#160;&#160;&#160;&#160;determinant<b>&#xA0;</b>check&#160;<a href="det_grad_33.xml" target="_top">Check&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;of&#xA0;3&#xA0;by&#xA0;3&#xA0;matrix</a><br/>
&#160;&#160;&#160;&#160;&#160;determinant<b>&#xA0;</b>check&#160;<a href="det_33.xml" target="_top">Check&#xA0;Determinant&#xA0;of&#xA0;3&#xA0;by&#xA0;3&#xA0;matrix</a><br/>
cos<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="std_math_ad.xml" target="_top">AD&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="cos.cpp.xml" target="_top">The&#xA0;AD&#xA0;cos&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;float<b>&#xA0;</b>and<b>&#xA0;</b>double&#160;<a href="std_math_unary.xml" target="_top">Float&#xA0;and&#xA0;Double&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;forward&#160;<a href="sincosforward.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Forward&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse&#160;<a href="sincosreverse.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Reverse&#xA0;Theory</a><br/>
cosh<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="std_math_ad.xml" target="_top">AD&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="cosh.cpp.xml" target="_top">The&#xA0;AD&#xA0;cosh&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;float<b>&#xA0;</b>and<b>&#xA0;</b>double&#160;<a href="std_math_unary.xml" target="_top">Float&#xA0;and&#xA0;Double&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;forward&#160;<a href="sincosforward.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Forward&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse&#160;<a href="sincosreverse.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Reverse&#xA0;Theory</a><br/>
cppad<br/>
&#160;&#160;&#160;&#160;&#160;link<b>_</b>det<b>_</b>lu&#160;<a href="cppad_det_lu.cpp.xml#Implementation" target="_top">CppAD&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#160;Implementation</a><br/>
&#160;&#160;&#160;&#160;&#160;profile<b>&#xA0;</b>speed&#160;<a href="installunix.xml#Profiling CppAD" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Profiling&#xA0;CppAD</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>lu&#160;<a href="cppad_det_lu.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>minor&#160;<a href="cppad_det_minor.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>minor&#160;<a href="double_det_minor.cpp.xml" target="_top">Double&#xA0;Speed:&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>ode<b>&#xA0;</b>jacobian&#160;<a href="cppad_ode.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Ode&#xA0;Solution</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>polynomial&#160;<a href="cppad_poly.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>polynomial&#160;<a href="double_poly.cpp.xml" target="_top">Double&#xA0;Speed:&#xA0;Evaluate&#xA0;a&#xA0;Polynomial</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>sparse<b>&#xA0;</b>Hessian&#160;<a href="cppad_sparse_hessian.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Sparse&#xA0;Hessian</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>sparse<b>&#xA0;</b>Jacobian&#160;<a href="cppad_sparse_jacobian.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Sparse&#xA0;Jacobian</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>test&#160;<a href="speed_cppad.xml" target="_top">Speed&#xA0;Test&#xA0;Derivatives&#xA0;Using&#xA0;CppAD</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>test&#160;<a href="speed_main.xml" target="_top">Speed&#xA0;Testing&#xA0;Main&#xA0;Program</a><br/>
&#160;&#160;&#160;&#160;&#160;test<b>&#xA0;</b>speed&#160;<a href="installwindows.xml#CppAD Speed Test" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;CppAD&#xA0;Speed&#xA0;Test</a><br/>
cppad<b>.</b>hpp<br/>
&#160;&#160;&#160;&#160;&#160;include&#160;<a href="cppad.xml#Include File" target="_top">cppad-20100325:&#xA0;A&#xA0;Package&#xA0;for&#xA0;Differentiation&#xA0;of&#xA0;C++&#xA0;Algorithms:&#160;Include&#xA0;File</a><br/>
cppad<b>.</b>spec&#160;<a href="installunix.xml#RPM" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;RPM</a><br/>
cppad<b>_</b>ipopt<b>_</b>nlp<br/>
&#160;&#160;&#160;&#160;&#160;ode<b>&#xA0;</b>example<b>&#xA0;</b>source&#160;<a href="ipopt_ode_fast.hpp.xml" target="_top">ODE&#xA0;Fitting&#xA0;Using&#xA0;Fast&#xA0;Representation</a><br/>
&#160;&#160;&#160;&#160;&#160;ode<b>&#xA0;</b>example<b>&#xA0;</b>source&#160;<a href="ipopt_ode_simple.hpp.xml" target="_top">ODE&#xA0;Fitting&#xA0;Using&#xA0;Simple&#xA0;Representation</a><br/>
&#160;&#160;&#160;&#160;&#160;ode<b>&#xA0;</b>representation&#160;<a href="ipopt_ode_fast.xml" target="_top">ODE&#xA0;Fitting&#xA0;Using&#xA0;Fast&#xA0;Representation</a><br/>
&#160;&#160;&#160;&#160;&#160;ode<b>&#xA0;</b>simple<b>&#xA0;</b>representation&#160;<a href="ipopt_ode_simple.xml" target="_top">ODE&#xA0;Fitting&#xA0;Using&#xA0;Simple&#xA0;Representation</a><br/>

<b><big><a name="D">D</a></big></b>
<br/>
Dependent&#160;<a href="dependent.xml" target="_top">Stop&#xA0;Recording&#xA0;and&#xA0;Store&#xA0;Operation&#xA0;Sequence</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="fundeprecated.xml#Dependent" target="_top">ADFun&#xA0;Object&#xA0;Deprecated&#xA0;Member&#xA0;Functions:&#160;Dependent</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="funcheck.cpp.xml" target="_top">ADFun&#xA0;Check&#xA0;and&#xA0;Re-Tape:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;OpenMP&#160;<a href="funconstruct.xml#OpenMP" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording:&#160;OpenMP</a><br/>
Domain<br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seq_property.xml#Domain" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#160;Domain</a><br/>
debug<br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>mode&#160;<a href="printfor.xml" target="_top">Printing&#xA0;AD&#xA0;Values&#xA0;During&#xA0;Forward&#xA0;Mode</a><br/>
default<br/>
&#160;&#160;&#160;&#160;&#160;ADFun<b>&#xA0;</b>constructor&#160;<a href="funconstruct.xml#Default Constructor" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording:&#160;Default&#xA0;Constructor</a><br/>
&#160;&#160;&#160;&#160;&#160;constructor&#160;<a href="default.xml" target="_top">AD&#xA0;Default&#xA0;Constructor</a><br/>
&#160;&#160;&#160;&#160;&#160;numeric<b>&#xA0;</b>constructor&#160;<a href="numerictype.xml#Default Constructor" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Numeric&#xA0;Type:&#160;Default&#xA0;Constructor</a><br/>
&#160;&#160;&#160;&#160;&#160;vector<b>&#xA0;</b>constructor&#160;<a href="simplevector.xml#Default Constructor" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Simple&#xA0;Vector:&#160;Default&#xA0;Constructor</a><br/>
delete<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="tracknewdel.cpp.xml" target="_top">Tracking&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;track&#160;<a href="tracknewdel.xml" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete</a><br/>
dependent&#160;<a href="glossary.xml#Tape.Dependent Variables" target="_top">Glossary:&#160;Tape.Dependent&#xA0;Variables</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="glossary.xml#Operation.Dependent" target="_top">Glossary:&#160;Operation.Dependent</a><br/>
deprecated<br/>
&#160;&#160;&#160;&#160;&#160;CppADCreateDiscrete&#160;<a href="discrete.xml#Deprecated" target="_top">Discrete&#xA0;AD&#xA0;Functions:&#160;Deprecated</a><br/>
&#160;&#160;&#160;&#160;&#160;CppADvector&#160;<a href="test_vector.xml#Deprecated" target="_top">Choosing&#xA0;The&#xA0;Vector&#xA0;Testing&#xA0;Template&#xA0;Class:&#160;Deprecated</a><br/>
&#160;&#160;&#160;&#160;&#160;include<b>&#xA0;</b>file&#160;<a href="include_deprecated.xml" target="_top">Deprecated&#xA0;Include&#xA0;Files</a><br/>
derivative<br/>
&#160;&#160;&#160;&#160;&#160;directional<b>&#xA0;</b>abs&#160;<a href="abs.xml#Directional Derivative" target="_top">AD&#xA0;Absolute&#xA0;Value&#xA0;Function:&#160;Directional&#xA0;Derivative</a><br/>
&#160;&#160;&#160;&#160;&#160;directional<b>&#xA0;</b>example&#160;<a href="abs.cpp.xml" target="_top">AD&#xA0;Absolute&#xA0;Value&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;easy&#160;<a href="revone.xml" target="_top">First&#xA0;Order&#xA0;Derivative:&#xA0;Driver&#xA0;Routine</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="revone.cpp.xml" target="_top">First&#xA0;Order&#xA0;Derivative&#xA0;Driver:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>order<b>&#xA0;</b>driver&#160;<a href="revone.xml" target="_top">First&#xA0;Order&#xA0;Derivative:&#xA0;Driver&#xA0;Routine</a><br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>mode&#160;<a href="forwardany.xml" target="_top">Any&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;polynomial<b>&#xA0;</b>template&#160;<a href="poly.xml" target="_top">Evaluate&#xA0;a&#xA0;Polynomial&#xA0;or&#xA0;its&#xA0;Derivative</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>mode&#160;<a href="reverse_any.xml" target="_top">Any&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>mode&#160;<a href="reverse_two.xml" target="_top">Second&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>mode&#160;<a href="reverse_one.xml" target="_top">First&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
destructor<br/>
&#160;&#160;&#160;&#160;&#160;element&#160;<a href="simplevector.xml#Element Constructor and Destructor" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Simple&#xA0;Vector:&#160;Element&#xA0;Constructor&#xA0;and&#xA0;Destructor</a><br/>
det<b>_</b>33&#160;<a href="det_33.xml" target="_top">Check&#xA0;Determinant&#xA0;of&#xA0;3&#xA0;by&#xA0;3&#xA0;matrix</a><br/>
&#160;&#160;&#160;&#160;&#160;source&#160;<a href="det_33.hpp.xml" target="_top">Source:&#xA0;det_33</a><br/>
det<b>_</b>by<b>_</b>lu&#160;<a href="det_by_lu.xml" target="_top">Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Lu&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;source&#160;<a href="det_by_lu.hpp.xml" target="_top">Source:&#xA0;det_by_lu</a><br/>
det<b>_</b>by<b>_</b>minor<br/>
&#160;&#160;&#160;&#160;&#160;source&#160;<a href="det_by_minor.hpp.xml" target="_top">Source:&#xA0;det_by_minor</a><br/>
det<b>_</b>grad<b>_</b>33&#160;<a href="det_grad_33.xml" target="_top">Check&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;of&#xA0;3&#xA0;by&#xA0;3&#xA0;matrix</a><br/>
&#160;&#160;&#160;&#160;&#160;source&#160;<a href="det_grad_33.hpp.xml" target="_top">Source:&#xA0;det_grad_33</a><br/>
det<b>_</b>lu<br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>test&#160;<a href="link_det_lu.xml" target="_top">Speed&#xA0;Testing&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization</a><br/>
det<b>_</b>minor<br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>test&#160;<a href="link_det_minor.xml" target="_top">Speed&#xA0;Testing&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion</a><br/>
det<b>_</b>of<b>_</b>minor&#160;<a href="det_of_minor.xml" target="_top">Determinant&#xA0;of&#xA0;a&#xA0;Minor</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="det_of_minor.cpp.xml" target="_top">Determinant&#xA0;of&#xA0;a&#xA0;Minor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;source&#160;<a href="det_of_minor.hpp.xml" target="_top">Source:&#xA0;det_of_minor</a><br/>
determinant&#160;<a href="luratio.xml#LU.Determinant" target="_top">LU&#xA0;Factorization&#xA0;of&#xA0;A&#xA0;Square&#xA0;Matrix&#xA0;and&#xA0;Stability&#xA0;Calculation:&#160;LU.Determinant</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="lufactor.xml#LU.Determinant" target="_top">LU&#xA0;Factorization&#xA0;of&#xA0;A&#xA0;Square&#xA0;Matrix:&#160;LU.Determinant</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="ludetandsolve.xml" target="_top">Compute&#xA0;Determinants&#xA0;and&#xA0;Solve&#xA0;Equations&#xA0;by&#xA0;LU&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;by<b>&#xA0;</b>minors&#160;<a href="det_by_lu.cpp.xml" target="_top">Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;by<b>&#xA0;</b>minors&#160;<a href="det_by_minor.cpp.xml" target="_top">Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;check<b>&#xA0;</b>correct&#160;<a href="det_grad_33.xml" target="_top">Check&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;of&#xA0;3&#xA0;by&#xA0;3&#xA0;matrix</a><br/>
&#160;&#160;&#160;&#160;&#160;check<b>&#xA0;</b>correct&#160;<a href="det_33.xml" target="_top">Check&#xA0;Determinant&#xA0;of&#xA0;3&#xA0;by&#xA0;3&#xA0;matrix</a><br/>
&#160;&#160;&#160;&#160;&#160;Lu&#160;<a href="luvecad.xml" target="_top">Lu&#xA0;Factor&#xA0;and&#xA0;Solve&#xA0;with&#xA0;Recorded&#xA0;Pivoting</a><br/>
&#160;&#160;&#160;&#160;&#160;Lu&#160;<a href="lusolve.xml" target="_top">Compute&#xA0;Determinant&#xA0;and&#xA0;Solve&#xA0;Linear&#xA0;Equations</a><br/>
&#160;&#160;&#160;&#160;&#160;Lu<b>&#xA0;</b>factor&#160;<a href="luratio.xml" target="_top">LU&#xA0;Factorization&#xA0;of&#xA0;A&#xA0;Square&#xA0;Matrix&#xA0;and&#xA0;Stability&#xA0;Calculation</a><br/>
&#160;&#160;&#160;&#160;&#160;Lu<b>&#xA0;</b>factor&#160;<a href="lufactor.xml" target="_top">LU&#xA0;Factorization&#xA0;of&#xA0;A&#xA0;Square&#xA0;Matrix</a><br/>
&#160;&#160;&#160;&#160;&#160;lu<b>&#xA0;</b>factor&#160;<a href="det_by_lu.xml" target="_top">Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Lu&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;matrix<b>&#xA0;</b>minor&#160;<a href="det_of_minor.xml" target="_top">Determinant&#xA0;of&#xA0;a&#xA0;Minor</a><br/>
&#160;&#160;&#160;&#160;&#160;minor<b>&#xA0;</b>expansion&#160;<a href="det_by_minor.xml" target="_top">Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors</a><br/>
difference<br/>
&#160;&#160;&#160;&#160;&#160;absolute&#160;<a href="nearequal.xml" target="_top">Determine&#xA0;if&#xA0;Two&#xA0;Values&#xA0;Are&#xA0;Nearly&#xA0;Equal</a><br/>
&#160;&#160;&#160;&#160;&#160;central&#160;<a href="interface2c.cpp.xml" target="_top">Interfacing&#xA0;to&#xA0;C:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;relative&#160;<a href="nearequal.xml" target="_top">Determine&#xA0;if&#xA0;Two&#xA0;Values&#xA0;Are&#xA0;Nearly&#xA0;Equal</a><br/>
differential<br/>
&#160;&#160;&#160;&#160;&#160;equation&#160;<a href="odegear.xml" target="_top">An&#xA0;Arbitrary&#xA0;Order&#xA0;Gear&#xA0;Method</a><br/>
&#160;&#160;&#160;&#160;&#160;equation&#160;<a href="rosen34.xml" target="_top">A&#xA0;3rd&#xA0;and&#xA0;4th&#xA0;Order&#xA0;Rosenbrock&#xA0;ODE&#xA0;Solver</a><br/>
&#160;&#160;&#160;&#160;&#160;equation&#160;<a href="runge45.xml" target="_top">An&#xA0;Embedded&#xA0;4th&#xA0;and&#xA0;5th&#xA0;Order&#xA0;Runge-Kutta&#xA0;ODE&#xA0;Solver</a><br/>
&#160;&#160;&#160;&#160;&#160;ODE<b>&#xA0;</b>error<b>&#xA0;</b>control&#160;<a href="odeerrcontrol.xml" target="_top">An&#xA0;Error&#xA0;Controller&#xA0;for&#xA0;ODE&#xA0;Solvers</a><br/>
&#160;&#160;&#160;&#160;&#160;Ode<b>&#xA0;</b>Gear<b>&#xA0;</b>control&#160;<a href="odegearcontrol.xml" target="_top">An&#xA0;Error&#xA0;Controller&#xA0;for&#xA0;Gear's&#xA0;Ode&#xA0;Solvers</a><br/>
dimension<br/>
&#160;&#160;&#160;&#160;&#160;multi<b>&#xA0;</b>Romberg<b>&#xA0;</b>integration&#160;<a href="rombergmul.xml" target="_top">Multi-dimensional&#xA0;Romberg&#xA0;Integration</a><br/>
direction<br/>
&#160;&#160;&#160;&#160;&#160;times<b>&#xA0;</b>Hessian&#160;<a href="hestimesdir.cpp.xml" target="_top">Hessian&#xA0;Times&#xA0;Direction:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
directional<br/>
&#160;&#160;&#160;&#160;&#160;derivative<b>&#xA0;</b>abs&#160;<a href="abs.xml#Directional Derivative" target="_top">AD&#xA0;Absolute&#xA0;Value&#xA0;Function:&#160;Directional&#xA0;Derivative</a><br/>
&#160;&#160;&#160;&#160;&#160;derivative<b>&#xA0;</b>example&#160;<a href="abs.cpp.xml" target="_top">AD&#xA0;Absolute&#xA0;Value&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
directory<br/>
&#160;&#160;&#160;&#160;&#160;configure<b>&#xA0;</b>postfix&#160;<a href="installunix.xml#PostfixDir" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;PostfixDir</a><br/>
&#160;&#160;&#160;&#160;&#160;configure<b>&#xA0;</b>prefix&#160;<a href="installunix.xml#PrefixDir" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;PrefixDir</a><br/>
discrete<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>function&#160;<a href="discrete.xml" target="_top">Discrete&#xA0;AD&#xA0;Functions</a><br/>
disk<br/>
&#160;&#160;&#160;&#160;&#160;tape&#160;<a href="faq.xml#Tape Storage: Disk or Memory" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Tape&#xA0;Storage:&#xA0;Disk&#xA0;or&#xA0;Memory</a><br/>
divide<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="div.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Division:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;binary<b>&#xA0;</b>operator&#160;<a href="ad_binary.xml" target="_top">AD&#xA0;Binary&#xA0;Arithmetic&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;computed<b>&#xA0;</b>assignment&#160;<a href="compute_assign.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Operators</a><br/>
documentation<br/>
&#160;&#160;&#160;&#160;&#160;install&#160;<a href="installunix.xml#--with-Documentation" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;--with-Documentation</a><br/>
double<br/>
&#160;&#160;&#160;&#160;&#160;complex<b>&#xA0;</b>Base&#160;<a href="base_complex.hpp.xml" target="_top">Enable&#xA0;use&#xA0;of&#xA0;AD&lt;Base&gt;&#xA0;where&#xA0;Base&#xA0;is&#xA0;std::complex&lt;double&gt;</a><br/>
&#160;&#160;&#160;&#160;&#160;convert<b>&#xA0;</b>to<b>&#xA0;</b>AD&#160;<a href="ad_copy.xml" target="_top">AD&#xA0;Copy&#xA0;Constructor&#xA0;and&#xA0;Assignment&#xA0;Operator</a><br/>
&#160;&#160;&#160;&#160;&#160;link<b>_</b>det<b>_</b>lu&#160;<a href="double_det_lu.cpp.xml#Implementation" target="_top">Double&#xA0;Speed:&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#160;Implementation</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>lu&#160;<a href="double_det_lu.cpp.xml#Specifications" target="_top">Double&#xA0;Speed:&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#160;Specifications</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>ode&#160;<a href="double_ode.cpp.xml" target="_top">Double&#xA0;Speed:&#xA0;Ode&#xA0;Solution</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>sparse<b>&#xA0;</b>hessian&#160;<a href="double_sparse_hessian.cpp.xml" target="_top">Double&#xA0;Speed:&#xA0;Sparse&#xA0;Hessian</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>sparse<b>&#xA0;</b>jacobian&#160;<a href="double_sparse_jacobian.cpp.xml" target="_top">Double&#xA0;Speed:&#xA0;Sparse&#xA0;Jacobian</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>test&#160;<a href="speed_double.xml" target="_top">Speed&#xA0;Test&#xA0;Functions&#xA0;in&#xA0;Double</a><br/>
&#160;&#160;&#160;&#160;&#160;test<b>&#xA0;</b>speed&#160;<a href="installwindows.xml#Double Speed Test" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;Double&#xA0;Speed&#xA0;Test</a><br/>
download<br/>
&#160;&#160;&#160;&#160;&#160;subversion&#160;<a href="subversion.xml" target="_top">Using&#xA0;Subversion&#xA0;To&#xA0;Download&#xA0;Source&#xA0;Code</a><br/>
&#160;&#160;&#160;&#160;&#160;unix&#160;<a href="installunix.xml#Download" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Download</a><br/>
&#160;&#160;&#160;&#160;&#160;windows&#160;<a href="installwindows.xml#Download" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;Download</a><br/>
driver<br/>
&#160;&#160;&#160;&#160;&#160;easy&#160;<a href="drivers.xml" target="_top">First&#xA0;and&#xA0;Second&#xA0;Derivatives:&#xA0;Easy&#xA0;Drivers</a><br/>
&#160;&#160;&#160;&#160;&#160;easy<b>&#xA0;</b>derivative&#160;<a href="revone.xml" target="_top">First&#xA0;Order&#xA0;Derivative:&#xA0;Driver&#xA0;Routine</a><br/>
&#160;&#160;&#160;&#160;&#160;easy<b>&#xA0;</b>partial&#160;<a href="revtwo.xml" target="_top">Reverse&#xA0;Mode&#xA0;Second&#xA0;Partial&#xA0;Derivative&#xA0;Driver</a><br/>
&#160;&#160;&#160;&#160;&#160;easy<b>&#xA0;</b>partial&#160;<a href="fortwo.xml" target="_top">Forward&#xA0;Mode&#xA0;Second&#xA0;Partial&#xA0;Derivative&#xA0;Driver</a><br/>
&#160;&#160;&#160;&#160;&#160;easy<b>&#xA0;</b>partial&#160;<a href="forone.xml" target="_top">First&#xA0;Order&#xA0;Partial&#xA0;Derivative:&#xA0;Driver&#xA0;Routine</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>order<b>&#xA0;</b>derivative&#160;<a href="revone.xml" target="_top">First&#xA0;Order&#xA0;Derivative:&#xA0;Driver&#xA0;Routine</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>order<b>&#xA0;</b>partial&#160;<a href="forone.xml" target="_top">First&#xA0;Order&#xA0;Partial&#xA0;Derivative:&#xA0;Driver&#xA0;Routine</a><br/>
&#160;&#160;&#160;&#160;&#160;Hessian&#160;<a href="hessian.xml" target="_top">Hessian:&#xA0;Easy&#xA0;Driver</a><br/>
&#160;&#160;&#160;&#160;&#160;Jacobian&#160;<a href="jacobian.xml" target="_top">Jacobian:&#xA0;Driver&#xA0;Routine</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>order<b>&#xA0;</b>partial&#160;<a href="revtwo.xml" target="_top">Reverse&#xA0;Mode&#xA0;Second&#xA0;Partial&#xA0;Derivative&#xA0;Driver</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>order<b>&#xA0;</b>partial&#160;<a href="fortwo.xml" target="_top">Forward&#xA0;Mode&#xA0;Second&#xA0;Partial&#xA0;Derivative&#xA0;Driver</a><br/>

<b><big><a name="E">E</a></big></b>
<br/>
EqualOpSeq&#160;<a href="equalopseq.xml" target="_top">Check&#xA0;if&#xA0;Equal&#xA0;and&#xA0;Correspond&#xA0;to&#xA0;Same&#xA0;Operation&#xA0;Sequence</a><br/>
&#160;&#160;&#160;&#160;&#160;Base<b>&#xA0;</b>require&#160;<a href="base_require.xml#EqualOpSeq" target="_top">AD&lt;Base&gt;&#xA0;Requirements&#xA0;for&#xA0;Base&#xA0;Type:&#160;EqualOpSeq</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="equalopseq.cpp.xml" target="_top">EqualOpSeq:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
ErrorHandler&#160;<a href="faq.xml#Exceptions" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Exceptions</a><br/>
easy<br/>
&#160;&#160;&#160;&#160;&#160;derivative&#160;<a href="revone.xml" target="_top">First&#xA0;Order&#xA0;Derivative:&#xA0;Driver&#xA0;Routine</a><br/>
&#160;&#160;&#160;&#160;&#160;driver&#160;<a href="drivers.xml" target="_top">First&#xA0;and&#xA0;Second&#xA0;Derivatives:&#xA0;Easy&#xA0;Drivers</a><br/>
&#160;&#160;&#160;&#160;&#160;partial&#160;<a href="revtwo.xml" target="_top">Reverse&#xA0;Mode&#xA0;Second&#xA0;Partial&#xA0;Derivative&#xA0;Driver</a><br/>
&#160;&#160;&#160;&#160;&#160;partial&#160;<a href="fortwo.xml" target="_top">Forward&#xA0;Mode&#xA0;Second&#xA0;Partial&#xA0;Derivative&#xA0;Driver</a><br/>
&#160;&#160;&#160;&#160;&#160;partial&#160;<a href="forone.xml" target="_top">First&#xA0;Order&#xA0;Partial&#xA0;Derivative:&#xA0;Driver&#xA0;Routine</a><br/>
efficient<br/>
&#160;&#160;&#160;&#160;&#160;sparsity&#160;<a href="glossary.xml#Sparsity Pattern" target="_top">Glossary:&#160;Sparsity&#xA0;Pattern</a><br/>
elapsed<br/>
&#160;&#160;&#160;&#160;&#160;seconds&#160;<a href="elapsed_seconds.cpp.xml" target="_top">Elapsed&#xA0;Seconds:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
elapsed<b>_</b>seconds&#160;<a href="elapsed_seconds.xml" target="_top">Returns&#xA0;Elapsed&#xA0;Number&#xA0;of&#xA0;Seconds</a><br/>
elementary&#160;<a href="glossary.xml#Elementary Vector" target="_top">Glossary:&#160;Elementary&#xA0;Vector</a><br/>
equal<br/>
&#160;&#160;&#160;&#160;&#160;near&#160;<a href="nearequal.xml" target="_top">Determine&#xA0;if&#xA0;Two&#xA0;Values&#xA0;Are&#xA0;Nearly&#xA0;Equal</a><br/>
&#160;&#160;&#160;&#160;&#160;operation<b>&#xA0;</b>sequence&#160;<a href="equalopseq.xml" target="_top">Check&#xA0;if&#xA0;Equal&#xA0;and&#xA0;Correspond&#xA0;to&#xA0;Same&#xA0;Operation&#xA0;Sequence</a><br/>
equation<br/>
&#160;&#160;&#160;&#160;&#160;differential&#160;<a href="odegear.xml" target="_top">An&#xA0;Arbitrary&#xA0;Order&#xA0;Gear&#xA0;Method</a><br/>
&#160;&#160;&#160;&#160;&#160;differential&#160;<a href="rosen34.xml" target="_top">A&#xA0;3rd&#xA0;and&#xA0;4th&#xA0;Order&#xA0;Rosenbrock&#xA0;ODE&#xA0;Solver</a><br/>
&#160;&#160;&#160;&#160;&#160;differential&#160;<a href="runge45.xml" target="_top">An&#xA0;Embedded&#xA0;4th&#xA0;and&#xA0;5th&#xA0;Order&#xA0;Runge-Kutta&#xA0;ODE&#xA0;Solver</a><br/>
&#160;&#160;&#160;&#160;&#160;Lu<b>&#xA0;</b>factor&#160;<a href="luratio.xml" target="_top">LU&#xA0;Factorization&#xA0;of&#xA0;A&#xA0;Square&#xA0;Matrix&#xA0;and&#xA0;Stability&#xA0;Calculation</a><br/>
&#160;&#160;&#160;&#160;&#160;Lu<b>&#xA0;</b>factor&#160;<a href="lufactor.xml" target="_top">LU&#xA0;Factorization&#xA0;of&#xA0;A&#xA0;Square&#xA0;Matrix</a><br/>
&#160;&#160;&#160;&#160;&#160;Lu<b>&#xA0;</b>invert&#160;<a href="luinvert.xml" target="_top">Invert&#xA0;an&#xA0;LU&#xA0;Factored&#xA0;Equation</a><br/>
&#160;&#160;&#160;&#160;&#160;linear&#160;<a href="lusolve.xml" target="_top">Compute&#xA0;Determinant&#xA0;and&#xA0;Solve&#xA0;Linear&#xA0;Equations</a><br/>
&#160;&#160;&#160;&#160;&#160;linear&#160;<a href="ludetandsolve.xml" target="_top">Compute&#xA0;Determinants&#xA0;and&#xA0;Solve&#xA0;Equations&#xA0;by&#xA0;LU&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;ODE<b>&#xA0;</b>error<b>&#xA0;</b>control&#160;<a href="odeerrcontrol.xml" target="_top">An&#xA0;Error&#xA0;Controller&#xA0;for&#xA0;ODE&#xA0;Solvers</a><br/>
&#160;&#160;&#160;&#160;&#160;Ode<b>&#xA0;</b>Gear<b>&#xA0;</b>control&#160;<a href="odegearcontrol.xml" target="_top">An&#xA0;Error&#xA0;Controller&#xA0;for&#xA0;Gear's&#xA0;Ode&#xA0;Solvers</a><br/>
&#160;&#160;&#160;&#160;&#160;solve<b>&#xA0;</b>linear&#160;<a href="luvecad.xml" target="_top">Lu&#xA0;Factor&#xA0;and&#xA0;Solve&#xA0;with&#xA0;Recorded&#xA0;Pivoting</a><br/>
erf&#160;<a href="whats_new_08.xml#11-20" target="_top">Changes&#xA0;and&#xA0;Additions&#xA0;to&#xA0;CppAD&#xA0;During&#xA0;2008:&#160;11-20</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>function&#160;<a href="erf.xml" target="_top">The&#xA0;AD&#xA0;Error&#xA0;Function</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="erf.cpp.xml" target="_top">The&#xA0;AD&#xA0;erf&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
error<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>function&#160;<a href="erf.xml" target="_top">The&#xA0;AD&#xA0;Error&#xA0;Function</a><br/>
&#160;&#160;&#160;&#160;&#160;assert<b>&#xA0;</b>macro&#160;<a href="cppad_assert.xml" target="_top">CppAD&#xA0;Assertions&#xA0;During&#xA0;Execution</a><br/>
&#160;&#160;&#160;&#160;&#160;control<b>&#xA0;</b>ODE&#160;<a href="odeerrcontrol.xml" target="_top">An&#xA0;Error&#xA0;Controller&#xA0;for&#xA0;ODE&#xA0;Solvers</a><br/>
&#160;&#160;&#160;&#160;&#160;Gear<b>&#xA0;</b>Ode&#160;<a href="odegearcontrol.xml" target="_top">An&#xA0;Error&#xA0;Controller&#xA0;for&#xA0;Gear's&#xA0;Ode&#xA0;Solvers</a><br/>
&#160;&#160;&#160;&#160;&#160;handler&#160;<a href="errorhandler.cpp.xml" target="_top">Replacing&#xA0;The&#xA0;CppAD&#xA0;Error&#xA0;Handler:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;handler&#160;<a href="errorhandler.xml" target="_top">Replacing&#xA0;the&#xA0;CppAD&#xA0;Error&#xA0;Handler</a><br/>
evaluate<br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="funeval.xml" target="_top">Evaluate&#xA0;ADFun&#xA0;Functions,&#xA0;Derivatives,&#xA0;and&#xA0;Sparsity&#xA0;Patterns</a><br/>
example&#160;<a href="example.xml" target="_top">Examples</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>acos&#160;<a href="acos.cpp.xml" target="_top">The&#xA0;AD&#xA0;acos&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>add&#160;<a href="add.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Addition:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>asin&#160;<a href="asin.cpp.xml" target="_top">The&#xA0;AD&#xA0;asin&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>assignment&#160;<a href="eq.cpp.xml" target="_top">AD&#xA0;Assignment&#xA0;Operator:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>atan&#160;<a href="atan.cpp.xml" target="_top">The&#xA0;AD&#xA0;atan&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>atan2&#160;<a href="atan2.cpp.xml" target="_top">The&#xA0;AD&#xA0;atan2&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>bool&#160;<a href="boolfun.cpp.xml" target="_top">AD&#xA0;Boolean&#xA0;Functions:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>compare&#160;<a href="compare.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Comparison&#xA0;Operators:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>computed<b>&#xA0;</b>assignment<b>&#xA0;</b>add&#160;<a href="addeq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Addition:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>computed<b>&#xA0;</b>assignment<b>&#xA0;</b>divide&#160;<a href="diveq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Division:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>computed<b>&#xA0;</b>assignment<b>&#xA0;</b>multiply&#160;<a href="muleq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Multiplication:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>computed<b>&#xA0;</b>assignment<b>&#xA0;</b>subtract&#160;<a href="subeq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Subtraction:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>cos&#160;<a href="cos.cpp.xml" target="_top">The&#xA0;AD&#xA0;cos&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>cosh&#160;<a href="cosh.cpp.xml" target="_top">The&#xA0;AD&#xA0;cosh&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>divide&#160;<a href="div.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Division:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>exp&#160;<a href="exp.cpp.xml" target="_top">The&#xA0;AD&#xA0;exp&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>log&#160;<a href="log.cpp.xml" target="_top">The&#xA0;AD&#xA0;log&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>log10&#160;<a href="log10.cpp.xml" target="_top">The&#xA0;AD&#xA0;log10&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>multiply&#160;<a href="mul.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Multiplication:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>output&#160;<a href="output.cpp.xml" target="_top">AD&#xA0;Output&#xA0;Operator:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>pow&#160;<a href="pow.cpp.xml" target="_top">The&#xA0;AD&#xA0;Power&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>sin&#160;<a href="sin.cpp.xml" target="_top">The&#xA0;AD&#xA0;sin&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>sinh&#160;<a href="sinh.cpp.xml" target="_top">The&#xA0;AD&#xA0;sinh&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>sqrt&#160;<a href="sqrt.cpp.xml" target="_top">The&#xA0;AD&#xA0;sqrt&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="ad_fun.cpp.xml" target="_top">Creating&#xA0;Your&#xA0;Own&#xA0;Interface&#xA0;to&#xA0;an&#xA0;ADFun&#xA0;Object</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="funcheck.cpp.xml" target="_top">ADFun&#xA0;Check&#xA0;and&#xA0;Re-Tape:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun<b>&#xA0;</b>assignment&#160;<a href="fun_assign.cpp.xml" target="_top">ADFun&#xA0;Assignment:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun<b>&#xA0;</b>default<b>&#xA0;</b>constructor&#160;<a href="heslagrangian.cpp.xml" target="_top">Hessian&#xA0;of&#xA0;Lagrangian&#xA0;and&#xA0;&#xA0;ADFun&#xA0;Default&#xA0;Constructor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;abort&#160;<a href="abort_recording.cpp.xml" target="_top">Abort&#xA0;Current&#xA0;Recording:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;abs&#160;<a href="abs.cpp.xml" target="_top">AD&#xA0;Absolute&#xA0;Value&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;algorithm&#160;<a href="exp_eps.xml" target="_top">An&#xA0;Epsilon&#xA0;Accurate&#xA0;Exponential&#xA0;Approximation</a><br/>
&#160;&#160;&#160;&#160;&#160;algorithm&#160;<a href="exp_2.xml" target="_top">Second&#xA0;Order&#xA0;Exponential&#xA0;Approximation</a><br/>
&#160;&#160;&#160;&#160;&#160;BenderQuad&#160;<a href="benderquad.cpp.xml" target="_top">BenderQuad:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;C<b>&#xA0;</b>AD&#160;<a href="ad_in_c.cpp.xml" target="_top">Example&#xA0;and&#xA0;Test&#xA0;Linking&#xA0;CppAD&#xA0;to&#xA0;Languages&#xA0;Other&#xA0;than&#xA0;C++</a><br/>
&#160;&#160;&#160;&#160;&#160;CompareChange&#160;<a href="comparechange.cpp.xml" target="_top">CompareChange&#xA0;and&#xA0;Re-Tape:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;CondExp&#160;<a href="condexp.cpp.xml" target="_top">Conditional&#xA0;Expressions:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;CppAD&#160;<a href="installunix.xml#CppAD Examples" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;CppAD&#xA0;Examples</a><br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>::</b>vector&#160;<a href="cppad_vector.cpp.xml" target="_top">CppAD::vector&#xA0;Template&#xA0;Class:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>::</b>vectorBool&#160;<a href="vectorbool.cpp.xml" target="_top">CppAD::vectorBool&#xA0;Class:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;check<b>&#xA0;</b>NumericType&#160;<a href="checknumerictype.cpp.xml" target="_top">The&#xA0;CheckNumericType&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;check<b>&#xA0;</b>SimpleVector&#160;<a href="checksimplevector.cpp.xml" target="_top">The&#xA0;CheckSimpleVector&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;checkpoint&#160;<a href="checkpoint.cpp.xml" target="_top">Checkpoint&#xA0;and&#xA0;Function&#xA0;Composition:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;compile<b>&#xA0;</b>OpenMP&#160;<a href="openmp_run.sh.xml" target="_top">Compile&#xA0;and&#xA0;Run&#xA0;the&#xA0;OpenMP&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;complex&#160;<a href="lusolve.cpp.xml" target="_top">LuSolve&#xA0;With&#xA0;Complex&#xA0;Arguments:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;complex<b>&#xA0;</b>polynomial&#160;<a href="complexpoly.cpp.xml" target="_top">Complex&#xA0;Polynomial:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;composition&#160;<a href="reverse_any.cpp.xml" target="_top">Reverse&#xA0;Mode&#xA0;General&#xA0;Case:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;construct<b>&#xA0;</b>from<b>&#xA0;</b>base&#160;<a href="copybase.cpp.xml" target="_top">AD&#xA0;Constructor&#xA0;From&#xA0;Base&#xA0;Type:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;copy<b>&#xA0;</b>AD<b>&#xA0;</b>object&#160;<a href="copyad.cpp.xml" target="_top">AD&#xA0;Copy&#xA0;Constructor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>_</b>ipopt<b>_</b>nlp<b>&#xA0;</b>ode<b>&#xA0;</b>source&#160;<a href="ipopt_ode_fast.hpp.xml" target="_top">ODE&#xA0;Fitting&#xA0;Using&#xA0;Fast&#xA0;Representation</a><br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>_</b>ipopt<b>_</b>nlp<b>&#xA0;</b>ode<b>&#xA0;</b>source&#160;<a href="ipopt_ode_simple.hpp.xml" target="_top">ODE&#xA0;Fitting&#xA0;Using&#xA0;Simple&#xA0;Representation</a><br/>
&#160;&#160;&#160;&#160;&#160;Dependent&#160;<a href="funcheck.cpp.xml" target="_top">ADFun&#xA0;Check&#xA0;and&#xA0;Re-Tape:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Domain&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;default<b>&#xA0;</b>AD<b>&#xA0;</b>construct&#160;<a href="default.cpp.xml" target="_top">Default&#xA0;AD&#xA0;Constructor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;delete&#160;<a href="tracknewdel.cpp.xml" target="_top">Tracking&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;derivative&#160;<a href="revone.cpp.xml" target="_top">First&#xA0;Order&#xA0;Derivative&#xA0;Driver:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;det<b>_</b>of<b>_</b>minor&#160;<a href="det_of_minor.cpp.xml" target="_top">Determinant&#xA0;of&#xA0;a&#xA0;Minor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;determinant<b>&#xA0;</b>by<b>&#xA0;</b>minors&#160;<a href="det_by_lu.cpp.xml" target="_top">Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;determinant<b>&#xA0;</b>by<b>&#xA0;</b>minors&#160;<a href="det_by_minor.cpp.xml" target="_top">Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;EqualOpSeq&#160;<a href="equalopseq.cpp.xml" target="_top">EqualOpSeq:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;erf&#160;<a href="erf.cpp.xml" target="_top">The&#xA0;AD&#xA0;erf&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;error<b>&#xA0;</b>handler&#160;<a href="errorhandler.cpp.xml" target="_top">Replacing&#xA0;The&#xA0;CppAD&#xA0;Error&#xA0;Handler:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Forward&#160;<a href="forward.cpp.xml" target="_top">Forward&#xA0;Mode:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;FunCheck&#160;<a href="funcheck.cpp.xml" target="_top">ADFun&#xA0;Check&#xA0;and&#xA0;Re-Tape:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>order<b>&#xA0;</b>reverse&#160;<a href="reverse_one.cpp.xml" target="_top">First&#xA0;Order&#xA0;Reverse&#xA0;Mode:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>mode&#160;<a href="exp_eps_for2.xml" target="_top">exp_eps:&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>mode&#160;<a href="exp_2_for2.xml" target="_top">exp_2:&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>mode&#160;<a href="exp_2_for1.xml" target="_top">exp_2:&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;general&#160;<a href="general.xml" target="_top">General&#xA0;Examples</a><br/>
&#160;&#160;&#160;&#160;&#160;general<b>&#xA0;</b>reverse&#160;<a href="reverse_any.cpp.xml" target="_top">Reverse&#xA0;Mode&#xA0;General&#xA0;Case:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="jacludet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="jacminordet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="hesludet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;LU&#xA0;Factorization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="hesminordet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Hessian&#160;<a href="hessian.cpp.xml" target="_top">Hessian:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Hessian<b>&#xA0;</b>of<b>&#xA0;</b>Lagrangian&#160;<a href="heslagrangian.cpp.xml" target="_top">Hessian&#xA0;of&#xA0;Lagrangian&#xA0;and&#xA0;&#xA0;ADFun&#xA0;Default&#xA0;Constructor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Independent&#160;<a href="independent.cpp.xml" target="_top">Independent&#xA0;and&#xA0;ADFun&#xA0;Constructor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Integer&#160;<a href="integer.cpp.xml" target="_top">Convert&#xA0;From&#xA0;AD&#xA0;to&#xA0;Integer:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;interpreter&#160;<a href="stackmachine.cpp.xml" target="_top">Example&#xA0;Differentiating&#xA0;a&#xA0;Stack&#xA0;Machine&#xA0;Interpreter</a><br/>
&#160;&#160;&#160;&#160;&#160;Jacobian&#160;<a href="jacobian.cpp.xml" target="_top">Jacobian:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;LU&#160;<a href="hesludet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;LU&#xA0;Factorization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Lu&#160;<a href="jacludet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Lu<b>&#xA0;</b>record<b>&#xA0;</b>pivot&#160;<a href="luvecadok.cpp.xml" target="_top">Lu&#xA0;Factor&#xA0;and&#xA0;Solve&#xA0;With&#xA0;Recorded&#xA0;Pivoting:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;LuFactor&#160;<a href="lufactor.cpp.xml" target="_top">LuFactor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;LuInvert&#160;<a href="luinvert.cpp.xml" target="_top">LuInvert:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;LuRatio&#160;<a href="luratio.cpp.xml" target="_top">LuRatio:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;LuSolve&#160;<a href="lusolve.cpp.xml" target="_top">LuSolve&#xA0;With&#xA0;Complex&#xA0;Arguments:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;minors<b>&#xA0;</b>expansion&#160;<a href="jacminordet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;minors<b>&#xA0;</b>expansion&#160;<a href="hesminordet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;multi<b>-</b>thread&#160;<a href="multi_newton.hpp.xml" target="_top">OpenMP&#xA0;Multi-Threading&#xA0;Newton's&#xA0;Method&#xA0;Source&#xA0;Code</a><br/>
&#160;&#160;&#160;&#160;&#160;NearEqual&#160;<a href="near_equal.cpp.xml" target="_top">NearEqual&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;NearEqualExt&#160;<a href="nearequalext.cpp.xml" target="_top">Compare&#xA0;AD&#xA0;with&#xA0;Base&#xA0;Objects:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;NumericType&#160;<a href="numerictype.cpp.xml" target="_top">The&#xA0;NumericType:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;nan&#160;<a href="nan.cpp.xml" target="_top">nan:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;new&#160;<a href="tracknewdel.cpp.xml" target="_top">Tracking&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;nonlinear,<b>&#xA0;</b>programming&#160;<a href="ipopt_get_started.cpp.xml" target="_top">Nonlinear&#xA0;Programming&#xA0;Using&#xA0;CppAD&#xA0;and&#xA0;Ipopt:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;not<b>&#xA0;</b>complex<b>&#xA0;</b>differentiable&#160;<a href="not_complex_ad.cpp.xml" target="_top">Not&#xA0;Complex&#xA0;Differentiable:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="ode_taylor.cpp.xml" target="_top">Taylor's&#xA0;Ode&#xA0;Solver:&#xA0;An&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;OdeErrControl&#160;<a href="odeerrmaxabs.cpp.xml" target="_top">OdeErrControl:&#xA0;Example&#xA0;and&#xA0;Test&#xA0;Using&#xA0;Maxabs&#xA0;Argument</a><br/>
&#160;&#160;&#160;&#160;&#160;OdeErrControl&#160;<a href="odeerrcontrol.cpp.xml" target="_top">OdeErrControl:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;OdeGear&#160;<a href="odegear.cpp.xml" target="_top">OdeGear:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;OdeGearControl&#160;<a href="odegearcontrol.cpp.xml" target="_top">OdeGearControl:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;OpenMP&#160;<a href="multi_newton.hpp.xml" target="_top">OpenMP&#xA0;Multi-Threading&#xA0;Newton's&#xA0;Method&#xA0;Source&#xA0;Code</a><br/>
&#160;&#160;&#160;&#160;&#160;OpenMP<b>&#xA0;</b>A<b>.</b>1<b>.</b>1c&#160;<a href="example_a11c.cpp.xml" target="_top">A&#xA0;Simple&#xA0;Parallel&#xA0;Loop</a><br/>
&#160;&#160;&#160;&#160;&#160;OpenMP<b>&#xA0;</b>Newton<b>'</b>s<b>&#xA0;</b>method&#160;<a href="multi_newton.xml" target="_top">Multi-Threaded&#xA0;Newton's&#xA0;Method&#xA0;Routine</a><br/>
&#160;&#160;&#160;&#160;&#160;OpenMP<b>&#xA0;</b>program&#160;<a href="sum_i_inv.cpp.xml" target="_top">Sum&#xA0;of&#xA0;1/i&#xA0;Main&#xA0;Program</a><br/>
&#160;&#160;&#160;&#160;&#160;OpenMP<b>&#xA0;</b>program&#160;<a href="multi_newton.cpp.xml" target="_top">Multi-Threaded&#xA0;Newton's&#xA0;Method&#xA0;Main&#xA0;Program</a><br/>
&#160;&#160;&#160;&#160;&#160;ode<b>&#xA0;</b>inverse&#160;<a href="ipopt_ode_problem.hpp.xml" target="_top">ODE&#xA0;Inverse&#xA0;Problem&#xA0;Definitions:&#xA0;Source&#xA0;Code</a><br/>
&#160;&#160;&#160;&#160;&#160;ode<b>&#xA0;</b>inverse&#160;<a href="ipopt_ode_problem.xml" target="_top">An&#xA0;ODE&#xA0;Inverse&#xA0;Problem&#xA0;Example</a><br/>
&#160;&#160;&#160;&#160;&#160;ode<b>_</b>evaluate&#160;<a href="ode_evaluate.cpp.xml" target="_top">ode_evaluate:&#xA0;Example&#xA0;and&#xA0;test</a><br/>
&#160;&#160;&#160;&#160;&#160;operation<b>&#xA0;</b>sequence&#160;<a href="exp_eps_for0.xml" target="_top">exp_eps:&#xA0;Operation&#xA0;Sequence&#xA0;and&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;operation<b>&#xA0;</b>sequence&#160;<a href="exp_2_for0.xml" target="_top">exp_2:&#xA0;Operation&#xA0;Sequence&#xA0;and&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;opt<b>_</b>val<b>_</b>hes&#160;<a href="opt_val_hes.cpp.xml" target="_top">opt_val_hes:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;optimize&#160;<a href="optimize.cpp.xml" target="_top">ADFun&#xA0;Operation&#xA0;Sequence&#xA0;Optimization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Parameter&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Parameter&#160;<a href="parvar.cpp.xml" target="_top">AD&#xA0;Parameter&#xA0;and&#xA0;Variable&#xA0;Functions:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;partial&#160;<a href="forone.cpp.xml" target="_top">First&#xA0;Order&#xA0;Partial&#xA0;Driver:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;polynomial&#160;<a href="poly.cpp.xml" target="_top">Polynomial&#xA0;Evaluation:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;pow<b>&#xA0;</b>int&#160;<a href="pow_int.cpp.xml" target="_top">The&#xA0;Pow&#xA0;Integer&#xA0;Exponent:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;print<b>&#xA0;</b>forward<b>&#xA0;</b>mode&#160;<a href="printfor.cpp.xml" target="_top">Printing&#xA0;During&#xA0;Forward&#xA0;Mode:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Range&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Romberg&#160;<a href="rombergmul.cpp.xml" target="_top">One&#xA0;Dimensional&#xA0;Romberg&#xA0;Integration:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Romberg&#160;<a href="rombergone.cpp.xml" target="_top">One&#xA0;Dimensional&#xA0;Romberg&#xA0;Integration:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Rosen34&#160;<a href="rosen34.cpp.xml" target="_top">Rosen34:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Runge45&#160;<a href="runge_45_2.cpp.xml" target="_top">Runge45:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Runge45&#160;<a href="runge_45_1.cpp.xml" target="_top">Runge45:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;re<b>-</b>tape&#160;<a href="comparechange.cpp.xml" target="_top">CompareChange&#xA0;and&#xA0;Re-Tape:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>mode&#160;<a href="exp_eps_rev2.xml" target="_top">exp_eps:&#xA0;Second&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>mode&#160;<a href="exp_eps_rev1.xml" target="_top">exp_eps:&#xA0;First&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>mode&#160;<a href="exp_2_rev2.xml" target="_top">exp_2:&#xA0;Second&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>mode&#160;<a href="exp_2_rev1.xml" target="_top">exp_2:&#xA0;First&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>third<b>&#xA0;</b>order&#160;<a href="reverse_three.cpp.xml" target="_top">Third&#xA0;Order&#xA0;Reverse&#xA0;Mode:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;run<b>&#xA0;</b>all&#160;<a href="example.cpp.xml" target="_top">Program&#xA0;That&#xA0;Runs&#xA0;the&#xA0;CppAD&#xA0;Examples</a><br/>
&#160;&#160;&#160;&#160;&#160;SpeedTest&#160;<a href="speed_program.cpp.xml" target="_top">Example&#xA0;Use&#xA0;of&#xA0;SpeedTest</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>order<b>&#xA0;</b>reverse&#160;<a href="reverse_two.cpp.xml" target="_top">Second&#xA0;Order&#xA0;Reverse&#xA0;ModeExample&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>partial&#160;<a href="revtwo.cpp.xml" target="_top">Second&#xA0;Partials&#xA0;Reverse&#xA0;Driver:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>partial&#160;<a href="fortwo.cpp.xml" target="_top">Subset&#xA0;of&#xA0;Second&#xA0;Order&#xA0;Partials:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;simple&#160;<a href="get_started.cpp.xml" target="_top">A&#xA0;Simple&#xA0;Program&#xA0;Using&#xA0;CppAD&#xA0;to&#xA0;Compute&#xA0;Derivatives</a><br/>
&#160;&#160;&#160;&#160;&#160;simple<b>&#xA0;</b>vector&#160;<a href="simplevector.cpp.xml" target="_top">Simple&#xA0;Vector&#xA0;Template&#xA0;Class:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;size<b>_</b>op&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;size<b>_</b>op<b>_</b>arg&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;size<b>_</b>par&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;size<b>_</b>VecAD&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;size<b>_</b>var&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;sparse<b>&#xA0;</b>Hessian&#160;<a href="sparse_hessian.cpp.xml" target="_top">Sparse&#xA0;Hessian:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;sparse<b>&#xA0;</b>Jacobian&#160;<a href="sparse_jacobian.cpp.xml" target="_top">Sparse&#xA0;Jacobian:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;sparse<b>_</b>evaluate&#160;<a href="sparse_evaluate.cpp.xml" target="_top">sparse_evaluate:&#xA0;Example&#xA0;and&#xA0;test</a><br/>
&#160;&#160;&#160;&#160;&#160;sparsity<b>&#xA0;</b>forward&#160;<a href="forsparsejac.cpp.xml" target="_top">Forward&#xA0;Mode&#xA0;Jacobian&#xA0;Sparsity:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;sparsity<b>&#xA0;</b>Hessian&#160;<a href="revsparsehes.cpp.xml" target="_top">Reverse&#xA0;Mode&#xA0;Hessian&#xA0;Sparsity:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;sparsity<b>&#xA0;</b>reverse&#160;<a href="revsparsejac.cpp.xml" target="_top">Reverse&#xA0;Mode&#xA0;Jacobian&#xA0;Sparsity:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>program&#160;<a href="speed_example.cpp.xml" target="_top">Program&#xA0;That&#xA0;Runs&#xA0;the&#xA0;Speed&#xA0;Examples</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>utility&#160;<a href="installwindows.xml#Speed Utility Example" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;Speed&#xA0;Utility&#xA0;Example</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>utility&#160;<a href="installunix.xml#Speed Testing.Examples For Speed Tests" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Speed&#xA0;Testing.Examples&#xA0;For&#xA0;Speed&#xA0;Tests</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>_</b>test&#160;<a href="speed_test.cpp.xml" target="_top">speed_test:&#xA0;Example&#xA0;and&#xA0;test</a><br/>
&#160;&#160;&#160;&#160;&#160;stiff<b>&#xA0;</b>ode&#160;<a href="odestiff.cpp.xml" target="_top">A&#xA0;Stiff&#xA0;Ode:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;subtract&#160;<a href="sub.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Subtraction:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;tan&#160;<a href="tan.cpp.xml" target="_top">The&#xA0;AD&#xA0;tan&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;tanh&#160;<a href="tanh.cpp.xml" target="_top">The&#xA0;AD&#xA0;tanh&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;timer&#160;<a href="elapsed_seconds.cpp.xml" target="_top">Elapsed&#xA0;Seconds:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;unary<b>&#xA0;</b>minus&#160;<a href="unaryminus.cpp.xml" target="_top">AD&#xA0;Unary&#xA0;Minus&#xA0;Operator:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;unary<b>&#xA0;</b>plus&#160;<a href="unaryplus.cpp.xml" target="_top">AD&#xA0;Unary&#xA0;Plus&#xA0;Operator:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Value&#160;<a href="value.cpp.xml" target="_top">Convert&#xA0;From&#xA0;AD&#xA0;to&#xA0;its&#xA0;Base&#xA0;Type:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Var2Par&#160;<a href="var2par.cpp.xml" target="_top">Convert&#xA0;an&#xA0;AD&#xA0;Variable&#xA0;to&#xA0;a&#xA0;Parameter:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Variable&#160;<a href="parvar.cpp.xml" target="_top">AD&#xA0;Parameter&#xA0;and&#xA0;Variable&#xA0;Functions:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;VecAD&#160;<a href="vec_ad.cpp.xml" target="_top">AD&#xA0;Vectors&#xA0;that&#xA0;Record&#xA0;Index&#xA0;Operations:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;windows&#160;<a href="installwindows.xml#Examples and Testing" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;Examples&#xA0;and&#xA0;Testing</a><br/>
exception<br/>
&#160;&#160;&#160;&#160;&#160;error<b>&#xA0;</b>handler&#160;<a href="errorhandler.xml" target="_top">Replacing&#xA0;the&#xA0;CppAD&#xA0;Error&#xA0;Handler</a><br/>
&#160;&#160;&#160;&#160;&#160;test&#160;<a href="faq.xml#Exceptions" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Exceptions</a><br/>
exercise<br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>::</b>vector&#160;<a href="cppad_vector.xml#Exercise" target="_top">The&#xA0;CppAD::vector&#xA0;Template&#xA0;Class:&#160;Exercise</a><br/>
&#160;&#160;&#160;&#160;&#160;NearEqual&#160;<a href="nearequal.xml#Exercise" target="_top">Determine&#xA0;if&#xA0;Two&#xA0;Values&#xA0;Are&#xA0;Nearly&#xA0;Equal:&#160;Exercise</a><br/>
&#160;&#160;&#160;&#160;&#160;numeric<b>&#xA0;</b>type&#160;<a href="numerictype.xml#Exercise" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Numeric&#xA0;Type:&#160;Exercise</a><br/>
&#160;&#160;&#160;&#160;&#160;simple<b>&#xA0;</b>vector&#160;<a href="simplevector.xml#Exercise" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Simple&#xA0;Vector:&#160;Exercise</a><br/>
exp<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="std_math_ad.xml" target="_top">AD&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="exp.cpp.xml" target="_top">The&#xA0;AD&#xA0;exp&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="exp_eps.xml" target="_top">An&#xA0;Epsilon&#xA0;Accurate&#xA0;Exponential&#xA0;Approximation</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="exp_2.xml" target="_top">Second&#xA0;Order&#xA0;Exponential&#xA0;Approximation</a><br/>
&#160;&#160;&#160;&#160;&#160;float<b>&#xA0;</b>and<b>&#xA0;</b>double&#160;<a href="std_math_unary.xml" target="_top">Float&#xA0;and&#xA0;Double&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>theory&#160;<a href="expforward.xml" target="_top">Exponential&#xA0;Function&#xA0;Forward&#xA0;Taylor&#xA0;Polynomial&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>theory&#160;<a href="expreverse.xml" target="_top">Exponential&#xA0;Function&#xA0;Reverse&#xA0;Mode&#xA0;Theory</a><br/>
exp<b>_</b>2&#160;<a href="exp_2.xml" target="_top">Second&#xA0;Order&#xA0;Exponential&#xA0;Approximation</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>order&#160;<a href="exp_eps_for2.cpp.xml" target="_top">exp_eps:&#xA0;Verify&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>order&#160;<a href="exp_eps_for1.cpp.xml" target="_top">exp_eps:&#xA0;Verify&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>order&#160;<a href="exp_2_for1.cpp.xml" target="_top">exp_2:&#xA0;Verify&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>mode&#160;<a href="exp_2_for2.xml" target="_top">exp_2:&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>mode&#160;<a href="exp_2_for1.xml" target="_top">exp_2:&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;implementation&#160;<a href="exp_2.hpp.xml" target="_top">exp_2:&#xA0;Implementation</a><br/>
&#160;&#160;&#160;&#160;&#160;operation<b>&#xA0;</b>sequence&#160;<a href="exp_2_for0.xml" target="_top">exp_2:&#xA0;Operation&#xA0;Sequence&#xA0;and&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>mode&#160;<a href="exp_2_rev2.cpp.xml" target="_top">exp_2:&#xA0;Verify&#xA0;Second&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>mode&#160;<a href="exp_2_rev1.cpp.xml" target="_top">exp_2:&#xA0;Verify&#xA0;First&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>mode&#160;<a href="exp_2_rev2.xml" target="_top">exp_2:&#xA0;Second&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>mode&#160;<a href="exp_2_rev1.xml" target="_top">exp_2:&#xA0;First&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>order&#160;<a href="exp_2_for2.cpp.xml" target="_top">exp_2:&#xA0;Verify&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;test&#160;<a href="exp_2.cpp.xml" target="_top">exp_2:&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;zero<b>&#xA0;</b>order&#160;<a href="exp_2_for0.cpp.xml" target="_top">exp_2:&#xA0;Verify&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
exp<b>_</b>apx<br/>
&#160;&#160;&#160;&#160;&#160;main<b>&#xA0;</b>test&#160;<a href="exp_apx_main.cpp.xml" target="_top">Run&#xA0;the&#xA0;exp_2&#xA0;and&#xA0;exp_eps&#xA0;Tests</a><br/>
&#160;&#160;&#160;&#160;&#160;run&#160;<a href="installunix.xml#Introduction.exp_apx" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Introduction.exp_apx</a><br/>
exp<b>_</b>eps&#160;<a href="exp_eps.xml" target="_top">An&#xA0;Epsilon&#xA0;Accurate&#xA0;Exponential&#xA0;Approximation</a><br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>mode&#160;<a href="exp_eps_for2.xml" target="_top">exp_eps:&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;implementation&#160;<a href="exp_eps.hpp.xml" target="_top">exp_eps:&#xA0;Implementation</a><br/>
&#160;&#160;&#160;&#160;&#160;operation<b>&#xA0;</b>sequence&#160;<a href="exp_eps_for0.xml" target="_top">exp_eps:&#xA0;Operation&#xA0;Sequence&#xA0;and&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse&#160;<a href="exp_eps_rev2.cpp.xml" target="_top">exp_eps:&#xA0;Verify&#xA0;Second&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse&#160;<a href="exp_eps_rev1.cpp.xml" target="_top">exp_eps:&#xA0;Verify&#xA0;First&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>mode&#160;<a href="exp_eps_rev2.xml" target="_top">exp_eps:&#xA0;Second&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>mode&#160;<a href="exp_eps_rev1.xml" target="_top">exp_eps:&#xA0;First&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;test&#160;<a href="exp_eps.cpp.xml" target="_top">exp_eps:&#xA0;Test&#xA0;of&#xA0;exp_eps</a><br/>
&#160;&#160;&#160;&#160;&#160;zero<b>&#xA0;</b>order&#160;<a href="exp_eps_for0.cpp.xml" target="_top">exp_eps:&#xA0;Verify&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
expansion&#160;<a href="jacminordet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="hesminordet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>order&#160;<a href="exp_eps_for1.xml#First Order Expansion" target="_top">exp_eps:&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Sweep:&#160;First&#xA0;Order&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>order&#160;<a href="exp_2_for1.xml#First Order Expansion" target="_top">exp_2:&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Mode:&#160;First&#xA0;Order&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;minor<b>&#xA0;</b>determinant&#160;<a href="det_by_minor.xml" target="_top">Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>order&#160;<a href="exp_eps_for2.xml#Second Order Expansion" target="_top">exp_eps:&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Mode:&#160;Second&#xA0;Order&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>order&#160;<a href="exp_2_for2.xml#Second Order Expansion" target="_top">exp_2:&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Mode:&#160;Second&#xA0;Order&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;zero<b>&#xA0;</b>order&#160;<a href="exp_2_for0.xml#Zero Order Expansion" target="_top">exp_2:&#xA0;Operation&#xA0;Sequence&#xA0;and&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Mode:&#160;Zero&#xA0;Order&#xA0;Expansion</a><br/>
exponent<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>function&#160;<a href="pow.xml" target="_top">The&#xA0;AD&#xA0;Power&#xA0;Function</a><br/>
&#160;&#160;&#160;&#160;&#160;integer&#160;<a href="pow_int.xml" target="_top">The&#xA0;Integer&#xA0;Power&#xA0;Function</a><br/>
expression<br/>
&#160;&#160;&#160;&#160;&#160;conditional&#160;<a href="condexp.xml" target="_top">AD&#xA0;Conditional&#xA0;Expressions</a><br/>

<b><big><a name="F">F</a></big></b>
<br/>
FAQ&#160;<a href="faq.xml" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers</a><br/>
Fadbad<br/>
&#160;&#160;&#160;&#160;&#160;unix&#160;<a href="installunix.xml#FadbadDir" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;FadbadDir</a><br/>
Fedora<br/>
&#160;&#160;&#160;&#160;&#160;install&#160;<a href="installunix.xml#Fedora" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Fedora</a><br/>
ForSparseJac&#160;<a href="forsparsejac.cpp.xml" target="_top">Forward&#xA0;Mode&#xA0;Jacobian&#xA0;Sparsity:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="forsparsejac.xml" target="_top">Jacobian&#xA0;Sparsity&#xA0;Pattern:&#xA0;Forward&#xA0;Mode</a><br/>
Forward&#160;<a href="forward.cpp.xml" target="_top">Forward&#xA0;Mode:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;capacity&#160;<a href="capacity_taylor.xml" target="_top">Controlling&#xA0;Taylor&#xA0;Coefficients&#xA0;Memory&#xA0;Allocation</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>one&#160;<a href="forwardone.xml" target="_top">First&#xA0;Order&#xA0;Forward&#xA0;Mode:&#xA0;Derivative&#xA0;Values</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>zero&#160;<a href="forwardzero.xml" target="_top">Zero&#xA0;Order&#xA0;Forward&#xA0;Mode:&#xA0;Function&#xA0;Values</a><br/>
FunCheck&#160;<a href="funcheck.xml" target="_top">Check&#xA0;an&#xA0;ADFun&#xA0;Sequence&#xA0;of&#xA0;Operations</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="funcheck.cpp.xml" target="_top">ADFun&#xA0;Check&#xA0;and&#xA0;Re-Tape:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
factor<br/>
&#160;&#160;&#160;&#160;&#160;lu<b>&#xA0;</b>determinant&#160;<a href="det_by_lu.xml" target="_top">Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Lu&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;matrix&#160;<a href="ludetandsolve.xml" target="_top">Compute&#xA0;Determinants&#xA0;and&#xA0;Solve&#xA0;Equations&#xA0;by&#xA0;LU&#xA0;Factorization</a><br/>
fadbad<br/>
&#160;&#160;&#160;&#160;&#160;link<b>_</b>det<b>_</b>lu&#160;<a href="fadbad_det_lu.cpp.xml#Implementation" target="_top">Fadbad&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#160;Implementation</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>lu&#160;<a href="fadbad_det_lu.cpp.xml" target="_top">Fadbad&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>minor&#160;<a href="fadbad_det_minor.cpp.xml" target="_top">Fadbad&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>polynomial&#160;<a href="fadbad_poly.cpp.xml" target="_top">Fadbad&#xA0;Speed:&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>test&#160;<a href="speed_fadbad.xml" target="_top">Speed&#xA0;Test&#xA0;Derivatives&#xA0;Using&#xA0;Fadbad</a><br/>
features<br/>
&#160;&#160;&#160;&#160;&#160;new&#160;<a href="wishlist.xml" target="_top">The&#xA0;CppAD&#xA0;Wish&#xA0;List</a><br/>
file<br/>
&#160;&#160;&#160;&#160;&#160;deprecated<b>&#xA0;</b>include&#160;<a href="include_deprecated.xml" target="_top">Deprecated&#xA0;Include&#xA0;Files</a><br/>
first<br/>
&#160;&#160;&#160;&#160;&#160;derivative&#160;<a href="jacobian.xml" target="_top">Jacobian:&#xA0;Driver&#xA0;Routine</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>derivative<b>&#xA0;</b>driver&#160;<a href="revone.xml" target="_top">First&#xA0;Order&#xA0;Derivative:&#xA0;Driver&#xA0;Routine</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>exp<b>_</b>2&#160;<a href="exp_eps_for2.cpp.xml" target="_top">exp_eps:&#xA0;Verify&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>exp<b>_</b>2&#160;<a href="exp_eps_for1.cpp.xml" target="_top">exp_eps:&#xA0;Verify&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>exp<b>_</b>2&#160;<a href="exp_2_for1.cpp.xml" target="_top">exp_2:&#xA0;Verify&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>expansion&#160;<a href="exp_eps_for1.xml#First Order Expansion" target="_top">exp_eps:&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Sweep:&#160;First&#xA0;Order&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>expansion&#160;<a href="exp_2_for1.xml#First Order Expansion" target="_top">exp_2:&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Mode:&#160;First&#xA0;Order&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>forward&#160;<a href="exp_eps_for1.xml" target="_top">exp_eps:&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>partial<b>&#xA0;</b>driver&#160;<a href="forone.xml" target="_top">First&#xA0;Order&#xA0;Partial&#xA0;Derivative:&#xA0;Driver&#xA0;Routine</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>reverse&#160;<a href="exp_eps_rev1.xml" target="_top">exp_eps:&#xA0;First&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>reverse&#160;<a href="exp_2_rev1.xml" target="_top">exp_2:&#xA0;First&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>reverse<b>&#xA0;</b>mode&#160;<a href="reverse_one.xml" target="_top">First&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
flags<br/>
&#160;&#160;&#160;&#160;&#160;unix<b>&#xA0;</b>compile&#160;<a href="installunix.xml#CompilerFlags" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;CompilerFlags</a><br/>
forward&#160;<a href="faq.xml#Mode: Forward or Reverse" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Mode:&#xA0;Forward&#xA0;or&#xA0;Reverse</a><br/>
&#160;&#160;&#160;&#160;&#160;acos<b>&#xA0;</b>theory&#160;<a href="acosforward.xml" target="_top">Arccosine&#xA0;Function&#xA0;Forward&#xA0;Taylor&#xA0;Polynomial&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;asin<b>&#xA0;</b>theory&#160;<a href="asinforward.xml" target="_top">Arcsine&#xA0;Function&#xA0;Forward&#xA0;Taylor&#xA0;Polynomial&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;atan<b>&#xA0;</b>theory&#160;<a href="atanforward.xml" target="_top">Arctangent&#xA0;Function&#xA0;Forward&#xA0;Taylor&#xA0;Polynomial&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;cos&#160;<a href="sincosforward.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Forward&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;cosh&#160;<a href="sincosforward.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Forward&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;debug&#160;<a href="printfor.xml" target="_top">Printing&#xA0;AD&#xA0;Values&#xA0;During&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;easy<b>&#xA0;</b>driver&#160;<a href="drivers.xml" target="_top">First&#xA0;and&#xA0;Second&#xA0;Derivatives:&#xA0;Easy&#xA0;Drivers</a><br/>
&#160;&#160;&#160;&#160;&#160;exp<b>&#xA0;</b>theory&#160;<a href="expforward.xml" target="_top">Exponential&#xA0;Function&#xA0;Forward&#xA0;Taylor&#xA0;Polynomial&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>order&#160;<a href="exp_eps_for1.xml" target="_top">exp_eps:&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>order&#160;<a href="exp_2_for1.xml" target="_top">exp_2:&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;log<b>&#xA0;</b>theory&#160;<a href="logforward.xml" target="_top">Logarithm&#xA0;Function&#xA0;Forward&#xA0;Taylor&#xA0;Polynomial&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;mode&#160;<a href="forwardany.xml" target="_top">Any&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;mode<b>&#xA0;</b>example&#160;<a href="exp_eps_for2.xml" target="_top">exp_eps:&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;mode<b>&#xA0;</b>example&#160;<a href="exp_2_for2.xml" target="_top">exp_2:&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;mode<b>&#xA0;</b>example&#160;<a href="exp_2_for1.xml" target="_top">exp_2:&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;mode<b>&#xA0;</b>print&#160;<a href="printfor.cpp.xml" target="_top">Printing&#xA0;During&#xA0;Forward&#xA0;Mode:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;mode<b>&#xA0;</b>print&#160;<a href="printfor.xml" target="_top">Printing&#xA0;AD&#xA0;Values&#xA0;During&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;print&#160;<a href="installwindows.xml#Printing During Forward Mode" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;Printing&#xA0;During&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;print&#160;<a href="installunix.xml#PrintFor" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;PrintFor</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>order&#160;<a href="exp_eps_for2.xml" target="_top">exp_eps:&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>order&#160;<a href="exp_2_for2.xml" target="_top">exp_2:&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;sin&#160;<a href="sincosforward.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Forward&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;sinh&#160;<a href="sincosforward.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Forward&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;sparsity<b>&#xA0;</b>Jacobian&#160;<a href="forsparsejac.xml" target="_top">Jacobian&#xA0;Sparsity&#xA0;Pattern:&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;sqrt<b>&#xA0;</b>theory&#160;<a href="sqrtforward.xml" target="_top">Square&#xA0;Root&#xA0;Function&#xA0;Forward&#xA0;Taylor&#xA0;Polynomial&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;zero<b>&#xA0;</b>order&#160;<a href="comparechange.xml" target="_top">Comparison&#xA0;Changes&#xA0;During&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;zero<b>&#xA0;</b>order&#160;<a href="exp_eps_for0.xml" target="_top">exp_eps:&#xA0;Operation&#xA0;Sequence&#xA0;and&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;zero<b>&#xA0;</b>order&#160;<a href="exp_2_for0.xml" target="_top">exp_2:&#xA0;Operation&#xA0;Sequence&#xA0;and&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
free<br/>
&#160;&#160;&#160;&#160;&#160;install<b>&#xA0;</b>CppAD&#160;<a href="installwindows.xml" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;unix<b>&#xA0;</b>install&#160;<a href="installunix.xml" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation</a><br/>
function&#160;<a href="glossary.xml#Base Function" target="_top">Glossary:&#160;Base&#xA0;Function</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="glossary.xml#AD Function" target="_top">Glossary:&#160;AD&#xA0;Function</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>Bool<b>&#xA0;</b>valued&#160;<a href="boolvalued.xml" target="_top">Bool&#xA0;Valued&#xA0;Operations&#xA0;and&#xA0;Functions&#xA0;with&#xA0;AD&#xA0;Arguments</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>bool&#160;<a href="boolfun.xml" target="_top">AD&#xA0;Boolean&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>valued&#160;<a href="advalued.xml" target="_top">AD&#xA0;Valued&#xA0;Operations&#xA0;and&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;discrete<b>&#xA0;</b>AD&#160;<a href="discrete.xml" target="_top">Discrete&#xA0;AD&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;error<b>&#xA0;</b>AD&#160;<a href="erf.xml" target="_top">The&#xA0;AD&#xA0;Error&#xA0;Function</a><br/>
&#160;&#160;&#160;&#160;&#160;math&#160;<a href="faq.xml#Math Functions" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Math&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;ode<b>_</b>evaluate&#160;<a href="ode_evaluate.xml" target="_top">Evaluate&#xA0;a&#xA0;Function&#xA0;Defined&#xA0;in&#xA0;Terms&#xA0;of&#xA0;an&#xA0;ODE</a><br/>
&#160;&#160;&#160;&#160;&#160;sparse<b>_</b>evaluate&#160;<a href="sparse_evaluate.xml" target="_top">Evaluate&#xA0;a&#xA0;Function&#xA0;That&#xA0;Has&#xA0;a&#xA0;Sparse&#xA0;Hessian</a><br/>

<b><big><a name="G">G</a></big></b>
<br/>
Gear<br/>
&#160;&#160;&#160;&#160;&#160;Ode&#160;<a href="odegear.xml" target="_top">An&#xA0;Arbitrary&#xA0;Order&#xA0;Gear&#xA0;Method</a><br/>
GetStarted<br/>
&#160;&#160;&#160;&#160;&#160;windows&#160;<a href="installwindows.xml#Getting Started" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;Getting&#xA0;Started</a><br/>
GreaterThanZero<br/>
&#160;&#160;&#160;&#160;&#160;Base<b>&#xA0;</b>require&#160;<a href="base_require.xml#Ordered" target="_top">AD&lt;Base&gt;&#xA0;Requirements&#xA0;for&#xA0;Base&#xA0;Type:&#160;Ordered</a><br/>
&#160;&#160;&#160;&#160;&#160;Base<b>&#xA0;</b>require&#160;<a href="base_require.xml#Ordered" target="_top">AD&lt;Base&gt;&#xA0;Requirements&#xA0;for&#xA0;Base&#xA0;Type:&#160;Ordered</a><br/>
gcc<b>&#xA0;</b>3<b>.</b>4<b>.</b>4<br/>
&#160;&#160;&#160;&#160;&#160;bug&#160;<a href="bugs.xml#gcc 3.4.4 -O2" target="_top">Know&#xA0;Bugs&#xA0;and&#xA0;Problems&#xA0;Using&#xA0;CppAD:&#160;gcc&#xA0;3.4.4&#xA0;-O2</a><br/>
general<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="general.xml" target="_top">General&#xA0;Examples</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>example&#160;<a href="reverse_any.cpp.xml" target="_top">Reverse&#xA0;Mode&#xA0;General&#xA0;Case:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
get<b>_</b>started<br/>
&#160;&#160;&#160;&#160;&#160;run&#160;<a href="installunix.xml#Introduction.Getting Started" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Introduction.Getting&#xA0;Started</a><br/>
getstarted&#160;<a href="get_started.cpp.xml" target="_top">A&#xA0;Simple&#xA0;Program&#xA0;Using&#xA0;CppAD&#xA0;to&#xA0;Compute&#xA0;Derivatives</a><br/>
gradient&#160;<a href="jacludet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="jacminordet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="hesludet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;LU&#xA0;Factorization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="hesminordet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ode<b>&#xA0;</b>speed<b>&#xA0;</b>sacado&#160;<a href="sacado_ode.cpp.xml" target="_top">Sacado&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Ode&#xA0;Solution</a><br/>

<b><big><a name="H">H</a></big></b>
<br/>
HesLagrangian&#160;<a href="heslagrangian.cpp.xml" target="_top">Hessian&#xA0;of&#xA0;Lagrangian&#xA0;and&#xA0;&#xA0;ADFun&#xA0;Default&#xA0;Constructor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
Hessian&#160;<a href="opt_val_hes.xml" target="_top">Jacobian&#xA0;and&#xA0;Hessian&#xA0;of&#xA0;Optimal&#xA0;Values</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="hessian.cpp.xml" target="_top">Hessian:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Bender&#160;<a href="benderquad.xml" target="_top">Computing&#xA0;Jacobian&#xA0;and&#xA0;Hessian&#xA0;of&#xA0;Bender's&#xA0;Reduced&#xA0;Objective</a><br/>
&#160;&#160;&#160;&#160;&#160;driver&#160;<a href="hessian.xml" target="_top">Hessian:&#xA0;Easy&#xA0;Driver</a><br/>
&#160;&#160;&#160;&#160;&#160;sparse&#160;<a href="sparse_hessian.cpp.xml" target="_top">Sparse&#xA0;Hessian:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;sparse<b>&#xA0;</b>speed<b>&#xA0;</b>adolc&#160;<a href="adolc_sparse_hessian.cpp.xml" target="_top">Adolc&#xA0;Speed:&#xA0;Sparse&#xA0;Hessian</a><br/>
&#160;&#160;&#160;&#160;&#160;sparse<b>&#xA0;</b>speed<b>&#xA0;</b>cppad&#160;<a href="cppad_sparse_hessian.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Sparse&#xA0;Hessian</a><br/>
&#160;&#160;&#160;&#160;&#160;times<b>&#xA0;</b>direction&#160;<a href="hestimesdir.cpp.xml" target="_top">Hessian&#xA0;Times&#xA0;Direction:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
handler<br/>
&#160;&#160;&#160;&#160;&#160;error&#160;<a href="errorhandler.cpp.xml" target="_top">Replacing&#xA0;The&#xA0;CppAD&#xA0;Error&#xA0;Handler:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;error&#160;<a href="errorhandler.xml" target="_top">Replacing&#xA0;the&#xA0;CppAD&#xA0;Error&#xA0;Handler</a><br/>
hasnan&#160;<a href="nan.xml" target="_top">Obtain&#xA0;Nan&#xA0;and&#xA0;Determine&#xA0;if&#xA0;a&#xA0;Value&#xA0;is&#xA0;Nan</a><br/>
hessian<br/>
&#160;&#160;&#160;&#160;&#160;sparse&#160;<a href="sparse_hessian.xml" target="_top">Sparse&#xA0;Hessian:&#xA0;Easy&#xA0;Driver</a><br/>

<b><big><a name="I">I</a></big></b>
<br/>
Identical<br/>
&#160;&#160;&#160;&#160;&#160;Base<b>&#xA0;</b>require&#160;<a href="base_require.xml#Identical" target="_top">AD&lt;Base&gt;&#xA0;Requirements&#xA0;for&#xA0;Base&#xA0;Type:&#160;Identical</a><br/>
Independent&#160;<a href="independent.xml" target="_top">Declare&#xA0;Independent&#xA0;Variables&#xA0;and&#xA0;Start&#xA0;Recording</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="independent.cpp.xml" target="_top">Independent&#xA0;and&#xA0;ADFun&#xA0;Constructor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;OpenMP&#160;<a href="independent.xml#OpenMP" target="_top">Declare&#xA0;Independent&#xA0;Variables&#xA0;and&#xA0;Start&#xA0;Recording:&#160;OpenMP</a><br/>
Integer&#160;<a href="integer.cpp.xml" target="_top">Convert&#xA0;From&#xA0;AD&#xA0;to&#xA0;Integer:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="integer.xml" target="_top">Convert&#xA0;From&#xA0;AD&#xA0;to&#xA0;Integer</a><br/>
&#160;&#160;&#160;&#160;&#160;Base<b>&#xA0;</b>require&#160;<a href="base_require.xml#Integer" target="_top">AD&lt;Base&gt;&#xA0;Requirements&#xA0;for&#xA0;Base&#xA0;Type:&#160;Integer</a><br/>
Ipopt<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="cppad_ipopt_nlp.xml" target="_top">Nonlinear&#xA0;Programming&#xA0;Using&#xA0;the&#xA0;CppAD&#xA0;Interface&#xA0;to&#xA0;Ipopt</a><br/>
&#160;&#160;&#160;&#160;&#160;unix&#160;<a href="installunix.xml#IpoptDir" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;IpoptDir</a><br/>
imag<b>()</b>&#160;<a href="not_complex_ad.cpp.xml" target="_top">Not&#xA0;Complex&#xA0;Differentiable:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
implementation<br/>
&#160;&#160;&#160;&#160;&#160;exp<b>_</b>2&#160;<a href="exp_2.hpp.xml" target="_top">exp_2:&#xA0;Implementation</a><br/>
&#160;&#160;&#160;&#160;&#160;exp<b>_</b>eps&#160;<a href="exp_eps.hpp.xml" target="_top">exp_eps:&#xA0;Implementation</a><br/>
inactive&#160;<a href="glossary.xml#Tape.Inactive" target="_top">Glossary:&#160;Tape.Inactive</a><br/>
include<br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>.</b>hpp&#160;<a href="cppad.xml#Include File" target="_top">cppad-20100325:&#xA0;A&#xA0;Package&#xA0;for&#xA0;Differentiation&#xA0;of&#xA0;C++&#xA0;Algorithms:&#160;Include&#xA0;File</a><br/>
&#160;&#160;&#160;&#160;&#160;deprecated<b>&#xA0;</b>file&#160;<a href="include_deprecated.xml" target="_top">Deprecated&#xA0;Include&#xA0;Files</a><br/>
independent&#160;<a href="glossary.xml#Tape.Independent Variable" target="_top">Glossary:&#160;Tape.Independent&#xA0;Variable</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="glossary.xml#Operation.Independent" target="_top">Glossary:&#160;Operation.Independent</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="faq.xml#Assignment and Independent" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Assignment&#xA0;and&#xA0;Independent</a><br/>
independent<b>&#xA0;</b>variable&#160;<a href="faq.xml#Independent Variables" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Independent&#xA0;Variables</a><br/>
index<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>record&#160;<a href="vecad.xml" target="_top">AD&#xA0;Vectors&#xA0;that&#xA0;Record&#xA0;Index&#xA0;Operations</a><br/>
&#160;&#160;&#160;&#160;&#160;tape<b>&#xA0;</b>array<b>&#xA0;</b>operation&#160;<a href="tapeindex.cpp.xml" target="_top">Taping&#xA0;Array&#xA0;Index&#xA0;Operation:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
install&#160;<a href="install.xml" target="_top">CppAD&#xA0;Download,&#xA0;Test,&#xA0;and&#xA0;Installation&#xA0;Instructions</a><br/>
&#160;&#160;&#160;&#160;&#160;documentation&#160;<a href="installunix.xml#--with-Documentation" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;--with-Documentation</a><br/>
&#160;&#160;&#160;&#160;&#160;Fedora&#160;<a href="installunix.xml#Fedora" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Fedora</a><br/>
&#160;&#160;&#160;&#160;&#160;unix<b>&#xA0;</b>CppAD&#160;<a href="installunix.xml" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation</a><br/>
&#160;&#160;&#160;&#160;&#160;windows<b>&#xA0;</b>CppAD&#160;<a href="installwindows.xml" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test</a><br/>
int<br/>
&#160;&#160;&#160;&#160;&#160;numeric<b>&#xA0;</b>constructor&#160;<a href="numerictype.xml#Constructor From Integer" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Numeric&#xA0;Type:&#160;Constructor&#xA0;From&#xA0;Integer</a><br/>
integer<br/>
&#160;&#160;&#160;&#160;&#160;pow&#160;<a href="pow_int.xml" target="_top">The&#xA0;Integer&#xA0;Power&#xA0;Function</a><br/>
integrate<br/>
&#160;&#160;&#160;&#160;&#160;multi<b>-</b>dimensional<b>&#xA0;</b>Romberg&#160;<a href="rombergmul.xml" target="_top">Multi-dimensional&#xA0;Romberg&#xA0;Integration</a><br/>
&#160;&#160;&#160;&#160;&#160;Romberg&#160;<a href="rombergone.xml" target="_top">One&#xA0;DimensionalRomberg&#xA0;Integration</a><br/>
interface<br/>
&#160;&#160;&#160;&#160;&#160;to<b>&#xA0;</b>C&#160;<a href="interface2c.cpp.xml" target="_top">Interfacing&#xA0;to&#xA0;C:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
interpolate<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="interp_retape.cpp.xml" target="_top">Interpolation&#xA0;With&#xA0;Retaping:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="interp_onetape.cpp.xml" target="_top">Interpolation&#xA0;With&#xA0;Out&#xA0;Retaping:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;test&#160;<a href="interp_retape.cpp.xml" target="_top">Interpolation&#xA0;With&#xA0;Retaping:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;test&#160;<a href="interp_onetape.cpp.xml" target="_top">Interpolation&#xA0;With&#xA0;Out&#xA0;Retaping:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
interpreter<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="stackmachine.cpp.xml" target="_top">Example&#xA0;Differentiating&#xA0;a&#xA0;Stack&#xA0;Machine&#xA0;Interpreter</a><br/>
introduction&#160;<a href="cppad.xml#Introduction" target="_top">cppad-20100325:&#xA0;A&#xA0;Package&#xA0;for&#xA0;Differentiation&#xA0;of&#xA0;C++&#xA0;Algorithms:&#160;Introduction</a><br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="introduction.xml" target="_top">An&#xA0;Introduction&#xA0;by&#xA0;Example&#xA0;to&#xA0;Algorithmic&#xA0;Differentiation</a><br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="installunix.xml#Introduction.exp_apx" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Introduction.exp_apx</a><br/>
&#160;&#160;&#160;&#160;&#160;windows&#160;<a href="installwindows.xml#Introduction" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;Introduction</a><br/>
inverse<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>tan&#160;<a href="atan2.xml" target="_top">AD&#xA0;Two&#xA0;Argument&#xA0;Inverse&#xA0;Tangent&#xA0;Function</a><br/>
&#160;&#160;&#160;&#160;&#160;matrix&#160;<a href="faq.xml#Matrix Inverse" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Matrix&#xA0;Inverse</a><br/>
&#160;&#160;&#160;&#160;&#160;ode<b>&#xA0;</b>example&#160;<a href="ipopt_ode_problem.hpp.xml" target="_top">ODE&#xA0;Inverse&#xA0;Problem&#xA0;Definitions:&#xA0;Source&#xA0;Code</a><br/>
&#160;&#160;&#160;&#160;&#160;ode<b>&#xA0;</b>example&#160;<a href="ipopt_ode_problem.xml" target="_top">An&#xA0;ODE&#xA0;Inverse&#xA0;Problem&#xA0;Example</a><br/>
ipopt<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="ipopt_get_started.cpp.xml" target="_top">Nonlinear&#xA0;Programming&#xA0;Using&#xA0;CppAD&#xA0;and&#xA0;Ipopt:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
ipopt<b>_</b>cppad<b>_</b>nlp&#160;<a href="whats_new_08.xml#08-29" target="_top">Changes&#xA0;and&#xA0;Additions&#xA0;to&#xA0;CppAD&#xA0;During&#xA0;2008:&#160;08-29</a><br/>
isnan&#160;<a href="nan.xml" target="_top">Obtain&#xA0;Nan&#xA0;and&#xA0;Determine&#xA0;if&#xA0;a&#xA0;Value&#xA0;is&#xA0;Nan</a><br/>
&#160;&#160;&#160;&#160;&#160;macro&#160;<a href="nan.xml#Include.Macros" target="_top">Obtain&#xA0;Nan&#xA0;and&#xA0;Determine&#xA0;if&#xA0;a&#xA0;Value&#xA0;is&#xA0;Nan:&#160;Include.Macros</a><br/>

<b><big><a name="J">J</a></big></b>
<br/>
Jacobian&#160;<a href="opt_val_hes.xml" target="_top">Jacobian&#xA0;and&#xA0;Hessian&#xA0;of&#xA0;Optimal&#xA0;Values</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="jacobian.cpp.xml" target="_top">Jacobian:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Bender&#160;<a href="benderquad.xml" target="_top">Computing&#xA0;Jacobian&#xA0;and&#xA0;Hessian&#xA0;of&#xA0;Bender's&#xA0;Reduced&#xA0;Objective</a><br/>
&#160;&#160;&#160;&#160;&#160;driver&#160;<a href="jacobian.xml" target="_top">Jacobian:&#xA0;Driver&#xA0;Routine</a><br/>
&#160;&#160;&#160;&#160;&#160;sparse&#160;<a href="sparse_jacobian.cpp.xml" target="_top">Sparse&#xA0;Jacobian:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;sparse<b>&#xA0;</b>speed<b>&#xA0;</b>cppad&#160;<a href="cppad_sparse_jacobian.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Sparse&#xA0;Jacobian</a><br/>
jacobian<br/>
&#160;&#160;&#160;&#160;&#160;ode<b>&#xA0;</b>speed<b>&#xA0;</b>cppad&#160;<a href="cppad_ode.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Ode&#xA0;Solution</a><br/>
&#160;&#160;&#160;&#160;&#160;sparse&#160;<a href="sparse_jacobian.xml" target="_top">Sparse&#xA0;Jacobian:&#xA0;Easy&#xA0;Driver</a><br/>

<b><big><a name="K">K</a></big></b>
<br/>
Kutta<br/>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="runge45.xml" target="_top">An&#xA0;Embedded&#xA0;4th&#xA0;and&#xA0;5th&#xA0;Order&#xA0;Runge-Kutta&#xA0;ODE&#xA0;Solver</a><br/>

<b><big><a name="L">L</a></big></b>
<br/>
LessThanOrZero<br/>
&#160;&#160;&#160;&#160;&#160;Base<b>&#xA0;</b>require&#160;<a href="base_require.xml#Ordered" target="_top">AD&lt;Base&gt;&#xA0;Requirements&#xA0;for&#xA0;Base&#xA0;Type:&#160;Ordered</a><br/>
&#160;&#160;&#160;&#160;&#160;Base<b>&#xA0;</b>require&#160;<a href="base_require.xml#Ordered" target="_top">AD&lt;Base&gt;&#xA0;Requirements&#xA0;for&#xA0;Base&#xA0;Type:&#160;Ordered</a><br/>
LU&#160;<a href="hesludet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;LU&#xA0;Factorization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
Lu&#160;<a href="jacludet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;linear<b>&#xA0;</b>equation&#160;<a href="luvecad.xml" target="_top">Lu&#xA0;Factor&#xA0;and&#xA0;Solve&#xA0;with&#xA0;Recorded&#xA0;Pivoting</a><br/>
&#160;&#160;&#160;&#160;&#160;record<b>&#xA0;</b>pivot&#160;<a href="luvecadok.cpp.xml" target="_top">Lu&#xA0;Factor&#xA0;and&#xA0;Solve&#xA0;With&#xA0;Recorded&#xA0;Pivoting:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
LuFactor&#160;<a href="lufactor.xml" target="_top">LU&#xA0;Factorization&#xA0;of&#xA0;A&#xA0;Square&#xA0;Matrix</a><br/>
&#160;&#160;&#160;&#160;&#160;source&#160;<a href="lu_factor.hpp.xml" target="_top">Source:&#xA0;LuFactor</a><br/>
LuInvert&#160;<a href="luinvert.xml" target="_top">Invert&#xA0;an&#xA0;LU&#xA0;Factored&#xA0;Equation</a><br/>
&#160;&#160;&#160;&#160;&#160;source&#160;<a href="lu_invert.hpp.xml" target="_top">Source:&#xA0;LuInvert</a><br/>
LuRatio&#160;<a href="luratio.xml" target="_top">LU&#xA0;Factorization&#xA0;of&#xA0;A&#xA0;Square&#xA0;Matrix&#xA0;and&#xA0;Stability&#xA0;Calculation</a><br/>
LuSolve&#160;<a href="lusolve.xml" target="_top">Compute&#xA0;Determinant&#xA0;and&#xA0;Solve&#xA0;Linear&#xA0;Equations</a><br/>
&#160;&#160;&#160;&#160;&#160;source&#160;<a href="lu_solve.hpp.xml" target="_top">Source:&#xA0;LuSolve</a><br/>
LuVecAD&#160;<a href="luvecad.xml" target="_top">Lu&#xA0;Factor&#xA0;and&#xA0;Solve&#xA0;with&#xA0;Recorded&#xA0;Pivoting</a><br/>
language<br/>
&#160;&#160;&#160;&#160;&#160;link<b>&#xA0;</b>CppAD&#160;<a href="ad_in_c.cpp.xml" target="_top">Example&#xA0;and&#xA0;Test&#xA0;Linking&#xA0;CppAD&#xA0;to&#xA0;Languages&#xA0;Other&#xA0;than&#xA0;C++</a><br/>
level<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="glossary.xml#AD Levels Above Base" target="_top">Glossary:&#160;AD&#xA0;Levels&#xA0;Above&#xA0;Base</a><br/>
&#160;&#160;&#160;&#160;&#160;multiple<b>&#xA0;</b>AD&#160;<a href="mul_level.cpp.xml" target="_top">Multiple&#xA0;Tapes:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;multiple<b>&#xA0;</b>AD&#160;<a href="mul_level.xml" target="_top">Using&#xA0;Multiple&#xA0;Levels&#xA0;of&#xA0;AD</a><br/>
&#160;&#160;&#160;&#160;&#160;multiple<b>&#xA0;</b>Adolc&#160;<a href="mul_level_adolc.cpp.xml" target="_top">Using&#xA0;Adolc&#xA0;with&#xA0;Multiple&#xA0;Levels&#xA0;of&#xA0;Taping:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
levels&#160;<a href="glossary.xml#AD Levels Above Base" target="_top">Glossary:&#160;AD&#xA0;Levels&#xA0;Above&#xA0;Base</a><br/>
library<br/>
&#160;&#160;&#160;&#160;&#160;numerical<b>&#xA0;</b>C<b>++&#xA0;</b>template&#160;<a href="library.xml" target="_top">The&#xA0;CppAD&#xA0;General&#xA0;Purpose&#xA0;Library</a><br/>
linear<br/>
&#160;&#160;&#160;&#160;&#160;equation&#160;<a href="lusolve.xml" target="_top">Compute&#xA0;Determinant&#xA0;and&#xA0;Solve&#xA0;Linear&#xA0;Equations</a><br/>
&#160;&#160;&#160;&#160;&#160;equation&#160;<a href="ludetandsolve.xml" target="_top">Compute&#xA0;Determinants&#xA0;and&#xA0;Solve&#xA0;Equations&#xA0;by&#xA0;LU&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;invert<b>&#xA0;</b>Lu<b>&#xA0;</b>equation&#160;<a href="luinvert.xml" target="_top">Invert&#xA0;an&#xA0;LU&#xA0;Factored&#xA0;Equation</a><br/>
&#160;&#160;&#160;&#160;&#160;Lu<b>&#xA0;</b>factor<b>&#xA0;</b>equation&#160;<a href="luratio.xml" target="_top">LU&#xA0;Factorization&#xA0;of&#xA0;A&#xA0;Square&#xA0;Matrix&#xA0;and&#xA0;Stability&#xA0;Calculation</a><br/>
&#160;&#160;&#160;&#160;&#160;Lu<b>&#xA0;</b>factor<b>&#xA0;</b>equation&#160;<a href="lufactor.xml" target="_top">LU&#xA0;Factorization&#xA0;of&#xA0;A&#xA0;Square&#xA0;Matrix</a><br/>
&#160;&#160;&#160;&#160;&#160;solve<b>&#xA0;</b>equation&#160;<a href="luvecad.xml" target="_top">Lu&#xA0;Factor&#xA0;and&#xA0;Solve&#xA0;with&#xA0;Recorded&#xA0;Pivoting</a><br/>
link<br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&#xA0;</b>to<b>&#xA0;</b>language&#160;<a href="ad_in_c.cpp.xml" target="_top">Example&#xA0;and&#xA0;Test&#xA0;Linking&#xA0;CppAD&#xA0;to&#xA0;Languages&#xA0;Other&#xA0;than&#xA0;C++</a><br/>
link<b>_</b>det<b>_</b>lu&#160;<a href="link_det_lu.xml" target="_top">Speed&#xA0;Testing&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;adolc&#160;<a href="adolc_det_lu.cpp.xml#Implementation" target="_top">Adolc&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#160;Implementation</a><br/>
&#160;&#160;&#160;&#160;&#160;cppad&#160;<a href="cppad_det_lu.cpp.xml#Implementation" target="_top">CppAD&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#160;Implementation</a><br/>
&#160;&#160;&#160;&#160;&#160;double&#160;<a href="double_det_lu.cpp.xml#Implementation" target="_top">Double&#xA0;Speed:&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#160;Implementation</a><br/>
&#160;&#160;&#160;&#160;&#160;fadbad&#160;<a href="fadbad_det_lu.cpp.xml#Implementation" target="_top">Fadbad&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#160;Implementation</a><br/>
&#160;&#160;&#160;&#160;&#160;sacado&#160;<a href="sacado_det_lu.cpp.xml#Implementation" target="_top">Sacado&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#160;Implementation</a><br/>
link<b>_</b>det<b>_</b>minor&#160;<a href="sacado_det_minor.cpp.xml#link_det_minor" target="_top">Sacado&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion:&#160;link_det_minor</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="fadbad_det_minor.cpp.xml#link_det_minor" target="_top">Fadbad&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion:&#160;link_det_minor</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="cppad_det_minor.cpp.xml#link_det_minor" target="_top">CppAD&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion:&#160;link_det_minor</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="adolc_det_minor.cpp.xml#link_det_minor" target="_top">Adolc&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion:&#160;link_det_minor</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="double_det_minor.cpp.xml#link_det_minor" target="_top">Double&#xA0;Speed:&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion:&#160;link_det_minor</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="link_det_minor.xml" target="_top">Speed&#xA0;Testing&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion</a><br/>
link<b>_</b>ode&#160;<a href="sacado_ode.cpp.xml#link_ode" target="_top">Sacado&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Ode&#xA0;Solution:&#160;link_ode</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="cppad_ode.cpp.xml#link_ode" target="_top">CppAD&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Ode&#xA0;Solution:&#160;link_ode</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="double_ode.cpp.xml#link_ode" target="_top">Double&#xA0;Speed:&#xA0;Ode&#xA0;Solution:&#160;link_ode</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="link_ode.xml" target="_top">Speed&#xA0;Testing&#xA0;the&#xA0;Jacobian&#xA0;of&#xA0;Ode&#xA0;Solution</a><br/>
link<b>_</b>poly&#160;<a href="sacado_poly.cpp.xml#link_poly" target="_top">Sacado&#xA0;Speed:&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial:&#160;link_poly</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="fadbad_poly.cpp.xml#link_poly" target="_top">Fadbad&#xA0;Speed:&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial:&#160;link_poly</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="cppad_poly.cpp.xml#link_poly" target="_top">CppAD&#xA0;Speed:&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial:&#160;link_poly</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="adolc_poly.cpp.xml#link_poly" target="_top">Adolc&#xA0;Speed:&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial:&#160;link_poly</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="double_poly.cpp.xml#link_poly" target="_top">Double&#xA0;Speed:&#xA0;Evaluate&#xA0;a&#xA0;Polynomial:&#160;link_poly</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="link_poly.xml" target="_top">Speed&#xA0;Testing&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial</a><br/>
link<b>_</b>sparse<b>_</b>hessian&#160;<a href="cppad_sparse_hessian.cpp.xml#link_sparse_hessian" target="_top">CppAD&#xA0;Speed:&#xA0;Sparse&#xA0;Hessian:&#160;link_sparse_hessian</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="adolc_sparse_hessian.cpp.xml#link_sparse_hessian" target="_top">Adolc&#xA0;Speed:&#xA0;Sparse&#xA0;Hessian:&#160;link_sparse_hessian</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="double_sparse_hessian.cpp.xml#link_sparse_hessian" target="_top">Double&#xA0;Speed:&#xA0;Sparse&#xA0;Hessian:&#160;link_sparse_hessian</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="link_sparse_hessian.xml" target="_top">Speed&#xA0;Testing&#xA0;Sparse&#xA0;Hessian</a><br/>
link<b>_</b>sparse<b>_</b>jacobian&#160;<a href="cppad_sparse_jacobian.cpp.xml#link_sparse_jacobian" target="_top">CppAD&#xA0;Speed:&#xA0;Sparse&#xA0;Jacobian:&#160;link_sparse_jacobian</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="double_sparse_jacobian.cpp.xml#link_sparse_jacobian" target="_top">Double&#xA0;Speed:&#xA0;Sparse&#xA0;Jacobian:&#160;link_sparse_jacobian</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="link_sparse_jacobian.xml" target="_top">Speed&#xA0;Testing&#xA0;Sparse&#xA0;Jacobian</a><br/>
log<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="std_math_ad.xml" target="_top">AD&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="log.cpp.xml" target="_top">The&#xA0;AD&#xA0;log&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;float<b>&#xA0;</b>and<b>&#xA0;</b>double&#160;<a href="std_math_unary.xml" target="_top">Float&#xA0;and&#xA0;Double&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>theory&#160;<a href="logforward.xml" target="_top">Logarithm&#xA0;Function&#xA0;Forward&#xA0;Taylor&#xA0;Polynomial&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>theory&#160;<a href="logreverse.xml" target="_top">Logarithm&#xA0;Function&#xA0;Reverse&#xA0;Mode&#xA0;Theory</a><br/>
log10<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="std_math_ad.xml" target="_top">AD&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="log10.cpp.xml" target="_top">The&#xA0;AD&#xA0;log10&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;float<b>&#xA0;</b>and<b>&#xA0;</b>double&#160;<a href="std_math_unary.xml" target="_top">Float&#xA0;and&#xA0;Double&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
lu<br/>
&#160;&#160;&#160;&#160;&#160;factor<b>&#xA0;</b>determinant&#160;<a href="det_by_lu.xml" target="_top">Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Lu&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>adolc&#160;<a href="adolc_det_lu.cpp.xml" target="_top">Adolc&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>cppad&#160;<a href="cppad_det_lu.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>double&#160;<a href="double_det_lu.cpp.xml#Specifications" target="_top">Double&#xA0;Speed:&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#160;Specifications</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>fadbad&#160;<a href="fadbad_det_lu.cpp.xml" target="_top">Fadbad&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>sacado&#160;<a href="sacado_det_lu.cpp.xml" target="_top">Sacado&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization</a><br/>

<b><big><a name="M">M</a></big></b>
<br/>
Memory<br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="fundeprecated.xml#Memory" target="_top">ADFun&#xA0;Object&#xA0;Deprecated&#xA0;Member&#xA0;Functions:&#160;Memory</a><br/>
macro<br/>
&#160;&#160;&#160;&#160;&#160;error<b>&#xA0;</b>assert&#160;<a href="cppad_assert.xml" target="_top">CppAD&#xA0;Assertions&#xA0;During&#xA0;Execution</a><br/>
&#160;&#160;&#160;&#160;&#160;isnan&#160;<a href="nan.xml#Include.Macros" target="_top">Obtain&#xA0;Nan&#xA0;and&#xA0;Determine&#xA0;if&#xA0;a&#xA0;Value&#xA0;is&#xA0;Nan:&#160;Include.Macros</a><br/>
&#160;&#160;&#160;&#160;&#160;nan&#160;<a href="nan.xml#Include.Macros" target="_top">Obtain&#xA0;Nan&#xA0;and&#xA0;Determine&#xA0;if&#xA0;a&#xA0;Value&#xA0;is&#xA0;Nan:&#160;Include.Macros</a><br/>
math<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>other&#160;<a href="mathother.xml" target="_top">Other&#xA0;AD&#xA0;Math&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>unary&#160;<a href="std_math_ad.xml" target="_top">AD&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;Base<b>&#xA0;</b>require&#160;<a href="base_require.xml#Standard Math Unary" target="_top">AD&lt;Base&gt;&#xA0;Requirements&#xA0;for&#xA0;Base&#xA0;Type:&#160;Standard&#xA0;Math&#xA0;Unary</a><br/>
&#160;&#160;&#160;&#160;&#160;functions&#160;<a href="faq.xml#Math Functions" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Math&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;standard<b>&#xA0;</b>function&#160;<a href="faq.xml#Namespace.Using" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Namespace.Using</a><br/>
&#160;&#160;&#160;&#160;&#160;unary&#160;<a href="std_math_unary.xml" target="_top">Float&#xA0;and&#xA0;Double&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
matrix<br/>
&#160;&#160;&#160;&#160;&#160;determinant&#160;<a href="ludetandsolve.xml" target="_top">Compute&#xA0;Determinants&#xA0;and&#xA0;Solve&#xA0;Equations&#xA0;by&#xA0;LU&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;factor&#160;<a href="ludetandsolve.xml" target="_top">Compute&#xA0;Determinants&#xA0;and&#xA0;Solve&#xA0;Equations&#xA0;by&#xA0;LU&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;inverse&#160;<a href="faq.xml#Matrix Inverse" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Matrix&#xA0;Inverse</a><br/>
&#160;&#160;&#160;&#160;&#160;linear<b>&#xA0;</b>equation&#160;<a href="ludetandsolve.xml" target="_top">Compute&#xA0;Determinants&#xA0;and&#xA0;Solve&#xA0;Equations&#xA0;by&#xA0;LU&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;minor<b>&#xA0;</b>determinant&#160;<a href="det_of_minor.xml" target="_top">Determinant&#xA0;of&#xA0;a&#xA0;Minor</a><br/>
maxabs<br/>
&#160;&#160;&#160;&#160;&#160;OdeErrControl&#160;<a href="odeerrmaxabs.cpp.xml" target="_top">OdeErrControl:&#xA0;Example&#xA0;and&#xA0;Test&#xA0;Using&#xA0;Maxabs&#xA0;Argument</a><br/>
memory<br/>
&#160;&#160;&#160;&#160;&#160;control&#160;<a href="capacity_taylor.xml" target="_top">Controlling&#xA0;Taylor&#xA0;Coefficients&#xA0;Memory&#xA0;Allocation</a><br/>
&#160;&#160;&#160;&#160;&#160;optimize&#160;<a href="optimize.xml" target="_top">Optimize&#xA0;the&#xA0;Tape&#xA0;Corresponding&#xA0;to&#xA0;an&#xA0;ADFun&#xA0;object</a><br/>
&#160;&#160;&#160;&#160;&#160;tape&#160;<a href="faq.xml#Tape Storage: Disk or Memory" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Tape&#xA0;Storage:&#xA0;Disk&#xA0;or&#xA0;Memory</a><br/>
&#160;&#160;&#160;&#160;&#160;track&#160;<a href="tracknewdel.xml" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete</a><br/>
minor<br/>
&#160;&#160;&#160;&#160;&#160;expansion<b>&#xA0;</b>determinant&#160;<a href="det_by_minor.xml" target="_top">Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors</a><br/>
&#160;&#160;&#160;&#160;&#160;matrix<b>&#xA0;</b>determinant&#160;<a href="det_of_minor.xml" target="_top">Determinant&#xA0;of&#xA0;a&#xA0;Minor</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>adolc&#160;<a href="adolc_det_minor.cpp.xml" target="_top">Adolc&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>cppad&#160;<a href="cppad_det_minor.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>cppad&#160;<a href="double_det_minor.cpp.xml" target="_top">Double&#xA0;Speed:&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>fadbad&#160;<a href="fadbad_det_minor.cpp.xml" target="_top">Fadbad&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>sacado&#160;<a href="sacado_det_minor.cpp.xml" target="_top">Sacado&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion</a><br/>
minors&#160;<a href="jacminordet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="hesminordet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
minus<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="sub.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Subtraction:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>unary<b>&#xA0;</b>operator&#160;<a href="unaryminus.xml" target="_top">AD&#xA0;Unary&#xA0;Minus&#xA0;Operator</a><br/>
&#160;&#160;&#160;&#160;&#160;binary<b>&#xA0;</b>operator&#160;<a href="ad_binary.xml" target="_top">AD&#xA0;Binary&#xA0;Arithmetic&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;computed<b>&#xA0;</b>assignment&#160;<a href="compute_assign.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Operators</a><br/>
mode&#160;<a href="faq.xml#Mode: Forward or Reverse" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Mode:&#xA0;Forward&#xA0;or&#xA0;Reverse</a><br/>
&#160;&#160;&#160;&#160;&#160;any<b>&#xA0;</b>order<b>&#xA0;</b>reverse&#160;<a href="reverse_any.xml" target="_top">Any&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;example<b>&#xA0;</b>forward&#160;<a href="exp_eps_for2.xml" target="_top">exp_eps:&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;example<b>&#xA0;</b>forward&#160;<a href="exp_2_for2.xml" target="_top">exp_2:&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;example<b>&#xA0;</b>forward&#160;<a href="exp_2_for1.xml" target="_top">exp_2:&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;example<b>&#xA0;</b>reverse&#160;<a href="exp_2_rev2.xml" target="_top">exp_2:&#xA0;Second&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;example<b>&#xA0;</b>reverse&#160;<a href="exp_2_rev1.xml" target="_top">exp_2:&#xA0;First&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>order<b>&#xA0;</b>reverse&#160;<a href="reverse_one.xml" target="_top">First&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;forward&#160;<a href="forwardany.xml" target="_top">Any&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>example&#160;<a href="exp_eps_rev2.xml" target="_top">exp_eps:&#xA0;Second&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>example&#160;<a href="exp_eps_rev1.xml" target="_top">exp_eps:&#xA0;First&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>order<b>&#xA0;</b>reverse&#160;<a href="reverse_two.xml" target="_top">Second&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
more<br/>
&#160;&#160;&#160;&#160;&#160;testing&#160;<a href="installunix.xml#More Testing" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;More&#xA0;Testing</a><br/>
multi<br/>
&#160;&#160;&#160;&#160;&#160;dimensional<b>&#xA0;</b>Romberg<b>&#xA0;</b>integration&#160;<a href="rombergmul.xml" target="_top">Multi-dimensional&#xA0;Romberg&#xA0;Integration</a><br/>
multi<b>-</b>thread<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="multi_newton.hpp.xml" target="_top">OpenMP&#xA0;Multi-Threading&#xA0;Newton's&#xA0;Method&#xA0;Source&#xA0;Code</a><br/>
&#160;&#160;&#160;&#160;&#160;Newton<b>'</b>s<b>&#xA0;</b>method&#160;<a href="multi_newton.xml" target="_top">Multi-Threaded&#xA0;Newton's&#xA0;Method&#xA0;Routine</a><br/>
multi<b>_</b>newton<br/>
&#160;&#160;&#160;&#160;&#160;source&#160;<a href="multi_newton.hpp.xml" target="_top">OpenMP&#xA0;Multi-Threading&#xA0;Newton's&#xA0;Method&#xA0;Source&#xA0;Code</a><br/>
multiple<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>level&#160;<a href="mul_level.cpp.xml" target="_top">Multiple&#xA0;Tapes:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>level&#160;<a href="mul_level.xml" target="_top">Using&#xA0;Multiple&#xA0;Levels&#xA0;of&#xA0;AD</a><br/>
&#160;&#160;&#160;&#160;&#160;Adolc&#160;<a href="mul_level_adolc.cpp.xml" target="_top">Using&#xA0;Adolc&#xA0;with&#xA0;Multiple&#xA0;Levels&#xA0;of&#xA0;Taping:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;assignment&#160;<a href="compute_assign.xml#Result" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Operators:&#160;Result</a><br/>
&#160;&#160;&#160;&#160;&#160;thread&#160;<a href="omp_max_thread.xml" target="_top">OpenMP&#xA0;Maximum&#xA0;Thread&#xA0;Number</a><br/>
multiply<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="mul.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Multiplication:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;binary<b>&#xA0;</b>operator&#160;<a href="ad_binary.xml" target="_top">AD&#xA0;Binary&#xA0;Arithmetic&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;computed<b>&#xA0;</b>assignment&#160;<a href="compute_assign.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Operators</a><br/>

<b><big><a name="N">N</a></big></b>
<br/>
NDEBUG&#160;<a href="faq.xml#Speed" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Speed</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="faq.xml#CompareChange" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;CompareChange</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="tracknewdel.xml#TrackNewVec" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#160;TrackNewVec</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="simplevector.xml#Exercise" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Simple&#xA0;Vector:&#160;Exercise</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="optimize.xml#Checking Optimization" target="_top">Optimize&#xA0;the&#xA0;Tape&#xA0;Corresponding&#xA0;to&#xA0;an&#xA0;ADFun&#xA0;object:&#160;Checking&#xA0;Optimization</a><br/>
&#160;&#160;&#160;&#160;&#160;CompareChange&#160;<a href="comparechange.xml#Restrictions" target="_top">Comparison&#xA0;Changes&#xA0;During&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Mode:&#160;Restrictions</a><br/>
NearEqual&#160;<a href="nearequal.xml" target="_top">Determine&#xA0;if&#xA0;Two&#xA0;Values&#xA0;Are&#xA0;Nearly&#xA0;Equal</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>with<b>&#xA0;</b>Base&#160;<a href="nearequalext.xml" target="_top">Compare&#xA0;AD&#xA0;and&#xA0;Base&#xA0;Objects&#xA0;for&#xA0;Nearly&#xA0;Equal</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="near_equal.cpp.xml" target="_top">NearEqual&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
NearEqualExt<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="nearequalext.cpp.xml" target="_top">Compare&#xA0;AD&#xA0;with&#xA0;Base&#xA0;Objects:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
NumericType<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="numerictype.cpp.xml" target="_top">The&#xA0;NumericType:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
namespace&#160;<a href="faq.xml#Namespace" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Namespace</a><br/>
&#160;&#160;&#160;&#160;&#160;CppAD&#160;<a href="cppad.xml#Namespace" target="_top">cppad-20100325:&#xA0;A&#xA0;Package&#xA0;for&#xA0;Differentiation&#xA0;of&#xA0;C++&#xA0;Algorithms:&#160;Namespace</a><br/>
nan&#160;<a href="nan.xml" target="_top">Obtain&#xA0;Nan&#xA0;and&#xA0;Determine&#xA0;if&#xA0;a&#xA0;Value&#xA0;is&#xA0;Nan</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="nan.cpp.xml" target="_top">nan:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;macro&#160;<a href="nan.xml#Include.Macros" target="_top">Obtain&#xA0;Nan&#xA0;and&#xA0;Determine&#xA0;if&#xA0;a&#xA0;Value&#xA0;is&#xA0;Nan:&#160;Include.Macros</a><br/>
new<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="tracknewdel.cpp.xml" target="_top">Tracking&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;features&#160;<a href="wishlist.xml" target="_top">The&#xA0;CppAD&#xA0;Wish&#xA0;List</a><br/>
&#160;&#160;&#160;&#160;&#160;track&#160;<a href="tracknewdel.xml" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete</a><br/>
nonlinear<br/>
&#160;&#160;&#160;&#160;&#160;programming<b>&#xA0;</b>CppAD&#160;<a href="cppad_ipopt_nlp.xml" target="_top">Nonlinear&#xA0;Programming&#xA0;Using&#xA0;the&#xA0;CppAD&#xA0;Interface&#xA0;to&#xA0;Ipopt</a><br/>
numeric<br/>
&#160;&#160;&#160;&#160;&#160;check&#160;<a href="checknumerictype.xml" target="_top">Check&#xA0;NumericType&#xA0;Class&#xA0;Concept</a><br/>
&#160;&#160;&#160;&#160;&#160;type&#160;<a href="numerictype.xml" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Numeric&#xA0;Type</a><br/>
numerical<br/>
&#160;&#160;&#160;&#160;&#160;C<b>++&#xA0;</b>template<b>&#xA0;</b>library&#160;<a href="library.xml" target="_top">The&#xA0;CppAD&#xA0;General&#xA0;Purpose&#xA0;Library</a><br/>

<b><big><a name="O">O</a></big></b>
<br/>
ODE<br/>
&#160;&#160;&#160;&#160;&#160;control<b>&#xA0;</b>error&#160;<a href="odeerrcontrol.xml" target="_top">An&#xA0;Error&#xA0;Controller&#xA0;for&#xA0;ODE&#xA0;Solvers</a><br/>
&#160;&#160;&#160;&#160;&#160;Rosenbrock&#160;<a href="rosen34.xml" target="_top">A&#xA0;3rd&#xA0;and&#xA0;4th&#xA0;Order&#xA0;Rosenbrock&#xA0;ODE&#xA0;Solver</a><br/>
&#160;&#160;&#160;&#160;&#160;Runge<b>-</b>Kutta&#160;<a href="runge45.xml" target="_top">An&#xA0;Embedded&#xA0;4th&#xA0;and&#xA0;5th&#xA0;Order&#xA0;Runge-Kutta&#xA0;ODE&#xA0;Solver</a><br/>
&#160;&#160;&#160;&#160;&#160;Taylor&#160;<a href="ode_taylor.cpp.xml" target="_top">Taylor's&#xA0;Ode&#xA0;Solver:&#xA0;An&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Taylor<b>&#xA0;</b>Adolc&#160;<a href="ode_taylor_adolc.cpp.xml" target="_top">Using&#xA0;Adolc&#xA0;with&#xA0;Taylor's&#xA0;Ode&#xA0;Solver:&#xA0;An&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
Ode<br/>
&#160;&#160;&#160;&#160;&#160;Gear&#160;<a href="odegear.xml" target="_top">An&#xA0;Arbitrary&#xA0;Order&#xA0;Gear&#xA0;Method</a><br/>
OdeErrControl&#160;<a href="odeerrcontrol.xml" target="_top">An&#xA0;Error&#xA0;Controller&#xA0;for&#xA0;ODE&#xA0;Solvers</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="odeerrmaxabs.cpp.xml" target="_top">OdeErrControl:&#xA0;Example&#xA0;and&#xA0;Test&#xA0;Using&#xA0;Maxabs&#xA0;Argument</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="odeerrcontrol.cpp.xml" target="_top">OdeErrControl:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;maxabs&#160;<a href="odeerrmaxabs.cpp.xml" target="_top">OdeErrControl:&#xA0;Example&#xA0;and&#xA0;Test&#xA0;Using&#xA0;Maxabs&#xA0;Argument</a><br/>
OdeGear&#160;<a href="odegear.xml" target="_top">An&#xA0;Arbitrary&#xA0;Order&#xA0;Gear&#xA0;Method</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="odegear.cpp.xml" target="_top">OdeGear:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
OdeGearControl&#160;<a href="odegearcontrol.xml" target="_top">An&#xA0;Error&#xA0;Controller&#xA0;for&#xA0;Gear's&#xA0;Ode&#xA0;Solvers</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="odegearcontrol.cpp.xml" target="_top">OdeGearControl:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
OpenMP<br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="funconstruct.xml#OpenMP" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording:&#160;OpenMP</a><br/>
&#160;&#160;&#160;&#160;&#160;CppAD&#160;<a href="omp_max_thread.xml" target="_top">OpenMP&#xA0;Maximum&#xA0;Thread&#xA0;Number</a><br/>
&#160;&#160;&#160;&#160;&#160;compile<b>&#xA0;</b>example&#160;<a href="openmp_run.sh.xml" target="_top">Compile&#xA0;and&#xA0;Run&#xA0;the&#xA0;OpenMP&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Dependent&#160;<a href="funconstruct.xml#OpenMP" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording:&#160;OpenMP</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="multi_newton.hpp.xml" target="_top">OpenMP&#xA0;Multi-Threading&#xA0;Newton's&#xA0;Method&#xA0;Source&#xA0;Code</a><br/>
&#160;&#160;&#160;&#160;&#160;example<b>&#xA0;</b>A<b>.</b>1<b>.</b>1c&#160;<a href="example_a11c.cpp.xml" target="_top">A&#xA0;Simple&#xA0;Parallel&#xA0;Loop</a><br/>
&#160;&#160;&#160;&#160;&#160;example<b>&#xA0;</b>program&#160;<a href="sum_i_inv.cpp.xml" target="_top">Sum&#xA0;of&#xA0;1/i&#xA0;Main&#xA0;Program</a><br/>
&#160;&#160;&#160;&#160;&#160;example<b>&#xA0;</b>program&#160;<a href="multi_newton.cpp.xml" target="_top">Multi-Threaded&#xA0;Newton's&#xA0;Method&#xA0;Main&#xA0;Program</a><br/>
&#160;&#160;&#160;&#160;&#160;Independent&#160;<a href="independent.xml#OpenMP" target="_top">Declare&#xA0;Independent&#xA0;Variables&#xA0;and&#xA0;Start&#xA0;Recording:&#160;OpenMP</a><br/>
&#160;&#160;&#160;&#160;&#160;Newton<b>'</b>s<b>&#xA0;</b>method&#160;<a href="multi_newton.xml" target="_top">Multi-Threaded&#xA0;Newton's&#xA0;Method&#xA0;Routine</a><br/>
&#160;&#160;&#160;&#160;&#160;TrackCount&#160;<a href="tracknewdel.xml#TrackCount.OpenMP" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#160;TrackCount.OpenMP</a><br/>
&#160;&#160;&#160;&#160;&#160;TrackNewDel&#160;<a href="tracknewdel.xml#oldptr.OpenMP" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#160;oldptr.OpenMP</a><br/>
Order<br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="fundeprecated.xml#Order" target="_top">ADFun&#xA0;Object&#xA0;Deprecated&#xA0;Member&#xA0;Functions:&#160;Order</a><br/>
object<br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="adfun.xml" target="_top">ADFun&#xA0;Objects</a><br/>
ode<br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>_</b>ipopt<b>_</b>nlp<b>&#xA0;</b>example<b>&#xA0;</b>source&#160;<a href="ipopt_ode_fast.hpp.xml" target="_top">ODE&#xA0;Fitting&#xA0;Using&#xA0;Fast&#xA0;Representation</a><br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>_</b>ipopt<b>_</b>nlp<b>&#xA0;</b>example<b>&#xA0;</b>source&#160;<a href="ipopt_ode_simple.hpp.xml" target="_top">ODE&#xA0;Fitting&#xA0;Using&#xA0;Simple&#xA0;Representation</a><br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>_</b>ipopt<b>_</b>nlp<b>&#xA0;</b>representation&#160;<a href="ipopt_ode_fast.xml" target="_top">ODE&#xA0;Fitting&#xA0;Using&#xA0;Fast&#xA0;Representation</a><br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>_</b>ipopt<b>_</b>nlp<b>&#xA0;</b>simple<b>&#xA0;</b>representation&#160;<a href="ipopt_ode_simple.xml" target="_top">ODE&#xA0;Fitting&#xA0;Using&#xA0;Simple&#xA0;Representation</a><br/>
&#160;&#160;&#160;&#160;&#160;gradient<b>&#xA0;</b>speed<b>&#xA0;</b>sacado&#160;<a href="sacado_ode.cpp.xml" target="_top">Sacado&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Ode&#xA0;Solution</a><br/>
&#160;&#160;&#160;&#160;&#160;inverse<b>&#xA0;</b>example&#160;<a href="ipopt_ode_problem.hpp.xml" target="_top">ODE&#xA0;Inverse&#xA0;Problem&#xA0;Definitions:&#xA0;Source&#xA0;Code</a><br/>
&#160;&#160;&#160;&#160;&#160;inverse<b>&#xA0;</b>example&#160;<a href="ipopt_ode_problem.xml" target="_top">An&#xA0;ODE&#xA0;Inverse&#xA0;Problem&#xA0;Example</a><br/>
&#160;&#160;&#160;&#160;&#160;jacobian<b>&#xA0;</b>speed<b>&#xA0;</b>cppad&#160;<a href="cppad_ode.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Ode&#xA0;Solution</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>double&#160;<a href="double_ode.cpp.xml" target="_top">Double&#xA0;Speed:&#xA0;Ode&#xA0;Solution</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>test&#160;<a href="link_ode.xml" target="_top">Speed&#xA0;Testing&#xA0;the&#xA0;Jacobian&#xA0;of&#xA0;Ode&#xA0;Solution</a><br/>
&#160;&#160;&#160;&#160;&#160;stiff&#160;<a href="odestiff.cpp.xml" target="_top">A&#xA0;Stiff&#xA0;Ode:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
ode<b>_</b>evaluate<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="ode_evaluate.cpp.xml" target="_top">ode_evaluate:&#xA0;Example&#xA0;and&#xA0;test</a><br/>
&#160;&#160;&#160;&#160;&#160;function&#160;<a href="ode_evaluate.xml" target="_top">Evaluate&#xA0;a&#xA0;Function&#xA0;Defined&#xA0;in&#xA0;Terms&#xA0;of&#xA0;an&#xA0;ODE</a><br/>
&#160;&#160;&#160;&#160;&#160;source&#160;<a href="ode_evaluate.hpp.xml" target="_top">Source:&#xA0;ode_evaluate</a><br/>
of&#160;<a href="glossary.xml#Sparsity Pattern.Vector of Sets" target="_top">Glossary:&#160;Sparsity&#xA0;Pattern.Vector&#xA0;of&#xA0;Sets</a><br/>
&#160;&#160;&#160;<a href="glossary.xml#Sparsity Pattern.Vector of Boolean" target="_top">Glossary:&#160;Sparsity&#xA0;Pattern.Vector&#xA0;of&#xA0;Boolean</a><br/>
&#160;&#160;&#160;<a href="glossary.xml#AD of Base" target="_top">Glossary:&#160;AD&#xA0;of&#xA0;Base</a><br/>
omp<b>_</b>max<b>_</b>thread&#160;<a href="omp_max_thread.xml" target="_top">OpenMP&#xA0;Maximum&#xA0;Thread&#xA0;Number</a><br/>
one<br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>Forward&#160;<a href="forwardone.xml" target="_top">First&#xA0;Order&#xA0;Forward&#xA0;Mode:&#xA0;Derivative&#xA0;Values</a><br/>
operation&#160;<a href="glossary.xml#Operation" target="_top">Glossary:&#160;Operation</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>Bool<b>&#xA0;</b>valued&#160;<a href="boolvalued.xml" target="_top">Bool&#xA0;Valued&#xA0;Operations&#xA0;and&#xA0;Functions&#xA0;with&#xA0;AD&#xA0;Arguments</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>valued&#160;<a href="advalued.xml" target="_top">AD&#xA0;Valued&#xA0;Operations&#xA0;and&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;equal<b>&#xA0;</b>sequence&#160;<a href="equalopseq.xml" target="_top">Check&#xA0;if&#xA0;Equal&#xA0;and&#xA0;Correspond&#xA0;to&#xA0;Same&#xA0;Operation&#xA0;Sequence</a><br/>
&#160;&#160;&#160;&#160;&#160;optimize<b>&#xA0;</b>sequence&#160;<a href="optimize.cpp.xml" target="_top">ADFun&#xA0;Operation&#xA0;Sequence&#xA0;Optimization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;sequence&#160;<a href="wishlist.xml#Operation Sequence" target="_top">The&#xA0;CppAD&#xA0;Wish&#xA0;List:&#160;Operation&#xA0;Sequence</a><br/>
&#160;&#160;&#160;&#160;&#160;sequence<b>&#xA0;</b>abort&#160;<a href="abort_recording.xml" target="_top">Abort&#xA0;Recording&#xA0;of&#xA0;an&#xA0;Operation&#xA0;Sequence</a><br/>
&#160;&#160;&#160;&#160;&#160;sequence<b>&#xA0;</b>example&#160;<a href="exp_eps_for0.xml" target="_top">exp_eps:&#xA0;Operation&#xA0;Sequence&#xA0;and&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;sequence<b>&#xA0;</b>example&#160;<a href="exp_2_for0.xml" target="_top">exp_2:&#xA0;Operation&#xA0;Sequence&#xA0;and&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;sequence<b>&#xA0;</b>store&#160;<a href="dependent.xml" target="_top">Stop&#xA0;Recording&#xA0;and&#xA0;Store&#xA0;Operation&#xA0;Sequence</a><br/>
operations<br/>
&#160;&#160;&#160;&#160;&#160;optimize<b>&#xA0;</b>sequence&#160;<a href="optimize.xml" target="_top">Optimize&#xA0;the&#xA0;Tape&#xA0;Corresponding&#xA0;to&#xA0;an&#xA0;ADFun&#xA0;object</a><br/>
operator<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>arithmetic&#160;<a href="arithmetic.xml" target="_top">AD&#xA0;Arithmetic&#xA0;Operators&#xA0;and&#xA0;Computed&#xA0;Assignments</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>binary<b>&#xA0;</b>compare&#160;<a href="compare.xml" target="_top">AD&#xA0;Binary&#xA0;Comparison&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun<b>&#xA0;</b>assignment&#160;<a href="funconstruct.xml#Assignment Operator" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording:&#160;Assignment&#xA0;Operator</a><br/>
&#160;&#160;&#160;&#160;&#160;assignment&#160;<a href="faq.xml#Assignment and Independent" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Assignment&#xA0;and&#xA0;Independent</a><br/>
&#160;&#160;&#160;&#160;&#160;assignment&#160;<a href="compute_assign.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;binary&#160;<a href="ad_binary.xml" target="_top">AD&#xA0;Binary&#xA0;Arithmetic&#xA0;Operators</a><br/>
opt<b>_</b>val<b>_</b>hes&#160;<a href="opt_val_hes.xml" target="_top">Jacobian&#xA0;and&#xA0;Hessian&#xA0;of&#xA0;Optimal&#xA0;Values</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="opt_val_hes.cpp.xml" target="_top">opt_val_hes:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
optimal<b>&#xA0;</b>value&#160;<a href="opt_val_hes.xml" target="_top">Jacobian&#xA0;and&#xA0;Hessian&#xA0;of&#xA0;Optimal&#xA0;Values</a><br/>
optimize&#160;<a href="optimize.xml" target="_top">Optimize&#xA0;the&#xA0;Tape&#xA0;Corresponding&#xA0;to&#xA0;an&#xA0;ADFun&#xA0;object</a><br/>
&#160;&#160;&#160;&#160;&#160;operation<b>&#xA0;</b>sequence&#160;<a href="optimize.cpp.xml" target="_top">ADFun&#xA0;Operation&#xA0;Sequence&#xA0;Optimization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
order<br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>exp<b>_</b>2&#160;<a href="exp_eps_for2.cpp.xml" target="_top">exp_eps:&#xA0;Verify&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>exp<b>_</b>2&#160;<a href="exp_eps_for1.cpp.xml" target="_top">exp_eps:&#xA0;Verify&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>exp<b>_</b>2&#160;<a href="exp_2_for1.cpp.xml" target="_top">exp_2:&#xA0;Verify&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>expansion&#160;<a href="exp_eps_for1.xml#First Order Expansion" target="_top">exp_eps:&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Sweep:&#160;First&#xA0;Order&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>expansion&#160;<a href="exp_2_for1.xml#First Order Expansion" target="_top">exp_2:&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Mode:&#160;First&#xA0;Order&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>forward&#160;<a href="exp_eps_for1.xml" target="_top">exp_eps:&#xA0;First&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>reverse&#160;<a href="exp_eps_rev1.xml" target="_top">exp_eps:&#xA0;First&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>reverse&#160;<a href="exp_2_rev1.xml" target="_top">exp_2:&#xA0;First&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;one<b>&#xA0;</b>Forward&#160;<a href="forwardone.xml" target="_top">First&#xA0;Order&#xA0;Forward&#xA0;Mode:&#xA0;Derivative&#xA0;Values</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>exp<b>_</b>2&#160;<a href="exp_2_for2.cpp.xml" target="_top">exp_2:&#xA0;Verify&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>expansion&#160;<a href="exp_eps_for2.xml#Second Order Expansion" target="_top">exp_eps:&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Mode:&#160;Second&#xA0;Order&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>expansion&#160;<a href="exp_2_for2.xml#Second Order Expansion" target="_top">exp_2:&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Mode:&#160;Second&#xA0;Order&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>reverse&#160;<a href="exp_eps_rev2.xml" target="_top">exp_eps:&#xA0;Second&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>reverse&#160;<a href="exp_2_rev2.xml" target="_top">exp_2:&#xA0;Second&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;zero<b>&#xA0;</b>exp<b>_</b>2&#160;<a href="exp_2_for0.cpp.xml" target="_top">exp_2:&#xA0;Verify&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;zero<b>&#xA0;</b>exp<b>_</b>eps&#160;<a href="exp_eps_for0.cpp.xml" target="_top">exp_eps:&#xA0;Verify&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;zero<b>&#xA0;</b>expansion&#160;<a href="exp_2_for0.xml#Zero Order Expansion" target="_top">exp_2:&#xA0;Operation&#xA0;Sequence&#xA0;and&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Mode:&#160;Zero&#xA0;Order&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;zero<b>&#xA0;</b>Forward&#160;<a href="forwardzero.xml" target="_top">Zero&#xA0;Order&#xA0;Forward&#xA0;Mode:&#xA0;Function&#xA0;Values</a><br/>
&#160;&#160;&#160;&#160;&#160;zero<b>&#xA0;</b>forward&#160;<a href="exp_eps_for0.xml" target="_top">exp_eps:&#xA0;Operation&#xA0;Sequence&#xA0;and&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;zero<b>&#xA0;</b>forward&#160;<a href="exp_2_for0.xml" target="_top">exp_2:&#xA0;Operation&#xA0;Sequence&#xA0;and&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
other<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>math&#160;<a href="mathother.xml" target="_top">Other&#xA0;AD&#xA0;Math&#xA0;Functions</a><br/>
output<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="output.xml" target="_top">AD&#xA0;Output&#xA0;Stream&#xA0;Operator</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="output.cpp.xml" target="_top">AD&#xA0;Output&#xA0;Operator:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;text&#160;<a href="printfor.xml" target="_top">Printing&#xA0;AD&#xA0;Values&#xA0;During&#xA0;Forward&#xA0;Mode</a><br/>

<b><big><a name="P">P</a></big></b>
<br/>
PACKAGE<br/>
&#160;&#160;&#160;&#160;&#160;symbol&#160;<a href="configure.xml" target="_top">Preprocessor&#xA0;Definitions&#xA0;Used&#xA0;by&#xA0;CppAD</a><br/>
Parameter&#160;<a href="parvar.xml" target="_top">Is&#xA0;an&#xA0;AD&#xA0;Object&#xA0;a&#xA0;Parameter&#xA0;or&#xA0;Variable</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seq_property.xml#Parameter" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#160;Parameter</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="parvar.cpp.xml" target="_top">AD&#xA0;Parameter&#xA0;and&#xA0;Variable&#xA0;Functions:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
Poly&#160;<a href="poly.xml" target="_top">Evaluate&#xA0;a&#xA0;Polynomial&#xA0;or&#xA0;its&#xA0;Derivative</a><br/>
&#160;&#160;&#160;&#160;&#160;source&#160;<a href="poly.hpp.xml" target="_top">Source:&#xA0;Poly</a><br/>
parameter&#160;<a href="glossary.xml#Parameter" target="_top">Glossary:&#160;Parameter</a><br/>
&#160;&#160;&#160;&#160;&#160;convert<b>&#xA0;</b>from<b>&#xA0;</b>variable&#160;<a href="var2par.xml" target="_top">Convert&#xA0;an&#xA0;AD&#xA0;Variable&#xA0;to&#xA0;a&#xA0;Parameter</a><br/>
partial<br/>
&#160;&#160;&#160;&#160;&#160;easy&#160;<a href="revtwo.xml" target="_top">Reverse&#xA0;Mode&#xA0;Second&#xA0;Partial&#xA0;Derivative&#xA0;Driver</a><br/>
&#160;&#160;&#160;&#160;&#160;easy&#160;<a href="fortwo.xml" target="_top">Forward&#xA0;Mode&#xA0;Second&#xA0;Partial&#xA0;Derivative&#xA0;Driver</a><br/>
&#160;&#160;&#160;&#160;&#160;easy&#160;<a href="forone.xml" target="_top">First&#xA0;Order&#xA0;Partial&#xA0;Derivative:&#xA0;Driver&#xA0;Routine</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="forone.cpp.xml" target="_top">First&#xA0;Order&#xA0;Partial&#xA0;Driver:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>order<b>&#xA0;</b>driver&#160;<a href="forone.xml" target="_top">First&#xA0;Order&#xA0;Partial&#xA0;Derivative:&#xA0;Driver&#xA0;Routine</a><br/>
&#160;&#160;&#160;&#160;&#160;second&#160;<a href="revtwo.cpp.xml" target="_top">Second&#xA0;Partials&#xA0;Reverse&#xA0;Driver:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;second&#160;<a href="fortwo.cpp.xml" target="_top">Subset&#xA0;of&#xA0;Second&#xA0;Order&#xA0;Partials:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>order<b>&#xA0;</b>driver&#160;<a href="revtwo.xml" target="_top">Reverse&#xA0;Mode&#xA0;Second&#xA0;Partial&#xA0;Derivative&#xA0;Driver</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>order<b>&#xA0;</b>driver&#160;<a href="fortwo.xml" target="_top">Forward&#xA0;Mode&#xA0;Second&#xA0;Partial&#xA0;Derivative&#xA0;Driver</a><br/>
pattern&#160;<a href="glossary.xml#Sparsity Pattern" target="_top">Glossary:&#160;Sparsity&#xA0;Pattern</a><br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>Jacobian&#160;<a href="forsparsejac.xml" target="_top">Jacobian&#xA0;Sparsity&#xA0;Pattern:&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>Hessian&#160;<a href="revsparsehes.xml" target="_top">Hessian&#xA0;Sparsity&#xA0;Pattern:&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>Jacobian&#160;<a href="revsparsejac.xml" target="_top">Jacobian&#xA0;Sparsity&#xA0;Pattern:&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;sparsity&#160;<a href="glossary.xml#Sparsity Pattern" target="_top">Glossary:&#160;Sparsity&#xA0;Pattern</a><br/>
&#160;&#160;&#160;&#160;&#160;sparsity&#160;<a href="sparse.xml" target="_top">Calculating&#xA0;Sparsity&#xA0;Patterns</a><br/>
plus<br/>
&#160;&#160;&#160;&#160;&#160;<b>*=&#xA0;</b>example&#160;<a href="muleq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Multiplication:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;<b>+=&#xA0;</b>example&#160;<a href="addeq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Addition:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;<b>-=&#xA0;</b>example&#160;<a href="subeq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Subtraction:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;<b>/=&#xA0;</b>example&#160;<a href="diveq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Division:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="add.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Addition:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>unary<b>&#xA0;</b>operator&#160;<a href="unaryplus.xml" target="_top">AD&#xA0;Unary&#xA0;Plus&#xA0;Operator</a><br/>
&#160;&#160;&#160;&#160;&#160;binary<b>&#xA0;</b>operator&#160;<a href="ad_binary.xml" target="_top">AD&#xA0;Binary&#xA0;Arithmetic&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;computed<b>&#xA0;</b>assignment&#160;<a href="compute_assign.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Operators</a><br/>
polynomial&#160;<a href="poly.xml" target="_top">Evaluate&#xA0;a&#xA0;Polynomial&#xA0;or&#xA0;its&#xA0;Derivative</a><br/>
&#160;&#160;&#160;&#160;&#160;complex&#160;<a href="not_complex_ad.cpp.xml" target="_top">Not&#xA0;Complex&#xA0;Differentiable:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;complex&#160;<a href="complexpoly.cpp.xml" target="_top">Complex&#xA0;Polynomial:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="poly.cpp.xml" target="_top">Polynomial&#xA0;Evaluation:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>adolc&#160;<a href="adolc_poly.cpp.xml" target="_top">Adolc&#xA0;Speed:&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>cppad&#160;<a href="cppad_poly.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>cppad&#160;<a href="double_poly.cpp.xml" target="_top">Double&#xA0;Speed:&#xA0;Evaluate&#xA0;a&#xA0;Polynomial</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>fadbad&#160;<a href="fadbad_poly.cpp.xml" target="_top">Fadbad&#xA0;Speed:&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>sacado&#160;<a href="sacado_poly.cpp.xml" target="_top">Sacado&#xA0;Speed:&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>test&#160;<a href="link_poly.xml" target="_top">Speed&#xA0;Testing&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial</a><br/>
postfix<br/>
&#160;&#160;&#160;&#160;&#160;configure<b>&#xA0;</b>directory&#160;<a href="installunix.xml#PostfixDir" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;PostfixDir</a><br/>
pow<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="pow.xml" target="_top">The&#xA0;AD&#xA0;Power&#xA0;Function</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="pow.cpp.xml" target="_top">The&#xA0;AD&#xA0;Power&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Base<b>&#xA0;</b>require&#160;<a href="base_require.xml#pow" target="_top">AD&lt;Base&gt;&#xA0;Requirements&#xA0;for&#xA0;Base&#xA0;Type:&#160;pow</a><br/>
&#160;&#160;&#160;&#160;&#160;int&#160;<a href="pow_int.cpp.xml" target="_top">The&#xA0;Pow&#xA0;Integer&#xA0;Exponent:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;integer&#160;<a href="pow_int.xml" target="_top">The&#xA0;Integer&#xA0;Power&#xA0;Function</a><br/>
prefix<br/>
&#160;&#160;&#160;&#160;&#160;configure<b>&#xA0;</b>directory&#160;<a href="installunix.xml#PrefixDir" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;PrefixDir</a><br/>
preprocessor<br/>
&#160;&#160;&#160;&#160;&#160;symbol&#160;<a href="configure.xml#Preprocessor Symbols" target="_top">Preprocessor&#xA0;Definitions&#xA0;Used&#xA0;by&#xA0;CppAD:&#160;Preprocessor&#xA0;Symbols</a><br/>
&#160;&#160;&#160;&#160;&#160;symbol<b>&#xA0;</b>CppAD&#160;<a href="cppad.xml#Preprocessor Symbols" target="_top">cppad-20100325:&#xA0;A&#xA0;Package&#xA0;for&#xA0;Differentiation&#xA0;of&#xA0;C++&#xA0;Algorithms:&#160;Preprocessor&#xA0;Symbols</a><br/>
&#160;&#160;&#160;&#160;&#160;symbols&#160;<a href="faq.xml#Namespace.Test Vector Preprocessor Symbol" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Namespace.Test&#xA0;Vector&#xA0;Preprocessor&#xA0;Symbol</a><br/>
print<br/>
&#160;&#160;&#160;&#160;&#160;example<b>&#xA0;</b>forward<b>&#xA0;</b>mode&#160;<a href="printfor.cpp.xml" target="_top">Printing&#xA0;During&#xA0;Forward&#xA0;Mode:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>mode&#160;<a href="printfor.xml" target="_top">Printing&#xA0;AD&#xA0;Values&#xA0;During&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>mode&#160;<a href="installwindows.xml#Printing During Forward Mode" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;Printing&#xA0;During&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>mode&#160;<a href="installunix.xml#PrintFor" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;PrintFor</a><br/>
problem<br/>
&#160;&#160;&#160;&#160;&#160;using<b>&#xA0;</b>CppAD&#160;<a href="bugs.xml" target="_top">Know&#xA0;Bugs&#xA0;and&#xA0;Problems&#xA0;Using&#xA0;CppAD</a><br/>
profile<br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>&#xA0;</b>speed&#160;<a href="installunix.xml#Profiling CppAD" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Profiling&#xA0;CppAD</a><br/>
program<br/>
&#160;&#160;&#160;&#160;&#160;OpenMP<b>&#xA0;</b>example&#160;<a href="sum_i_inv.cpp.xml" target="_top">Sum&#xA0;of&#xA0;1/i&#xA0;Main&#xA0;Program</a><br/>
&#160;&#160;&#160;&#160;&#160;OpenMP<b>&#xA0;</b>example&#160;<a href="multi_newton.cpp.xml" target="_top">Multi-Threaded&#xA0;Newton's&#xA0;Method&#xA0;Main&#xA0;Program</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>example&#160;<a href="speed_example.cpp.xml" target="_top">Program&#xA0;That&#xA0;Runs&#xA0;the&#xA0;Speed&#xA0;Examples</a><br/>
programming<br/>
&#160;&#160;&#160;&#160;&#160;nonlinear&#160;<a href="cppad_ipopt_nlp.xml" target="_top">Nonlinear&#xA0;Programming&#xA0;Using&#xA0;the&#xA0;CppAD&#xA0;Interface&#xA0;to&#xA0;Ipopt</a><br/>
&#160;&#160;&#160;&#160;&#160;nonlinear<b>&#xA0;</b>example&#160;<a href="ipopt_get_started.cpp.xml" target="_top">Nonlinear&#xA0;Programming&#xA0;Using&#xA0;CppAD&#xA0;and&#xA0;Ipopt:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
push<b>_</b>back<br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&#xA0;</b>vector&#160;<a href="cppad_vector.xml#push_back" target="_top">The&#xA0;CppAD::vector&#xA0;Template&#xA0;Class:&#160;push_back</a><br/>
push<b>_</b>vector<br/>
&#160;&#160;&#160;&#160;&#160;CppAD&#160;<a href="cppad_vector.xml#push_vector" target="_top">The&#xA0;CppAD::vector&#xA0;Template&#xA0;Class:&#160;push_vector</a><br/>

<b><big><a name="Q">Q</a></big></b>
<br/>
quotient<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="div.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Division:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>

<b><big><a name="R">R</a></big></b>
<br/>
Range<br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seq_property.xml#Range" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#160;Range</a><br/>
RevSparseHes&#160;<a href="revsparsehes.cpp.xml" target="_top">Reverse&#xA0;Mode&#xA0;Hessian&#xA0;Sparsity:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="revsparsehes.xml" target="_top">Hessian&#xA0;Sparsity&#xA0;Pattern:&#xA0;Reverse&#xA0;Mode</a><br/>
RevSparseJac&#160;<a href="revsparsejac.cpp.xml" target="_top">Reverse&#xA0;Mode&#xA0;Jacobian&#xA0;Sparsity:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="revsparsejac.xml" target="_top">Jacobian&#xA0;Sparsity&#xA0;Pattern:&#xA0;Reverse&#xA0;Mode</a><br/>
Romberg<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="rombergmul.cpp.xml" target="_top">One&#xA0;Dimensional&#xA0;Romberg&#xA0;Integration:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="rombergone.cpp.xml" target="_top">One&#xA0;Dimensional&#xA0;Romberg&#xA0;Integration:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Integrate&#160;<a href="rombergone.xml" target="_top">One&#xA0;DimensionalRomberg&#xA0;Integration</a><br/>
&#160;&#160;&#160;&#160;&#160;multi<b>-</b>dimensional<b>&#xA0;</b>integrate&#160;<a href="rombergmul.xml" target="_top">Multi-dimensional&#xA0;Romberg&#xA0;Integration</a><br/>
Rosen34&#160;<a href="rosen34.xml" target="_top">A&#xA0;3rd&#xA0;and&#xA0;4th&#xA0;Order&#xA0;Rosenbrock&#xA0;ODE&#xA0;Solver</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="rosen34.cpp.xml" target="_top">Rosen34:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
Rosenbrock<br/>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="rosen34.xml" target="_top">A&#xA0;3rd&#xA0;and&#xA0;4th&#xA0;Order&#xA0;Rosenbrock&#xA0;ODE&#xA0;Solver</a><br/>
Runge<br/>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="runge45.xml" target="_top">An&#xA0;Embedded&#xA0;4th&#xA0;and&#xA0;5th&#xA0;Order&#xA0;Runge-Kutta&#xA0;ODE&#xA0;Solver</a><br/>
Runge45&#160;<a href="runge45.xml" target="_top">An&#xA0;Embedded&#xA0;4th&#xA0;and&#xA0;5th&#xA0;Order&#xA0;Runge-Kutta&#xA0;ODE&#xA0;Solver</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="runge_45_2.cpp.xml" target="_top">Runge45:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="runge_45_1.cpp.xml" target="_top">Runge45:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
random<br/>
&#160;&#160;&#160;&#160;&#160;uniform<b>&#xA0;</b>vector&#160;<a href="uniform_01.xml" target="_top">Simulate&#xA0;a&#xA0;[0,1]&#xA0;Uniform&#xA0;Random&#xA0;Variate</a><br/>
re<b>-</b>tape<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="comparechange.cpp.xml" target="_top">CompareChange&#xA0;and&#xA0;Re-Tape:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
real<b>()</b>&#160;<a href="not_complex_ad.cpp.xml" target="_top">Not&#xA0;Complex&#xA0;Differentiable:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
realistic<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="general.xml" target="_top">General&#xA0;Examples</a><br/>
record<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>index&#160;<a href="vecad.xml" target="_top">AD&#xA0;Vectors&#xA0;that&#xA0;Record&#xA0;Index&#xA0;Operations</a><br/>
&#160;&#160;&#160;&#160;&#160;avoid&#160;<a href="faq.xml#Independent Variables" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Independent&#xA0;Variables</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="value.cpp.xml" target="_top">Convert&#xA0;From&#xA0;AD&#xA0;to&#xA0;its&#xA0;Base&#xA0;Type:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
recording<br/>
&#160;&#160;&#160;&#160;&#160;abort&#160;<a href="abort_recording.cpp.xml" target="_top">Abort&#xA0;Current&#xA0;Recording:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;abort&#160;<a href="abort_recording.xml" target="_top">Abort&#xA0;Recording&#xA0;of&#xA0;an&#xA0;Operation&#xA0;Sequence</a><br/>
&#160;&#160;&#160;&#160;&#160;start&#160;<a href="independent.xml" target="_top">Declare&#xA0;Independent&#xA0;Variables&#xA0;and&#xA0;Start&#xA0;Recording</a><br/>
&#160;&#160;&#160;&#160;&#160;stop&#160;<a href="dependent.xml" target="_top">Stop&#xA0;Recording&#xA0;and&#xA0;Store&#xA0;Operation&#xA0;Sequence</a><br/>
&#160;&#160;&#160;&#160;&#160;stop<b>&#xA0;</b>tape&#160;<a href="funconstruct.xml" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording</a><br/>
reference<br/>
&#160;&#160;&#160;&#160;&#160;VecAD<b>&lt;</b>Base<b>&gt;</b>&#160;<a href="vecad.xml#VecAD&lt;Base&gt;::reference" target="_top">AD&#xA0;Vectors&#xA0;that&#xA0;Record&#xA0;Index&#xA0;Operations:&#160;VecAD&lt;Base&gt;::reference</a><br/>
relative<br/>
&#160;&#160;&#160;&#160;&#160;difference&#160;<a href="nearequal.xml" target="_top">Determine&#xA0;if&#xA0;Two&#xA0;Values&#xA0;Are&#xA0;Nearly&#xA0;Equal</a><br/>
replace<br/>
&#160;&#160;&#160;&#160;&#160;error<b>&#xA0;</b>handler&#160;<a href="errorhandler.xml" target="_top">Replacing&#xA0;the&#xA0;CppAD&#xA0;Error&#xA0;Handler</a><br/>
representation<br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>_</b>ipopt<b>_</b>nlp<b>&#xA0;</b>ode&#160;<a href="ipopt_ode_fast.xml" target="_top">ODE&#xA0;Fitting&#xA0;Using&#xA0;Fast&#xA0;Representation</a><br/>
require<br/>
&#160;&#160;&#160;&#160;&#160;Base<b>&#xA0;</b>type&#160;<a href="base_require.xml" target="_top">AD&lt;Base&gt;&#xA0;Requirements&#xA0;for&#xA0;Base&#xA0;Type</a><br/>
resize<br/>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="simplevector.xml#Resize" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Simple&#xA0;Vector:&#160;Resize</a><br/>
retape<br/>
&#160;&#160;&#160;&#160;&#160;interpolate&#160;<a href="interp_retape.cpp.xml" target="_top">Interpolation&#xA0;With&#xA0;Retaping:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;interpolate&#160;<a href="interp_onetape.cpp.xml" target="_top">Interpolation&#xA0;With&#xA0;Out&#xA0;Retaping:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
reverse&#160;<a href="faq.xml#Mode: Forward or Reverse" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Mode:&#xA0;Forward&#xA0;or&#xA0;Reverse</a><br/>
&#160;&#160;&#160;&#160;&#160;acos<b>&#xA0;</b>theory&#160;<a href="acosreverse.xml" target="_top">Arccosine&#xA0;Function&#xA0;Reverse&#xA0;Mode&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;any<b>&#xA0;</b>order<b>&#xA0;</b>mode&#160;<a href="reverse_any.xml" target="_top">Any&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;asin<b>&#xA0;</b>theory&#160;<a href="asinreverse.xml" target="_top">Arcsine&#xA0;Function&#xA0;Reverse&#xA0;Mode&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;atan<b>&#xA0;</b>theory&#160;<a href="atanreverse.xml" target="_top">Arctangent&#xA0;Function&#xA0;Reverse&#xA0;Mode&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;cos&#160;<a href="sincosreverse.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Reverse&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;cosh&#160;<a href="sincosreverse.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Reverse&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;easy<b>&#xA0;</b>driver&#160;<a href="drivers.xml" target="_top">First&#xA0;and&#xA0;Second&#xA0;Derivatives:&#xA0;Easy&#xA0;Drivers</a><br/>
&#160;&#160;&#160;&#160;&#160;exp<b>&#xA0;</b>theory&#160;<a href="expreverse.xml" target="_top">Exponential&#xA0;Function&#xA0;Reverse&#xA0;Mode&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;exp<b>_</b>2&#160;<a href="exp_2_rev2.cpp.xml" target="_top">exp_2:&#xA0;Verify&#xA0;Second&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;exp<b>_</b>2&#160;<a href="exp_2_rev1.cpp.xml" target="_top">exp_2:&#xA0;Verify&#xA0;First&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;exp<b>_</b>eps&#160;<a href="exp_eps_rev2.cpp.xml" target="_top">exp_eps:&#xA0;Verify&#xA0;Second&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;exp<b>_</b>eps&#160;<a href="exp_eps_rev1.cpp.xml" target="_top">exp_eps:&#xA0;Verify&#xA0;First&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>order&#160;<a href="reverse_one.cpp.xml" target="_top">First&#xA0;Order&#xA0;Reverse&#xA0;Mode:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>order&#160;<a href="exp_eps_rev1.xml" target="_top">exp_eps:&#xA0;First&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>order&#160;<a href="exp_2_rev1.xml" target="_top">exp_2:&#xA0;First&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>order<b>&#xA0;</b>mode&#160;<a href="reverse_one.xml" target="_top">First&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;general<b>&#xA0;</b>example&#160;<a href="reverse_any.cpp.xml" target="_top">Reverse&#xA0;Mode&#xA0;General&#xA0;Case:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;log<b>&#xA0;</b>theory&#160;<a href="logreverse.xml" target="_top">Logarithm&#xA0;Function&#xA0;Reverse&#xA0;Mode&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;mode<b>&#xA0;</b>example&#160;<a href="exp_eps_rev2.xml" target="_top">exp_eps:&#xA0;Second&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;mode<b>&#xA0;</b>example&#160;<a href="exp_eps_rev1.xml" target="_top">exp_eps:&#xA0;First&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;mode<b>&#xA0;</b>example&#160;<a href="exp_2_rev2.xml" target="_top">exp_2:&#xA0;Second&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;mode<b>&#xA0;</b>example&#160;<a href="exp_2_rev1.xml" target="_top">exp_2:&#xA0;First&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>order&#160;<a href="reverse_two.cpp.xml" target="_top">Second&#xA0;Order&#xA0;Reverse&#xA0;ModeExample&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>order&#160;<a href="exp_eps_rev2.xml" target="_top">exp_eps:&#xA0;Second&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>order&#160;<a href="exp_2_rev2.xml" target="_top">exp_2:&#xA0;Second&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>order<b>&#xA0;</b>mode&#160;<a href="reverse_two.xml" target="_top">Second&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;sin&#160;<a href="sincosreverse.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Reverse&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;sinh&#160;<a href="sincosreverse.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Reverse&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;sparse<b>&#xA0;</b>Hessian&#160;<a href="revsparsehes.xml" target="_top">Hessian&#xA0;Sparsity&#xA0;Pattern:&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;sparse<b>&#xA0;</b>Jacobian&#160;<a href="revsparsejac.xml" target="_top">Jacobian&#xA0;Sparsity&#xA0;Pattern:&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;sqrt<b>&#xA0;</b>theory&#160;<a href="sqrtreverse.xml" target="_top">Square&#xA0;Root&#xA0;Function&#xA0;Reverse&#xA0;Mode&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;third<b>&#xA0;</b>order&#160;<a href="reverse_three.cpp.xml" target="_top">Third&#xA0;Order&#xA0;Reverse&#xA0;Mode:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
rpm<br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>.</b>spec&#160;<a href="installunix.xml#RPM" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;RPM</a><br/>
run<br/>
&#160;&#160;&#160;&#160;&#160;exp<b>_</b>apx&#160;<a href="installunix.xml#Introduction.exp_apx" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Introduction.exp_apx</a><br/>
&#160;&#160;&#160;&#160;&#160;exp<b>_</b>apx<b>&#xA0;</b>test&#160;<a href="exp_apx_main.cpp.xml" target="_top">Run&#xA0;the&#xA0;exp_2&#xA0;and&#xA0;exp_eps&#xA0;Tests</a><br/>
&#160;&#160;&#160;&#160;&#160;get<b>_</b>started&#160;<a href="installunix.xml#Introduction.Getting Started" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Introduction.Getting&#xA0;Started</a><br/>

<b><big><a name="S">S</a></big></b>
<br/>
Sacado<br/>
&#160;&#160;&#160;&#160;&#160;unix&#160;<a href="installunix.xml#SacadoDir" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;SacadoDir</a><br/>
Size<br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="fundeprecated.xml#Size" target="_top">ADFun&#xA0;Object&#xA0;Deprecated&#xA0;Member&#xA0;Functions:&#160;Size</a><br/>
SparseHessian&#160;<a href="sparse_hessian.xml" target="_top">Sparse&#xA0;Hessian:&#xA0;Easy&#xA0;Driver</a><br/>
SparseJacobian&#160;<a href="sparse_jacobian.xml" target="_top">Sparse&#xA0;Jacobian:&#xA0;Easy&#xA0;Driver</a><br/>
SpeedTest&#160;<a href="speedtest.xml" target="_top">Run&#xA0;One&#xA0;Speed&#xA0;Test&#xA0;and&#xA0;Print&#xA0;Results</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="speed_program.cpp.xml" target="_top">Example&#xA0;Use&#xA0;of&#xA0;SpeedTest</a><br/>
sacado<br/>
&#160;&#160;&#160;&#160;&#160;link<b>_</b>det<b>_</b>lu&#160;<a href="sacado_det_lu.cpp.xml#Implementation" target="_top">Sacado&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#160;Implementation</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>lu&#160;<a href="sacado_det_lu.cpp.xml" target="_top">Sacado&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>minor&#160;<a href="sacado_det_minor.cpp.xml" target="_top">Sacado&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>ode<b>&#xA0;</b>gradient&#160;<a href="sacado_ode.cpp.xml" target="_top">Sacado&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Ode&#xA0;Solution</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>polynomial&#160;<a href="sacado_poly.cpp.xml" target="_top">Sacado&#xA0;Speed:&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>test&#160;<a href="speed_sacado.xml" target="_top">Speed&#xA0;Test&#xA0;Derivatives&#xA0;Using&#xA0;Sacado</a><br/>
second<br/>
&#160;&#160;&#160;&#160;&#160;derivative&#160;<a href="hessian.xml" target="_top">Hessian:&#xA0;Easy&#xA0;Driver</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>exp<b>_</b>2&#160;<a href="exp_2_for2.cpp.xml" target="_top">exp_2:&#xA0;Verify&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>expansion&#160;<a href="exp_eps_for2.xml#Second Order Expansion" target="_top">exp_eps:&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Mode:&#160;Second&#xA0;Order&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>expansion&#160;<a href="exp_2_for2.xml#Second Order Expansion" target="_top">exp_2:&#xA0;Second&#xA0;Order&#xA0;Forward&#xA0;Mode:&#160;Second&#xA0;Order&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>partial<b>&#xA0;</b>driver&#160;<a href="revtwo.xml" target="_top">Reverse&#xA0;Mode&#xA0;Second&#xA0;Partial&#xA0;Derivative&#xA0;Driver</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>partial<b>&#xA0;</b>driver&#160;<a href="fortwo.xml" target="_top">Forward&#xA0;Mode&#xA0;Second&#xA0;Partial&#xA0;Derivative&#xA0;Driver</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>reverse&#160;<a href="exp_eps_rev2.xml" target="_top">exp_eps:&#xA0;Second&#xA0;Order&#xA0;Reverse&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>reverse&#160;<a href="exp_2_rev2.xml" target="_top">exp_2:&#xA0;Second&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>reverse<b>&#xA0;</b>mode&#160;<a href="reverse_two.xml" target="_top">Second&#xA0;Order&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;partial&#160;<a href="revtwo.cpp.xml" target="_top">Second&#xA0;Partials&#xA0;Reverse&#xA0;Driver:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;partial&#160;<a href="fortwo.cpp.xml" target="_top">Subset&#xA0;of&#xA0;Second&#xA0;Order&#xA0;Partials:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
seconds<br/>
&#160;&#160;&#160;&#160;&#160;elapsed&#160;<a href="elapsed_seconds.cpp.xml" target="_top">Elapsed&#xA0;Seconds:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;time&#160;<a href="elapsed_seconds.xml" target="_top">Returns&#xA0;Elapsed&#xA0;Number&#xA0;of&#xA0;Seconds</a><br/>
sequence&#160;<a href="glossary.xml#Operation.Sequence" target="_top">Glossary:&#160;Operation.Sequence</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun<b>&#xA0;</b>constructor&#160;<a href="funconstruct.xml#Sequence Constructor" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording:&#160;Sequence&#xA0;Constructor</a><br/>
&#160;&#160;&#160;&#160;&#160;equal<b>&#xA0;</b>operation&#160;<a href="equalopseq.xml" target="_top">Check&#xA0;if&#xA0;Equal&#xA0;and&#xA0;Correspond&#xA0;to&#xA0;Same&#xA0;Operation&#xA0;Sequence</a><br/>
&#160;&#160;&#160;&#160;&#160;example<b>&#xA0;</b>operation&#160;<a href="exp_eps_for0.xml" target="_top">exp_eps:&#xA0;Operation&#xA0;Sequence&#xA0;and&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;example<b>&#xA0;</b>operation&#160;<a href="exp_2_for0.xml" target="_top">exp_2:&#xA0;Operation&#xA0;Sequence&#xA0;and&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;operation&#160;<a href="wishlist.xml#Operation Sequence" target="_top">The&#xA0;CppAD&#xA0;Wish&#xA0;List:&#160;Operation&#xA0;Sequence</a><br/>
&#160;&#160;&#160;&#160;&#160;operation<b>&#xA0;</b>abort&#160;<a href="abort_recording.xml" target="_top">Abort&#xA0;Recording&#xA0;of&#xA0;an&#xA0;Operation&#xA0;Sequence</a><br/>
&#160;&#160;&#160;&#160;&#160;operation<b>&#xA0;</b>store&#160;<a href="dependent.xml" target="_top">Stop&#xA0;Recording&#xA0;and&#xA0;Store&#xA0;Operation&#xA0;Sequence</a><br/>
&#160;&#160;&#160;&#160;&#160;optimize<b>&#xA0;</b>operation&#160;<a href="optimize.cpp.xml" target="_top">ADFun&#xA0;Operation&#xA0;Sequence&#xA0;Optimization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;optimize<b>&#xA0;</b>operations&#160;<a href="optimize.xml" target="_top">Optimize&#xA0;the&#xA0;Tape&#xA0;Corresponding&#xA0;to&#xA0;an&#xA0;ADFun&#xA0;object</a><br/>
sets&#160;<a href="glossary.xml#Sparsity Pattern.Vector of Sets" target="_top">Glossary:&#160;Sparsity&#xA0;Pattern.Vector&#xA0;of&#xA0;Sets</a><br/>
simple<br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>_</b>ipopt<b>_</b>nlp<b>&#xA0;</b>ode<b>&#xA0;</b>representation&#160;<a href="ipopt_ode_simple.xml" target="_top">ODE&#xA0;Fitting&#xA0;Using&#xA0;Simple&#xA0;Representation</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="get_started.cpp.xml" target="_top">A&#xA0;Simple&#xA0;Program&#xA0;Using&#xA0;CppAD&#xA0;to&#xA0;Compute&#xA0;Derivatives</a><br/>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="simplevector.xml" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Simple&#xA0;Vector</a><br/>
&#160;&#160;&#160;&#160;&#160;vector<b>&#xA0;</b>check&#160;<a href="checksimplevector.xml" target="_top">Check&#xA0;Simple&#xA0;Vector&#xA0;Concept</a><br/>
&#160;&#160;&#160;&#160;&#160;vector<b>&#xA0;</b>example&#160;<a href="simplevector.cpp.xml" target="_top">Simple&#xA0;Vector&#xA0;Template&#xA0;Class:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
sin<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="std_math_ad.xml" target="_top">AD&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="sin.cpp.xml" target="_top">The&#xA0;AD&#xA0;sin&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;float<b>&#xA0;</b>and<b>&#xA0;</b>double&#160;<a href="std_math_unary.xml" target="_top">Float&#xA0;and&#xA0;Double&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;forward&#160;<a href="sincosforward.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Forward&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse&#160;<a href="sincosreverse.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Reverse&#xA0;Theory</a><br/>
sinh<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="std_math_ad.xml" target="_top">AD&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="sinh.cpp.xml" target="_top">The&#xA0;AD&#xA0;sinh&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;float<b>&#xA0;</b>and<b>&#xA0;</b>double&#160;<a href="std_math_unary.xml" target="_top">Float&#xA0;and&#xA0;Double&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;forward&#160;<a href="sincosforward.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Forward&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse&#160;<a href="sincosreverse.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Reverse&#xA0;Theory</a><br/>
size<br/>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="simplevector.xml#Size" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Simple&#xA0;Vector:&#160;Size</a><br/>
&#160;&#160;&#160;&#160;&#160;vector<b>&#xA0;</b>constructor&#160;<a href="simplevector.xml#Sizing Constructor" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Simple&#xA0;Vector:&#160;Sizing&#xA0;Constructor</a><br/>
size<b>_</b>op<br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
size<b>_</b>op<b>_</b>arg<br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
size<b>_</b>par<br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seq_property.xml#size_par" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#160;size_par</a><br/>
size<b>_</b>VecAD<br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seq_property.xml#size_VecAD" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#160;size_VecAD</a><br/>
size<b>_</b>var<br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="seq_property.xml#size_var" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#160;size_var</a><br/>
solve<br/>
&#160;&#160;&#160;&#160;&#160;Lu<b>&#xA0;</b>factor&#160;<a href="luratio.xml" target="_top">LU&#xA0;Factorization&#xA0;of&#xA0;A&#xA0;Square&#xA0;Matrix&#xA0;and&#xA0;Stability&#xA0;Calculation</a><br/>
&#160;&#160;&#160;&#160;&#160;Lu<b>&#xA0;</b>factor&#160;<a href="lufactor.xml" target="_top">LU&#xA0;Factorization&#xA0;of&#xA0;A&#xA0;Square&#xA0;Matrix</a><br/>
&#160;&#160;&#160;&#160;&#160;linear<b>&#xA0;</b>equation&#160;<a href="luvecad.xml" target="_top">Lu&#xA0;Factor&#xA0;and&#xA0;Solve&#xA0;with&#xA0;Recorded&#xA0;Pivoting</a><br/>
&#160;&#160;&#160;&#160;&#160;linear<b>&#xA0;</b>equation&#160;<a href="lusolve.xml" target="_top">Compute&#xA0;Determinant&#xA0;and&#xA0;Solve&#xA0;Linear&#xA0;Equations</a><br/>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="rosen34.xml" target="_top">A&#xA0;3rd&#xA0;and&#xA0;4th&#xA0;Order&#xA0;Rosenbrock&#xA0;ODE&#xA0;Solver</a><br/>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="runge45.xml" target="_top">An&#xA0;Embedded&#xA0;4th&#xA0;and&#xA0;5th&#xA0;Order&#xA0;Runge-Kutta&#xA0;ODE&#xA0;Solver</a><br/>
source<br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>_</b>ipopt<b>_</b>nlp<b>&#xA0;</b>ode<b>&#xA0;</b>example&#160;<a href="ipopt_ode_fast.hpp.xml" target="_top">ODE&#xA0;Fitting&#xA0;Using&#xA0;Fast&#xA0;Representation</a><br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>_</b>ipopt<b>_</b>nlp<b>&#xA0;</b>ode<b>&#xA0;</b>example&#160;<a href="ipopt_ode_simple.hpp.xml" target="_top">ODE&#xA0;Fitting&#xA0;Using&#xA0;Simple&#xA0;Representation</a><br/>
&#160;&#160;&#160;&#160;&#160;det<b>_</b>33&#160;<a href="det_33.hpp.xml" target="_top">Source:&#xA0;det_33</a><br/>
&#160;&#160;&#160;&#160;&#160;det<b>_</b>by<b>_</b>lu&#160;<a href="det_by_lu.hpp.xml" target="_top">Source:&#xA0;det_by_lu</a><br/>
&#160;&#160;&#160;&#160;&#160;det<b>_</b>by<b>_</b>minor&#160;<a href="det_by_minor.hpp.xml" target="_top">Source:&#xA0;det_by_minor</a><br/>
&#160;&#160;&#160;&#160;&#160;det<b>_</b>grad<b>_</b>33&#160;<a href="det_grad_33.hpp.xml" target="_top">Source:&#xA0;det_grad_33</a><br/>
&#160;&#160;&#160;&#160;&#160;det<b>_</b>of<b>_</b>minor&#160;<a href="det_of_minor.hpp.xml" target="_top">Source:&#xA0;det_of_minor</a><br/>
&#160;&#160;&#160;&#160;&#160;LuFactor&#160;<a href="lu_factor.hpp.xml" target="_top">Source:&#xA0;LuFactor</a><br/>
&#160;&#160;&#160;&#160;&#160;LuInvert&#160;<a href="lu_invert.hpp.xml" target="_top">Source:&#xA0;LuInvert</a><br/>
&#160;&#160;&#160;&#160;&#160;LuSolve&#160;<a href="lu_solve.hpp.xml" target="_top">Source:&#xA0;LuSolve</a><br/>
&#160;&#160;&#160;&#160;&#160;multi<b>_</b>newton&#160;<a href="multi_newton.hpp.xml" target="_top">OpenMP&#xA0;Multi-Threading&#xA0;Newton's&#xA0;Method&#xA0;Source&#xA0;Code</a><br/>
&#160;&#160;&#160;&#160;&#160;ode<b>_</b>evaluate&#160;<a href="ode_evaluate.hpp.xml" target="_top">Source:&#xA0;ode_evaluate</a><br/>
&#160;&#160;&#160;&#160;&#160;Poly&#160;<a href="poly.hpp.xml" target="_top">Source:&#xA0;Poly</a><br/>
&#160;&#160;&#160;&#160;&#160;sparse<b>_</b>evaluate&#160;<a href="sparse_evaluate.hpp.xml" target="_top">Source:&#xA0;sparse_evaluate</a><br/>
&#160;&#160;&#160;&#160;&#160;uniform<b>_</b>01&#160;<a href="uniform_01.hpp.xml" target="_top">Source:&#xA0;uniform_01</a><br/>
spare<br/>
&#160;&#160;&#160;&#160;&#160;Hessian<b>&#xA0;</b>example&#160;<a href="sparse_hessian.cpp.xml" target="_top">Sparse&#xA0;Hessian:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Jacobian<b>&#xA0;</b>example&#160;<a href="sparse_jacobian.cpp.xml" target="_top">Sparse&#xA0;Jacobian:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
sparse<br/>
&#160;&#160;&#160;&#160;&#160;Hessian<b>&#xA0;</b>speed<b>&#xA0;</b>adolc&#160;<a href="adolc_sparse_hessian.cpp.xml" target="_top">Adolc&#xA0;Speed:&#xA0;Sparse&#xA0;Hessian</a><br/>
&#160;&#160;&#160;&#160;&#160;Hessian<b>&#xA0;</b>speed<b>&#xA0;</b>cppad&#160;<a href="cppad_sparse_hessian.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Sparse&#xA0;Hessian</a><br/>
&#160;&#160;&#160;&#160;&#160;hessian<b>&#xA0;</b>speed<b>&#xA0;</b>double&#160;<a href="double_sparse_hessian.cpp.xml" target="_top">Double&#xA0;Speed:&#xA0;Sparse&#xA0;Hessian</a><br/>
&#160;&#160;&#160;&#160;&#160;Jacobian<b>&#xA0;</b>speed<b>&#xA0;</b>cppad&#160;<a href="cppad_sparse_jacobian.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Sparse&#xA0;Jacobian</a><br/>
&#160;&#160;&#160;&#160;&#160;jacobian<b>&#xA0;</b>speed<b>&#xA0;</b>double&#160;<a href="double_sparse_jacobian.cpp.xml" target="_top">Double&#xA0;Speed:&#xA0;Sparse&#xA0;Jacobian</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>Hessian&#160;<a href="revsparsehes.xml" target="_top">Hessian&#xA0;Sparsity&#xA0;Pattern:&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>Jacobian&#160;<a href="revsparsejac.xml" target="_top">Jacobian&#xA0;Sparsity&#xA0;Pattern:&#xA0;Reverse&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>test&#160;<a href="link_sparse_jacobian.xml" target="_top">Speed&#xA0;Testing&#xA0;Sparse&#xA0;Jacobian</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>test&#160;<a href="link_sparse_hessian.xml" target="_top">Speed&#xA0;Testing&#xA0;Sparse&#xA0;Hessian</a><br/>
sparse<b>_</b>evaluate<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="sparse_evaluate.cpp.xml" target="_top">sparse_evaluate:&#xA0;Example&#xA0;and&#xA0;test</a><br/>
&#160;&#160;&#160;&#160;&#160;function&#160;<a href="sparse_evaluate.xml" target="_top">Evaluate&#xA0;a&#xA0;Function&#xA0;That&#xA0;Has&#xA0;a&#xA0;Sparse&#xA0;Hessian</a><br/>
&#160;&#160;&#160;&#160;&#160;source&#160;<a href="sparse_evaluate.hpp.xml" target="_top">Source:&#xA0;sparse_evaluate</a><br/>
sparsity&#160;<a href="glossary.xml#Sparsity Pattern" target="_top">Glossary:&#160;Sparsity&#xA0;Pattern</a><br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>example&#160;<a href="forsparsejac.cpp.xml" target="_top">Forward&#xA0;Mode&#xA0;Jacobian&#xA0;Sparsity:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>Jacobian&#160;<a href="forsparsejac.xml" target="_top">Jacobian&#xA0;Sparsity&#xA0;Pattern:&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;Hessian&#160;<a href="revsparsehes.cpp.xml" target="_top">Reverse&#xA0;Mode&#xA0;Hessian&#xA0;Sparsity:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;pattern&#160;<a href="glossary.xml#Sparsity Pattern" target="_top">Glossary:&#160;Sparsity&#xA0;Pattern</a><br/>
&#160;&#160;&#160;&#160;&#160;pattern&#160;<a href="sparse.xml" target="_top">Calculating&#xA0;Sparsity&#xA0;Patterns</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>example&#160;<a href="revsparsejac.cpp.xml" target="_top">Reverse&#xA0;Mode&#xA0;Jacobian&#xA0;Sparsity:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
speed&#160;<a href="faq.xml#Speed" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Speed</a><br/>
&#160;&#160;&#160;&#160;&#160;adolc<b>&#xA0;</b>lu&#160;<a href="adolc_det_lu.cpp.xml" target="_top">Adolc&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;adolc<b>&#xA0;</b>minor&#160;<a href="adolc_det_minor.cpp.xml" target="_top">Adolc&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;adolc<b>&#xA0;</b>polynomial&#160;<a href="adolc_poly.cpp.xml" target="_top">Adolc&#xA0;Speed:&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial</a><br/>
&#160;&#160;&#160;&#160;&#160;adolc<b>&#xA0;</b>sparse<b>&#xA0;</b>Hessian&#160;<a href="adolc_sparse_hessian.cpp.xml" target="_top">Adolc&#xA0;Speed:&#xA0;Sparse&#xA0;Hessian</a><br/>
&#160;&#160;&#160;&#160;&#160;avoid<b>&#xA0;</b>taping&#160;<a href="faq.xml#Independent Variables" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Independent&#xA0;Variables</a><br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&#xA0;</b>check<b>&#xA0;</b>test&#160;<a href="installunix.xml#Speed Testing.CppAD Derivative Speed Tests" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Speed&#xA0;Testing.CppAD&#xA0;Derivative&#xA0;Speed&#xA0;Tests</a><br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>&#xA0;</b>lu&#160;<a href="cppad_det_lu.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>&#xA0;</b>minor&#160;<a href="cppad_det_minor.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>&#xA0;</b>minor&#160;<a href="double_det_minor.cpp.xml" target="_top">Double&#xA0;Speed:&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>&#xA0;</b>ode<b>&#xA0;</b>jacobian&#160;<a href="cppad_ode.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Ode&#xA0;Solution</a><br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>&#xA0;</b>polynomial&#160;<a href="cppad_poly.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial</a><br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>&#xA0;</b>polynomial&#160;<a href="double_poly.cpp.xml" target="_top">Double&#xA0;Speed:&#xA0;Evaluate&#xA0;a&#xA0;Polynomial</a><br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>&#xA0;</b>sparse<b>&#xA0;</b>Hessian&#160;<a href="cppad_sparse_hessian.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Sparse&#xA0;Hessian</a><br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>&#xA0;</b>sparse<b>&#xA0;</b>Jacobian&#160;<a href="cppad_sparse_jacobian.cpp.xml" target="_top">CppAD&#xA0;Speed:&#xA0;Sparse&#xA0;Jacobian</a><br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>&#xA0;</b>test&#160;<a href="installwindows.xml#CppAD Speed Test" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;CppAD&#xA0;Speed&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;double<b>&#xA0;</b>lu&#160;<a href="double_det_lu.cpp.xml#Specifications" target="_top">Double&#xA0;Speed:&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#160;Specifications</a><br/>
&#160;&#160;&#160;&#160;&#160;double<b>&#xA0;</b>ode&#160;<a href="double_ode.cpp.xml" target="_top">Double&#xA0;Speed:&#xA0;Ode&#xA0;Solution</a><br/>
&#160;&#160;&#160;&#160;&#160;double<b>&#xA0;</b>sparse<b>&#xA0;</b>hessian&#160;<a href="double_sparse_hessian.cpp.xml" target="_top">Double&#xA0;Speed:&#xA0;Sparse&#xA0;Hessian</a><br/>
&#160;&#160;&#160;&#160;&#160;double<b>&#xA0;</b>sparse<b>&#xA0;</b>jacobian&#160;<a href="double_sparse_jacobian.cpp.xml" target="_top">Double&#xA0;Speed:&#xA0;Sparse&#xA0;Jacobian</a><br/>
&#160;&#160;&#160;&#160;&#160;double<b>&#xA0;</b>test&#160;<a href="installwindows.xml#Double Speed Test" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;Double&#xA0;Speed&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;example<b>&#xA0;</b>program&#160;<a href="speed_example.cpp.xml" target="_top">Program&#xA0;That&#xA0;Runs&#xA0;the&#xA0;Speed&#xA0;Examples</a><br/>
&#160;&#160;&#160;&#160;&#160;fadbad<b>&#xA0;</b>lu&#160;<a href="fadbad_det_lu.cpp.xml" target="_top">Fadbad&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;fadbad<b>&#xA0;</b>minor&#160;<a href="fadbad_det_minor.cpp.xml" target="_top">Fadbad&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;fadbad<b>&#xA0;</b>polynomial&#160;<a href="fadbad_poly.cpp.xml" target="_top">Fadbad&#xA0;Speed:&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial</a><br/>
&#160;&#160;&#160;&#160;&#160;function<b>&#xA0;</b>check<b>&#xA0;</b>test&#160;<a href="installunix.xml#Speed Testing.Function Speed Tests" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Speed&#xA0;Testing.Function&#xA0;Speed&#xA0;Tests</a><br/>
&#160;&#160;&#160;&#160;&#160;optimize&#160;<a href="optimize.xml" target="_top">Optimize&#xA0;the&#xA0;Tape&#xA0;Corresponding&#xA0;to&#xA0;an&#xA0;ADFun&#xA0;object</a><br/>
&#160;&#160;&#160;&#160;&#160;profile<b>&#xA0;</b>cppad&#160;<a href="installunix.xml#Profiling CppAD" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Profiling&#xA0;CppAD</a><br/>
&#160;&#160;&#160;&#160;&#160;sacado<b>&#xA0;</b>lu&#160;<a href="sacado_det_lu.cpp.xml" target="_top">Sacado&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;sacado<b>&#xA0;</b>minor&#160;<a href="sacado_det_minor.cpp.xml" target="_top">Sacado&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;sacado<b>&#xA0;</b>ode<b>&#xA0;</b>gradient&#160;<a href="sacado_ode.cpp.xml" target="_top">Sacado&#xA0;Speed:&#xA0;Gradient&#xA0;of&#xA0;Ode&#xA0;Solution</a><br/>
&#160;&#160;&#160;&#160;&#160;sacado<b>&#xA0;</b>polynomial&#160;<a href="sacado_poly.cpp.xml" target="_top">Sacado&#xA0;Speed:&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial</a><br/>
&#160;&#160;&#160;&#160;&#160;test&#160;<a href="speed.xml" target="_top">Speed&#xA0;Test&#xA0;Routines</a><br/>
&#160;&#160;&#160;&#160;&#160;test<b>&#xA0;</b>adolc&#160;<a href="speed_adolc.xml" target="_top">Speed&#xA0;Test&#xA0;Derivatives&#xA0;Using&#xA0;Adolc</a><br/>
&#160;&#160;&#160;&#160;&#160;test<b>&#xA0;</b>cppad&#160;<a href="speed_cppad.xml" target="_top">Speed&#xA0;Test&#xA0;Derivatives&#xA0;Using&#xA0;CppAD</a><br/>
&#160;&#160;&#160;&#160;&#160;test<b>&#xA0;</b>cppad&#160;<a href="speed_main.xml" target="_top">Speed&#xA0;Testing&#xA0;Main&#xA0;Program</a><br/>
&#160;&#160;&#160;&#160;&#160;test<b>&#xA0;</b>det<b>_</b>lu&#160;<a href="link_det_lu.xml" target="_top">Speed&#xA0;Testing&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;test<b>&#xA0;</b>det<b>_</b>minor&#160;<a href="link_det_minor.xml" target="_top">Speed&#xA0;Testing&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;test<b>&#xA0;</b>double&#160;<a href="speed_double.xml" target="_top">Speed&#xA0;Test&#xA0;Functions&#xA0;in&#xA0;Double</a><br/>
&#160;&#160;&#160;&#160;&#160;test<b>&#xA0;</b>fadbad&#160;<a href="speed_fadbad.xml" target="_top">Speed&#xA0;Test&#xA0;Derivatives&#xA0;Using&#xA0;Fadbad</a><br/>
&#160;&#160;&#160;&#160;&#160;test<b>&#xA0;</b>ode&#160;<a href="link_ode.xml" target="_top">Speed&#xA0;Testing&#xA0;the&#xA0;Jacobian&#xA0;of&#xA0;Ode&#xA0;Solution</a><br/>
&#160;&#160;&#160;&#160;&#160;test<b>&#xA0;</b>polynomial&#160;<a href="link_poly.xml" target="_top">Speed&#xA0;Testing&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial</a><br/>
&#160;&#160;&#160;&#160;&#160;test<b>&#xA0;</b>sacado&#160;<a href="speed_sacado.xml" target="_top">Speed&#xA0;Test&#xA0;Derivatives&#xA0;Using&#xA0;Sacado</a><br/>
&#160;&#160;&#160;&#160;&#160;test<b>&#xA0;</b>sparse&#160;<a href="link_sparse_jacobian.xml" target="_top">Speed&#xA0;Testing&#xA0;Sparse&#xA0;Jacobian</a><br/>
&#160;&#160;&#160;&#160;&#160;test<b>&#xA0;</b>sparse&#160;<a href="link_sparse_hessian.xml" target="_top">Speed&#xA0;Testing&#xA0;Sparse&#xA0;Hessian</a><br/>
&#160;&#160;&#160;&#160;&#160;test<b>&#xA0;</b>windows&#160;<a href="speed.xml#Windows" target="_top">Speed&#xA0;Test&#xA0;Routines:&#160;Windows</a><br/>
&#160;&#160;&#160;&#160;&#160;utility&#160;<a href="speed_utility.xml" target="_top">Speed&#xA0;Testing&#xA0;Utilities</a><br/>
&#160;&#160;&#160;&#160;&#160;utility<b>&#xA0;</b>example&#160;<a href="installwindows.xml#Speed Utility Example" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;Speed&#xA0;Utility&#xA0;Example</a><br/>
&#160;&#160;&#160;&#160;&#160;utility<b>&#xA0;</b>example&#160;<a href="installunix.xml#Speed Testing.Examples For Speed Tests" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Speed&#xA0;Testing.Examples&#xA0;For&#xA0;Speed&#xA0;Tests</a><br/>
speed<b>_</b>test&#160;<a href="speed_test.xml" target="_top">Run&#xA0;One&#xA0;Speed&#xA0;Test&#xA0;and&#xA0;Return&#xA0;Results</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="speed_test.cpp.xml" target="_top">speed_test:&#xA0;Example&#xA0;and&#xA0;test</a><br/>
sqrt<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="std_math_ad.xml" target="_top">AD&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="sqrt.cpp.xml" target="_top">The&#xA0;AD&#xA0;sqrt&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;float<b>&#xA0;</b>and<b>&#xA0;</b>double&#160;<a href="std_math_unary.xml" target="_top">Float&#xA0;and&#xA0;Double&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;forward<b>&#xA0;</b>theory&#160;<a href="sqrtforward.xml" target="_top">Square&#xA0;Root&#xA0;Function&#xA0;Forward&#xA0;Taylor&#xA0;Polynomial&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>theory&#160;<a href="sqrtreverse.xml" target="_top">Square&#xA0;Root&#xA0;Function&#xA0;Reverse&#xA0;Mode&#xA0;Theory</a><br/>
standard<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>math<b>&#xA0;</b>unary&#160;<a href="std_math_ad.xml" target="_top">AD&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;math<b>&#xA0;</b>function&#160;<a href="faq.xml#Namespace.Using" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Namespace.Using</a><br/>
&#160;&#160;&#160;&#160;&#160;math<b>&#xA0;</b>unary&#160;<a href="std_math_unary.xml" target="_top">Float&#xA0;and&#xA0;Double&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
start<br/>
&#160;&#160;&#160;&#160;&#160;recording&#160;<a href="independent.xml" target="_top">Declare&#xA0;Independent&#xA0;Variables&#xA0;and&#xA0;Start&#xA0;Recording</a><br/>
&#160;&#160;&#160;&#160;&#160;using<b>&#xA0;</b>CppAD&#160;<a href="get_started.cpp.xml" target="_top">A&#xA0;Simple&#xA0;Program&#xA0;Using&#xA0;CppAD&#xA0;to&#xA0;Compute&#xA0;Derivatives</a><br/>
std<b>::</b>vector<br/>
&#160;&#160;&#160;&#160;&#160;unix&#160;<a href="installunix.xml#--with-stdvector" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;--with-stdvector</a><br/>
stiff<br/>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="rosen34.xml" target="_top">A&#xA0;3rd&#xA0;and&#xA0;4th&#xA0;Order&#xA0;Rosenbrock&#xA0;ODE&#xA0;Solver</a><br/>
&#160;&#160;&#160;&#160;&#160;Ode&#160;<a href="odegear.xml" target="_top">An&#xA0;Arbitrary&#xA0;Order&#xA0;Gear&#xA0;Method</a><br/>
&#160;&#160;&#160;&#160;&#160;ode&#160;<a href="odestiff.cpp.xml" target="_top">A&#xA0;Stiff&#xA0;Ode:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
storage<br/>
&#160;&#160;&#160;&#160;&#160;tape&#160;<a href="faq.xml#Tape Storage: Disk or Memory" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Tape&#xA0;Storage:&#xA0;Disk&#xA0;or&#xA0;Memory</a><br/>
stream<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>output&#160;<a href="output.xml" target="_top">AD&#xA0;Output&#xA0;Stream&#xA0;Operator</a><br/>
subtract<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="sub.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Subtraction:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;binary<b>&#xA0;</b>operator&#160;<a href="ad_binary.xml" target="_top">AD&#xA0;Binary&#xA0;Arithmetic&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;computed<b>&#xA0;</b>assignment&#160;<a href="compute_assign.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Operators</a><br/>
subversion<br/>
&#160;&#160;&#160;&#160;&#160;download&#160;<a href="subversion.xml" target="_top">Using&#xA0;Subversion&#xA0;To&#xA0;Download&#xA0;Source&#xA0;Code</a><br/>
symbol<br/>
&#160;&#160;&#160;&#160;&#160;configure&#160;<a href="configure.xml" target="_top">Preprocessor&#xA0;Definitions&#xA0;Used&#xA0;by&#xA0;CppAD</a><br/>
&#160;&#160;&#160;&#160;&#160;preprocessor<b>&#xA0;</b>CppAD&#160;<a href="cppad.xml#Preprocessor Symbols" target="_top">cppad-20100325:&#xA0;A&#xA0;Package&#xA0;for&#xA0;Differentiation&#xA0;of&#xA0;C++&#xA0;Algorithms:&#160;Preprocessor&#xA0;Symbols</a><br/>
&#160;&#160;&#160;&#160;&#160;processor&#160;<a href="configure.xml#Preprocessor Symbols" target="_top">Preprocessor&#xA0;Definitions&#xA0;Used&#xA0;by&#xA0;CppAD:&#160;Preprocessor&#xA0;Symbols</a><br/>
symbols<br/>
&#160;&#160;&#160;&#160;&#160;preprocessor&#160;<a href="faq.xml#Namespace.Test Vector Preprocessor Symbol" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Namespace.Test&#xA0;Vector&#xA0;Preprocessor&#xA0;Symbol</a><br/>

<b><big><a name="T">T</a></big></b>
<br/>
Taylor<br/>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="ode_taylor.cpp.xml" target="_top">Taylor's&#xA0;Ode&#xA0;Solver:&#xA0;An&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ODE<b>&#xA0;</b>Adolc&#160;<a href="ode_taylor_adolc.cpp.xml" target="_top">Using&#xA0;Adolc&#xA0;with&#xA0;Taylor's&#xA0;Ode&#xA0;Solver:&#xA0;An&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
TrackCount&#160;<a href="tracknewdel.xml#TrackCount" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#160;TrackCount</a><br/>
&#160;&#160;&#160;&#160;&#160;OpenMP&#160;<a href="tracknewdel.xml#TrackCount.OpenMP" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#160;TrackCount.OpenMP</a><br/>
TrackDelVec&#160;<a href="tracknewdel.xml#TrackDelVec" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#160;TrackDelVec</a><br/>
TrackExtend&#160;<a href="tracknewdel.xml#TrackExtend" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#160;TrackExtend</a><br/>
TrackNewDel<br/>
&#160;&#160;&#160;&#160;&#160;OpenMP&#160;<a href="tracknewdel.xml#oldptr.OpenMP" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#160;oldptr.OpenMP</a><br/>
TrackNewVec&#160;<a href="tracknewdel.xml#TrackNewVec" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#160;TrackNewVec</a><br/>
tan<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="std_math_ad.xml" target="_top">AD&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>inverse&#160;<a href="atan2.xml" target="_top">AD&#xA0;Two&#xA0;Argument&#xA0;Inverse&#xA0;Tangent&#xA0;Function</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="tan.cpp.xml" target="_top">The&#xA0;AD&#xA0;tan&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;float<b>&#xA0;</b>and<b>&#xA0;</b>double&#160;<a href="std_math_unary.xml" target="_top">Float&#xA0;and&#xA0;Double&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
tanh<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="std_math_ad.xml" target="_top">AD&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="tanh.cpp.xml" target="_top">The&#xA0;AD&#xA0;tanh&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;float<b>&#xA0;</b>and<b>&#xA0;</b>double&#160;<a href="std_math_unary.xml" target="_top">Float&#xA0;and&#xA0;Double&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
tape&#160;<a href="glossary.xml#Tape" target="_top">Glossary:&#160;Tape</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>index&#160;<a href="vecad.xml" target="_top">AD&#xA0;Vectors&#xA0;that&#xA0;Record&#xA0;Index&#xA0;Operations</a><br/>
&#160;&#160;&#160;&#160;&#160;abort<b>&#xA0;</b>recording&#160;<a href="abort_recording.xml" target="_top">Abort&#xA0;Recording&#xA0;of&#xA0;an&#xA0;Operation&#xA0;Sequence</a><br/>
&#160;&#160;&#160;&#160;&#160;array<b>&#xA0;</b>index<b>&#xA0;</b>operation&#160;<a href="tapeindex.cpp.xml" target="_top">Taping&#xA0;Array&#xA0;Index&#xA0;Operation:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;avoid&#160;<a href="faq.xml#Independent Variables" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Independent&#xA0;Variables</a><br/>
&#160;&#160;&#160;&#160;&#160;interpolate&#160;<a href="interp_retape.cpp.xml" target="_top">Interpolation&#xA0;With&#xA0;Retaping:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;interpolate&#160;<a href="interp_onetape.cpp.xml" target="_top">Interpolation&#xA0;With&#xA0;Out&#xA0;Retaping:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;optimize&#160;<a href="optimize.xml" target="_top">Optimize&#xA0;the&#xA0;Tape&#xA0;Corresponding&#xA0;to&#xA0;an&#xA0;ADFun&#xA0;object</a><br/>
&#160;&#160;&#160;&#160;&#160;stop<b>&#xA0;</b>recording&#160;<a href="dependent.xml" target="_top">Stop&#xA0;Recording&#xA0;and&#xA0;Store&#xA0;Operation&#xA0;Sequence</a><br/>
&#160;&#160;&#160;&#160;&#160;stop<b>&#xA0;</b>recording&#160;<a href="funconstruct.xml" target="_top">Construct&#xA0;an&#xA0;ADFun&#xA0;Object&#xA0;and&#xA0;Stop&#xA0;Recording</a><br/>
&#160;&#160;&#160;&#160;&#160;storage&#160;<a href="faq.xml#Tape Storage: Disk or Memory" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Tape&#xA0;Storage:&#xA0;Disk&#xA0;or&#xA0;Memory</a><br/>
taping<br/>
&#160;&#160;&#160;&#160;&#160;Value<b>&#xA0;</b>during&#160;<a href="var2par.cpp.xml" target="_top">Convert&#xA0;an&#xA0;AD&#xA0;Variable&#xA0;to&#xA0;a&#xA0;Parameter:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
tar<br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&#xA0;</b>file&#160;<a href="installunix.xml#Download.Unix Tar Files" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Download.Unix&#xA0;Tar&#xA0;Files</a><br/>
taylor&#160;<a href="glossary.xml#Taylor Coefficient" target="_top">Glossary:&#160;Taylor&#xA0;Coefficient</a><br/>
taylor<b>_</b>size<br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="fundeprecated.xml#taylor_size" target="_top">ADFun&#xA0;Object&#xA0;Deprecated&#xA0;Member&#xA0;Functions:&#160;taylor_size</a><br/>
template<br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&#xA0;</b>vector<b>&#xA0;</b>class&#160;<a href="cppad_vector.xml" target="_top">The&#xA0;CppAD::vector&#xA0;Template&#xA0;Class</a><br/>
&#160;&#160;&#160;&#160;&#160;numerical<b>&#xA0;</b>C<b>++&#xA0;</b>library&#160;<a href="library.xml" target="_top">The&#xA0;CppAD&#xA0;General&#xA0;Purpose&#xA0;Library</a><br/>
&#160;&#160;&#160;&#160;&#160;polynomial<b>&#xA0;</b>derivative&#160;<a href="poly.xml" target="_top">Evaluate&#xA0;a&#xA0;Polynomial&#xA0;or&#xA0;its&#xA0;Derivative</a><br/>
&#160;&#160;&#160;&#160;&#160;simple<b>&#xA0;</b>vector<b>&#xA0;</b>class&#160;<a href="simplevector.xml" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Simple&#xA0;Vector</a><br/>
test&#160;<a href="install.xml" target="_top">CppAD&#xA0;Download,&#xA0;Test,&#xA0;and&#xA0;Installation&#xA0;Instructions</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>acos&#160;<a href="acos.cpp.xml" target="_top">The&#xA0;AD&#xA0;acos&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>add&#160;<a href="add.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Addition:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>asin&#160;<a href="asin.cpp.xml" target="_top">The&#xA0;AD&#xA0;asin&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>assignment&#160;<a href="eq.cpp.xml" target="_top">AD&#xA0;Assignment&#xA0;Operator:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>atan&#160;<a href="atan.cpp.xml" target="_top">The&#xA0;AD&#xA0;atan&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>atan2&#160;<a href="atan2.cpp.xml" target="_top">The&#xA0;AD&#xA0;atan2&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>bool&#160;<a href="boolfun.cpp.xml" target="_top">AD&#xA0;Boolean&#xA0;Functions:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>compare&#160;<a href="compare.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Comparison&#xA0;Operators:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>computed<b>&#xA0;</b>assignment<b>&#xA0;</b>add&#160;<a href="addeq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Addition:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>computed<b>&#xA0;</b>assignment<b>&#xA0;</b>divide&#160;<a href="diveq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Division:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>computed<b>&#xA0;</b>assignment<b>&#xA0;</b>multiply&#160;<a href="muleq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Multiplication:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>computed<b>&#xA0;</b>assignment<b>&#xA0;</b>subtract&#160;<a href="subeq.cpp.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Subtraction:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>cos&#160;<a href="cos.cpp.xml" target="_top">The&#xA0;AD&#xA0;cos&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>cosh&#160;<a href="cosh.cpp.xml" target="_top">The&#xA0;AD&#xA0;cosh&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>divide&#160;<a href="div.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Division:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>exp&#160;<a href="exp.cpp.xml" target="_top">The&#xA0;AD&#xA0;exp&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>log&#160;<a href="log.cpp.xml" target="_top">The&#xA0;AD&#xA0;log&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>log10&#160;<a href="log10.cpp.xml" target="_top">The&#xA0;AD&#xA0;log10&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>multiply&#160;<a href="mul.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Multiplication:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>output&#160;<a href="output.cpp.xml" target="_top">AD&#xA0;Output&#xA0;Operator:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>pow&#160;<a href="pow.cpp.xml" target="_top">The&#xA0;AD&#xA0;Power&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>sin&#160;<a href="sin.cpp.xml" target="_top">The&#xA0;AD&#xA0;sin&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>sinh&#160;<a href="sinh.cpp.xml" target="_top">The&#xA0;AD&#xA0;sinh&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>sqrt&#160;<a href="sqrt.cpp.xml" target="_top">The&#xA0;AD&#xA0;sqrt&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="ad_fun.cpp.xml" target="_top">Creating&#xA0;Your&#xA0;Own&#xA0;Interface&#xA0;to&#xA0;an&#xA0;ADFun&#xA0;Object</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="funcheck.cpp.xml" target="_top">ADFun&#xA0;Check&#xA0;and&#xA0;Re-Tape:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ADFun<b>&#xA0;</b>default<b>&#xA0;</b>constructor&#160;<a href="heslagrangian.cpp.xml" target="_top">Hessian&#xA0;of&#xA0;Lagrangian&#xA0;and&#xA0;&#xA0;ADFun&#xA0;Default&#xA0;Constructor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;abort&#160;<a href="abort_recording.cpp.xml" target="_top">Abort&#xA0;Current&#xA0;Recording:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;abs&#160;<a href="abs.cpp.xml" target="_top">AD&#xA0;Absolute&#xA0;Value&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;adolc<b>&#xA0;</b>speed&#160;<a href="speed_adolc.xml" target="_top">Speed&#xA0;Test&#xA0;Derivatives&#xA0;Using&#xA0;Adolc</a><br/>
&#160;&#160;&#160;&#160;&#160;BenderQuad&#160;<a href="benderquad.cpp.xml" target="_top">BenderQuad:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;C<b>&#xA0;</b>AD&#160;<a href="ad_in_c.cpp.xml" target="_top">Example&#xA0;and&#xA0;Test&#xA0;Linking&#xA0;CppAD&#xA0;to&#xA0;Languages&#xA0;Other&#xA0;than&#xA0;C++</a><br/>
&#160;&#160;&#160;&#160;&#160;CompareChange&#160;<a href="comparechange.cpp.xml" target="_top">CompareChange&#xA0;and&#xA0;Re-Tape:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;CondExp&#160;<a href="condexp.cpp.xml" target="_top">Conditional&#xA0;Expressions:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>::</b>vector&#160;<a href="cppad_vector.cpp.xml" target="_top">CppAD::vector&#xA0;Template&#xA0;Class:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>::</b>vectorBool&#160;<a href="vectorbool.cpp.xml" target="_top">CppAD::vectorBool&#xA0;Class:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;check<b>&#xA0;</b>NumericType&#160;<a href="checknumerictype.cpp.xml" target="_top">The&#xA0;CheckNumericType&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;check<b>&#xA0;</b>SimpleVector&#160;<a href="checksimplevector.cpp.xml" target="_top">The&#xA0;CheckSimpleVector&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;checkpoint&#160;<a href="checkpoint.cpp.xml" target="_top">Checkpoint&#xA0;and&#xA0;Function&#xA0;Composition:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;complex&#160;<a href="lusolve.cpp.xml" target="_top">LuSolve&#xA0;With&#xA0;Complex&#xA0;Arguments:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;complex<b>&#xA0;</b>polynomial&#160;<a href="complexpoly.cpp.xml" target="_top">Complex&#xA0;Polynomial:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;composition&#160;<a href="reverse_any.cpp.xml" target="_top">Reverse&#xA0;Mode&#xA0;General&#xA0;Case:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;construct<b>&#xA0;</b>from<b>&#xA0;</b>base&#160;<a href="copybase.cpp.xml" target="_top">AD&#xA0;Constructor&#xA0;From&#xA0;Base&#xA0;Type:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;copy<b>&#xA0;</b>AD<b>&#xA0;</b>object&#160;<a href="copyad.cpp.xml" target="_top">AD&#xA0;Copy&#xA0;Constructor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>&#xA0;</b>speed&#160;<a href="speed_cppad.xml" target="_top">Speed&#xA0;Test&#xA0;Derivatives&#xA0;Using&#xA0;CppAD</a><br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>&#xA0;</b>speed&#160;<a href="speed_main.xml" target="_top">Speed&#xA0;Testing&#xA0;Main&#xA0;Program</a><br/>
&#160;&#160;&#160;&#160;&#160;cppad<b>&#xA0;</b>speed&#160;<a href="installwindows.xml#CppAD Speed Test" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;CppAD&#xA0;Speed&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Dependent&#160;<a href="funcheck.cpp.xml" target="_top">ADFun&#xA0;Check&#xA0;and&#xA0;Re-Tape:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Domain&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;default<b>&#xA0;</b>AD<b>&#xA0;</b>construct&#160;<a href="default.cpp.xml" target="_top">Default&#xA0;AD&#xA0;Constructor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;delete&#160;<a href="tracknewdel.cpp.xml" target="_top">Tracking&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;derivative&#160;<a href="revone.cpp.xml" target="_top">First&#xA0;Order&#xA0;Derivative&#xA0;Driver:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;det<b>_</b>lu<b>&#xA0;</b>speed&#160;<a href="link_det_lu.xml" target="_top">Speed&#xA0;Testing&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization</a><br/>
&#160;&#160;&#160;&#160;&#160;det<b>_</b>minor<b>&#xA0;</b>speed&#160;<a href="link_det_minor.xml" target="_top">Speed&#xA0;Testing&#xA0;Gradient&#xA0;of&#xA0;Determinant&#xA0;by&#xA0;Minor&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;det<b>_</b>of<b>_</b>minor&#160;<a href="det_of_minor.cpp.xml" target="_top">Determinant&#xA0;of&#xA0;a&#xA0;Minor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;determinant<b>&#xA0;</b>by<b>&#xA0;</b>minors&#160;<a href="det_by_lu.cpp.xml" target="_top">Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;determinant<b>&#xA0;</b>by<b>&#xA0;</b>minors&#160;<a href="det_by_minor.cpp.xml" target="_top">Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;double<b>&#xA0;</b>speed&#160;<a href="speed_double.xml" target="_top">Speed&#xA0;Test&#xA0;Functions&#xA0;in&#xA0;Double</a><br/>
&#160;&#160;&#160;&#160;&#160;double<b>&#xA0;</b>speed&#160;<a href="installwindows.xml#Double Speed Test" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;Double&#xA0;Speed&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;EqualOpSeq&#160;<a href="equalopseq.cpp.xml" target="_top">EqualOpSeq:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;erf&#160;<a href="erf.cpp.xml" target="_top">The&#xA0;AD&#xA0;erf&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;error<b>&#xA0;</b>handler&#160;<a href="errorhandler.cpp.xml" target="_top">Replacing&#xA0;The&#xA0;CppAD&#xA0;Error&#xA0;Handler:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;exception&#160;<a href="faq.xml#Exceptions" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Exceptions</a><br/>
&#160;&#160;&#160;&#160;&#160;exp<b>_</b>2&#160;<a href="exp_2.cpp.xml" target="_top">exp_2:&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;exp<b>_</b>apx<b>&#xA0;</b>main&#160;<a href="exp_apx_main.cpp.xml" target="_top">Run&#xA0;the&#xA0;exp_2&#xA0;and&#xA0;exp_eps&#xA0;Tests</a><br/>
&#160;&#160;&#160;&#160;&#160;exp<b>_</b>eps&#160;<a href="exp_eps.cpp.xml" target="_top">exp_eps:&#xA0;Test&#xA0;of&#xA0;exp_eps</a><br/>
&#160;&#160;&#160;&#160;&#160;Forward&#160;<a href="forward.cpp.xml" target="_top">Forward&#xA0;Mode:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;FunCheck&#160;<a href="funcheck.cpp.xml" target="_top">ADFun&#xA0;Check&#xA0;and&#xA0;Re-Tape:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;fadbad<b>&#xA0;</b>speed&#160;<a href="speed_fadbad.xml" target="_top">Speed&#xA0;Test&#xA0;Derivatives&#xA0;Using&#xA0;Fadbad</a><br/>
&#160;&#160;&#160;&#160;&#160;first<b>&#xA0;</b>order<b>&#xA0;</b>reverse&#160;<a href="reverse_one.cpp.xml" target="_top">First&#xA0;Order&#xA0;Reverse&#xA0;Mode:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;general<b>&#xA0;</b>reverse&#160;<a href="reverse_any.cpp.xml" target="_top">Reverse&#xA0;Mode&#xA0;General&#xA0;Case:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="jacludet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="jacminordet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="hesludet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;LU&#xA0;Factorization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;gradient&#160;<a href="hesminordet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Hessian&#160;<a href="hessian.cpp.xml" target="_top">Hessian:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Hessian<b>&#xA0;</b>of<b>&#xA0;</b>Lagrangian&#160;<a href="heslagrangian.cpp.xml" target="_top">Hessian&#xA0;of&#xA0;Lagrangian&#xA0;and&#xA0;&#xA0;ADFun&#xA0;Default&#xA0;Constructor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Independent&#160;<a href="independent.cpp.xml" target="_top">Independent&#xA0;and&#xA0;ADFun&#xA0;Constructor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Integer&#160;<a href="integer.cpp.xml" target="_top">Convert&#xA0;From&#xA0;AD&#xA0;to&#xA0;Integer:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;interpreter&#160;<a href="stackmachine.cpp.xml" target="_top">Example&#xA0;Differentiating&#xA0;a&#xA0;Stack&#xA0;Machine&#xA0;Interpreter</a><br/>
&#160;&#160;&#160;&#160;&#160;Jacobian&#160;<a href="jacobian.cpp.xml" target="_top">Jacobian:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;LU&#160;<a href="hesludet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;LU&#xA0;Factorization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Lu&#160;<a href="jacludet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Lu&#xA0;Factorization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Lu<b>&#xA0;</b>record<b>&#xA0;</b>pivot&#160;<a href="luvecadok.cpp.xml" target="_top">Lu&#xA0;Factor&#xA0;and&#xA0;Solve&#xA0;With&#xA0;Recorded&#xA0;Pivoting:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;LuFactor&#160;<a href="lufactor.cpp.xml" target="_top">LuFactor:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;LuInvert&#160;<a href="luinvert.cpp.xml" target="_top">LuInvert:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;LuRatio&#160;<a href="luratio.cpp.xml" target="_top">LuRatio:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;LuSolve&#160;<a href="lusolve.cpp.xml" target="_top">LuSolve&#xA0;With&#xA0;Complex&#xA0;Arguments:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;minors<b>&#xA0;</b>expansion&#160;<a href="jacminordet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;minors<b>&#xA0;</b>expansion&#160;<a href="hesminordet.cpp.xml" target="_top">Gradient&#xA0;of&#xA0;Determinant&#xA0;Using&#xA0;Expansion&#xA0;by&#xA0;Minors:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;more&#160;<a href="installunix.xml#More Testing" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;More&#xA0;Testing</a><br/>
&#160;&#160;&#160;&#160;&#160;NearEqual&#160;<a href="near_equal.cpp.xml" target="_top">NearEqual&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;NearEqualExt&#160;<a href="nearequalext.cpp.xml" target="_top">Compare&#xA0;AD&#xA0;with&#xA0;Base&#xA0;Objects:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;NumericType&#160;<a href="numerictype.cpp.xml" target="_top">The&#xA0;NumericType:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;nan&#160;<a href="nan.cpp.xml" target="_top">nan:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;new&#160;<a href="tracknewdel.cpp.xml" target="_top">Tracking&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;not<b>&#xA0;</b>complex<b>&#xA0;</b>differentiable&#160;<a href="not_complex_ad.cpp.xml" target="_top">Not&#xA0;Complex&#xA0;Differentiable:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ODE&#160;<a href="ode_taylor.cpp.xml" target="_top">Taylor's&#xA0;Ode&#xA0;Solver:&#xA0;An&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;OdeErrControl&#160;<a href="odeerrmaxabs.cpp.xml" target="_top">OdeErrControl:&#xA0;Example&#xA0;and&#xA0;Test&#xA0;Using&#xA0;Maxabs&#xA0;Argument</a><br/>
&#160;&#160;&#160;&#160;&#160;OdeErrControl&#160;<a href="odeerrcontrol.cpp.xml" target="_top">OdeErrControl:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;OdeGear&#160;<a href="odegear.cpp.xml" target="_top">OdeGear:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;OdeGearControl&#160;<a href="odegearcontrol.cpp.xml" target="_top">OdeGearControl:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;ode<b>&#xA0;</b>speed&#160;<a href="link_ode.xml" target="_top">Speed&#xA0;Testing&#xA0;the&#xA0;Jacobian&#xA0;of&#xA0;Ode&#xA0;Solution</a><br/>
&#160;&#160;&#160;&#160;&#160;ode<b>_</b>evaluate&#160;<a href="ode_evaluate.cpp.xml" target="_top">ode_evaluate:&#xA0;Example&#xA0;and&#xA0;test</a><br/>
&#160;&#160;&#160;&#160;&#160;opt<b>_</b>val<b>_</b>hes&#160;<a href="opt_val_hes.cpp.xml" target="_top">opt_val_hes:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;optimize&#160;<a href="optimize.cpp.xml" target="_top">ADFun&#xA0;Operation&#xA0;Sequence&#xA0;Optimization:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Parameter&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Parameter&#160;<a href="parvar.cpp.xml" target="_top">AD&#xA0;Parameter&#xA0;and&#xA0;Variable&#xA0;Functions:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;partial&#160;<a href="forone.cpp.xml" target="_top">First&#xA0;Order&#xA0;Partial&#xA0;Driver:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;polynomial&#160;<a href="poly.cpp.xml" target="_top">Polynomial&#xA0;Evaluation:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;polynomial<b>&#xA0;</b>speed&#160;<a href="link_poly.xml" target="_top">Speed&#xA0;Testing&#xA0;Second&#xA0;Derivative&#xA0;of&#xA0;a&#xA0;Polynomial</a><br/>
&#160;&#160;&#160;&#160;&#160;pow<b>&#xA0;</b>int&#160;<a href="pow_int.cpp.xml" target="_top">The&#xA0;Pow&#xA0;Integer&#xA0;Exponent:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Range&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Romberg&#160;<a href="rombergmul.cpp.xml" target="_top">One&#xA0;Dimensional&#xA0;Romberg&#xA0;Integration:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Romberg&#160;<a href="rombergone.cpp.xml" target="_top">One&#xA0;Dimensional&#xA0;Romberg&#xA0;Integration:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Rosen34&#160;<a href="rosen34.cpp.xml" target="_top">Rosen34:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Runge45&#160;<a href="runge_45_2.cpp.xml" target="_top">Runge45:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Runge45&#160;<a href="runge_45_1.cpp.xml" target="_top">Runge45:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;re<b>-</b>tape&#160;<a href="comparechange.cpp.xml" target="_top">CompareChange&#xA0;and&#xA0;Re-Tape:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;reverse<b>&#xA0;</b>third<b>&#xA0;</b>order&#160;<a href="reverse_three.cpp.xml" target="_top">Third&#xA0;Order&#xA0;Reverse&#xA0;Mode:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;sacado<b>&#xA0;</b>speed&#160;<a href="speed_sacado.xml" target="_top">Speed&#xA0;Test&#xA0;Derivatives&#xA0;Using&#xA0;Sacado</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>order<b>&#xA0;</b>reverse&#160;<a href="reverse_two.cpp.xml" target="_top">Second&#xA0;Order&#xA0;Reverse&#xA0;ModeExample&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>partial&#160;<a href="revtwo.cpp.xml" target="_top">Second&#xA0;Partials&#xA0;Reverse&#xA0;Driver:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;second<b>&#xA0;</b>partial&#160;<a href="fortwo.cpp.xml" target="_top">Subset&#xA0;of&#xA0;Second&#xA0;Order&#xA0;Partials:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;simple<b>&#xA0;</b>vector&#160;<a href="simplevector.cpp.xml" target="_top">Simple&#xA0;Vector&#xA0;Template&#xA0;Class:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;size<b>_</b>op&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;size<b>_</b>op<b>_</b>arg&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;size<b>_</b>par&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;size<b>_</b>VecAD&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;size<b>_</b>var&#160;<a href="seq_property.cpp.xml" target="_top">ADFun&#xA0;Sequence&#xA0;Properties:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;sparse<b>&#xA0;</b>Hessian&#160;<a href="sparse_hessian.cpp.xml" target="_top">Sparse&#xA0;Hessian:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;sparse<b>&#xA0;</b>Jacobian&#160;<a href="sparse_jacobian.cpp.xml" target="_top">Sparse&#xA0;Jacobian:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;sparse<b>&#xA0;</b>speed&#160;<a href="link_sparse_jacobian.xml" target="_top">Speed&#xA0;Testing&#xA0;Sparse&#xA0;Jacobian</a><br/>
&#160;&#160;&#160;&#160;&#160;sparse<b>&#xA0;</b>speed&#160;<a href="link_sparse_hessian.xml" target="_top">Speed&#xA0;Testing&#xA0;Sparse&#xA0;Hessian</a><br/>
&#160;&#160;&#160;&#160;&#160;sparse<b>_</b>evaluate&#160;<a href="sparse_evaluate.cpp.xml" target="_top">sparse_evaluate:&#xA0;Example&#xA0;and&#xA0;test</a><br/>
&#160;&#160;&#160;&#160;&#160;sparsity<b>&#xA0;</b>forward&#160;<a href="forsparsejac.cpp.xml" target="_top">Forward&#xA0;Mode&#xA0;Jacobian&#xA0;Sparsity:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;sparsity<b>&#xA0;</b>Hessian&#160;<a href="revsparsehes.cpp.xml" target="_top">Reverse&#xA0;Mode&#xA0;Hessian&#xA0;Sparsity:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;sparsity<b>&#xA0;</b>reverse&#160;<a href="revsparsejac.cpp.xml" target="_top">Reverse&#xA0;Mode&#xA0;Jacobian&#xA0;Sparsity:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;speed&#160;<a href="speed.xml" target="_top">Speed&#xA0;Test&#xA0;Routines</a><br/>
&#160;&#160;&#160;&#160;&#160;speed&#160;<a href="speed_program.cpp.xml" target="_top">Example&#xA0;Use&#xA0;of&#xA0;SpeedTest</a><br/>
&#160;&#160;&#160;&#160;&#160;speed&#160;<a href="speed_test.cpp.xml" target="_top">speed_test:&#xA0;Example&#xA0;and&#xA0;test</a><br/>
&#160;&#160;&#160;&#160;&#160;speed&#160;<a href="speedtest.xml" target="_top">Run&#xA0;One&#xA0;Speed&#xA0;Test&#xA0;and&#xA0;Print&#xA0;Results</a><br/>
&#160;&#160;&#160;&#160;&#160;speed&#160;<a href="speed_test.xml" target="_top">Run&#xA0;One&#xA0;Speed&#xA0;Test&#xA0;and&#xA0;Return&#xA0;Results</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>windows&#160;<a href="speed.xml#Windows" target="_top">Speed&#xA0;Test&#xA0;Routines:&#160;Windows</a><br/>
&#160;&#160;&#160;&#160;&#160;stiff<b>&#xA0;</b>ode&#160;<a href="odestiff.cpp.xml" target="_top">A&#xA0;Stiff&#xA0;Ode:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;subtract&#160;<a href="sub.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Subtraction:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;tan&#160;<a href="tan.cpp.xml" target="_top">The&#xA0;AD&#xA0;tan&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;tanh&#160;<a href="tanh.cpp.xml" target="_top">The&#xA0;AD&#xA0;tanh&#xA0;Function:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;timer&#160;<a href="elapsed_seconds.cpp.xml" target="_top">Elapsed&#xA0;Seconds:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;unary<b>&#xA0;</b>minus&#160;<a href="unaryminus.cpp.xml" target="_top">AD&#xA0;Unary&#xA0;Minus&#xA0;Operator:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;unary<b>&#xA0;</b>plus&#160;<a href="unaryplus.cpp.xml" target="_top">AD&#xA0;Unary&#xA0;Plus&#xA0;Operator:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Value&#160;<a href="value.cpp.xml" target="_top">Convert&#xA0;From&#xA0;AD&#xA0;to&#xA0;its&#xA0;Base&#xA0;Type:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Var2Par&#160;<a href="var2par.cpp.xml" target="_top">Convert&#xA0;an&#xA0;AD&#xA0;Variable&#xA0;to&#xA0;a&#xA0;Parameter:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;Variable&#160;<a href="parvar.cpp.xml" target="_top">AD&#xA0;Parameter&#xA0;and&#xA0;Variable&#xA0;Functions:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;VecAD&#160;<a href="vec_ad.cpp.xml" target="_top">AD&#xA0;Vectors&#xA0;that&#xA0;Record&#xA0;Index&#xA0;Operations:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="test_vector.xml" target="_top">Choosing&#xA0;The&#xA0;Vector&#xA0;Testing&#xA0;Template&#xA0;Class</a><br/>
&#160;&#160;&#160;&#160;&#160;windows&#160;<a href="installwindows.xml#Examples and Testing" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;Examples&#xA0;and&#xA0;Testing</a><br/>
test<b>&#xA0;</b>more<br/>
&#160;&#160;&#160;&#160;&#160;windows&#160;<a href="installwindows.xml#More Correctness Testing" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;More&#xA0;Correctness&#xA0;Testing</a><br/>
text<br/>
&#160;&#160;&#160;&#160;&#160;output&#160;<a href="printfor.xml" target="_top">Printing&#xA0;AD&#xA0;Values&#xA0;During&#xA0;Forward&#xA0;Mode</a><br/>
theory<br/>
&#160;&#160;&#160;&#160;&#160;acos<b>&#xA0;</b>forward&#160;<a href="acosforward.xml" target="_top">Arccosine&#xA0;Function&#xA0;Forward&#xA0;Taylor&#xA0;Polynomial&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;acos<b>&#xA0;</b>reverse&#160;<a href="acosreverse.xml" target="_top">Arccosine&#xA0;Function&#xA0;Reverse&#xA0;Mode&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;asin<b>&#xA0;</b>forward&#160;<a href="asinforward.xml" target="_top">Arcsine&#xA0;Function&#xA0;Forward&#xA0;Taylor&#xA0;Polynomial&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;asin<b>&#xA0;</b>reverse&#160;<a href="asinreverse.xml" target="_top">Arcsine&#xA0;Function&#xA0;Reverse&#xA0;Mode&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;atan<b>&#xA0;</b>forward&#160;<a href="atanforward.xml" target="_top">Arctangent&#xA0;Function&#xA0;Forward&#xA0;Taylor&#xA0;Polynomial&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;atan<b>&#xA0;</b>reverse&#160;<a href="atanreverse.xml" target="_top">Arctangent&#xA0;Function&#xA0;Reverse&#xA0;Mode&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;cos&#160;<a href="sincosreverse.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Reverse&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;cos&#160;<a href="sincosforward.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Forward&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;cosh&#160;<a href="sincosreverse.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Reverse&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;cosh&#160;<a href="sincosforward.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Forward&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;exp<b>&#xA0;</b>forward&#160;<a href="expforward.xml" target="_top">Exponential&#xA0;Function&#xA0;Forward&#xA0;Taylor&#xA0;Polynomial&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;exp<b>&#xA0;</b>reverse&#160;<a href="expreverse.xml" target="_top">Exponential&#xA0;Function&#xA0;Reverse&#xA0;Mode&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;log<b>&#xA0;</b>forward&#160;<a href="logforward.xml" target="_top">Logarithm&#xA0;Function&#xA0;Forward&#xA0;Taylor&#xA0;Polynomial&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;log<b>&#xA0;</b>reverse&#160;<a href="logreverse.xml" target="_top">Logarithm&#xA0;Function&#xA0;Reverse&#xA0;Mode&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;sin&#160;<a href="sincosreverse.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Reverse&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;sin&#160;<a href="sincosforward.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Forward&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;sinh&#160;<a href="sincosreverse.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Reverse&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;sinh&#160;<a href="sincosforward.xml" target="_top">Trigonometric&#xA0;and&#xA0;Hyperbolic&#xA0;Sine&#xA0;and&#xA0;Cosine&#xA0;Forward&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;sqrt<b>&#xA0;</b>forward&#160;<a href="sqrtforward.xml" target="_top">Square&#xA0;Root&#xA0;Function&#xA0;Forward&#xA0;Taylor&#xA0;Polynomial&#xA0;Theory</a><br/>
&#160;&#160;&#160;&#160;&#160;sqrt<b>&#xA0;</b>reverse&#160;<a href="sqrtreverse.xml" target="_top">Square&#xA0;Root&#xA0;Function&#xA0;Reverse&#xA0;Mode&#xA0;Theory</a><br/>
thread<br/>
&#160;&#160;&#160;&#160;&#160;multiple&#160;<a href="omp_max_thread.xml" target="_top">OpenMP&#xA0;Maximum&#xA0;Thread&#xA0;Number</a><br/>
time<br/>
&#160;&#160;&#160;&#160;&#160;seconds&#160;<a href="elapsed_seconds.xml" target="_top">Returns&#xA0;Elapsed&#xA0;Number&#xA0;of&#xA0;Seconds</a><br/>
times<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>example&#160;<a href="mul.cpp.xml" target="_top">AD&#xA0;Binary&#xA0;Multiplication:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;binary<b>&#xA0;</b>operator&#160;<a href="ad_binary.xml" target="_top">AD&#xA0;Binary&#xA0;Arithmetic&#xA0;Operators</a><br/>
&#160;&#160;&#160;&#160;&#160;computed<b>&#xA0;</b>assignment&#160;<a href="compute_assign.xml" target="_top">AD&#xA0;Computed&#xA0;Assignment&#xA0;Operators</a><br/>
track<br/>
&#160;&#160;&#160;&#160;&#160;new<b>&#xA0;</b>and<b>&#xA0;</b>delete&#160;<a href="tracknewdel.xml" target="_top">Routines&#xA0;That&#xA0;Track&#xA0;Use&#xA0;of&#xA0;New&#xA0;and&#xA0;Delete</a><br/>
type&#160;<a href="glossary.xml#Base Type" target="_top">Glossary:&#160;Base&#xA0;Type</a><br/>
&#160;&#160;&#160;&#160;&#160;Base<b>&#xA0;</b>require&#160;<a href="base_require.xml" target="_top">AD&lt;Base&gt;&#xA0;Requirements&#xA0;for&#xA0;Base&#xA0;Type</a><br/>
&#160;&#160;&#160;&#160;&#160;numeric&#160;<a href="numerictype.xml" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Numeric&#xA0;Type</a><br/>

<b><big><a name="U">U</a></big></b>
<br/>
unary<br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>bool&#160;<a href="boolfun.xml" target="_top">AD&#xA0;Boolean&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>math&#160;<a href="std_math_ad.xml" target="_top">AD&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>minus<b>&#xA0;</b>operator&#160;<a href="unaryminus.xml" target="_top">AD&#xA0;Unary&#xA0;Minus&#xA0;Operator</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>plus<b>&#xA0;</b>operator&#160;<a href="unaryplus.xml" target="_top">AD&#xA0;Unary&#xA0;Plus&#xA0;Operator</a><br/>
&#160;&#160;&#160;&#160;&#160;math&#160;<a href="std_math_unary.xml" target="_top">Float&#xA0;and&#xA0;Double&#xA0;Standard&#xA0;Math&#xA0;Unary&#xA0;Functions</a><br/>
unary<b>&#xA0;</b>minus<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="unaryminus.cpp.xml" target="_top">AD&#xA0;Unary&#xA0;Minus&#xA0;Operator:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
unary<b>&#xA0;</b>plus<br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="unaryplus.cpp.xml" target="_top">AD&#xA0;Unary&#xA0;Plus&#xA0;Operator:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
uniform<br/>
&#160;&#160;&#160;&#160;&#160;random<b>&#xA0;</b>vector&#160;<a href="uniform_01.xml" target="_top">Simulate&#xA0;a&#xA0;[0,1]&#xA0;Uniform&#xA0;Random&#xA0;Variate</a><br/>
uniform<b>_</b>01&#160;<a href="uniform_01.xml" target="_top">Simulate&#xA0;a&#xA0;[0,1]&#xA0;Uniform&#xA0;Random&#xA0;Variate</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="speed_main.xml#seed" target="_top">Speed&#xA0;Testing&#xA0;Main&#xA0;Program:&#160;seed</a><br/>
&#160;&#160;&#160;&#160;&#160;source&#160;<a href="uniform_01.hpp.xml" target="_top">Source:&#xA0;uniform_01</a><br/>
unix<br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&#xA0;</b>install&#160;<a href="installunix.xml" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation</a><br/>
&#160;&#160;&#160;&#160;&#160;download&#160;<a href="installunix.xml#Download" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Download</a><br/>
use<b>_</b>VecAD<br/>
&#160;&#160;&#160;&#160;&#160;ADFun&#160;<a href="fundeprecated.xml#use_VecAD" target="_top">ADFun&#xA0;Object&#xA0;Deprecated&#xA0;Member&#xA0;Functions:&#160;use_VecAD</a><br/>
using<br/>
&#160;&#160;&#160;&#160;&#160;namespace&#160;<a href="faq.xml#Namespace.Using" target="_top">Frequently&#xA0;Asked&#xA0;Questions&#xA0;and&#xA0;Answers:&#160;Namespace.Using</a><br/>
utility<br/>
&#160;&#160;&#160;&#160;&#160;speed&#160;<a href="speed_utility.xml" target="_top">Speed&#xA0;Testing&#xA0;Utilities</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>example&#160;<a href="installwindows.xml#Speed Utility Example" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;Speed&#xA0;Utility&#xA0;Example</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>example&#160;<a href="installunix.xml#Speed Testing.Examples For Speed Tests" target="_top">Unix&#xA0;Download,&#xA0;Test&#xA0;and&#xA0;Installation:&#160;Speed&#xA0;Testing.Examples&#xA0;For&#xA0;Speed&#xA0;Tests</a><br/>

<b><big><a name="V">V</a></big></b>
<br/>
Value&#160;<a href="value.cpp.xml" target="_top">Convert&#xA0;From&#xA0;AD&#xA0;to&#xA0;its&#xA0;Base&#xA0;Type:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="value.xml" target="_top">Convert&#xA0;From&#xA0;an&#xA0;AD&#xA0;Type&#xA0;to&#xA0;its&#xA0;Base&#xA0;Type</a><br/>
&#160;&#160;&#160;&#160;&#160;during<b>&#xA0;</b>taping&#160;<a href="var2par.cpp.xml" target="_top">Convert&#xA0;an&#xA0;AD&#xA0;Variable&#xA0;to&#xA0;a&#xA0;Parameter:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
Var2Par&#160;<a href="var2par.cpp.xml" target="_top">Convert&#xA0;an&#xA0;AD&#xA0;Variable&#xA0;to&#xA0;a&#xA0;Parameter:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="var2par.xml" target="_top">Convert&#xA0;an&#xA0;AD&#xA0;Variable&#xA0;to&#xA0;a&#xA0;Parameter</a><br/>
Variable&#160;<a href="parvar.xml" target="_top">Is&#xA0;an&#xA0;AD&#xA0;Object&#xA0;a&#xA0;Parameter&#xA0;or&#xA0;Variable</a><br/>
&#160;&#160;&#160;&#160;&#160;example&#160;<a href="parvar.cpp.xml" target="_top">AD&#xA0;Parameter&#xA0;and&#xA0;Variable&#xA0;Functions:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
VERSION<br/>
&#160;&#160;&#160;&#160;&#160;symbol&#160;<a href="configure.xml" target="_top">Preprocessor&#xA0;Definitions&#xA0;Used&#xA0;by&#xA0;CppAD</a><br/>
VecAD&#160;<a href="vec_ad.cpp.xml" target="_top">AD&#xA0;Vectors&#xA0;that&#xA0;Record&#xA0;Index&#xA0;Operations:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;<a href="vecad.xml" target="_top">AD&#xA0;Vectors&#xA0;that&#xA0;Record&#xA0;Index&#xA0;Operations</a><br/>
&#160;&#160;&#160;&#160;&#160;convert<b>&#xA0;</b>to<b>&#xA0;</b>AD&#160;<a href="ad_copy.xml" target="_top">AD&#xA0;Copy&#xA0;Constructor&#xA0;and&#xA0;Assignment&#xA0;Operator</a><br/>
VecAD<b>&lt;</b>Base<b>&gt;::</b>reference&#160;<a href="vecad.xml#VecAD&lt;Base&gt;::reference" target="_top">AD&#xA0;Vectors&#xA0;that&#xA0;Record&#xA0;Index&#xA0;Operations:&#160;VecAD&lt;Base&gt;::reference</a><br/>
value&#160;<a href="opt_val_hes.xml" target="_top">Jacobian&#xA0;and&#xA0;Hessian&#xA0;of&#xA0;Optimal&#xA0;Values</a><br/>
value<b>_</b><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>absolute&#160;<a href="abs.xml" target="_top">AD&#xA0;Absolute&#xA0;Value&#xA0;Function</a><br/>
&#160;&#160;&#160;&#160;&#160;obtain<b>&#xA0;</b>during<b>&#xA0;</b>taping&#160;<a href="var2par.xml" target="_top">Convert&#xA0;an&#xA0;AD&#xA0;Variable&#xA0;to&#xA0;a&#xA0;Parameter</a><br/>
value<b>_</b>type<br/>
&#160;&#160;&#160;&#160;&#160;vector&#160;<a href="simplevector.xml#Value Type" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Simple&#xA0;Vector:&#160;Value&#xA0;Type</a><br/>
variable&#160;<a href="glossary.xml#Variable" target="_top">Glossary:&#160;Variable</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="glossary.xml#Tape.Independent Variable" target="_top">Glossary:&#160;Tape.Independent&#xA0;Variable</a><br/>
&#160;&#160;&#160;&#160;&#160;convert<b>&#xA0;</b>to<b>&#xA0;</b>parameter&#160;<a href="var2par.xml" target="_top">Convert&#xA0;an&#xA0;AD&#xA0;Variable&#xA0;to&#xA0;a&#xA0;Parameter</a><br/>
&#160;&#160;&#160;&#160;&#160;independent&#160;<a href="independent.xml" target="_top">Declare&#xA0;Independent&#xA0;Variables&#xA0;and&#xA0;Start&#xA0;Recording</a><br/>
variables&#160;<a href="glossary.xml#Tape.Dependent Variables" target="_top">Glossary:&#160;Tape.Dependent&#xA0;Variables</a><br/>
vec<b>_</b>ad<b>.</b>cpp&#160;<a href="vec_ad.cpp.xml" target="_top">AD&#xA0;Vectors&#xA0;that&#xA0;Record&#xA0;Index&#xA0;Operations:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
vector&#160;<a href="glossary.xml#Sparsity Pattern.Vector of Sets" target="_top">Glossary:&#160;Sparsity&#xA0;Pattern.Vector&#xA0;of&#xA0;Sets</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="glossary.xml#Sparsity Pattern.Vector of Boolean" target="_top">Glossary:&#160;Sparsity&#xA0;Pattern.Vector&#xA0;of&#xA0;Boolean</a><br/>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;<a href="glossary.xml#Elementary Vector" target="_top">Glossary:&#160;Elementary&#xA0;Vector</a><br/>
&#160;&#160;&#160;&#160;&#160;<b>[]&#xA0;</b>CppAD&#160;<a href="cppad_vector.xml#Element Access" target="_top">The&#xA0;CppAD::vector&#xA0;Template&#xA0;Class:&#160;Element&#xA0;Access</a><br/>
&#160;&#160;&#160;&#160;&#160;AD<b>&#xA0;</b>index&#160;<a href="vecad.xml" target="_top">AD&#xA0;Vectors&#xA0;that&#xA0;Record&#xA0;Index&#xA0;Operations</a><br/>
&#160;&#160;&#160;&#160;&#160;CppAD&#160;<a href="cppad_vector.cpp.xml" target="_top">CppAD::vector&#xA0;Template&#xA0;Class:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&#xA0;</b>push&#160;<a href="cppad_vector.xml#push_vector" target="_top">The&#xA0;CppAD::vector&#xA0;Template&#xA0;Class:&#160;push_vector</a><br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&#xA0;</b>push<b>_</b>back&#160;<a href="cppad_vector.xml#push_back" target="_top">The&#xA0;CppAD::vector&#xA0;Template&#xA0;Class:&#160;push_back</a><br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&#xA0;</b>template<b>&#xA0;</b>class&#160;<a href="cppad_vector.xml" target="_top">The&#xA0;CppAD::vector&#xA0;Template&#xA0;Class</a><br/>
&#160;&#160;&#160;&#160;&#160;simple&#160;<a href="simplevector.cpp.xml" target="_top">Simple&#xA0;Vector&#xA0;Template&#xA0;Class:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;simple&#160;<a href="simplevector.xml" target="_top">Definition&#xA0;of&#xA0;a&#xA0;Simple&#xA0;Vector</a><br/>
&#160;&#160;&#160;&#160;&#160;simple<b>&#xA0;</b>check&#160;<a href="checksimplevector.xml" target="_top">Check&#xA0;Simple&#xA0;Vector&#xA0;Concept</a><br/>
&#160;&#160;&#160;&#160;&#160;test&#160;<a href="test_vector.xml" target="_top">Choosing&#xA0;The&#xA0;Vector&#xA0;Testing&#xA0;Template&#xA0;Class</a><br/>
&#160;&#160;&#160;&#160;&#160;uniform<b>&#xA0;</b>random&#160;<a href="uniform_01.xml" target="_top">Simulate&#xA0;a&#xA0;[0,1]&#xA0;Uniform&#xA0;Random&#xA0;Variate</a><br/>
vectorBool&#160;<a href="cppad_vector.xml#vectorBool" target="_top">The&#xA0;CppAD::vector&#xA0;Template&#xA0;Class:&#160;vectorBool</a><br/>
&#160;&#160;&#160;&#160;&#160;CppAD&#160;<a href="vectorbool.cpp.xml" target="_top">CppAD::vectorBool&#xA0;Class:&#xA0;Example&#xA0;and&#xA0;Test</a><br/>
version<br/>
&#160;&#160;&#160;&#160;&#160;CppAD&#160;<a href="cppad.xml" target="_top">cppad-20100325:&#xA0;A&#xA0;Package&#xA0;for&#xA0;Differentiation&#xA0;of&#xA0;C++&#xA0;Algorithms</a><br/>

<b><big><a name="W">W</a></big></b>
<br/>
windows<br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&#xA0;</b>install&#160;<a href="installwindows.xml" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test</a><br/>
&#160;&#160;&#160;&#160;&#160;download&#160;<a href="installwindows.xml#Download" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;Download</a><br/>
&#160;&#160;&#160;&#160;&#160;speed<b>&#xA0;</b>test&#160;<a href="speed.xml#Windows" target="_top">Speed&#xA0;Test&#xA0;Routines:&#160;Windows</a><br/>
wish<b>&#xA0;</b>list&#160;<a href="wishlist.xml" target="_top">The&#xA0;CppAD&#xA0;Wish&#xA0;List</a><br/>
write<br/>
&#160;&#160;&#160;&#160;&#160;AD&#160;<a href="output.xml" target="_top">AD&#xA0;Output&#xA0;Stream&#xA0;Operator</a><br/>

<b><big><a name="Z">Z</a></big></b>
<br/>
zero<br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>exp<b>_</b>2&#160;<a href="exp_2_for0.cpp.xml" target="_top">exp_2:&#xA0;Verify&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>exp<b>_</b>eps&#160;<a href="exp_eps_for0.cpp.xml" target="_top">exp_eps:&#xA0;Verify&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>expansion&#160;<a href="exp_2_for0.xml#Zero Order Expansion" target="_top">exp_2:&#xA0;Operation&#xA0;Sequence&#xA0;and&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Mode:&#160;Zero&#xA0;Order&#xA0;Expansion</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>Forward&#160;<a href="forwardzero.xml" target="_top">Zero&#xA0;Order&#xA0;Forward&#xA0;Mode:&#xA0;Function&#xA0;Values</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>forward&#160;<a href="comparechange.xml" target="_top">Comparison&#xA0;Changes&#xA0;During&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>forward&#160;<a href="exp_eps_for0.xml" target="_top">exp_eps:&#xA0;Operation&#xA0;Sequence&#xA0;and&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Sweep</a><br/>
&#160;&#160;&#160;&#160;&#160;order<b>&#xA0;</b>forward&#160;<a href="exp_2_for0.xml" target="_top">exp_2:&#xA0;Operation&#xA0;Sequence&#xA0;and&#xA0;Zero&#xA0;Order&#xA0;Forward&#xA0;Mode</a><br/>
zip<br/>
&#160;&#160;&#160;&#160;&#160;CppAD<b>&#xA0;</b>file&#160;<a href="installwindows.xml#Download" target="_top">Windows&#xA0;Download&#xA0;and&#xA0;Test:&#160;Download</a><br/>

</body>
</html>
