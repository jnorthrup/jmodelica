<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>First Order Reverse Mode: Example and Test</title>
<meta name="description" id="description" content="First Order Reverse Mode: Example and Test"/>
<meta name="keywords" id="keywords" content=" reverse first order example test "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_reverse_one.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="reverse_one.xml" target="_top">Prev</a>
</td><td><a href="reverse_two.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>FunEval</option>
<option>Reverse</option>
<option>reverse_one</option>
<option>reverse_one.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>FunEval-&gt;</option>
<option>Forward</option>
<option>Reverse</option>
<option>Sparse</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Reverse-&gt;</option>
<option>reverse_one</option>
<option>reverse_two</option>
<option>reverse_any</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>reverse_one-&gt;</option>
<option>reverse_one.cpp</option>
</select>
</td>
<td>reverse_one.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>First Order Reverse Mode: Example and Test</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 
# include &lt;cppad/cppad.hpp&gt;
namespace { // ----------------------------------------------------------
// define the template function reverse_one_cases&lt;Vector&gt; in empty namespace
template &lt;typename Vector&gt; 
bool reverse_one_cases(void)
{	bool ok = true;
	using CppAD::AD;
	using CppAD::NearEqual;

	// domain space vector
	size_t n = 2;
	<a href="test_vector.xml" target="_top">CPPAD_TEST_VECTOR</a>&lt; <a href="ad.xml" target="_top">AD</a>&lt;double&gt; &gt; X(n);
	X[0] = 0.; 
	X[1] = 1.;

	// declare independent variables and start recording
	CppAD::<a href="independent.xml" target="_top">Independent</a>(X);

	// range space vector
	size_t m = 1;
	<a href="test_vector.xml" target="_top">CPPAD_TEST_VECTOR</a>&lt; <a href="ad.xml" target="_top">AD</a>&lt;double&gt; &gt; Y(m);
	Y[0] = X[0] * X[0] * X[1];

	// create f : X -&gt; Y and stop recording
	CppAD::<a href="funconstruct.xml" target="_top">ADFun</a>&lt;double&gt; f(X, Y);

	// use first order reverse mode to evaluate derivative of y[0]
	// and use the values in X for the independent variables.
	<a href="test_vector.xml" target="_top">CPPAD_TEST_VECTOR</a>&lt;double&gt; w(m), dw(n);
	w[0] = 1.;
	dw   = f.<a href="reverse.xml" target="_top">Reverse</a>(1, w);
	ok  &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(dw[0] , 2.*X[0]*X[1], 1e-10, 1e-10);
	ok  &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(dw[1] ,    X[0]*X[0], 1e-10, 1e-10);

	// use zero order forward mode to evaluate y at x = (3, 4)
	// and use the template parameter Vector for the vector type
	Vector x(n), y(m);
	x[0]    = 3.;
	x[1]    = 4.;
	y       = f.<a href="forward.xml" target="_top">Forward</a>(0, x);
	ok     &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(y[0] , x[0]*x[0]*x[1], 1e-10, 1e-10);

	// use first order reverse mode to evaluate derivative of y[0]
	// and using the values in x for the independent variables.
	w[0] = 1.;
	dw   = f.<a href="reverse.xml" target="_top">Reverse</a>(1, w);
	ok  &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(dw[0] , 2.*x[0]*x[1], 1e-10, 1e-10);
	ok  &amp;= <a href="nearequal.xml" target="_top">NearEqual</a>(dw[1] ,    x[0]*x[0], 1e-10, 1e-10);

	return ok;
}
} // End empty namespace 
# include &lt;vector&gt;
# include &lt;valarray&gt;
bool reverse_one(void)
{	bool ok = true;
	// Run with Vector equal to three different cases
	// all of which are Simple Vectors with elements of type double.
	ok &amp;= reverse_one_cases&lt; CppAD::vector  &lt;double&gt; &gt;();
	ok &amp;= reverse_one_cases&lt; std::vector    &lt;double&gt; &gt;();
	ok &amp;= reverse_one_cases&lt; std::valarray  &lt;double&gt; &gt;();
	return ok;
}</pre>
</font></code>


<hr/>Input File: example/reverse_one.cpp

</body>
</html>
