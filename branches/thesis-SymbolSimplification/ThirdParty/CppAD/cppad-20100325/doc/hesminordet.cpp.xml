<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Gradient of Determinant Using Expansion by Minors: Example and Test</title>
<meta name="description" id="description" content="Gradient of Determinant Using Expansion by Minors: Example and Test"/>
<meta name="keywords" id="keywords" content=" gradient minors expansion example test "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_hesminordet.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="ad_in_c.cpp.xml" target="_top">Prev</a>
</td><td><a href="hesludet.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>General</option>
<option>HesMinorDet.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>Example</option>
<option>configure</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Example-&gt;</option>
<option>General</option>
<option>ExampleUtility</option>
<option>ListAllExamples</option>
<option>test_vector</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>General-&gt;</option>
<option>ad_fun.cpp</option>
<option>ad_in_c.cpp</option>
<option>HesMinorDet.cpp</option>
<option>HesLuDet.cpp</option>
<option>cppad_ipopt_nlp</option>
<option>Interface2C.cpp</option>
<option>JacMinorDet.cpp</option>
<option>JacLuDet.cpp</option>
<option>mul_level</option>
<option>OdeStiff.cpp</option>
<option>ode_taylor.cpp</option>
<option>ode_taylor_adolc.cpp</option>
<option>StackMachine.cpp</option>
</select>
</td>
<td>HesMinorDet.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>Gradient of Determinant Using Expansion by Minors: Example and Test</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 

# include &lt;cppad/cppad.hpp&gt;
# include &lt;cppad/speed/det_by_minor.hpp&gt;
# include &lt;complex&gt;

typedef std::complex&lt;double&gt;     Complex;
typedef CppAD::<a href="ad.xml" target="_top">AD</a>&lt;Complex&gt;       ADComplex;
typedef <a href="test_vector.xml" target="_top">CPPAD_TEST_VECTOR</a>&lt;ADComplex&gt;   ADVector;

// ----------------------------------------------------------------------------

bool HesMinorDet()
{	bool ok = true;

	using namespace CppAD;

	size_t n = 2;

	// object for computing determinants
	det_by_minor&lt;ADComplex&gt; Det(n);

	// independent and dependent variable vectors
	<a href="test_vector.xml" target="_top">CPPAD_TEST_VECTOR</a>&lt;ADComplex&gt;  X(n * n);
	<a href="test_vector.xml" target="_top">CPPAD_TEST_VECTOR</a>&lt;ADComplex&gt;  D(1);

	// value of the independent variable
	size_t i;
	for(i = 0; i &lt; n * n; i++)
		X[i] = Complex(int(i), -int(i));

	// set the independent variables
	<a href="independent.xml" target="_top">Independent</a>(X);

	// comupute the determinant
	D[0] = Det(X); 

	// create the function object
	<a href="funconstruct.xml" target="_top">ADFun</a>&lt;Complex&gt; f(X, D);

	// argument value
	<a href="test_vector.xml" target="_top">CPPAD_TEST_VECTOR</a>&lt;Complex&gt;     x( n * n );
	for(i = 0; i &lt; n * n; i++)
		x[i] = Complex(2 * i, i);

	// first derivative of the determinant
	<a href="test_vector.xml" target="_top">CPPAD_TEST_VECTOR</a>&lt;Complex&gt; H( n * n * n * n);
	H = f.Hessian(x, 0);

	/*
	f(x)     = x[0] * x[3] - x[1] * x[2]
	f'(x)    = ( x[3], -x[2], -x[1], x[0] )
	*/
	Complex zero(0., 0.);
	Complex one(1., 0.);
	Complex Htrue[]  = { 
		zero, zero, zero,  one,
		zero, zero, -one, zero,
		zero, -one, zero, zero,
		 one, zero, zero, zero
	};
	for( i = 0; i &lt; n*n*n*n; i++)
		ok &amp;= Htrue[i] == H[i];

	return ok;

}
</pre>
</font></code>


<hr/>Input File: example/hes_minor_det.cpp

</body>
</html>
