$Id: install_unix.omh.in 1644 2010-02-06 19:56:43Z bradbell $
/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-10 Bradley M. Bell

CppAD is distributed under multiple licenses. This distribution is under
the terms of the 
                    Common Public License Version 1.0.

A copy of this license is included in the COPYING file of this distribution.
Please visit http://www.coin-or.org/CppAD/ for information on other licenses.
-------------------------------------------------------------------------- */

$begin InstallUnix$$
$dollar ^$$
$spell
	err_retu
	const
	printf
	avector.h
	Ipopt
	Ip
	gzip
	Linux
	fi
	exp_apx
	tgz
	gpl
	Dev
	sed
	cppad
	gprof
	config
	stdvector
	std
	ublas
	hpp
	adouble
	badiff
	usr
	cygdrive
	htm
	xml
	Dir
	xvzf
	gz
	workspace
	Makefile
	exe
	Cygwin
	Microsoft
	dsw
	CppAD
	Adolc
	Fadbad
	Sacado
	ls
	aclocal
	yum
	devel
$$

$index CppAD, unix install$$
$index unix, CppAD install$$
$index free, unix install$$
$index install, unix CppAD$$

$section Unix Download, Test and Installation$$

$head Fedora$$
$index install, Fedora$$
$index Fedora, install$$
CppAD is available through yum on the Fedora operating system starting
Fedora version 7. You can download and install CppAD with the instruction
$code
	yum install cppad-devel
$$
(In Fedora, $code devel$$ is used for program development tools.)
You can download and install the corresponding version of the
documentation using the command
$code
	yum install cppad-doc
$$ 

$head RPM$$
$index rpm, cppad.spec$$
$index cppad.spec$$
If you want to use the Fedora $code cppad.spec$$ file
to build an RPM for some other operating system,
it can be found at
$pre
$$
$href%https://projects.coin-or.org/CppAD/browser/trunk/cppad.spec%$$


$head Download$$
$index download, unix$$
$index unix, download$$

$children%
	omh/subversion.omh
%$$
$subhead Subversion$$
If you are familiar with subversion, you may want to follow
the more complicated CppAD download instructions;
see the following $cref/subversion instructions/subversion/$$.

$subhead Web Link$$
If you are not using the subversion download instructions,
make sure you are reading the web version of this documentation by
following the link 
$href%http://www.coin-or.org/CppAD/Doc/installunix.htm%web version%$$.
Then proceed with the instruction that appear below this point.

$subhead Unix Tar Files$$
$index CppAD, tar file$$
$index tar, CppAD file$$
The download files below were first archived with $code tar$$
and then compressed with $code gzip$$:
The ascii files for these downloads are in 
Unix format; i.e., each line ends with just a line feed.

$table
CPL License $pre  $$ $cnext $href%cppad-@VERSION@.cpl.tgz%$$ 
$rnext
GPL License $pre  $$ $cnext $href%cppad-@VERSION@.gpl.tgz%$$
$tend

$subhead Tar File Extraction$$
Use the unix command
$codei%
	tar -xvzf cppad-@VERSION@.%license%.tgz
%$$
(where $icode license$$ is $code cpl$$ or $code gpl$$)
to decompress and extract the unix format version
into the distribution directory
$codei%
	cppad-@VERSION@
%$$
To see if this has been done correctly, check for the following file:
$codei%
	cppad-@VERSION@/cppad/cppad.hpp
%$$

$head Configure$$
$index configure$$
Enter the $icode distribution_directory$$
(the directory created by the extraction) and execute the command:
$codei%
	./configure                            \
	--prefix=%PrefixDir%                     \
	--with-Documentation                   \
	--with-stdvector                       \  
	POSTFIX_DIR=%PostfixDir%                 \
	ADOLC_DIR=%AdolcDir%                     \
	FADBAD_DIR=%FadbadDir%                   \
	SADADO_DIR=%SacadoDir%                   \
	BOOST_DIR=%BoostDir%                     \
	IPOPT_DIR=%IpoptDir%                     \
	CXX_FLAGS=%CompilerFlags% 
%$$
where only the $code configure$$ command need appear.
The entries one each of the other lines are optional
and the text in italic is replaced values that you choose.

$head make test$$
You can run all of the CppAD correctness tests by executing the 
command $code make test$$ in the $icode distribution_directory$$.
A description of the tests, and instructions for running individual tests,
are described below.

$head Introduction$$

$subhead Getting Started$$
$index get_started, run$$
$index run, get_started$$
You can run the CppAD getting started example / test 
by executing the command $code make test$$ in the directory
$codei%
	%distribution_directory%/introduction/get_started
%$$

$subhead exp_apx$$
$index exp_apx, run$$
$index run, exp_apx$$
$index introduction, AD$$
$index AD, introduction$$
You can run the examples / tests for the $code exp_apx$$ function 
(used in the $cref/Introduction/$$)
by executing the command $code make test$$ in the directory
$codei%
	%distribution_directory%/introduction/exp_apx
%$$

$head CppAD Examples$$
$index example, CppAD$$
$index CppAD, example$$
You can run a large number of the examples / tests showing how to use CppAD
by executing the command $code make test$$ in the directory
$codei%
	%distribution_directory%/example
%$$
See $cref/ListAllExamples/$$ for a list of all the CppAD examples.

$head More Testing$$
$index test, more$$
$index more, testing$$
You can run a large number of tests (that are not intended to be examples)
by executing the command $code make test$$ in the directory
$codei%
	%distribution_directory%/test_more
%$$

$head Speed Testing$$

$subhead CppAD Derivative Speed Tests$$
$index speed, CppAD check test$$
$index check, CppAD speed test$$
A set of CppAD derivative value $cref/speed/speed_cppad/$$ tests 
are included with this distribution. 
You can test that the results computed during these tests are correct
by executing the command $code make test$$ in the directory
$codei%
	%distribution_directory%/speed/cppad
%$$
After executing $code make test$$, you can run the CppAD derivative speed tests 
by executing the command $code ./cppad$$ (see $cref/speed_main/$$).

$subhead Function Speed Tests$$
$index speed, function check test$$
$index check, function speed test$$
A set of functions value $cref/speed/speed_double/$$ tests 
are included (to compare with derivative values speeds).
You can test that the results computed during these tests are correct
by executing the command $code make test$$ in the directory
$codei%
	%distribution_directory%/speed/double
%$$
After executing $code make test$$, you can run the function value speed tests 
by executing the command $code ./double$$ (see $cref/speed_main/$$).

$subhead Examples For Speed Tests$$
$index speed, utility example$$
$index example, speed utility$$
$index utility, speed example$$
The speed tests use some utilities that have their own set of 
examples / tests.
You can test that the results computed by this utilities are correct
by executing the command $code make test$$ in the directory
$codei%
	%distribution_directory%/speed/example
%$$

$head Profiling CppAD$$
$index speed, profile cppad$$
$index profile, cppad speed$$
$index cppad, profile speed$$
The CppAD derivative speed tests mentioned above can be profiled.
You can test that the results computed during this profiling are correct
by executing the command $code make test$$ in the directory
$codei%
	%distribution_directory%/speed/profile
%$$
After executing $code make test$$, you can run the profile tests 
by executing the command $code ./profile$$ (see $cref/speed_main/$$).
You can then obtain the profiling results with
$codei%
	gprof -b speed/profile/profile
%$$ 
If you are using a windows operating system with Cygwin or MinGW, 
you may have to replace $code profile$$ by $code profile.exe$$
in the $code gprof$$ command above; i.e.,
$codep
	gprof -b speed/profile/profile.exe
$$
In C++, template parameters and argument types become part of a 
routines's name.
This can make the $code gprof$$ output hard to read 
(the routine names can be very long).
You can remove the template parameters and argument types from the 
routine names by executing the following command
$codep
	gprof -b speed/profile/profile | sed -f speed/profile/gprof.sed
$$
If you are using a windows operating system with Cygwin or MinGW, 
you would need to use
$codep
	gprof -b speed/profile/profile.exe | sed -f speed/profile/gprof.sed
$$

$head PrintFor$$
$index print, forward mode$$
$index forward, print$$
You can test the $cref/PrintFor/$$ command
by executing the command $code make test$$ in the directory
$codei%
	%distribution_directory%/print_for
%$$

$head PrefixDir$$
$index configure, prefix directory$$
$index prefix, configure directory$$
$index directory, configure prefix$$
The default value for prefix directory is $code ^HOME$$
i.e., by default the CppAD include files 
will $cref/install/InstallUnix/make install/$$ below $code ^HOME$$.
If you want to install elsewhere, you will have to use this option.
As an example of using the $codei%--prefix=%PrefixDir%$$ option,
if you specify
$codep
	./configure --prefix=/usr/local
$$ 
the CppAD include files will be installed in the directory
$codei%
	/usr/local/include/cppad
%$$
If $cref/--with-Documentation/InstallUnix/--with-Documentation/$$
is specified, the CppAD documentation files will be installed in the directory
$codei%
	/usr/local/share/doc/cppad-@VERSION@
%$$

$head --with-Documentation$$
$index documentation, install$$
$index install, documentation$$
If the command line argument $code --with-Documentation$$ is specified,
the CppAD documentation HTML and XML files are copied to the directory
$codei%
	%PrefixDir%/share/doc/%PostfixDir%/cppad-@VERSION@
%$$
(see $cref/PostfixDir/InstallUnix/PostfixDir/$$).
The top of the CppAD HTML documentation tree 
(with mathematics displayed as LaTex command) will be located at
$codei%
	%PrefixDir%/share/doc/%PostfixDir%/cppad-@VERSION@/cppad.htm
%$$
and the top of the XML documentation tree
(with mathematics displayed as MathML) will be located at
$codei%
	%PrefixDir%/share/doc/%PostfixDir%/cppad-@VERSION@/cppad.xml
%$$

$head --with-stdvector$$
$index std::vector, unix$$
The 
$small $cref/CPPAD_TEST_VECTOR/test_vector/$$ $$
template class is used for extensive examples and testing of CppAD.
If the command line argument $code --with-stdvector$$ is specified,
the default definition this template class is replaced by
$codep
	std::vector
$$
(In this case $icode BoostDir$$ must not also be specified.)

$head PostfixDir$$
$index configure, postfix directory$$
$index postfix, configure directory$$
$index directory, configure postfix$$
By default, the postfix directory is empty; i.e., there
is no postfix directory.
As an example of using the $codei%POSTFIX_DIR=%PostfixDir%$$ option,
if you specify
$codep
	./configure --prefix=/usr/local POSTFIX_DIR=coin
$$ 
the CppAD include files will be 
$cref/installed/InstallUnix/make install/$$ in the directory
$codei%
	/usr/local/include/coin/cppad
%$$
If $cref/--with-Documentation/InstallUnix/--with-Documentation/$$
is specified, the CppAD documentation files will be installed in the directory
$codei%
	/usr/local/share/doc/coin/cppad-@VERSION@
%$$

$head AdolcDir$$
$index Adolc, unix$$
If you have 
$href%
	http://www.math.tu-dresden.de/~adol-c/%
	Adolc 1.10.2
%$$
installed on your system, you can 
specify a value for $icode AdolcDir$$ in the 
$xref/InstallUnix/Configure/configure/$$ command line.
The value of $icode AdolcDir$$ must be such that
$codei%
	%AdolcDir%/include/adolc/adouble.h
%$$
is a valid way to reference $code adouble.h$$.
In this case, you can run the Adolc speed correctness tests by 
executing the command $code make test$$ in the directory
$codei%
	%distribution_directory%/speed/adolc
%$$
After executing $code make test$$, you can run the Adolc speed tests 
by executing the command $code ./adolc$$ (see $cref/speed_main/$$).

$subhead Linux$$
If you are using Linux, 
you will have to add to following lines to the file
$code .bash_profile$$ in your home directory:
$codei%
	LD_LIBRARY_PATH=%AdolcDir%/lib:^{LD_LIBRARY_PATH}
	export LD_LIBRARY_PATH
%$$
in order for Adolc to run properly.

$subhead Cygwin$$
If you are using Cygwin, 
you will have to add to following lines to the file
$code .bash_profile$$ in your home directory:
$codei%
	PATH=%AdolcDir%/bin:^{PATH}
	export PATH
%$$
in order for Adolc to run properly.
If $icode AdolcDir$$ begins with a disk specification,
you must use the Cygwin format for the disk specification.
For example, 
if $code d:/adolc_base$$ is the proper directory,
$code /cygdrive/d/adolc_base$$ should be used for $icode AdolcDir$$.

$head FadbadDir$$
$index Fadbad, unix$$
If you have
$href%
	http://www.fadbad.com/%
	Fadbad 2.1
%$$
installed on your system, you can 
specify a value for $icode FadbadDir$$.
It must be such that
$codei%
	%FadbadDir%/FADBAD++/badiff.h
%$$
is a valid reference to $code badiff.h$$.

In this case, you can run the Fadbad speed correctness tests by 
executing the command $code make test$$ in the directory
$codei%
	%distribution_directory%/speed/fadbad
%$$
After executing $code make test$$, you can run the Fadbad speed tests 
by executing the command $code ./fadbad$$ (see $cref/speed_main/$$).


$head SacadoDir$$
$index Sacado, unix$$
If you have
$href%
	http://trilinos.sandia.gov/packages/sacado/%
	Sacado
%$$
installed on your system, you can 
specify a value for $icode SacadoDir$$.
It must be such that
$codei%
	%SacadoDir%/include/Sacado.hpp
%$$
is a valid reference to $code Sacado.hpp$$.

In this case, you can run the Sacado speed correctness tests by 
executing the command $code make test$$ in the directory
$codei%
	%distribution_directory%/speed/sacado
%$$
After executing $code make test$$, you can run the Sacado speed tests 
by executing the command $code ./sacado$$ (see $cref/speed_main/$$).


$head BoostDir$$
$index boost, unix$$
The
$small $cref/CPPAD_TEST_VECTOR/test_vector/$$ $$
template class is used for extensive examples and testing of CppAD.
The default definition for $code CPPAD_TEST_VECTOR$$ is
$xref/CppAD_vector//CppAD::vector/$$.
If the command line argument
$codei%
	BOOST_DIR=%BoostDir%
%$$
is present, it must be such that
$codei%
	%BoostDir%/boost/numeric/ublas/vector.hpp
%$$
is a valid reference to the file $code vector.hpp$$.
In this case, the default definition of $code CPPAD_TEST_VECTOR$$ 
is replaced by
$codep
	boost::numeric::ublas::vector
$$
(see $href%http://www.boost.org%boost%$$).
If $icode BoostDir$$ is present, the argument $code --with-stdvector$$
must not be present.

$head IpoptDir$$
$index Ipopt, unix$$
If you have
$href%
	http://www.coin-or.org/projects/Ipopt.xml%
	Ipopt
%$$
installed on your system, you can 
specify a value for $icode IpoptDir$$.
It must be such that
$codei%
	%IpoptDir%/include/coin/IpIpoptApplication.hpp
%$$
is a valid reference to $code IpIpoptApplication.hpp$$.
In this case, the CppAD interface to Ipopt
$cref/examples/cppad_ipopt_nlp/Example/$$ can be built and tested
by executing the command $code make test$$ in the directory
$codei%
	%distribution_directory%/cppad_ipopt/example
%$$
You can do more testing of this interface by executing $code make test$$
in the directories
$codei%
	%distribution_directory%/cppad_ipopt/test
	%distribution_directory%/cppad_ipopt/speed
%$$
Once this has been done, you can execute the program
$codei%
	%distribution_directory%/cppad_ipopt/speed/speed
%$$
see $cref/ipopt_ode_speed.cpp/$$.

$head CompilerFlags$$
$index compile, unix flags$$
$index flags, unix compile$$
If the command line argument $icode CompilerFlags$$ is present,
it specifies compiler flags.
For example,
$codei%
	CXX_FLAGS="-Wall -ansi"
%$$
would specify that warning flags $code -Wall$$
and $code -ansi$$ should be included
in all the C++ compile commands.
The error and warning flags chosen must be valid options
for the C++ compiler.
The default value for $icode CompilerFlags$$ is the
empty string.


$head make install$$
Once you are satisfied that the tests are giving correct results,
you can install CppAD into easy to use directories by executing the command
$codep
	make install
$$
This will install CppAD in the location specified by 
$cref/PrefixDir/InstallUnix/PrefixDir/$$.
You must have permission to write in the $icode PrefixDir$$
directory to execute this command. 
You may optionally specify a destination directory for the install; i.e.,
$codei%
	make install DESTDIR=%DestinationDirectory%
%$$

$end
