$Id: reverse.omh 1662 2010-03-11 18:31:11Z bradbell $
/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-10 Bradley M. Bell

CppAD is distributed under multiple licenses. This distribution is under
the terms of the 
                    Common Public License Version 1.0.

A copy of this license is included in the COPYING file of this distribution.
Please visit http://www.coin-or.org/CppAD/ for information on other licenses.
-------------------------------------------------------------------------- */
$begin reverse_one$$

$section First Order Reverse Mode$$
$spell 
	taylor
	const
	dw
$$

$index reverse, first order mode$$
$index first, order reverse mode$$
$index mode, first order reverse$$
$index derivative, reverse mode$$

$head Syntax$$
$icode%dw% = %f%.Reverse(1, %w%)%$$


$head Purpose$$
We use $latex F : B^n \rightarrow B^m$$ to denote the
$cref/AD function/glossary/AD Function/$$ corresponding to $icode f$$.
The function $latex W : B^n \rightarrow B$$ is defined by
$latex \[
	W(x) = w_0 * F_0 ( x ) + \cdots + w_{m-1} * F_{m-1} (x)
\] $$ 
The result of this operation is the derivative 
$latex dw = W^{(1)} (x)$$; i.e.,
$latex \[
	dw = w_0 * F_0^{(1)} ( x ) + \cdots + w_{m-1} * F_{m-1}^{(1)} (x)
\] $$
Note that if $latex w$$ is the $th i$$ 
$cref/elementary vector/glossary/Elementary Vector/$$,
$latex dw = F_i^{(1)} (x)$$.

$head f$$
The object $icode f$$ has prototype
$codei%
	const ADFun<%Base%> %f%
%$$
Before this call to $code Reverse$$, the value returned by
$codei%
	%f%.size_taylor()
%$$
must be greater than or equal one (see $cref/size_taylor/$$).

$head x$$
The vector $icode x$$ in expression for $italic dw$$ above
corresponds to the previous call to $cref/ForwardZero/$$
using this ADFun object $icode f$$; i.e.,
$codei%
	%f%.Forward(0, %x%)
%$$
If there is no previous call with the first argument zero,
the value of the $cref/independent/Independent/$$ variables 
during the recording of the AD sequence of operations is used
for $icode x$$.

$head w$$
The argument $icode w$$ has prototype
$codei%
	const %Vector% &%w%
%$$
(see $cref/Vector/reverse_one/Vector/$$ below)
and its size 
must be equal to $icode m$$, the dimension of the
$cref/range/seq_property/Range/$$ space for $icode f$$.

$head dw$$
The result $icode dw$$ has prototype
$codei%
	%Vector% %dw%
%$$
(see $cref/Vector/reverse_one/Vector/$$ below)
and its value is the derivative $latex W^{(1)} (x)$$.
The size of $icode dw$$ 
is equal to $icode n$$, the dimension of the
$cref/domain/seq_property/Domain/$$ space for $icode f$$.

$head Vector$$
The type $icode Vector$$ must be a $cref/SimpleVector/$$ class with
$cref/elements of type/SimpleVector/Elements of Specified Type/$$
$icode Base$$.
The routine $cref/CheckSimpleVector/$$ will generate an error message
if this is not the case.

$head Example$$
$children%
	example/reverse_one.cpp
%$$
The file
$cref/reverse_one.cpp/$$
contains an example and test of this operation.
It returns true if it succeeds and false otherwise.

$end
-----------------------------------------------------------------------
$begin reverse_two$$

$section Second Order Reverse Mode$$
$spell 
	taylor
	const
	dw
$$

$index reverse, second order mode$$
$index second, order reverse mode$$
$index mode, second order reverse$$
$index derivative, reverse mode$$

$head Syntax$$
$icode%dw% = %f%.Reverse(2, %w%)%$$

$head Purpose$$
We use $latex F : B^n \rightarrow B^m$$ to denote the
$cref/AD function/glossary/AD Function/$$ corresponding to $icode f$$.
Reverse mode computes the derivative of the $cref/Forward/$$ mode
$cref/Taylor coefficients/glossary/Taylor Coefficient/$$
with respect to the domain variable $latex x$$.

$head x^(k)$$
For $latex k = 0, 1$$,
the vector $latex x^{(k)} \in B^n$$ is defined as the value of 
$icode x_k$$ in the previous call (counting this call) of the form
$codei%
	%f%.Forward(%k%, %x_k%)
%$$ 
If there is no previous call with $latex k = 0$$,
$latex x^{(0)}$$ is the value of the independent variables when the 
corresponding 
AD of $icode Base$$
$xref/glossary/Operation/Sequence/operation sequence/1/$$ was recorded.


$head W$$
The functions 
$latex W_0 : B^n \rightarrow B$$ and 
$latex W_1 : B^n \rightarrow B$$ 
are defined by
$latex \[
\begin{array}{rcl}
W_0 ( u ) & = & w_0 * F_0 ( u ) + \cdots + w_{m-1} * F_{m-1} (u)
\\
W_1 ( u ) & = & 
w_0 * F_0^{(1)} ( u ) * x^{(1)} 
	+ \cdots + w_{m-1} * F_{m-1}^{(1)} (u) * x^{(1)}
\end{array}
\] $$ 
This operation computes the derivatives 
$latex \[
\begin{array}{rcl}
W_0^{(1)} (u) & = & 
	w_0 * F_0^{(1)} ( u ) + \cdots + w_{m-1} * F_{m-1}^{(1)} (u)
\\
W_1^{(1)} (u) & = & 
	w_0 * \left( x^{(1)} \right)^\T * F_0^{(2)} ( u ) 
	+ \cdots + 
	w_{m-1} * \left( x^{(1)} \right)^\T F_{m-1}^{(2)} (u)
\end{array}
\] $$
at $latex u = x^{(0)}$$.

$head f$$
The object $icode f$$ has prototype
$codei%
	const ADFun<%Base%> %f%
%$$
Before this call to $code Reverse$$, the value returned by
$codei%
	%f%.size_taylor()
%$$
must be greater than or equal two (see $cref/size_taylor/$$).

$head w$$
The argument $icode w$$ has prototype
$codei%
	const %Vector% &%w%
%$$
(see $cref/Vector/reverse_two/Vector/$$ below)
and its size 
must be equal to $icode m$$, the dimension of the
$cref/range/seq_property/Range/$$ space for $icode f$$.

$head dw$$
The result $icode dw$$ has prototype
$codei%
	%Vector% %dw%
%$$
(see $cref/Vector/reverse_two/Vector/$$ below).
It contains both the derivative
$latex W^{(1)} (x)$$ and the derivative $latex U^{(1)} (x)$$.
The size of $icode dw$$ 
is equal to $latex n \times 2$$, 
where $latex n$$ is the dimension of the
$cref/domain/seq_property/Domain/$$ space for $icode f$$.

$subhead First Order Partials$$
For $latex j = 0 , \ldots , n - 1$$,
$latex \[
dw [ j * 2 + 0 ] 
=  
\D{ W_0 }{ u_j } \left( x^{(0)} \right) 
=
w_0 * \D{ F_0 }{ u_j } \left( x^{(0)} \right)
+ \cdots + 
w_{m-1} * \D{ F_{m-1} }{ u_j } \left( x^{(0)} \right)
\] $$
This part of $icode dw$$ contains the same values as are returned
by $cref/reverse_one/$$.

$subhead Second Order Partials$$
For $latex j = 0 , \ldots , n - 1$$,
$latex \[
dw [ j * 2 + 1 ] 
= 
\D{ W_1 }{ u_j } \left( x^{(0)} \right) 
=
\sum_{\ell=0}^{n-1} x_\ell^{(1)} \left[
w_0 * \DD{ F_0 }{ u_\ell }{ u_j } \left( x^{(0)} \right)
+ \cdots + 
w_{m-1} * \DD{ F_{m-1} }{ u_\ell }{ u_j } \left( x^{(0)} \right)
\right]
\] $$


$head Vector$$
The type $icode Vector$$ must be a $cref/SimpleVector/$$ class with
$cref/elements of type/SimpleVector/Elements of Specified Type/$$
$icode Base$$.
The routine $cref/CheckSimpleVector/$$ will generate an error message
if this is not the case.


$head Hessian Times Direction$$
Suppose that $latex w$$ is the $th i$$ elementary vector. 
It follows that for $latex j = 0, \ldots, n-1$$
$latex \[
\begin{array}{rcl}
dw[ j * 2 + 1 ] 
& = & 
w_i \sum_{\ell=0}^{n-1} 
\DD{F_i}{ u_j }{ u_\ell } \left( x^{(0)} \right) x_\ell^{(1)} 
\\
& = &
\left[ F_i^{(2)} \left( x^{(0)} \right) * x^{(1)} \right]_j
\end{array}
\] $$
Thus the vector $latex ( dw[1], dw[3], \ldots , dw[ n * p - 1 ] )$$
is equal to the Hessian of $latex F_i (x)$$ times the direction
$latex x^{(1)}$$.
In the special case where 
$latex x^{(1)}$$ is the $th l$$
$cref/elementary vector/glossary/Elementary Vector/$$,
$latex \[
dw[ j * 2 + 1 ] = \DD{ F_i }{ x_j }{ x_\ell } \left( x^{(0)} \right)
\] $$

$head Example$$
$children%
	example/reverse_two.cpp%
	example/hes_times_dir.cpp
%$$
The files
$cref/reverse_two.cpp/$$
and
$cref/HesTimesDir.cpp/$$
contain a examples and tests of reverse mode calculations.
They return true if they succeed and false otherwise.

$end
-----------------------------------------------------------------------
$begin reverse_any$$
$spell
	checkpointing
	typename
	xk
	xp
	dw
	Ind
	uj
	std
	arg
	const
	Taylor
$$

$section Any Order Reverse Mode$$ 


$index reverse, any order mode$$
$index any, order reverse mode$$
$index mode, any order reverse$$
$index derivative, reverse mode$$

$head Syntax$$
$icode%dw% = %f%.Reverse(%p%, %w%)%$$


$head Purpose$$
We use $latex F : B^n \rightarrow B^m$$ to denote the
$cref/AD function/glossary/AD Function/$$ corresponding to $icode f$$.
Reverse mode computes the derivative of the $cref/Forward/$$ mode
$cref/Taylor coefficients/glossary/Taylor Coefficient/$$
with respect to the domain variable $latex x$$.
To be specific, it computes the derivative 
$latex W^{(1)} (u)$$ at $latex u = x$$
which is specified by the following notation:

$head Notation$$

$subhead x^(k)$$
For $latex k = 0, \ldots , p-1$$,
the vector $latex x^{(k)} \in B^n$$ is defined as the value of 
$icode x_k$$ in the previous calls of the form
$codei%
	%f%.Forward(%k%, %x_k%)
%$$ 
If there is no previous call with $latex k = 0$$,
$latex x^{(0)}$$ is the value of the independent variables when the 
corresponding 
AD of $icode Base$$
$xref/glossary/Operation/Sequence/operation sequence/1/$$ was recorded.


$subhead X(t, u)$$
The function
$latex X : B \times B^{n \times p} \rightarrow B^n$$ is defined by
$latex \[
	X ( t , u ) = u^{(0)} + u^{(1)} * t + \cdots + u^{(p-1)} * t^{p-1} 
\] $$ 
Note that for $latex k = 0 , \ldots , p-1$$,
$latex u^{(k)}$$ is related to the $th k$$ partial of $latex X(t, u)$$ 
with respect to $latex t$$ by
$latex \[
	u^{(k)} = \frac{1}{k !} \Dpow{k}{t} X(0, u) 
\] $$

$subhead Y(t, u)$$
The function
$latex Y : B \times B^{n \times p} \rightarrow B^m$$ is defined by
$latex \[
	Y(t, u) = F [ X(t,u) ]
\]$$

$subhead w^(k)$$
If the argument $icode w$$ has size $icode%m% * %p%$$,
for $latex k = 0 , \ldots , p-1$$ and $latex i = 0, \ldots , m-1$$,
$latex \[
	w_i^{(k)} = w [ i * p + k ]
\] $$
If the argument $icode w$$ has size $icode m$$,
for $latex k = 0 , \ldots , p-1$$ and $latex i = 0, \ldots , m-1$$,
$latex \[
w_i^{(k)} = \left\{ \begin{array}{ll}
	w [ i ] & {\rm if} \; k = p-1
	\\
	0       & {\rm otherwise}
\end{array} \right.
\] $$


$subhead W(u)$$
The function $latex W : B^{n \times p} \rightarrow B$$ is defined by
$latex \[
W(u) = \sum_{k=0}^{p-1} ( w^{(k)} )^\T \frac{1}{k !} \Dpow{k}{t} Y(0, u)
\] $$


$head f$$
The object $icode f$$ has prototype
$codei%
	const ADFun<%Base%> %f%
%$$
Before this call to $code Reverse$$, the value returned by
$codei%
	%f%.size_taylor()
%$$
must be greater than or equal $icode p$$
(see $cref/size_taylor/$$).

$head p$$
The argument $icode p$$ has prototype
$codei%
	size_t %p%
%$$
and specifies the number of Taylor coefficients to be differentiated
(for each variable).


$head w$$
The argument $icode w$$ has prototype
$codei%
	const %Vector% &%w%
%$$
(see $cref/Vector/reverse_any/Vector/$$ below)
and its size 
must be equal to $icode m$$ or $icode%m% * %p%$$, 
It specifies the weighting vector $icode w$$
in the definition of 
$cref/W(u)/reverse_any/Notation/W(u)/$$.


$head dw$$
The return value $icode dw$$ has prototype
$codei%
	%Vector% %dw%
%$$
(see $cref/Vector/reverse_any/Vector/$$ below).
It is a vector with size $latex n \times p$$.
For $latex j = 0, \ldots, n-1$$ and $latex k = 0 , \ldots , p-1$$
If the argument $icode w$$ has size $icode%m% * %p%$$,
$latex \[
	dw[ j * p + k ] = W^{(1)} ( x )_{j,k} 
\] $$
where $latex u = x$$ is value of the Taylor coefficients where the 
derivative is evaluated.
$pre

$$
If the argument $icode w$$ has size $icode m$$,
$latex \[
	dw[ j * p + p - k - 1 ] = W^{(1)} ( x )_{j,k} 
\] $$
where $latex u = x$$ is value of the Taylor coefficients where the 
derivative is evaluated.
Note the reverse order in which the order indices are stored.
This is an unfortunate consequence of keeping $code Reverse$$ backward
compatible.

$head First Order$$
We consider the case where 
$icode%p% = 1%$$ and $icode%w%.size() == %m%$$.
In this case
$latex \[
\begin{array}{rcl}
W(u) & = & w_0 Y_0 (0, u) + \cdots + w_m Y_m (0, u)
\\ 
W(u) & = & w_0 F_0 [ X(0, u) ] + \cdots + w_m F_m [ X(0, u) ]
\\ 
W^{(1)} (x) & = & 
	w_0 F_0^{(1)} ( x^{(0)} ) + \cdots + w_m F_m^{(1)} ( x^{(0)} )
\end{array}
\] $$
This is the same as the result documented in $cref/reverse_one/$$.


$head Second Order$$
We consider the case where 
$icode%p% = 2%$$ and $icode%w%.size() == %m%$$.
In this case
$latex \[
\begin{array}{rcl}
W(u) & = & w_0 \partial_t Y_0 (0, u) + \cdots + w_m \partial_t Y_m (0, u)
\\ 
W(u) & = &
	w_0 \partial_t \{ F_0 [ X(t, u) ] \}_{t = 0}
	 + \cdots + 
	w_m \partial_t \{ F_m [ X(t, u) ] \}_{t = 0}
\\ 
W(u) & = &
	w_0 F_0^{(1)} ( u^{(0)} ) u^{(1)} 
	 + \cdots + 
	w_0 F_m^{(1)} ( u^{(0)} ) u^{(1)} 
\\
\partial_{u(0)} W(x) & = &
	w_0 (  x^{(1)} )^\T F_0^{(2)} ( x^{(0)} ) 
	+ \cdots + 
	w_m (  x^{(1)} )^\T F_m^{(2)} ( x^{(0)} ) 
\\
\partial_{u(1)} W(x) & = &
	w_0 F_0^{(1)} ( x^{(0)} ) 
	+ \cdots + 
	w_m F_m^{(1)} ( x^{(0)} ) 
\end{array}
\] $$
where $latex \partial{u(0)} $$ 
denotes partial with respect to $latex u^{(0)}$$.
These are the same as the result documented in $cref/reverse_two/$$.


$head Vector$$
The type $icode Vector$$ must be a $cref/SimpleVector/$$ class with
$cref/elements of type/SimpleVector/Elements of Specified Type/$$
$icode Base$$.
The routine $cref/CheckSimpleVector/$$ will generate an error message
if this is not the case.


$head Example$$
$children%
	example/reverse_three.cpp%
	example/reverse_any.cpp%
	example/checkpoint.cpp
%$$

$list number$$
The file $cref/reverse_three.cpp/$$
contains an example and test of using reverse mode
to compute third order derivatives.
$lnext
The file $cref/reverse_any.cpp/$$
contains an example and test of the general reverse mode case.
$lnext
The file $cref/checkpoint.cpp/$$
contains an example and test of checkpointing; i.e.
splitting a reverse mode calculation at a function composition point.
$lend

$end
