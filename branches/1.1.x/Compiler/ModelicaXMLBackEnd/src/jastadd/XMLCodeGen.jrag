import java.io.PrintStream;

/*
Copyright (C) 2009 Modelon AB

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect XMLCodeGen {
	

	/************************************************************************************************
	 *
	 * TODO Schema : complete expression list
	 * 
	 * TODO Generation : not statical namespace definition; add the missing exp (time, notsupported,...)
	 * 
	 * **********************************************************************************************
	 */
	
	class XMLPrettyPrinter extends Printer {
 		public void toString(ASTNode node, PrintStream str, String indent, Object o) { 
 			node.prettyPrint_XML(this, str, indent, o); 
 		}
	}
	
	public String ASTNode.prettyPrint_XML(String indent) {
		StringOutputStream os = new StringOutputStream();
		PrintStream str = new PrintStream(os);
		prettyPrint_XML(str,indent,null);
		return os.toString();
	}

	public String ASTNode.prettyPrint_XML(String indent,Object o) {
		StringOutputStream os = new StringOutputStream();	
		PrintStream str = new PrintStream(os);
		prettyPrint_XML(str,indent,o);
		return os.toString();
	}

	
	public void ASTNode.prettyPrint_XML(PrintStream str,String indent) {
 		prettyPrint_XML(new XMLPrettyPrinter(),str,indent,null);
	}

	public void ASTNode.prettyPrint_XML(PrintStream str,String indent, Object o) {
 		prettyPrint_XML(new XMLPrettyPrinter(),str,indent,o);
	}
	
	public void ASTNode.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o) {
		prettyPrint(p,str,indent,o);
		/*for(int i = 0; i < getNumChild(); i++)
   			p.toString(getChild(i),str,indent,o); // distpatch through Printer
	    */
	}
	
	//PrettyPrint of equation in residual form: expression1-expression2 = 0
	public void FAbstractEquation.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		ASTNode left = getChild(this,0);
		ASTNode right = getChild(this,1);
		String eqXMLtag = this.getXMLTag();
		FSubExp fsubexp = new FSubExp();
		String subXMLtag = fsubexp.getXMLTag();
		String eqNamespace = "equ";
		String expNamespace = "exp";
		
		str.println(indent+"<" +eqNamespace+ ":" + eqXMLtag + ">");
		str.println(indent+"\t<" + expNamespace + ":" + subXMLtag + ">");
		left.prettyPrint_XML(str,indent+"\t\t");
		right.prettyPrint_XML(str,indent+"\t\t");
		str.println(indent+"\t</" + expNamespace + ":" + subXMLtag + ">");
		str.println(indent+"</" +eqNamespace+ ":" + eqXMLtag + ">");
	}

	
	public void FLitExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace ="exp";
		String tag = this.getXMLTag();
		
		if (tag.equals("FBooleanLitExpTrue") || tag.equals("FBooleanLitExpFalse") )
			tag="FBooleanLitExp";
			
		str.print(indent + "<" + namespace + ":" + tag + ">");
		prettyPrint(p,str,"",o);
		str.println("</"+ namespace + ":" + tag + ">");
		
	}
	
	public void FArtmBinExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace = "exp";
		String tag = this.getXMLTag();		
		ASTNode left = getLeft();
		ASTNode right= getRight();
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		left.prettyPrint_XML(str,indent+"\t");
		right.prettyPrint_XML(str,indent+"\t");
		str.println(indent + "</"+ namespace + ":" + tag + ">");	
	}
	
	
	public void FLogBinExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace = "exp";
		String tag = this.getXMLTag();
		ASTNode left = getLeft();
		ASTNode right= getRight();
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		left.prettyPrint_XML(str,indent+"\t");
		right.prettyPrint_XML(str,indent+"\t");
		str.println(indent + "</"+ namespace + ":" + tag + ">");	
	}
	
	
	public void FUnaryExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace="exp";
		String tag = this.getXMLTag();
		ASTNode child = getChild(this,0);	
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		child.prettyPrint_XML(str,indent+"\t");
		str.println(indent + "</"+ namespace + ":" + tag + ">");
	}
	
	
	public void FMathematicalFunctionCall.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace ="exp";
		String tag = this.getXMLTag();
		ASTNode child = getChild(this,0);
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		child.prettyPrint_XML(str,indent+"\t");
		str.println(indent + "</"+ namespace + ":" + tag + ">");
	}
	
	
	//TODO: test ************************************************
	public void FAtan2Exp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		String namespace="exp";
		String tag= this.getXMLTag();
		ASTNode x_arg = getChild(this,0);
		ASTNode y_arg= getChild(this,1);
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		x_arg.prettyPrint_XML(str,indent+"\t");
		y_arg.prettyPrint_XML(str,indent+"\t");
		str.println(indent + "</"+ namespace + ":" + tag + ">");
	}
	
	
	public void FDerExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		ASTNode child = getChild(this,0);	
		String namespace = "exp";
		String tag = this.getXMLTag();
		//String tag = "FDer";
		
		str.println(indent + "<" + namespace + ":" + tag + ">");
		child.prettyPrint_XML(str,indent+"\t");
		str.println(indent + "</"+ namespace + ":" + tag + ">");
	}
	
	public void FIdUseExp.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		ASTNode child = getChild(this,0);
		ASTNode idUse = child.getChild(0);
		String namespace = "exp";
		String tag = this.getXMLTag();
		
		str.print(indent + "<" + namespace + ":" + tag + ">");
		idUse.prettyPrint_XML(str,"");
		str.println("</" + namespace + ":" + tag + ">");		
	}
	
	
	public void FIdUse.prettyPrint_XML(Printer p, PrintStream str, String indent, Object o){
		ASTNode child = getChild(this,0);
		String namespace = "exp";
		String tag = this.getXMLTag();
		
		str.print(indent + "<" + namespace + ":" + tag + ">");
		child.prettyPrint_XML(str,"");
		str.println("</" + namespace + ":" + tag + ">");
	}
}


aspect XMLTagBinding{
	
	public String ASTNode.getXMLTag(){
		
		//XML tags definition for expressions
		final String $FIdUse_XMLtag = "FIdUse";
		final String $FAddExp_XMLtag = "FAddExp";
		final String $FSubExp_XMLtag = "FSubExp";
		final String $FMulExp_XMLtag = "FMulExp";
		final String $FDivExp_XMLtag = "FDivExp";
		final String $FPowExp_XMLtag = "FPowExp";
		final String $FNegExp_XMLtag = "FNegExp";		
		final String $FLtExp_XMLtag = "FLogLtExp";
		final String $FLeqExp_XMLtag = "FLogLeqExp";
		final String $FGtExp_XMLtag = "FLogGtExp";
		final String $FGeqExp_XMLtag = "FLogGeqExp";
		final String $FEqExp_XMLtag = "FLogEqExp";
		final String $FNeqExp_XMLtag = "FLogNeqExp";
		final String $FNotExp_XMLtag = "FNotExp";
		final String $FOrExp_XMLtag = "FOrExp";
		final String $FAndExp_XMLtag = "FAndExp";
		final String $FRealLitExp_XMLtag = "FRealLitExp";
		final String $FIntegerLitExp_XMLtag = "FIntegerLitExp";
		final String $FBooleanLitExp_XMLtag = "FBooleanLitExp";
		final String $FStringLitExp_XMLtag = "FStringLitExp";
		final String $FDerExp_XMLtag = "FDerExp";
		final String $FSinExp_XMLtag = "FSinExp";
		final String $FCosExp_XMLtag = "FCosExp";
		final String $FTanExp_XMLtag = "FTanExp";
		final String $FAsinExp_XMLtag = "FAsinExp";
		final String $FAcosExp_XMLtag = "FAcosExp";
		final String $FAtanExp_XMLtag = "FAtanExp";
		final String $FSinhExp_XMLtag = "FSinhExp";
		final String $FCoshExp_XMLtag = "FCoshExp";
		final String $FTanhExp_XMLtag = "FTanhExp";
		final String $FExpExp_XMLtag = "FExpExp";
		final String $FLogExp_XMLtag = "FLogExp";
		final String $FLog10Exp_XMLtag = "FLog10Exp";
		final String $FSqrtExp_XMLtag = "FSqrtExp";
		final String $FAtan2Exp_XMLtag = "FAtan2Exp";			
		
		//XML tags definition for non-expressions nodes
		final String $FUnsupportedTag_XMLtag = "** Not supported tag **";
		final String $FAbstractEquation_XMLtag ="FEquation";
		
		
		if (this instanceof FAddExp) return $FAddExp_XMLtag;
		if (this instanceof FSubExp) return $FSubExp_XMLtag;
		if (this instanceof FMulExp) return $FMulExp_XMLtag;
		if (this instanceof FDivExp) return $FDivExp_XMLtag;
		if (this instanceof FPowExp) return $FPowExp_XMLtag;
		if (this instanceof FNegExp) return $FNegExp_XMLtag;
		if (this instanceof FLtExp) return $FLtExp_XMLtag;
		if (this instanceof FLeqExp) return $FLeqExp_XMLtag;
		if (this instanceof FGtExp) return $FGtExp_XMLtag;
		if (this instanceof FGeqExp) return $FGeqExp_XMLtag;
		if (this instanceof FEqExp) return $FEqExp_XMLtag;
		if (this instanceof FNeqExp) return $FNeqExp_XMLtag;
		if (this instanceof FNotExp) return $FNotExp_XMLtag;
		if (this instanceof FOrExp) return $FOrExp_XMLtag;
		if (this instanceof FAndExp) return $FAndExp_XMLtag;
		if (this instanceof FRealLitExp) return $FRealLitExp_XMLtag;
		if (this instanceof FIntegerLitExp) return $FIntegerLitExp_XMLtag;
		if (this instanceof FBooleanLitExpTrue || this instanceof FBooleanLitExpFalse) return $FBooleanLitExp_XMLtag;
		if (this instanceof FStringLitExp) return $FStringLitExp_XMLtag;
		if (this instanceof FDerExp) return $FDerExp_XMLtag;		
		if (this instanceof FSinExp) return $FSinExp_XMLtag;
		if (this instanceof FCosExp) return $FCosExp_XMLtag;
		if (this instanceof FTanExp) return $FTanExp_XMLtag;
		if (this instanceof FAsinExp) return $FAsinExp_XMLtag;
		if (this instanceof FAcosExp) return $FAcosExp_XMLtag;
		if (this instanceof FAtanExp) return $FAtanExp_XMLtag;
		if (this instanceof FSinhExp) return $FSinhExp_XMLtag;
		if (this instanceof FCoshExp) return $FCoshExp_XMLtag;
		if (this instanceof FTanhExp) return $FTanhExp_XMLtag;
		if (this instanceof FExpExp) return $FExpExp_XMLtag;
		if (this instanceof FLogExp) return $FLogExp_XMLtag;
		if (this instanceof FLog10Exp) return $FLog10Exp_XMLtag;
		if (this instanceof FSqrtExp) return $FSqrtExp_XMLtag;
		if (this instanceof FAtan2Exp) return $FAtan2Exp_XMLtag;
		if (this instanceof FIdUse || this instanceof FIdUseExp) return $FIdUse_XMLtag;
		
		if (this instanceof FAbstractEquation) return $FAbstractEquation_XMLtag;
		
		System.out.println("Warning: the model can cointains unsopported expressions and the generated XML document can be unvalid");
		return $FUnsupportedTag_XMLtag;
	}
}