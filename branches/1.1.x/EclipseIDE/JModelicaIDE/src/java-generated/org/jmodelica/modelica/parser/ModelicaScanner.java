/* The following code was generated by JFlex 1.4.3 on 10/6/09 7:14 PM */

/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
package org.jmodelica.modelica.parser;

import java.util.Map;
import java.util.HashMap;
import beaver.Scanner;
import org.jmodelica.modelica.parser.ModelicaParser.Terminals;/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/





/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/6/09 7:14 PM from the specification file
 * <tt>/home/philip/workspace/JModelicaIDE/src/java-generated/org/jmodelica/modelica/parser/Modelica_all.flex</tt>
 */
public final class ModelicaScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\25\1\24\1\0\1\25\1\23\22\0\1\25\1\0\1\4"+
    "\4\0\1\3\1\50\1\51\1\27\1\21\1\60\1\22\1\16\1\26"+
    "\12\15\1\57\1\56\1\63\1\61\1\64\1\5\1\0\4\1\1\20"+
    "\25\1\1\54\1\2\1\55\1\62\1\1\1\0\1\6\1\7\1\33"+
    "\1\40\1\17\1\10\1\45\1\32\1\31\1\1\1\41\1\34\1\36"+
    "\1\11\1\37\1\43\1\47\1\12\1\35\1\13\1\46\1\14\1\30"+
    "\1\42\1\44\1\1\1\52\1\0\1\53\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\2\2\6\3\1\4\1\5\1\3"+
    "\1\6\1\7\2\10\1\11\1\12\1\13\10\3\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\4\0\1\31\16\3\1\1"+
    "\1\0\1\1\5\3\1\32\1\0\2\3\1\33\1\34"+
    "\5\3\1\35\5\3\1\36\1\37\1\40\1\41\2\3"+
    "\1\42\5\3\1\43\1\3\1\44\10\3\1\0\2\3"+
    "\1\45\4\3\2\32\2\0\26\3\1\46\5\3\1\47"+
    "\1\50\1\51\1\52\1\53\1\3\1\0\1\54\3\3"+
    "\1\0\1\3\1\55\10\3\1\56\13\3\1\57\1\60"+
    "\1\61\6\3\1\62\1\0\3\62\7\3\1\63\1\64"+
    "\1\3\1\65\1\3\1\66\2\3\1\67\1\70\12\3"+
    "\1\71\1\72\3\3\2\0\2\62\1\73\1\3\1\74"+
    "\4\3\1\75\1\3\1\76\3\3\1\77\5\3\1\100"+
    "\6\3\1\62\1\101\2\62\1\3\1\102\3\3\1\103"+
    "\1\104\4\3\1\105\1\106\3\3\1\107\3\3\1\110"+
    "\1\62\1\111\1\112\1\3\1\113\1\0\1\3\1\114"+
    "\1\3\1\115\3\3\1\116\1\117\2\3\1\120\1\3"+
    "\2\0\1\121\1\3\1\122\1\123\1\124\2\3\1\125"+
    "\2\0\1\3\1\126\1\3\2\0\1\3\1\127\2\0"+
    "\1\3\2\0\1\130\5\0\1\131\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\65\0\65"+
    "\0\u02e6\0\65\0\u031b\0\u0350\0\65\0\u0385\0\u03ba\0\u03ef"+
    "\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\u052d\0\65"+
    "\0\u0562\0\u0597\0\u05cc\0\u0601\0\324\0\u0636\0\65\0\u066b"+
    "\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813"+
    "\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u027c"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\152\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1"+
    "\0\152\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\65\0\65"+
    "\0\65\0\65\0\65\0\u0ddf\0\152\0\u0e14\0\u0e49\0\u0e7e"+
    "\0\u0eb3\0\u0ee8\0\152\0\u0f1d\0\152\0\u0f52\0\u0f87\0\u0fbc"+
    "\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u027c\0\u10fa\0\u112f"+
    "\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\65\0\u12a2"+
    "\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a"+
    "\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2"+
    "\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\152"+
    "\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e\0\152\0\152\0\152"+
    "\0\152\0\152\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac"+
    "\0\u19e1\0\u1a16\0\152\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f"+
    "\0\u1b54\0\u1b89\0\u1bbe\0\152\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92"+
    "\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\152"+
    "\0\152\0\152\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43"+
    "\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081\0\u20b6\0\u20eb"+
    "\0\u2120\0\u2155\0\u218a\0\u21bf\0\152\0\152\0\u21f4\0\152"+
    "\0\u2229\0\152\0\u225e\0\u2293\0\152\0\152\0\u22c8\0\u22fd"+
    "\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5"+
    "\0\152\0\152\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae\0\u25e3"+
    "\0\u2618\0\u1f78\0\u264d\0\152\0\u2682\0\u26b7\0\u26ec\0\u2721"+
    "\0\152\0\u2756\0\152\0\u278b\0\u27c0\0\u27f5\0\152\0\u282a"+
    "\0\u285f\0\u2894\0\u28c9\0\u28fe\0\152\0\u2933\0\u2968\0\u299d"+
    "\0\u29d2\0\u2a07\0\u2a3c\0\65\0\u1f78\0\u2a71\0\u2aa6\0\u2adb"+
    "\0\152\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\u2c19\0\u2c4e"+
    "\0\u2c83\0\u2cb8\0\152\0\152\0\u2ced\0\u2d22\0\u2d57\0\152"+
    "\0\u2d8c\0\u2dc1\0\u2df6\0\u1f78\0\u2e2b\0\152\0\152\0\u2e60"+
    "\0\152\0\u2e95\0\u2eca\0\152\0\u2eff\0\152\0\u2f34\0\u2f69"+
    "\0\u2f9e\0\152\0\152\0\u2fd3\0\u3008\0\u1f78\0\u303d\0\u3072"+
    "\0\u30a7\0\152\0\u30dc\0\152\0\152\0\152\0\u3111\0\u3146"+
    "\0\152\0\u317b\0\u31b0\0\u31e5\0\152\0\u321a\0\u324f\0\u3284"+
    "\0\u32b9\0\152\0\u32ee\0\u3323\0\u3358\0\u338d\0\u33c2\0\152"+
    "\0\u33f7\0\u342c\0\u3461\0\u3496\0\u34cb\0\65\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\2\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\3\1\14\1\15\1\16"+
    "\1\3\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\3\1\30\1\31\1\3\1\32\1\33"+
    "\1\34\2\3\1\35\4\3\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\66\0\1\3\4\0\10\3\1\0\2\3\7\0"+
    "\20\3\15\0\2\53\1\54\1\0\61\53\2\55\1\56"+
    "\1\55\1\57\60\55\1\0\1\3\4\0\3\3\1\60"+
    "\4\3\1\0\2\3\7\0\4\3\1\61\13\3\16\0"+
    "\1\3\4\0\10\3\1\0\2\3\7\0\4\3\1\62"+
    "\13\3\16\0\1\3\4\0\1\63\7\3\1\0\2\3"+
    "\7\0\1\3\1\64\2\3\1\65\2\3\1\66\6\3"+
    "\1\67\1\3\16\0\1\3\4\0\10\3\1\0\2\3"+
    "\7\0\7\3\1\70\10\3\16\0\1\3\4\0\10\3"+
    "\1\0\1\71\1\3\7\0\20\3\16\0\1\3\4\0"+
    "\4\3\1\72\3\3\1\0\2\3\7\0\1\3\1\73"+
    "\1\74\11\3\1\75\3\3\32\0\1\14\1\76\2\77"+
    "\61\0\1\100\50\0\1\3\4\0\1\101\2\3\1\102"+
    "\4\3\1\0\2\3\7\0\4\3\1\103\5\3\1\104"+
    "\4\3\1\105\41\0\1\22\65\0\1\23\65\0\1\106"+
    "\1\107\36\0\1\3\4\0\10\3\1\0\2\3\7\0"+
    "\1\3\1\110\1\111\15\3\16\0\1\3\4\0\2\3"+
    "\1\112\1\113\4\3\1\0\2\3\7\0\6\3\1\114"+
    "\11\3\16\0\1\3\4\0\10\3\1\0\2\3\7\0"+
    "\4\3\1\115\2\3\1\116\10\3\16\0\1\3\4\0"+
    "\10\3\1\0\2\3\7\0\7\3\1\117\10\3\16\0"+
    "\1\3\4\0\10\3\1\0\2\3\7\0\7\3\1\120"+
    "\10\3\16\0\1\3\4\0\4\3\1\121\3\3\1\0"+
    "\2\3\7\0\16\3\1\122\1\3\16\0\1\3\4\0"+
    "\10\3\1\0\2\3\7\0\1\3\1\123\16\3\16\0"+
    "\1\3\4\0\1\124\3\3\1\125\3\3\1\0\2\3"+
    "\7\0\16\3\1\126\1\3\76\0\1\127\64\0\1\130"+
    "\2\0\1\131\61\0\1\132\3\0\2\53\1\54\1\133"+
    "\61\53\2\0\13\53\52\0\13\55\51\0\1\3\4\0"+
    "\3\3\1\134\4\3\1\0\2\3\7\0\10\3\1\135"+
    "\7\3\16\0\1\3\4\0\10\3\1\0\2\3\7\0"+
    "\15\3\1\136\2\3\16\0\1\3\4\0\10\3\1\0"+
    "\2\3\7\0\7\3\1\137\10\3\16\0\1\3\4\0"+
    "\10\3\1\0\2\3\7\0\4\3\1\140\13\3\16\0"+
    "\1\3\4\0\3\3\1\141\4\3\1\0\2\3\7\0"+
    "\20\3\16\0\1\3\4\0\10\3\1\0\2\3\7\0"+
    "\7\3\1\142\10\3\16\0\1\3\4\0\4\3\1\143"+
    "\3\3\1\0\2\3\7\0\20\3\16\0\1\3\4\0"+
    "\3\3\1\144\4\3\1\0\2\3\7\0\20\3\16\0"+
    "\1\3\4\0\5\3\1\145\2\3\1\0\2\3\7\0"+
    "\20\3\16\0\1\3\4\0\5\3\1\146\2\3\1\0"+
    "\2\3\7\0\3\3\1\147\4\3\1\150\2\3\1\151"+
    "\4\3\16\0\1\3\4\0\10\3\1\0\2\3\7\0"+
    "\16\3\1\152\1\3\16\0\1\3\4\0\10\3\1\0"+
    "\2\3\7\0\6\3\1\153\11\3\16\0\1\3\4\0"+
    "\10\3\1\0\1\154\1\3\7\0\20\3\16\0\1\3"+
    "\4\0\10\3\1\0\2\3\7\0\13\3\1\155\4\3"+
    "\32\0\1\76\1\0\2\77\61\0\1\100\3\0\2\156"+
    "\43\0\1\3\4\0\10\3\1\0\2\3\7\0\3\3"+
    "\1\157\14\3\16\0\1\3\4\0\10\3\1\0\2\3"+
    "\7\0\3\3\1\160\4\3\1\161\7\3\16\0\1\3"+
    "\4\0\10\3\1\0\2\3\7\0\5\3\1\162\12\3"+
    "\16\0\1\3\4\0\5\3\1\163\2\3\1\0\2\3"+
    "\7\0\13\3\1\164\4\3\16\0\1\3\4\0\10\3"+
    "\1\0\2\3\7\0\16\3\1\165\1\3\15\0\23\106"+
    "\1\166\1\167\40\106\27\170\1\171\35\170\1\0\1\3"+
    "\4\0\5\3\1\172\2\3\1\0\2\3\7\0\20\3"+
    "\16\0\1\3\4\0\10\3\1\0\1\173\1\3\7\0"+
    "\1\3\1\174\16\3\16\0\1\3\4\0\3\3\1\175"+
    "\4\3\1\0\2\3\7\0\1\3\1\176\11\3\1\177"+
    "\4\3\16\0\1\3\4\0\10\3\1\0\2\3\7\0"+
    "\13\3\1\200\4\3\16\0\1\3\4\0\1\201\7\3"+
    "\1\0\2\3\7\0\20\3\16\0\1\3\4\0\3\3"+
    "\1\202\4\3\1\0\2\3\7\0\20\3\16\0\1\3"+
    "\4\0\10\3\1\0\2\3\7\0\7\3\1\203\10\3"+
    "\16\0\1\3\4\0\10\3\1\0\2\3\7\0\10\3"+
    "\1\204\7\3\16\0\1\3\4\0\5\3\1\205\2\3"+
    "\1\0\2\3\7\0\20\3\16\0\1\3\4\0\10\3"+
    "\1\0\2\3\7\0\5\3\1\206\12\3\16\0\1\3"+
    "\4\0\4\3\1\207\3\3\1\0\2\3\7\0\3\3"+
    "\1\210\14\3\16\0\1\3\4\0\10\3\1\0\2\3"+
    "\7\0\7\3\1\211\10\3\16\0\1\3\4\0\1\3"+
    "\1\212\6\3\1\0\2\3\7\0\20\3\16\0\1\3"+
    "\4\0\10\3\1\0\2\3\7\0\7\3\1\213\10\3"+
    "\16\0\1\3\4\0\10\3\1\0\2\3\7\0\7\3"+
    "\1\214\10\3\16\0\1\3\4\0\10\3\1\0\2\3"+
    "\7\0\3\3\1\215\14\3\16\0\1\3\4\0\10\3"+
    "\1\0\2\3\7\0\5\3\1\216\12\3\16\0\1\3"+
    "\4\0\1\217\7\3\1\0\2\3\7\0\20\3\16\0"+
    "\1\3\4\0\10\3\1\0\2\3\7\0\1\220\17\3"+
    "\16\0\1\3\4\0\10\3\1\0\2\3\7\0\3\3"+
    "\1\221\14\3\16\0\1\3\4\0\10\3\1\0\2\3"+
    "\7\0\16\3\1\222\1\3\16\0\1\3\4\0\10\3"+
    "\1\0\2\3\7\0\7\3\1\223\10\3\16\0\1\3"+
    "\4\0\10\3\1\0\1\224\1\3\7\0\20\3\16\0"+
    "\1\3\4\0\10\3\1\0\2\3\7\0\4\3\1\225"+
    "\13\3\16\0\1\3\4\0\10\3\1\0\1\226\1\3"+
    "\7\0\20\3\16\0\1\3\4\0\10\3\1\0\1\227"+
    "\1\3\7\0\20\3\16\0\1\3\4\0\3\3\1\230"+
    "\4\3\1\0\2\3\7\0\20\3\16\0\1\3\4\0"+
    "\10\3\1\0\1\231\1\3\7\0\20\3\16\0\1\3"+
    "\4\0\10\3\1\0\2\3\7\0\2\3\1\232\15\3"+
    "\16\0\1\3\4\0\1\233\7\3\1\0\2\3\7\0"+
    "\20\3\16\0\1\3\4\0\10\3\1\0\2\3\2\0"+
    "\3\234\2\0\20\3\16\0\1\3\4\0\10\3\1\0"+
    "\1\235\1\3\7\0\20\3\16\0\1\3\4\0\10\3"+
    "\1\0\1\236\1\3\7\0\20\3\16\0\1\3\4\0"+
    "\1\237\7\3\1\0\2\3\7\0\20\3\16\0\1\3"+
    "\4\0\1\240\7\3\1\0\2\3\7\0\20\3\41\0"+
    "\1\167\40\0\27\170\1\241\35\170\26\0\1\167\1\171"+
    "\36\0\1\3\4\0\10\3\1\0\2\3\7\0\2\3"+
    "\1\242\15\3\16\0\1\3\4\0\3\3\1\243\4\3"+
    "\1\0\2\3\7\0\20\3\16\0\1\3\4\0\10\3"+
    "\1\0\2\3\7\0\4\3\1\244\13\3\16\0\1\3"+
    "\4\0\10\3\1\0\1\245\1\3\7\0\20\3\16\0"+
    "\1\3\4\0\5\3\1\246\2\3\1\0\2\3\7\0"+
    "\20\3\16\0\1\3\4\0\10\3\1\0\2\3\7\0"+
    "\16\3\1\247\1\3\16\0\1\3\4\0\10\3\1\0"+
    "\2\3\7\0\7\3\1\250\10\3\16\0\1\3\4\0"+
    "\10\3\1\0\2\3\7\0\5\3\1\251\12\3\16\0"+
    "\1\3\4\0\3\3\1\252\4\3\1\0\2\3\7\0"+
    "\5\3\1\253\12\3\16\0\1\3\4\0\10\3\1\0"+
    "\2\3\7\0\13\3\1\254\4\3\16\0\1\3\4\0"+
    "\10\3\1\0\1\255\1\3\7\0\20\3\16\0\1\3"+
    "\4\0\10\3\1\0\1\256\1\3\7\0\13\3\1\257"+
    "\4\3\16\0\1\3\4\0\10\3\1\0\2\3\7\0"+
    "\3\3\1\260\14\3\16\0\1\3\4\0\1\261\4\3"+
    "\1\262\2\3\1\0\2\3\7\0\20\3\16\0\1\3"+
    "\4\0\10\3\1\0\2\3\7\0\11\3\1\263\6\3"+
    "\16\0\1\3\4\0\5\3\1\264\2\3\1\0\2\3"+
    "\7\0\20\3\16\0\1\3\4\0\10\3\1\0\2\3"+
    "\7\0\4\3\1\265\13\3\16\0\1\3\4\0\5\3"+
    "\1\266\2\3\1\0\2\3\7\0\20\3\16\0\1\3"+
    "\4\0\4\3\1\267\3\3\1\0\2\3\7\0\20\3"+
    "\16\0\1\3\4\0\10\3\1\0\2\3\7\0\11\3"+
    "\1\270\6\3\16\0\1\3\4\0\10\3\1\0\1\271"+
    "\1\3\7\0\20\3\16\0\1\3\4\0\10\3\1\0"+
    "\2\3\7\0\4\3\1\272\13\3\16\0\1\3\4\0"+
    "\5\3\1\273\2\3\1\0\2\3\7\0\20\3\16\0"+
    "\1\3\4\0\4\3\1\274\3\3\1\0\2\3\7\0"+
    "\20\3\16\0\1\3\4\0\4\3\1\275\3\3\1\0"+
    "\2\3\7\0\20\3\16\0\1\3\4\0\10\3\1\0"+
    "\2\3\7\0\3\3\1\276\14\3\16\0\1\3\4\0"+
    "\1\277\7\3\1\0\2\3\7\0\20\3\16\0\1\3"+
    "\4\0\10\3\1\0\2\3\7\0\13\3\1\300\4\3"+
    "\16\0\1\301\1\0\1\302\2\0\2\301\1\303\4\301"+
    "\2\0\2\301\2\0\3\234\2\0\1\304\1\305\16\301"+
    "\16\0\1\3\4\0\10\3\1\0\2\3\7\0\1\306"+
    "\1\307\16\3\16\0\1\3\4\0\3\3\1\310\1\311"+
    "\3\3\1\0\2\3\7\0\20\3\16\0\1\3\4\0"+
    "\3\3\1\312\4\3\1\0\2\3\7\0\20\3\16\0"+
    "\1\3\4\0\5\3\1\313\2\3\1\0\2\3\7\0"+
    "\20\3\15\0\26\170\1\167\1\241\35\170\1\0\1\3"+
    "\4\0\10\3\1\0\2\3\7\0\1\3\1\314\16\3"+
    "\16\0\1\3\4\0\10\3\1\0\1\315\1\3\7\0"+
    "\20\3\16\0\1\3\4\0\4\3\1\316\3\3\1\0"+
    "\2\3\7\0\20\3\16\0\1\3\4\0\10\3\1\0"+
    "\2\3\7\0\1\3\1\317\16\3\16\0\1\3\4\0"+
    "\5\3\1\320\2\3\1\0\2\3\7\0\20\3\16\0"+
    "\1\3\4\0\4\3\1\321\3\3\1\0\2\3\7\0"+
    "\20\3\16\0\1\3\4\0\10\3\1\0\2\3\7\0"+
    "\5\3\1\322\12\3\16\0\1\3\4\0\10\3\1\0"+
    "\1\323\1\3\7\0\20\3\16\0\1\3\4\0\5\3"+
    "\1\324\2\3\1\0\2\3\7\0\20\3\16\0\1\3"+
    "\4\0\10\3\1\0\2\3\7\0\4\3\1\325\13\3"+
    "\16\0\1\3\4\0\4\3\1\326\3\3\1\0\2\3"+
    "\7\0\20\3\16\0\1\3\4\0\10\3\1\0\2\3"+
    "\7\0\16\3\1\327\1\3\16\0\1\3\4\0\4\3"+
    "\1\330\3\3\1\0\2\3\7\0\20\3\16\0\1\3"+
    "\4\0\10\3\1\0\2\3\7\0\6\3\1\331\11\3"+
    "\16\0\1\3\4\0\10\3\1\0\2\3\7\0\1\3"+
    "\1\332\16\3\16\0\1\3\4\0\1\333\7\3\1\0"+
    "\2\3\7\0\20\3\16\0\1\3\4\0\10\3\1\0"+
    "\1\334\1\3\7\0\20\3\16\0\1\3\4\0\10\3"+
    "\1\0\2\3\7\0\1\3\1\335\16\3\16\0\1\3"+
    "\4\0\1\336\7\3\1\0\2\3\7\0\20\3\16\0"+
    "\1\3\4\0\10\3\1\0\2\3\7\0\1\3\1\337"+
    "\16\3\16\0\1\3\4\0\10\3\1\0\2\3\7\0"+
    "\1\3\1\340\16\3\16\0\1\3\4\0\3\3\1\341"+
    "\4\3\1\0\2\3\7\0\20\3\16\0\1\3\4\0"+
    "\10\3\1\0\2\3\7\0\10\3\1\342\7\3\16\0"+
    "\1\3\4\0\10\3\1\0\2\3\7\0\4\3\1\343"+
    "\13\3\16\0\1\3\4\0\10\3\1\0\2\3\7\0"+
    "\3\3\1\344\14\3\16\0\1\3\4\0\10\3\1\0"+
    "\2\3\7\0\5\3\1\345\12\3\16\0\1\301\4\0"+
    "\10\301\1\0\2\301\7\0\20\301\15\0\2\346\1\347"+
    "\1\0\61\346\1\0\1\301\4\0\10\301\1\0\2\301"+
    "\7\0\7\301\1\350\10\301\16\0\1\301\4\0\10\301"+
    "\1\0\2\301\7\0\2\301\1\351\15\301\16\0\1\301"+
    "\4\0\2\301\1\352\5\301\1\0\2\301\7\0\20\301"+
    "\16\0\1\3\4\0\10\3\1\0\2\3\7\0\2\3"+
    "\1\353\15\3\16\0\1\3\4\0\2\3\1\354\5\3"+
    "\1\0\2\3\7\0\20\3\16\0\1\3\4\0\10\3"+
    "\1\0\2\3\7\0\10\3\1\355\7\3\16\0\1\3"+
    "\4\0\3\3\1\356\4\3\1\0\2\3\7\0\20\3"+
    "\16\0\1\3\4\0\10\3\1\0\2\3\7\0\10\3"+
    "\1\357\7\3\16\0\1\3\4\0\10\3\1\0\2\3"+
    "\7\0\1\3\1\360\16\3\16\0\1\3\4\0\3\3"+
    "\1\361\4\3\1\0\2\3\7\0\20\3\16\0\1\3"+
    "\4\0\1\362\7\3\1\0\2\3\7\0\20\3\16\0"+
    "\1\3\4\0\5\3\1\363\2\3\1\0\2\3\7\0"+
    "\20\3\16\0\1\3\4\0\10\3\1\0\2\3\7\0"+
    "\3\3\1\364\14\3\16\0\1\3\4\0\1\365\3\3"+
    "\1\366\3\3\1\0\2\3\7\0\20\3\16\0\1\3"+
    "\4\0\5\3\1\367\2\3\1\0\2\3\7\0\20\3"+
    "\16\0\1\3\4\0\10\3\1\0\1\370\1\3\7\0"+
    "\20\3\16\0\1\3\4\0\10\3\1\0\1\371\1\3"+
    "\7\0\20\3\16\0\1\3\4\0\1\372\7\3\1\0"+
    "\2\3\7\0\20\3\16\0\1\3\4\0\10\3\1\0"+
    "\2\3\7\0\15\3\1\373\2\3\16\0\1\3\4\0"+
    "\10\3\1\0\2\3\7\0\3\3\1\374\14\3\16\0"+
    "\1\3\4\0\10\3\1\0\2\3\7\0\3\3\1\375"+
    "\14\3\16\0\1\3\4\0\5\3\1\376\2\3\1\0"+
    "\2\3\7\0\20\3\16\0\1\3\4\0\5\3\1\377"+
    "\2\3\1\0\2\3\7\0\20\3\16\0\1\3\4\0"+
    "\10\3\1\0\2\3\7\0\7\3\1\u0100\10\3\16\0"+
    "\1\3\4\0\1\u0101\7\3\1\0\2\3\7\0\20\3"+
    "\16\0\1\3\4\0\10\3\1\0\1\u0102\1\3\7\0"+
    "\20\3\16\0\1\3\4\0\10\3\1\0\2\3\7\0"+
    "\16\3\1\u0103\1\3\15\0\2\346\1\347\1\u0104\61\346"+
    "\2\0\13\346\51\0\1\301\4\0\4\301\1\u0105\3\301"+
    "\1\0\2\301\7\0\20\301\16\0\1\301\4\0\10\301"+
    "\1\0\1\u0106\1\301\7\0\1\301\1\u0107\16\301\16\0"+
    "\1\3\4\0\10\3\1\0\1\u0108\1\3\7\0\20\3"+
    "\16\0\1\3\4\0\10\3\1\0\2\3\7\0\5\3"+
    "\1\u0109\12\3\16\0\1\3\4\0\1\u010a\7\3\1\0"+
    "\2\3\7\0\20\3\16\0\1\3\4\0\1\u010b\7\3"+
    "\1\0\2\3\7\0\20\3\16\0\1\3\4\0\10\3"+
    "\1\0\2\3\7\0\7\3\1\u010c\10\3\16\0\1\3"+
    "\4\0\10\3\1\0\2\3\7\0\4\3\1\u010d\13\3"+
    "\16\0\1\3\4\0\5\3\1\u010e\2\3\1\0\2\3"+
    "\7\0\20\3\16\0\1\3\4\0\3\3\1\u010f\4\3"+
    "\1\0\2\3\7\0\20\3\16\0\1\3\4\0\1\u0110"+
    "\7\3\1\0\2\3\7\0\20\3\16\0\1\3\4\0"+
    "\5\3\1\u0111\2\3\1\0\2\3\7\0\20\3\16\0"+
    "\1\3\4\0\5\3\1\u0112\2\3\1\0\2\3\7\0"+
    "\20\3\16\0\1\3\4\0\10\3\1\0\2\3\7\0"+
    "\4\3\1\u0113\13\3\16\0\1\3\4\0\10\3\1\0"+
    "\1\u0114\1\3\7\0\20\3\16\0\1\3\4\0\5\3"+
    "\1\u0115\2\3\1\0\2\3\7\0\20\3\16\0\1\3"+
    "\4\0\10\3\1\0\2\3\7\0\1\3\1\u0116\16\3"+
    "\16\0\1\3\4\0\10\3\1\0\2\3\7\0\2\3"+
    "\1\u0117\15\3\16\0\1\3\4\0\3\3\1\u0118\4\3"+
    "\1\0\2\3\7\0\20\3\16\0\1\3\4\0\4\3"+
    "\1\u0119\3\3\1\0\2\3\7\0\20\3\16\0\1\3"+
    "\4\0\1\u011a\7\3\1\0\2\3\7\0\20\3\16\0"+
    "\1\3\4\0\10\3\1\0\2\3\7\0\4\3\1\u011b"+
    "\13\3\16\0\1\301\4\0\3\301\1\u011c\4\301\1\0"+
    "\2\301\7\0\20\301\16\0\1\301\4\0\10\301\1\0"+
    "\2\301\7\0\4\301\1\u011d\13\301\16\0\1\3\4\0"+
    "\3\3\1\u011e\4\3\1\0\2\3\7\0\20\3\16\0"+
    "\1\3\4\0\10\3\1\0\2\3\7\0\4\3\1\u011f"+
    "\13\3\16\0\1\3\4\0\1\3\1\u0120\6\3\1\0"+
    "\2\3\7\0\20\3\16\0\1\3\4\0\3\3\1\u0121"+
    "\4\3\1\0\2\3\7\0\20\3\16\0\1\3\4\0"+
    "\10\3\1\0\2\3\2\0\3\u0122\2\0\20\3\16\0"+
    "\1\3\4\0\10\3\1\0\2\3\7\0\7\3\1\u0123"+
    "\10\3\16\0\1\3\4\0\5\3\1\u0124\2\3\1\0"+
    "\2\3\7\0\20\3\16\0\1\3\4\0\10\3\1\0"+
    "\2\3\7\0\1\3\1\u0125\16\3\16\0\1\3\4\0"+
    "\10\3\1\0\1\u0126\1\3\7\0\20\3\16\0\1\3"+
    "\4\0\10\3\1\0\1\u0127\1\3\7\0\20\3\16\0"+
    "\1\3\4\0\10\3\1\0\1\u0128\1\3\7\0\20\3"+
    "\16\0\1\3\4\0\10\3\1\0\2\3\7\0\7\3"+
    "\1\u0129\10\3\16\0\1\3\4\0\10\3\1\0\2\3"+
    "\7\0\6\3\1\u012a\11\3\16\0\1\3\4\0\10\3"+
    "\1\0\1\u012b\1\3\7\0\20\3\16\0\1\3\4\0"+
    "\1\3\1\u012c\6\3\1\0\2\3\7\0\20\3\16\0"+
    "\1\3\4\0\1\u012d\7\3\1\0\2\3\7\0\20\3"+
    "\16\0\1\301\4\0\10\301\1\0\1\u012e\1\301\7\0"+
    "\20\301\16\0\1\3\4\0\10\3\1\0\2\3\7\0"+
    "\4\3\1\u012f\13\3\23\0\1\u0130\10\0\1\u0131\3\0"+
    "\3\u0122\40\0\1\3\4\0\4\3\1\u0132\3\3\1\0"+
    "\2\3\7\0\20\3\16\0\1\3\4\0\3\3\1\u0133"+
    "\4\3\1\0\2\3\7\0\20\3\16\0\1\3\4\0"+
    "\4\3\1\u0134\3\3\1\0\2\3\7\0\20\3\16\0"+
    "\1\3\4\0\10\3\1\0\2\3\7\0\10\3\1\u0135"+
    "\7\3\16\0\1\3\4\0\3\3\1\u0136\4\3\1\0"+
    "\2\3\7\0\20\3\16\0\1\3\4\0\10\3\1\0"+
    "\2\3\7\0\4\3\1\u0137\13\3\16\0\1\3\4\0"+
    "\5\3\1\u0138\2\3\1\0\2\3\7\0\20\3\16\0"+
    "\1\3\4\0\10\3\1\0\1\u0139\1\3\7\0\20\3"+
    "\51\0\1\u013a\77\0\1\u013b\16\0\1\3\4\0\10\3"+
    "\1\0\1\u013c\1\3\7\0\20\3\16\0\1\3\4\0"+
    "\10\3\1\0\1\u013d\1\3\7\0\20\3\16\0\1\3"+
    "\4\0\10\3\1\0\1\u013e\1\3\7\0\20\3\62\0"+
    "\1\u013f\65\0\1\u0140\17\0\1\3\4\0\10\3\1\0"+
    "\2\3\7\0\10\3\1\u0141\7\3\16\0\1\3\4\0"+
    "\10\3\1\0\2\3\7\0\10\3\1\u0142\7\3\54\0"+
    "\1\u0143\33\0\1\u0144\57\0\1\3\4\0\1\3\1\u0145"+
    "\6\3\1\0\2\3\7\0\20\3\27\0\1\u0146\65\0"+
    "\1\u0147\52\0\1\3\4\0\10\3\1\0\2\3\7\0"+
    "\14\3\1\u0148\3\3\46\0\1\u0149\64\0\1\u014a\46\0"+
    "\1\u014b\110\0\1\u014c\57\0\1\u014d\43\0\1\u014e\111\0"+
    "\1\u014f\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13568];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\14\1\2\11\1\1\1\11\2\1\1\11"+
    "\10\1\11\11\1\1\1\11\2\1\4\0\1\11\17\1"+
    "\1\0\7\1\1\0\17\1\5\11\22\1\1\0\10\1"+
    "\1\11\2\0\42\1\1\0\4\1\1\0\40\1\1\0"+
    "\43\1\2\0\34\1\1\11\35\1\1\0\15\1\2\0"+
    "\10\1\2\0\3\1\2\0\2\1\2\0\1\1\2\0"+
    "\1\1\5\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  /**
   * Subclass of Symbol that carries extra information. 
   * Used to give error reporting class for parser access to offset & length 
   * of tokens. Start, end, offset and length are extracted from scanner variables
   * in constructors.
   */
  public class Symbol extends beaver.Symbol {
  
    private int offset;
    private int length;
    
    public Symbol(short id) {
      this(id, yytext());
    }
    
    public Symbol(short id, Object value) {
      super(id, yyline + 1, yycolumn + 1, yylength(), value);
      offset = yychar;
      length = yylength();
    }
    
    public int getOffset() {
      return offset;
    }
    
    public int getEndOffset() {
      return offset + length - 1;
    }
    
    public int getLength() {
      return length;
    }
    
  }
  
  /**
   * Subclass of Scanner.Exception that carries extra information. 
   * Used to give error reporting class for parser access to offset of error. 
   * Offset is extracted from scanner variables in constructors.
   */
  public class Exception extends Scanner.Exception {
    
    public final int offset;
    
    public Exception(String msg) {
      this(yyline + 1, yycolumn + 1, msg);
    }
    
    public Exception(int line, int column, String msg) {
      super(line, column, msg);
      offset = yychar;
    }
    
  }
  
  private HashMap<Integer, Integer> lineBreakMap;
  
  StringBuffer string = new StringBuffer(128);

  private Symbol newSymbol(short id) {
    //System.out.println(id);
    return new Symbol(id);
  }

  private Symbol newSymbol(short id, Object value) {
    return new Symbol(id, value);
  }
  
  public void reset(java.io.Reader reader) {
    lineBreakMap = new HashMap<Integer, Integer>();
    lineBreakMap.put(0, 0);
    yyreset(reader);
  }
  
  private void addLineBreaks(String text) {
  	int line = yyline;  	
  	for (int i = 0; i < text.length(); i += 1) {
  		switch (text.charAt(i)) {
  			case '\r': 
  				if (i < text.length() - 1 && text.charAt(i+1) == '\n') 
  					++i;
  			case '\n': 
  				lineBreakMap.put(++line, yychar + i + 1);
		} 
  	} 
  }  
  
  public Map<Integer, Integer> getLineBreakMap() {
	  return lineBreakMap;
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ModelicaScanner(java.io.Reader in) {
    lineBreakMap = new HashMap<Integer, Integer>();
  lineBreakMap.put(0, 0);
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ModelicaScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { return newSymbol(Terminals.GEQ);
          }
        case 91: break;
        case 47: 
          { return newSymbol(Terminals.BLOCK);
          }
        case 92: break;
        case 12: 
          { return newSymbol(Terminals.LPAREN);
          }
        case 93: break;
        case 45: 
          { return newSymbol(Terminals.WHEN);
          }
        case 94: break;
        case 37: 
          { return newSymbol(Terminals.END);
          }
        case 95: break;
        case 56: 
          { return newSymbol(Terminals.OUTER);
          }
        case 96: break;
        case 7: 
          { return newSymbol(Terminals.MINUS);
          }
        case 97: break;
        case 60: 
          { return newSymbol(Terminals.ELSEIF);
          }
        case 98: break;
        case 63: 
          { return newSymbol(Terminals.OUTPUT);
          }
        case 99: break;
        case 53: 
          { return newSymbol(Terminals.INPUT);
          }
        case 100: break;
        case 31: 
          { return newSymbol(Terminals.LEQ);
          }
        case 101: break;
        case 52: 
          { return newSymbol(Terminals.INNER);
          }
        case 102: break;
        case 79: 
          { return newSymbol(Terminals.REDECLARE);
          }
        case 103: break;
        case 44: 
          { return newSymbol(Terminals.ELSE);
          }
        case 104: break;
        case 26: 
          { addLineBreaks(yytext());
          }
        case 105: break;
        case 17: 
          { return newSymbol(Terminals.RBRACK);
          }
        case 106: break;
        case 19: 
          { return newSymbol(Terminals.COLON);
          }
        case 107: break;
        case 62: 
          { return newSymbol(Terminals.IMPORT);
          }
        case 108: break;
        case 68: 
          { return newSymbol(Terminals.CONNECT);
          }
        case 109: break;
        case 4: 
          { return newSymbol(Terminals.UNSIGNED_INTEGER, yytext());
          }
        case 110: break;
        case 59: 
          { addLineBreaks(yytext()); 
    return newSymbol(Terminals.END_IF);
          }
        case 111: break;
        case 46: 
          { return newSymbol(Terminals.LOOP);
          }
        case 112: break;
        case 66: 
          { return newSymbol(Terminals.EXTENDS);
          }
        case 113: break;
        case 77: 
          { return newSymbol(Terminals.DISCRETE);
          }
        case 114: break;
        case 58: 
          { return newSymbol(Terminals.RECORD);
          }
        case 115: break;
        case 90: 
          { addLineBreaks(yytext()); 
    return newSymbol(Terminals.INITIAL_ALGORITHM);
          }
        case 116: break;
        case 51: 
          { return newSymbol(Terminals.WHILE);
          }
        case 117: break;
        case 2: 
          { throw new Exception("Illegal character \""+yytext()+ "\"");
          }
        case 118: break;
        case 20: 
          { return newSymbol(Terminals.COMMA);
          }
        case 119: break;
        case 15: 
          { return newSymbol(Terminals.RBRACE);
          }
        case 120: break;
        case 16: 
          { return newSymbol(Terminals.LBRACK);
          }
        case 121: break;
        case 65: 
          { addLineBreaks(yytext()); 
    return newSymbol(Terminals.END_FOR);
          }
        case 122: break;
        case 73: 
          { return newSymbol(Terminals.ELSEWHEN);
          }
        case 123: break;
        case 1: 
          { return newSymbol(Terminals.UNSIGNED_NUMBER, yytext());
          }
        case 124: break;
        case 84: 
          { return newSymbol(Terminals.ANNOTATION);
          }
        case 125: break;
        case 72: 
          { addLineBreaks(yytext()); 
    return newSymbol(Terminals.END_WHEN);
          }
        case 126: break;
        case 39: 
          { return newSymbol(Terminals.TRUE);
          }
        case 127: break;
        case 61: 
          { return newSymbol(Terminals.WITHIN);
          }
        case 128: break;
        case 88: 
          { return newSymbol(Terminals.CONSTRAINEDBY);
          }
        case 129: break;
        case 22: 
          { return newSymbol(Terminals.POW);
          }
        case 130: break;
        case 69: 
          { return newSymbol(Terminals.PARTIAL);
          }
        case 131: break;
        case 25: 
          { String s = yytext();
               addLineBreaks(s);
               s = s.substring(1,s.length()-1);
               return newSymbol(Terminals.STRING,s);
          }
        case 132: break;
        case 35: 
          { return newSymbol(Terminals.FOR);
          }
        case 133: break;
        case 6: 
          { return newSymbol(Terminals.PLUS);
          }
        case 134: break;
        case 74: 
          { return newSymbol(Terminals.EXTERNAL);
          }
        case 135: break;
        case 57: 
          { return newSymbol(Terminals.RETURN);
          }
        case 136: break;
        case 24: 
          { return newSymbol(Terminals.GT);
          }
        case 137: break;
        case 10: 
          { return newSymbol(Terminals.DIV);
          }
        case 138: break;
        case 30: 
          { return newSymbol(Terminals.EQ);
          }
        case 139: break;
        case 14: 
          { return newSymbol(Terminals.LBRACE);
          }
        case 140: break;
        case 81: 
          { return newSymbol(Terminals.CONNECTOR);
          }
        case 141: break;
        case 70: 
          { return newSymbol(Terminals.PACKAGE);
          }
        case 142: break;
        case 41: 
          { return newSymbol(Terminals.THEN);
          }
        case 143: break;
        case 38: 
          { return newSymbol(Terminals.FLOW);
          }
        case 144: break;
        case 3: 
          { String s = yytext();
  			  addLineBreaks(s);
  			  return newSymbol(Terminals.ID, s);
          }
        case 145: break;
        case 18: 
          { return newSymbol(Terminals.SEMICOLON);
          }
        case 146: break;
        case 23: 
          { return newSymbol(Terminals.LT);
          }
        case 147: break;
        case 43: 
          { return newSymbol(Terminals.EACH);
          }
        case 148: break;
        case 64: 
          { return newSymbol(Terminals.PUBLIC);
          }
        case 149: break;
        case 50: 
          { String s = yytext();
  			  return newSymbol(Terminals.END_ID, s);
          }
        case 150: break;
        case 71: 
          { return newSymbol(Terminals.FUNCTION);
          }
        case 151: break;
        case 55: 
          { return newSymbol(Terminals.MODEL);
          }
        case 152: break;
        case 82: 
          { return newSymbol(Terminals.PARAMETER);
          }
        case 153: break;
        case 54: 
          { return newSymbol(Terminals.CLASS);
          }
        case 154: break;
        case 32: 
          { return newSymbol(Terminals.NEQ);
          }
        case 155: break;
        case 83: 
          { return newSymbol(Terminals.PROTECTED);
          }
        case 156: break;
        case 76: 
          { return newSymbol(Terminals.CONSTANT);
          }
        case 157: break;
        case 28: 
          { return newSymbol(Terminals.IN);
          }
        case 158: break;
        case 5: 
          { return newSymbol(Terminals.DOT);
          }
        case 159: break;
        case 29: 
          { return newSymbol(Terminals.OR);
          }
        case 160: break;
        case 86: 
          { return newSymbol(Terminals.REPLACEABLE);
          }
        case 161: break;
        case 67: 
          { return newSymbol(Terminals.INITIAL);
          }
        case 162: break;
        case 34: 
          { return newSymbol(Terminals.AND);
          }
        case 163: break;
        case 13: 
          { return newSymbol(Terminals.RPAREN);
          }
        case 164: break;
        case 8: 
          { lineBreakMap.put(yyline+1, yychar + yylength());
          }
        case 165: break;
        case 48: 
          { return newSymbol(Terminals.FALSE);
          }
        case 166: break;
        case 21: 
          { return newSymbol(Terminals.ASSIGN);
          }
        case 167: break;
        case 40: 
          { return newSymbol(Terminals.TIME);
          }
        case 168: break;
        case 80: 
          { addLineBreaks(yytext()); 
    return newSymbol(Terminals.END_WHILE);
          }
        case 169: break;
        case 36: 
          { return newSymbol(Terminals.NOT);
          }
        case 170: break;
        case 87: 
          { return newSymbol(Terminals.ENCAPSULATED);
          }
        case 171: break;
        case 89: 
          { addLineBreaks(yytext()); 
  	    return newSymbol(Terminals.INITIAL_EQUATION);
          }
        case 172: break;
        case 42: 
          { return newSymbol(Terminals.TYPE);
          }
        case 173: break;
        case 75: 
          { return newSymbol(Terminals.EQUATION);
          }
        case 174: break;
        case 85: 
          { return newSymbol(Terminals.EXPANDABLE);
          }
        case 175: break;
        case 78: 
          { return newSymbol(Terminals.ALGORITHM);
          }
        case 176: break;
        case 27: 
          { return newSymbol(Terminals.IF);
          }
        case 177: break;
        case 11: 
          { return newSymbol(Terminals.MULT);
          }
        case 178: break;
        case 9: 
          { 
          }
        case 179: break;
        case 49: 
          { return newSymbol(Terminals.FINAL);
          }
        case 180: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return newSymbol(Terminals.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
