<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>AD Unary Plus Operator: Example and Test</title>
<meta name="description" id="description" content="AD Unary Plus Operator: Example and Test"/>
<meta name="keywords" id="keywords" content=" unary plus example test "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_unaryplus.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="unaryplus.xml" target="_top">Prev</a>
</td><td><a href="unaryminus.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>AD</option>
<option>ADValued</option>
<option>Arithmetic</option>
<option>UnaryPlus</option>
<option>UnaryPlus.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADValued-&gt;</option>
<option>Arithmetic</option>
<option>std_math_ad</option>
<option>MathOther</option>
<option>CondExp</option>
<option>Discrete</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Arithmetic-&gt;</option>
<option>UnaryPlus</option>
<option>UnaryMinus</option>
<option>ad_binary</option>
<option>compute_assign</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>UnaryPlus-&gt;</option>
<option>UnaryPlus.cpp</option>
</select>
</td>
<td>UnaryPlus.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>AD Unary Plus Operator: Example and Test</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 

# include &lt;cppad/cppad.hpp&gt;

bool UnaryPlus(void)
{	bool ok = true;
	using CppAD::AD;


	// domain space vector
	size_t n = 1;
	CPPAD_TEST_VECTOR&lt; AD&lt;double&gt; &gt; x(n);
	x[0]      = 3.;

	// declare independent variables and start tape recording
	CppAD::Independent(x);

	// range space vector 
	size_t m = 1;
	CPPAD_TEST_VECTOR&lt; AD&lt;double&gt; &gt; y(m);
	y[0] = + x[0];

	// create f: x -&gt; y and stop tape recording
	CppAD::ADFun&lt;double&gt; f(x, y);

	// check values
	ok &amp;= ( y[0] == 3. );

	// forward computation of partials w.r.t. x[0]
	CPPAD_TEST_VECTOR&lt;double&gt; dx(n);
	CPPAD_TEST_VECTOR&lt;double&gt; dy(m);
	size_t p = 1;
	dx[0]    = 1.;
	dy       = f.Forward(p, dx);
	ok      &amp;= ( dy[0] == 1. );   // dy[0] / dx[0]

	// reverse computation of dertivative of y[0]
	CPPAD_TEST_VECTOR&lt;double&gt;  w(m);
	CPPAD_TEST_VECTOR&lt;double&gt; dw(n);
	w[0] = 1.;
	dw   = f.Reverse(p, w);
	ok &amp;= ( dw[0] == 1. );       // dy[0] / dx[0]

	// use a VecAD&lt;Base&gt;::reference object with unary plus
	CppAD::VecAD&lt;double&gt; v(1);
	AD&lt;double&gt; zero(0);
	v[zero] = x[0];
	AD&lt;double&gt; result = + v[zero];
	ok     &amp;= (result == y[0]);
	 
	return ok;
}</pre>
</font></code>


<hr/>Input File: example/unary_plus.cpp

</body>
</html>
