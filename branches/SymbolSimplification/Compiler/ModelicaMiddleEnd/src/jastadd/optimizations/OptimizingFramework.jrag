/**
 *  Extremely good documentation in development!
 */

aspect OptimizingFramework {
    /**
     * Framework for optimizing algorithms.
     * 
     * Current added algorithms are:
     * 	- Alias Elimination
     *  - Variability Propagation
     * 
     * @author  Johan Calven, Zimon Kuhs
     * @date    2016-02-08
     * @version 0?
     */
    public class FClass {
    	// TODO: Debug data, remove later on:
        public static final boolean VERBOSE = true;
        public static String defaultIndent = "";
        public static boolean defaultShowFEq = false;
    	// ---------------------------------------------
    	
    	
        public class iterativeSymbolSimplificationIfSet extends Transformation {
            public iterativeSymbolSimplificationIfSet() {
                super("iterative_symbol_simplification");
            }
            
            public void perform() {
                iterativeSymbolSimplification();
            }
        }
    }
    
    public abstract class OptimizingAlgorithm {
    	public FClass fclass;
    	public OptimizingAlgorithm(FClass fclass) {
    		this.fclass = fclass;
    	}
    	public abstract boolean isUsed();
    	public abstract boolean run(FAbstractEquation feq, FClass.WorkData workData);
    }
    
    public class FClass {
    	ArrayList<OptimizingAlgorithm> optimizeAlgorithmsInFramework = new ArrayList();
    	
    	public void addOptimizingAlgorithmToFramework() {
    		optimizeAlgorithmsInFramework.add(new AE(this));
    		optimizeAlgorithmsInFramework.add(new VP(this));
    	}
    	
    	
    	
	    /**
	     *  Main method for running the algorithms.<p>
		 *  
		 *  If an algorithm optimizes an equation, its caller method should return true and the
		 *  while loop will then continue with the next equation in worklist.
		 * 
		 *  A class called WorkData is kept for storing essential data needed in and shared between
		 *  the algorithms. This should be expanded if needed when adding a new algorithm to the framework.
	     */
	    public void iterativeSymbolSimplification() {
	    	LinkedHashSet<FAbstractEquation> worklist = new LinkedHashSet<FAbstractEquation>(); // all
	    	WorkData workData = new WorkData(worklist); // VP
	    	ArrayList<OptimizingAlgorithm> optList = new ArrayList();
			addOptimizingAlgorithmToFramework();
				    	
	    	for (OptimizingAlgorithm optAlg: optimizeAlgorithmsInFramework)
	    		if (optAlg.isUsed())
	    			optList.add(optAlg);
	    	
	    	for (FAbstractEquation feq : getFAbstractEquations())
	    		workData.addToWorklist(feq);
	    	
	    	System.out.println("\n\n----------- NEW TEST --------------\n");  // TODO: Remove later
	    	
	    	while (!worklist.isEmpty()) {
	    		FAbstractEquation feq = worklist.iterator().next();
	    		worklist.remove(feq);
	    		System.out.println("Equation: "+feq.toString()); // TODO: Remove later
	    		
	    		for (OptimizingAlgorithm optAlg : optList)
	    			if (optAlg.run(feq, workData))
	    				continue;
	        }
	        
	        fixStructure();
	    }
	    
	    /**
		 * Class that contains data that is shared and updated in and between optimizing algorithms.
		 *
		 * When adding a new algorithm to the framework, update this class with needed methods 
		 * and variables.
		 */
	    public class WorkData {
	    	LinkedHashSet<FAbstractEquation> worklist = new LinkedHashSet();	// Used by AE, VP
	        ArrayList<FAbstractEquation> parameterEquations = new ArrayList(); 	// Used by VP
	        HashSet<FAbstractEquation> removedEquations = new HashSet();		// Used by AE, VP
	        
	        /**
	         * Constructs a class containing data needed throughout the execution time 
	         * of the optimizing algorithms, that are added to the framework. 
	         */
	        public WorkData(LinkedHashSet<FAbstractEquation> worklist) {
	            this.worklist = worklist;
	            for (FAbstractEquation feq : getFParameterEquations())
	            	parameterEquations.add(feq);
	        }
	        
	        /**
			 * If an equation is switched to a parameter equation it should be
			 * added to this list.
			 * @param feq The equation that is added to the parameter equations list.
			 */
	        public void addParameterEquation(FAbstractEquation feq) {
	            parameterEquations.add(feq);
	        }
	        
	        /**
			 * Method to add an equation to the worklist.
			 */
	        public void addToWorklist(FAbstractEquation feq) {
	            worklist.add(feq);
	        }
	        
	        /**
			 * Checks if an equation has been removed by one of
			 * the optimizing algorithms.
			 * @param feq The equation that is checked. 
			 * @return {@code true} if it has been removed, {@code false} otherwise.
			 */
	        public boolean hasRemovedEquation(FAbstractEquation feq) {
	        	return removedEquations.contains(feq);
	        }
	        
	        /**
			 * Adds an equation to the list of removed equations.
			 * @param feq The equation that is added to the list of removed equations.
			 */
	        public void removeEquation(FAbstractEquation feq) {
	        	removedEquations.add(feq);
	        }
	        
	        /**
			 * Returns a list containing the parameter equations.
			 * @return The list containing all parameter equations. 
			 */
	        public List<FAbstractEquation> getparameterEquations() {
	        	return new List<FAbstractEquation>(parameterEquations);
	        }
	    }
	    
	    /**
		 * TODO: Does nothing atm. In future implementation, we could probably perform some
		 * rewrites after performing all the optimization. Atm, a rewrite is performed if an 
		 * algorithm changes the structure.
		 */
	    public void fixStructure() {
	    }
    }
    /**
     *  Utility method for learning the AST structure.
     *  <p>Prints the tree of all equations in the current model.
     *
     *  @param showFEq  If true, will display the equation string
     *                      before dumping the AST.
     *  @param indent   Base indentation of the dumped tree.
     */
     public void FClass.showTree(boolean showFEq, String indent) {
        for (FAbstractEquation fae : getFAbstractEquations()) {
            if (showFEq)
                System.out.println("<" + fae.toString() + ">");
            fae.dumpTree(indent);
        }
     }
     
     /**
     *  Utility method for learning the AST structure.
     *  <p>A No argument version of printTree() not printing the equation
     *  and using no identation. A "default" version of printTree(),
     */
     public void FClass.showTree() {
        showTree(defaultShowFEq, defaultIndent);
     }
     
     /**
      * Debug printing, will print message if VERBOSE is set.
      *
      * @param  msg The message to print.
      */
     public void FClass.debugPrintLn(String message) {
        if (VERBOSE)
            System.out.println(message);
     }
}