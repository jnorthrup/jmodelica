/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

import org.jmodelica.ide.helpers.Util;

aspect Util {
	
	inh lazy StoredDefinition ASTNode.getDefinition();
	eq StoredDefinition.getChild(int index).getDefinition() = this;
	eq InstNode.getInstClassDecl(int index).getDefinition() = 
			getInstClassDecl(index).getClassDecl().getDefinition();
	eq InstNode.getInstComponentDecl(int index).getDefinition() = 
			getInstComponentDecl(index).getComponentDecl().getDefinition();

   public Object List.getLast() {
       if (getNumChild() > 0)
           return getChild(getNumChild() - 1);
       return null; 
   } 
   
	//I hate double negating things :p
	public boolean InstClassDecl.isKnown() {
	    return !isUnknown();
	}
	
	public boolean InstComponentDecl.isKnown() {
	    return !isUnknown();
	}
	
	public List.List(T... ts) {
	    super();
	    for (T t : ts) {
	        add(t);
	    }
	}
	
}