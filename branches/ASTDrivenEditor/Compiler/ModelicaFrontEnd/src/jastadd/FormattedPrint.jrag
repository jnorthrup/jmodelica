import org.jmodelica.util.FormattingInfo;
import org.jmodelica.util.FormattingItem;
import org.jmodelica.util.EmptyFormattingItem;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

aspect FormattedPrint {
	/**
	 * A pretty printer that prints the AST in code, with the old formatting.
	 */
	class FormattedPrettyPrinter extends Printer {
		/**
		 * Creates a <code>FormattedPrettyPrinter</code>.
		 */
		public FormattedPrettyPrinter() {
			super("");
		}
		
		/**
		 * Takes an AST node and prints it using a <code>PrintStream</code>. The formatting that the code that
		 * generated this node is preserved.
		 * @param node the AST node to print.
		 * @param printStream the stream to which the node should be printed.
		 * @param ident not used.
		 */
		@Override
		@SuppressWarnings({"unchecked"})
		public void print(ASTNode node, PrintStream printStream, String ident) {
			node.doPrettyPrintFormatted(this, printStream);
		}
		
		public String op(FBinExp exp) {
			return operatorFormatted(exp);
		}
		
		public String operatorFormatted(FBinExp exp) {
			return exp.operatorFormatted();
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ADDING FORMATTING TO AST:
	//
	// This section of the aspect contains attributes and methods for adding formatting to the AST.
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////

	static FormattedPrettyPrinter ASTNode.formattedPrettyPrinter = new FormattedPrettyPrinter();
	protected FormattingInfo BaseNode.formatting = new FormattingInfo();
	protected FormattingItem BaseNode.preFormatting = new EmptyFormattingItem();
	protected FormattingItem BaseNode.postFormatting = new EmptyFormattingItem();

	protected FormattingItem IfExp.insideFormatting = new EmptyFormattingItem();
	protected FormattingItem ElseIfExp.insideFormatting = new EmptyFormattingItem();
	protected FormattingItem EndDecl.insideFormatting = new EmptyFormattingItem();
	
	public void ASTNode.setFormatting(FormattingInfo formattingInfo) {
		for (ASTNode childNode : this) {
			childNode.setFormatting(formattingInfo);
		}
	}
	
	public void BaseNode.setFormatting(FormattingInfo formattingInfo) {
		formatting = formattingInfo;
		super.setFormatting(formattingInfo);
	}
	
	/**
	 * Propagates the formatting information downwards in the AST if this has not already been done.
	 */
	public void ASTNode.propagateFormatting() {
		getParent().propagateFormatting();
	}
	
	protected void ASTNode.propagateFormatting(FormattingInfo formattingInfo) {
		if (formattingInfo == null) {
			addFormattingInformation(formattingInfo);
			return;
		}

		if (!formattingInfo.isEmpty()) {
			LinkedList<ScannedFormattingItem> parenthesisList = new LinkedList<ScannedFormattingItem>();
			collectParenthesis(parenthesisList);
			formattingInfo.addAll(parenthesisList);
			formattingInfo.mergeAdjacentFormattingItems();
		}

		addFormattingInformation(formattingInfo);
		addFormattingRest(formattingInfo);
	}
	
	@Override
	public void BaseNode.propagateFormatting() {
		propagateFormatting(formatting);
	}
	
	protected void ASTNode.collectParenthesis(LinkedList<ScannedFormattingItem> parenthesisList) {
		for (ASTNode node : this) {
			node.collectParenthesis(parenthesisList);
		}
	}
	
	protected void Exp.collectParenthesis(LinkedList<ScannedFormattingItem> parenthesisListt) {
		for (ASTNode node : this) {
			node.collectParenthesis(parenthesisListt);
		}
		parenthesisListt.addAll(parenthesisList);
		parenthesisList = new LinkedList<ScannedFormattingItem>();
	}

	/**
	 * Adds formatting information to this AST node and all its children, which can then be used by the method
	 * <code>prettyPrintFormatted</code>.
	 * @param formattingInfo the information to use to format this AST node.
	 */	
	protected void ASTNode.addFormattingInformation(FormattingInfo formattingInfo) {
		for (ASTNode childNode : this) {
			childNode.addFormattingInformation(formattingInfo);
		}
	}
	
	protected void BaseNode.addFormattingInformation(FormattingInfo formattingInfo) {
		if (formatting == null) {
			super.addFormattingInformation(formattingInfo);
			return;
		}

		if (formatting.isEmpty()) {
			setDefaultFormatting();
		} else if (formattingInfo != null) {
			preFormatting = new EmptyFormattingItem();
			postFormatting = new EmptyFormattingItem();
			Iterator<ScannedFormattingItem> formattingIterator = formattingInfo.getFormattingCollection().iterator();
			FormattingItem nextItem = addPreFormatting(formattingIterator);
			addPostFormatting(formattingIterator, nextItem);
		}

		super.addFormattingInformation(formattingInfo);
	}
	
	public FormattingItem BaseNode.addPreFormatting(Iterator<ScannedFormattingItem> formattingIterator) {
		FormattingItem formattingItem = new EmptyFormattingItem();
		FormattingItem.RelativePosition relativePosition = FormattingItem.RelativePosition.BEFORE;

		while (formattingIterator.hasNext() && relativePosition == FormattingItem.RelativePosition.BEFORE) {
			formattingItem = formattingIterator.next();
			relativePosition = formattingItem.getFrontRelativePosition(this);
		}
		
		if (formattingItem.getFrontRelativePosition(this) == FormattingItem.RelativePosition.FRONT_ADJACENT) {
			preFormatting = formattingItem;
			formattingIterator.remove();
			if (formattingIterator.hasNext()) {
				formattingItem = formattingIterator.next();
			} else {
				formattingItem = new EmptyFormattingItem();
			}
		}
		
		return formattingItem;
	}
	
	public void BaseNode.addPostFormatting(Iterator<ScannedFormattingItem> formattingIterator, FormattingItem startingFormattingItem) {
		FormattingItem formattingItem = startingFormattingItem;
		FormattingItem.RelativePosition relativePosition = formattingItem.getBackRelativePosition(this);

		while (formattingIterator.hasNext() && (relativePosition == FormattingItem.RelativePosition.BEFORE ||
				relativePosition == FormattingItem.RelativePosition.UNDEFINED)) {
			formattingItem = formattingIterator.next();
			relativePosition = formattingItem.getBackRelativePosition(this);
		}
		
		if (formattingItem.getBackRelativePosition(this) == FormattingItem.RelativePosition.BACK_ADJACENT) {
			postFormatting = formattingItem;
			formattingIterator.remove();
		}
	}
	
	public FormattingItem Comment.addPreFormatting(Iterator<ScannedFormattingItem> formattingIterator) {
		return new EmptyFormattingItem();
	}
	
	public void Comment.addPostFormatting(Iterator<ScannedFormattingItem> formattingIterator, FormattingItem startingFormattingItem) {
	}
	
	public void ASTNode.addFormattingRest(FormattingInfo formattingInfo) {
		for (ASTNode childNode : this) {
			childNode.addFormattingRest(formattingInfo);
		}
	}
	
	public void BaseNode.addFormattingRest(FormattingInfo formattingInfo) {
		Iterator<ScannedFormattingItem> formattingIterator = formattingInfo.getFormattingCollection().iterator();
		while (formattingIterator.hasNext()) {
			FormattingItem formattingItem = formattingIterator.next();
			FormattingItem.Adjacency preAdjacency = preFormatting.getAdjacency(formattingItem);
			FormattingItem.Adjacency postAdjacency = postFormatting.getAdjacency(formattingItem);
			if (preAdjacency != FormattingItem.Adjacency.NONE) {
				preFormatting = preFormatting.mergeItems(preAdjacency, formattingItem);
				formattingIterator.remove();
			} else if (postAdjacency != FormattingItem.Adjacency.NONE) {
				postFormatting = postFormatting.mergeItems(postAdjacency, formattingItem);
				formattingIterator.remove();
			}
		}
		super.addFormattingRest(formattingInfo);
		insideFormatting(formattingInfo);
		formatting = null;
	}
	
	public void BaseNode.insideFormatting(FormattingInfo formattingInfo) {
	}
	
	public void IfExp.insideFormatting(FormattingInfo formattingInfo) {
		Iterator<ScannedFormattingItem> formattingIterator = formattingInfo.getFormattingCollection().iterator();
		while (formattingIterator.hasNext()) {
			ScannedFormattingItem formattingItem = formattingIterator.next();
			FormattingItem.Adjacency adjacency = insideFormatting.getAdjacency(formattingItem);
			if (formattingItem.getStartLine() == getLine(getElseExp().getStart()) && formattingItem.getStartColumn() == getColumn(getElseExp().getStart()) + 4) {
				insideFormatting = formattingItem;
				formattingIterator.remove();
			} else if (adjacency != FormattingItem.Adjacency.NONE) {
				insideFormatting = insideFormatting.mergeItems(adjacency, formattingItem);
				formattingIterator.remove();
			}
		}
	}
	
	public void ElseIfExp.insideFormatting(FormattingInfo formattingInfo) {
		Iterator<ScannedFormattingItem> formattingIterator = formattingInfo.getFormattingCollection().iterator();
		while (formattingIterator.hasNext()) {
			ScannedFormattingItem formattingItem = formattingIterator.next();
			FormattingItem.Adjacency adjacency = insideFormatting.getAdjacency(formattingItem);
			if (formattingItem.getStartLine() == getLine(getStart()) && formattingItem.getStartColumn() == getColumn(getStart()) + 4) {
				insideFormatting = formattingItem;
				formattingIterator.remove();
			} else if (adjacency != FormattingItem.Adjacency.NONE) {
				insideFormatting = insideFormatting.mergeItems(adjacency, formattingItem);
				formattingIterator.remove();
			}
		}
	}
	
	public void EndDecl.insideFormatting(FormattingInfo formattingInfo) {
		Iterator<ScannedFormattingItem> formattingIterator = formattingInfo.getFormattingCollection().iterator();
		while (formattingIterator.hasNext()) {
			ScannedFormattingItem formattingItem = formattingIterator.next();
			FormattingItem.Adjacency adjacency = insideFormatting.getAdjacency(formattingItem);
			if (formattingItem.getStartLine() == getLine(getStart()) && formattingItem.getStartColumn() == getColumn(getStart()) + 3) {
				insideFormatting = formattingItem;
				formattingIterator.remove();
			} else if (adjacency != FormattingItem.Adjacency.NONE) {
				insideFormatting = insideFormatting.mergeItems(adjacency, formattingItem);
				formattingIterator.remove();
			}
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// DEFAULT FORMATTING:
	//
	// Here, some default formatting is set to different nodes in the AST. This is used for when the nodes do not
	// come from a scanned source file, but have been generated in other ways.
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/** TODO: Check the following nodes:
	 * StoredDefinition
	 * Access?
	 * ExtendsClauseShortClass
	 * ArraySubscripts?
	 * ArrayConstructor?
	 * ConstrainingClause
	 * CompleteModification
	 * ValueModification
	 * ElementModification
	 * ClassRedeclare
	 * ComponentRedeclare
	 * ConnectClause
	 * FunctionCall
	 * FunctionArguments
	 * NamedArgument
	 * *LitExp
	 */
	
	protected void BaseNode.setDefaultFormatting() {
		return;
	}
	
	protected void Within.setDefaultFormatting() {
		if (hasPackageName()) {
			getPackageName().preFormatting = new DefaultFormattingItem(" ");
		}
		postFormatting = new DefaultFormattingItem("\n");
	}
	
	protected void Encapsulated.setDefaultFormatting() {
		postFormatting = new DefaultFormattingItem(" ");
	}
	
	protected void Partial.setDefaultFormatting() {
		postFormatting = new DefaultFormattingItem(" ");
	}
	
	protected void Redeclare.setDefaultFormatting() {
		postFormatting = new DefaultFormattingItem(" ");
	}
	
	protected void Final.setDefaultFormatting() {
		postFormatting = new DefaultFormattingItem(" ");
	}
	
	protected void Inner.setDefaultFormatting() {
		postFormatting = new DefaultFormattingItem(" ");
	}
	
	protected void Outer.setDefaultFormatting() {
		postFormatting = new DefaultFormattingItem(" ");
	}
	
	protected void Replaceable.setDefaultFormatting() {
		postFormatting = new DefaultFormattingItem(" ");
	}
	
	protected void Restriction.setDefaultFormatting() {
		postFormatting = new DefaultFormattingItem(" ");
	}
	
	protected void FullClassDecl.setDefaultFormatting() {
		if (hasStringComment()) {
			getName().postFormatting = new DefaultFormattingItem(" ");
			getStringComment().postFormatting = new DefaultFormattingItem("\n");
		}
		
		for (Annotation annotation : getAnnotations()) {
			annotation.preFormatting = new DefaultFormattingItem(" ");
		}
	}
	
	protected void AbstractEquation.setDefaultFormatting() {
		preFormatting = inheritFormatting();
		if (getComment().hasStringComment()) {
			getComment().getStringComment().preFormatting = new DefaultFormattingItem(" ");
		} else if (getComment().hasAnnotation()) {
			getComment().getAnnotation().preFormatting = new DefaultFormattingItem(" ");
		}
		postFormatting = new DefaultFormattingItem("\n");
	}
	
	private FormattingItem AbstractEquation.inheritFormatting() {
		if (getParent() instanceof List && getParent().getParent() instanceof FullClassDecl) {
			List<Clause> clauseList = (List<Clause>) ((FullClassDecl) getParent().getParent()).originalComposition.getClauses();

			for (Clause clause : clauseList) {
				if (clause instanceof EquationClause) {
					int thisIndex = ((EquationClause) clause).getAbstractEquations().getIndexOfChild(this);
					if (thisIndex > 0) {
						return ((EquationClause) clause).getAbstractEquations().getChild(thisIndex - 1).preFormatting.copyWhitepacesFromFormatting();
					} else if (thisIndex == 0) {
						return new DefaultFormattingItem("\n   ");
					}
				}
			}
		}

		return preFormatting.mergeItems(FormattingItem.Adjacency.BACK, new DefaultFormattingItem("   "));
	}
	
	protected void Each.setDefaultFormatting() {
		postFormatting = new DefaultFormattingItem(" ");
	}
	
	protected void ExtendsClause.setDefaultFormatting() {
		preFormatting = new DefaultFormattingItem(" ");
		getSuper().preFormatting = new DefaultFormattingItem(" ");
		postFormatting = new DefaultFormattingItem("\n");
	}
	
	protected void ImportClause.setDefaultFormatting() {
		preFormatting = new DefaultFormattingItem(" ");
		getPackageName().preFormatting = new DefaultFormattingItem(" ");
		if (getComment().hasStringComment() || getComment().hasAnnotation()) {
			getPackageName().postFormatting = new DefaultFormattingItem(" ");
		}
		postFormatting = new DefaultFormattingItem("\n");
	}
	
	protected void ComponentDecl.setDefaultFormatting() {
		FormattingItem inheritedPreFormatting = inheritFormatting();
		if (hasRedeclare()) {
			getRedeclare().preFormatting = inheritedPreFormatting;
			getRedeclare().postFormatting = new DefaultFormattingItem(" ");
		} else if (hasFinal()) {
			getFinal().preFormatting = inheritedPreFormatting;
			getFinal().postFormatting = new DefaultFormattingItem(" ");
		} else if (hasInner()) {
			getInner().preFormatting = inheritedPreFormatting;
			getInner().postFormatting = new DefaultFormattingItem(" ");
		} else if (hasOuter()) {
			getOuter().preFormatting = inheritedPreFormatting;
			getOuter().postFormatting = new DefaultFormattingItem(" ");
		} else if (hasReplaceable()) {
			getReplaceable().preFormatting = inheritedPreFormatting;
			getReplaceable().postFormatting = new DefaultFormattingItem(" ");
		} else if (hasTypePrefixFlow()) {
			getTypePrefixFlow().preFormatting = inheritedPreFormatting;
			getTypePrefixFlow().postFormatting = new DefaultFormattingItem(" ");
		} else if (hasTypePrefixVariability()) {
			getTypePrefixVariability().preFormatting = inheritedPreFormatting;
			getTypePrefixVariability().postFormatting = new DefaultFormattingItem(" ");
		} else if (hasTypePrefixInputOutput()) {
			getTypePrefixInputOutput().preFormatting = inheritedPreFormatting;
			getTypePrefixInputOutput().postFormatting = new DefaultFormattingItem(" ");
		} else {
			getClassName().preFormatting = inheritedPreFormatting;
		}

		getClassName().postFormatting = new DefaultFormattingItem(" ");
		if (getComment().hasStringComment() || getComment().hasAnnotation()) {
			if (hasModification()) {
				getModification().postFormatting = new DefaultFormattingItem(" ");
			} else {
				getName().postFormatting = new DefaultFormattingItem(" ");
			}
		}
		postFormatting = new DefaultFormattingItem("\n");
	}
	
	private FormattingItem ComponentDecl.inheritFormatting() {
		if (getParent() instanceof List && getParent().getParent() instanceof FullClassDecl) {
			List<Clause> clauseList = (List<Clause>) ((FullClassDecl) getParent().getParent()).originalComposition.getClauses();
			int thisIndex = clauseList.getIndexOfChild(this);
			if (thisIndex > 0 && clauseList.getChild(thisIndex - 1) instanceof ComponentDecl) {
				ComponentDecl componentToInheritFrom = (ComponentDecl) clauseList.getChild(thisIndex - 1);
				
				if (componentToInheritFrom.hasRedeclare()) {
					return componentToInheritFrom.getRedeclare().preFormatting.copyWhitepacesFromFormatting();
				} else if (componentToInheritFrom.hasFinal()) {
					return componentToInheritFrom.getFinal().preFormatting.copyWhitepacesFromFormatting();
				} else if (componentToInheritFrom.hasInner()) {
					return componentToInheritFrom.getInner().preFormatting.copyWhitepacesFromFormatting();
				} else if (componentToInheritFrom.hasOuter()) {
					return componentToInheritFrom.getOuter().preFormatting.copyWhitepacesFromFormatting();
				} else if (componentToInheritFrom.hasReplaceable()) {
					return componentToInheritFrom.getReplaceable().preFormatting.copyWhitepacesFromFormatting();
				} else if (componentToInheritFrom.hasTypePrefixFlow()) {
					return componentToInheritFrom.getTypePrefixFlow().preFormatting.copyWhitepacesFromFormatting();
				} else if (componentToInheritFrom.hasTypePrefixVariability()) {
					return componentToInheritFrom.getTypePrefixVariability().preFormatting.copyWhitepacesFromFormatting();
				} else if (componentToInheritFrom.hasTypePrefixInputOutput()) {
					return componentToInheritFrom.getTypePrefixInputOutput().preFormatting.copyWhitepacesFromFormatting();
				} else {
					return componentToInheritFrom.getClassName().preFormatting.copyWhitepacesFromFormatting();
				}
			}
		}
		return new DefaultFormattingItem("   ");
	}
	
	protected void Comment.setDefaultFormatting() {
		if (hasStringComment() && hasAnnotation()) {
			getStringComment().preFormatting = new DefaultFormattingItem(" ");
		}
	}
	
	protected void ParseAnnotation.setDefaultFormatting() {
		getClassModification().preFormatting = new DefaultFormattingItem(" ");
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// PRETTY PRINT AST WITH PRESERVED FORMATTING:
	//
	// This section of the aspect contains methods used for printing the AST with its original formatting
	// preserved.
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * Pretty prints this AST node and all its children, with preserved formatting.
	 * @return a string, consisting of the formatted code printed from this AST node.
	 */
	public String ASTNode.prettyPrintFormatted() {
		OutputStream outputStream = new ByteArrayOutputStream();
		PrintStream printStream = new PrintStream(outputStream);
		prettyPrintFormatted(formattedPrettyPrinter, printStream);
		
		return outputStream.toString();
	}
	
	/**
	 * Pretty prints this AST node and all its childred, with preserved formatting.
	 * @param printer the printer to use when pretty printing.
	 * @param printStream the stream, to which the AST node should be printed.
	 */
	public void ASTNode.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		propagateFormatting();
		doPrettyPrintFormatted(printer, printStream);
	}
	
	void ASTNode.doPrettyPrintFormatted(Printer printer, PrintStream printStream) {
		for (ASTNode childNode: this) {
			childNode.doPrettyPrintFormatted(printer, printStream);
		}
	}
	
	void BaseNode.doPrettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		prettyPrintFormattedHelper(printer, printStream);
		printStream.print(postFormatting);
	}
	
	LinkedList<ScannedFormattingItem> Exp.parenthesisList = new LinkedList<ScannedFormattingItem>();
	public void Exp.addParenthesis(Symbol left, Symbol right) {
		parenthesisList.add(new ScannedFormattingItem(FormattingItem.Type.PARENTHESIS, "(",
			Symbol.getLine(left.getStart()), Symbol.getColumn(left.getStart()), Symbol.getLine(left.getEnd()),
			Symbol.getColumn(left.getEnd())));
		parenthesisList.add(new ScannedFormattingItem(FormattingItem.Type.PARENTHESIS, ")",
			Symbol.getLine(right.getStart()), Symbol.getColumn(right.getStart()), Symbol.getLine(right.getEnd()),
			Symbol.getColumn(right.getEnd())));
	}
	
	void AbstractEquation.doPrettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		prettyPrintFormattedHelper(printer, printStream);
		printStream.print(";");
		printStream.print(postFormatting);
	}
	
	void EquationAnnotation.doPrettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(getAnnotation().preFormatting);
		getAnnotation().prettyPrintFormattedHelper(printer, printStream);
		printStream.print(";");
		printStream.print(getAnnotation().postFormatting);
	}
	
	void Statement.doPrettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		prettyPrintFormattedHelper(printer, printStream);
		printStream.print(";");
		printStream.print(postFormatting);
	}

	void BaseNode.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		for (ASTNode childNode: this) {
			childNode.doPrettyPrintFormatted(printer, printStream);
		}
	}
	
	void StoredDefinition.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
 		if (hasWithin()) {
 			getWithin().doPrettyPrintFormatted(printer, printStream);
 		}
 		for (Element element : getElements()) {
	 		printer.print(element, printStream, "");
		}
	}

	void Within.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("within");
		if (hasPackageName()) {
			getPackageName().doPrettyPrintFormatted(printer, printStream);
		}
		printStream.print(";");
	}

	void ShortClassDecl.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
	    if (hasEncapsulated()) {
	    	getEncapsulated().doPrettyPrintFormatted(printer, printStream);
	    }
	    if (hasPartial()) {
	    	getPartial().doPrettyPrintFormatted(printer, printStream);
	    }
	    if (hasRedeclare()) {
	    	getRedeclare().doPrettyPrintFormatted(printer, printStream);
	    }
	    if (hasFinal()) {
	    	getFinal().doPrettyPrintFormatted(printer, printStream);
	    }
	    if (hasInner()) {
	    	getInner().doPrettyPrintFormatted(printer, printStream);
	    }
	    if (hasOuter()) {
	    	getOuter().doPrettyPrintFormatted(printer, printStream);
	    }
	    if (hasReplaceable()) {
	    	getReplaceable().doPrettyPrintFormatted(printer, printStream);
	    }
	    
	    getRestriction().doPrettyPrintFormatted(printer, printStream);
	    getName().doPrettyPrintFormatted(printer, printStream);
	    printStream.print("=");
	    getExtendsClauseShortClass().doPrettyPrintFormatted(printer, printStream);
	    if (hasConstrainingClause()) {
	    	getConstrainingClause().doPrettyPrintFormatted(printer, printStream);
	    }
	    if (hasConstrainingClauseComment()) {
	    	getConstrainingClauseComment().doPrettyPrintFormatted(printer, printStream);
	    }
	}
    
    void Encapsulated.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print("encapsulated");
    }

    void Partial.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print("partial");
    }
    
    void Redeclare.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print("redeclare");
    }
    
    void Final.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print("final");
    }
    
    void Inner.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print("inner");
    }
    
    void Outer.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print("outer");
    }
    
    void Replaceable.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print("replaceable");
    }
    
    void Restriction.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(this);
    }
    
    void IdDecl.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(getID());
    }
    
    void ExtendsClauseShortClass.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	getSuper().doPrettyPrintFormatted(printer, printStream);
    	
    	if (hasArraySubscripts()) {
	    	getArraySubscripts().doPrettyPrintFormatted(printer, printStream);
    	}
	    if (hasClassModification()) {
	    	getClassModification().doPrettyPrintFormatted(printer, printStream);
	    }
    }

    void Access.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(name());
    }
    
    void ArrayAccess.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(name());
    	if (hasArraySubscripts()) {
    		getArraySubscripts().doPrettyPrintFormatted(printer, printStream);
    	}
    }
    
    void Dot.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	getLeft().doPrettyPrintFormatted(printer, printStream);
    	printStream.print(".");
    	getRight().doPrettyPrintFormatted(printer, printStream);
    }
    
    void ArraySubscripts.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	if (getNumSubscript() == 0) {
    		return;
    	}

    	printStream.print("[");
    	for (int i = 0; i < getNumSubscript(); i++) {
    		getSubscript(i).doPrettyPrintFormatted(printer, printStream);
    		if (i + 1 < getNumSubscript()) {
    			printStream.print(",");
    		}
    	}
    	printStream.print("]");
    }
    
    void ArrayConstructor.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print("{");
    	getFunctionArguments().doPrettyPrintFormatted(printer, printStream);
    	printStream.print("}");
    }
    
    void Matrix.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print("[");
    	for (int i = 0; i < getNumRow(); i++) {
    		getRow(i).doPrettyPrintFormatted(printer, printStream);

    		if (i + 1 < getNumRow()) {
    			printStream.print(";");
    		}
    	}
    	printStream.print("]");
    }
    
    void MatrixRow.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	for (int i = 0; i < getNumExp(); i++) {
    		getExp(i).doPrettyPrintFormatted(printer, printStream);

    		if (i + 1 < getNumExp()) {
    			printStream.print(",");
    		}
    	}
    }    

    void ClassModification.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print("(");
    	if (getNumArgument() > 0) {
    		getArgument(0).doPrettyPrintFormatted(printer, printStream);
    	}
    	for (int i = 1; i < getNumArgument(); i++) {
    		printStream.print(",");
    		getArgument(i).doPrettyPrintFormatted(printer, printStream);
    	}
    	printStream.print(")");
    }
    
    void Each.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print("each");
    }
    
    void ConstrainingClause.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	getAccess().doPrettyPrintFormatted(printer, printStream);
    	if (hasClassModification()) {
    		getClassModification().doPrettyPrintFormatted(printer, printStream);
    	}
    }

    /** @TODO: Copy & pasted from pretty print, needs more customization */
    void FullClassDecl.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
	    if (hasEncapsulated()) {
	    	getEncapsulated().doPrettyPrintFormatted(printer, printStream);
	    }
	    if (hasPartial()) {
	    	getPartial().doPrettyPrintFormatted(printer, printStream);
	    }
	    if (hasRedeclare()) {
	    	getRedeclare().doPrettyPrintFormatted(printer, printStream);
	    }
	    if (hasFinal()) {
	    	getFinal().doPrettyPrintFormatted(printer, printStream);
	    }
	    if (hasInner()) {
	    	getInner().doPrettyPrintFormatted(printer, printStream);
	    }
	    if (hasOuter()) {
	    	getOuter().doPrettyPrintFormatted(printer, printStream);
	    }
	    if (hasReplaceable()) {
	    	getReplaceable().doPrettyPrintFormatted(printer, printStream);
	    }
	    getRestriction().doPrettyPrintFormatted(printer, printStream);
	    getName().doPrettyPrintFormatted(printer, printStream);
	    if (hasStringComment()) {
	    	getStringComment().doPrettyPrintFormatted(printer, printStream);
	    }
	    
	    for (Clause clause : originalComposition.getClauses()) {
    		clause.doPrettyPrintFormatted(printer, printStream);
    	}

	    getEndDecl().doPrettyPrintFormatted(printer, printStream);
	}
    
    public void FullClassDecl.addNewComponentDecl(ComponentDecl componentDecl) {
    	Stack<Clause> clauseStack = new Stack<Clause>();

    	for (int i = originalComposition.getNumClause() - 1; i >= 0; i--) {
    		Clause clause = originalComposition.getClause(i);
    		if (clause instanceof ComponentDecl && ((ComponentDecl) clause).isPublic() == componentDecl.isPublic()) {
    			break;
    		}
    		clauseStack.push(clause);
    		originalComposition.getClauses().removeChild(i);
    	}
    	
    	originalComposition.addClause(componentDecl);
    	
    	while (!clauseStack.isEmpty()) {
    		originalComposition.addClause(clauseStack.pop());
    	}
    	
    	addComponentDecl(componentDecl);
    }
    
    public void FullClassDecl.addNewEquation(AbstractEquation equation) {
    	for (int i = originalComposition.getNumClause() - 1; i >= 0; i--) {
    		Clause clause = originalComposition.getClause(i);
    		if (clause instanceof EquationClause && ((EquationClause) clause).getAbstractEquation(0).isInitial() == equation.isInitial()) {
    			EquationClause equationClause = (EquationClause) clause;
    			Stack<AbstractEquation> equationStack = new Stack<AbstractEquation>();
    			boolean foundGoodPosition = false;
    			for (int j = equationClause.getNumAbstractEquation() - 1; j >= 0; j--) {
    				AbstractEquation currentEquation = equationClause.getAbstractEquation(j);
    				if (currentEquation.getClass() == equation.getClass()) {
    					equationStack.push(equation);
    					foundGoodPosition = true;
    					break;
    				}
    				equationStack.push(currentEquation);
    				equationClause.getAbstractEquations().removeChild(j);
    			}
    			
    			while (!equationStack.isEmpty()) {
        			equationClause.addAbstractEquation(equationStack.pop());
        		}
    			if (!foundGoodPosition) {
    				equationClause.addAbstractEquation(equation);
    			}
    			addEquation(equation);
    			return;
    		}
    	}

    	List<AbstractEquation> abstractEquationList = new List<AbstractEquation>();
    	abstractEquationList.add(equation);
    	originalComposition.addClause(new EquationClause(abstractEquationList));
    	addEquation(equation);
    }
	
	void ExtendsClause.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("extends");
		getSuper().doPrettyPrintFormatted(printer, printStream);
		if (hasClassModification()) {
			getClassModification().doPrettyPrintFormatted(printer, printStream);
		}
		printStream.print(";");
	}
	
	void ImportClause.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("import");
		getPackageName().doPrettyPrintFormatted(printer, printStream);
		getComment().doPrettyPrintFormatted(printer, printStream);
		printStream.print(";");
	}
	
	void ImportClauseRename.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("import");
		getIdDecl().doPrettyPrintFormatted(printer, printStream);
		printStream.print("=");
		getPackageName().doPrettyPrintFormatted(printer, printStream);
		getComment().doPrettyPrintFormatted(printer, printStream);
		printStream.print(";");
	}
	
	void CompleteModification.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		getClassModification().doPrettyPrintFormatted(printer, printStream);
		if (hasValueModification()) {
			getValueModification().doPrettyPrintFormatted(printer, printStream);
		}
	}
	
	void ValueModification.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("=");
		getExp().doPrettyPrintFormatted(printer, printStream);
	}
	
	void ElementModification.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		if (hasEach()) {
			getEach().doPrettyPrintFormatted(printer, printStream);
		}
		if (hasFinal()) {
			getFinal().doPrettyPrintFormatted(printer, printStream);
		}
		getName().doPrettyPrintFormatted(printer, printStream);
		if (hasModification()) {
			getModification().doPrettyPrintFormatted(printer, printStream);
		}
		if (hasStringComment()) {
			getStringComment().doPrettyPrintFormatted(printer, printStream);
		}
	}
	
	void ClassRedeclare.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		if (hasEach()) {
			getEach().doPrettyPrintFormatted(printer, printStream);
		}
		if (hasFinal()) {
			getFinal().doPrettyPrintFormatted(printer, printStream);
		}
		getBaseClassDecl().doPrettyPrintFormatted(printer, printStream);
	}
	
	void ComponentRedeclare.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		if (hasEach()) {
			getEach().doPrettyPrintFormatted(printer, printStream);
		}
		if (hasFinal()) {
			getFinal().doPrettyPrintFormatted(printer, printStream);
		}
		getComponentDecl().doPrettyPrintFormatted(printer, printStream);
	}
	
	void EquationClause.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		if (getNumAbstractEquation() > 0 && getAbstractEquation(0).isInitial()) {
			printStream.print("initial ");
		}
		printStream.print("equation");

		for (AbstractEquation abstractEquation : getAbstractEquations()) {
			abstractEquation.doPrettyPrintFormatted(printer, printStream);
		}
	}
	
	void Algorithm.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		if (hasInitial()) {
			printStream.print("initial ");
		}
		printStream.print("algorithm");
		
		for (Statement statement : getStatements()) {
			statement.doPrettyPrintFormatted(printer, printStream);
		}
	}
	
	void BreakStmt.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("break");
	}
	
	void ReturnStmt.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("return");
	}
	
	void ForStmt.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("for ");
		for (int i = 0; i < getNumForIndex(); i++) {
			getForIndex(i).getForIndexDecl().getName().doPrettyPrintFormatted(printer, printStream);
			if (getForIndex(i).hasExp()) {
				printStream.print("in");
				getForIndex(i).getExp().doPrettyPrintFormatted(printer, printStream);
			}
			if (i + 1 < getNumForIndex()) {
				printStream.print(",");
			}
		}
		printStream.print(" loop");
		for (Statement statement : getForStmts()) {
			statement.doPrettyPrintFormatted(printer, printStream);
		}
		printStream.print("end for");
	}
	
	void IfStmt.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("if");
		for (int i = 0; i < getNumIfWhenClause(); i++) {
			getIfWhenClause(i).doPrettyPrintFormatted(printer, printStream);
			if (i + 1 < getNumIfWhenClause()) {
				printStream.print("elseif");
			}
		}
		if (getNumElseStmt() > 0) {
			printStream.print("else");
			for (Statement elseStatement : getElseStmts()) {
				elseStatement.doPrettyPrintFormatted(printer, printStream);
			}
		}
		printStream.print("end if");
	}
	
	void IfClause.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		getTest().doPrettyPrintFormatted(printer, printStream);
		printStream.print("then");
		for (Statement statement : getStatements()) {
			statement.doPrettyPrintFormatted(printer, printStream);
		}
	}
	
	void AssignStmt.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		getLeft().doPrettyPrintFormatted(printer, printStream);
		printStream.print(":=");
		getRight().doPrettyPrintFormatted(printer, printStream);
	}
	
	void Equation.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		getLeft().doPrettyPrintFormatted(printer, printStream);
		printStream.print("=");
		getRight().doPrettyPrintFormatted(printer, printStream);
	}
	
	void ConnectClause.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("connect");
		printStream.print("(");
		getConnector1().doPrettyPrintFormatted(printer, printStream);
		printStream.print(",");
		getConnector2().doPrettyPrintFormatted(printer, printStream);
		printStream.print(")");
		getComment().doPrettyPrintFormatted(printer, printStream);
	}
	
	void FunctionCallEquation.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		if (getNumLeft() > 0) {
			printStream.print("(");
			for (int i = 0 ; i < getNumLeft(); i++) {
				getLeft(i).doPrettyPrintFormatted(printer, printStream);
				if (i + 1 < getNumLeft()) {
					printStream.print(",");
				}
			}
			printStream.print(") = ");
		}
		getCall().doPrettyPrintFormatted(printer, printStream);
	}
	
	void ForClauseE.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("for ");
		for (int i = 0; i < getNumForIndex(); i++) {
			/** TODO: Create method for ForIndex or something instead. */
			getForIndex(i).getForIndexDecl().getName().doPrettyPrintFormatted(printer, printStream);
			if (getForIndex(i).hasExp()) {
				printStream.print("in");
				getForIndex(i).getExp().doPrettyPrintFormatted(printer, printStream);
			}
			if (i + 1 < getNumForIndex()) {
				printStream.print(",");
			}
		}
		printStream.print(" loop");
		for (AbstractEquation abstractEquation : getAbstractEquations()) {
			abstractEquation.doPrettyPrintFormatted(printer, printStream);
		}
		printStream.print("end for");
	}
	
	abstract void IfWhenElseEquation.prettyPrintFormattedHelper(Printer printer, PrintStream printStream, boolean elseIfWhen);
	
	void IfWhenEquation.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		prettyPrintFormattedHelper(printer, printStream, false);
	}
	
	void WhenEquation.prettyPrintFormattedHelper(Printer printer, PrintStream printStream, boolean elseWhen) {
		if (elseWhen) {
			printStream.print(preFormatting);
			printStream.print("else");
		}
		printStream.print("when");
		getTest().doPrettyPrintFormatted(printer, printStream);
		printStream.print("then");
		for (AbstractEquation abstractEquation : getAbstractEquations()) {
			abstractEquation.doPrettyPrintFormatted(printer, printStream);
		}
		if (hasElse()) {
			getElse().prettyPrintFormattedHelper(printer, printStream, true);
		}
		if (elseWhen) {
			printStream.print(postFormatting);
		} else {
			printStream.print("end when");
		}
	}
	
	void IfEquation.prettyPrintFormattedHelper(Printer printer, PrintStream printStream, boolean elseIf) {
		if (elseIf) {
			printStream.print(preFormatting);
			printStream.print("else");
		}
		printStream.print("if");
		getTest().doPrettyPrintFormatted(printer, printStream);
		printStream.print("then");
		for (AbstractEquation abstractEquation : getAbstractEquations()) {
			abstractEquation.doPrettyPrintFormatted(printer, printStream);
		}
		if (hasElse()) {
			getElse().prettyPrintFormattedHelper(printer, printStream, true);
		}
		if (elseIf) {
			printStream.print(postFormatting);
		} else {
			printStream.print("end if");
		}
	}
	
	void ElseEquation.prettyPrintFormattedHelper(Printer printer, PrintStream printStream, boolean elseIf) {
		printStream.print("else");
		for (AbstractEquation abstractEquation : getAbstractEquations()) {
			abstractEquation.doPrettyPrintFormatted(printer, printStream);
		}
	}
	
	void ElementAnnotation.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(getAnnotation().preFormatting);
		getAnnotation().prettyPrintFormattedHelper(printer, printStream);
		printStream.print(";");
		printStream.print(getAnnotation().postFormatting);
	}
	
	void AlgorithmAnnotation.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(getAnnotation().preFormatting);
		getAnnotation().prettyPrintFormattedHelper(printer, printStream);
		printStream.print(";");
		printStream.print(getAnnotation().postFormatting);
	}
	
	eq ExpandableConnector.toString() = "expandable connector";
	
	void FunctionCall.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		getName().doPrettyPrintFormatted(printer, printStream);
		printStream.print("(");
		if (hasFunctionArguments()) {
			getFunctionArguments().doPrettyPrintFormatted(printer, printStream);
		}
		printStream.print(")");
	}
	
	void FunctionArguments.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		int totalNumberOfArguments = getNumExp() + getNumNamedArgument();

		for (int i = 0; i < getNumExp(); i++) {
			getExp(i).doPrettyPrintFormatted(printer, printStream);
			if (i + 1 < totalNumberOfArguments) {
				printStream.print(",");
			}
		}
		for (int i = 0; i < getNumNamedArgument(); i++) {
			getNamedArgument(i).doPrettyPrintFormatted(printer, printStream);
			if (i + 1 < totalNumberOfArguments) {
				printStream.print(",");
			}
		}
	}
	
	void NamedArgument.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		getName().doPrettyPrintFormatted(printer, printStream);
		printStream.print("=");
		getExp().doPrettyPrintFormatted(printer, printStream);
	}
	
	void RealLitExp.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(getUNSIGNED_NUMBER());
	}

	void IntegerLitExp.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(getUNSIGNED_INTEGER());
	}
	
	public void TimeExp.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("time");
	}
	
	void StringLitExp.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("\"" + getSTRING() + "\"");
	}
	
	void BooleanLitExpTrue.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("true");
	}
	
	void BooleanLitExpFalse.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("false");
	}
	
	void NegExp.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("-");
		getExp().doPrettyPrintFormatted(printer, printStream);
	}
	
	void NotExp.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("not");
		getExp().doPrettyPrintFormatted(printer, printStream);
	}
	
	void DerExp.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("der(");
		getExp().doPrettyPrintFormatted(printer, printStream);
		printStream.print(")");
	}
	
	void RangeExp.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		for (int i = 0; i < getNumExp(); i++) {
			getExp(i).doPrettyPrintFormatted(printer, printStream);
			if (i + 1 < getNumExp()) {
				printStream.print(":");
			}
		}
	}
	
	void IfExp.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("if");
		getIfExp().doPrettyPrintFormatted(printer, printStream);
		printStream.print("then");
		getThenExp().doPrettyPrintFormatted(printer, printStream);
		for (ElseIfExp elseIfExp : getElseIfExps()) {
			elseIfExp.doPrettyPrintFormatted(printer, printStream);
		}
		printStream.print(getElseExp().preFormatting);
		printStream.print("else");
		printStream.print(insideFormatting);
		getElseExp().prettyPrintFormattedHelper(printer, printStream);
		printStream.print(getElseExp().postFormatting);
	}
	
	void ElseIfExp.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("else");
		printStream.print(insideFormatting);
		printStream.print("if");
		getIfExp().doPrettyPrintFormatted(printer, printStream);
		printStream.print("then");
		getThenExp().doPrettyPrintFormatted(printer, printStream);
	}
	
	void BinExp.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		getLeft().doPrettyPrintFormatted(printer, printStream);
		printStream.print(operatorFormatted());
		getRight().doPrettyPrintFormatted(printer, printStream);
	}
	
	syn String BinExp.operatorFormatted();
	eq LtExp.operatorFormatted()     = "<";
	eq LeqExp.operatorFormatted()    = "<=";
	eq GtExp.operatorFormatted()     = ">";
	eq GeqExp.operatorFormatted()    = ">=";
	eq EqExp.operatorFormatted()     = "==";
	eq NeqExp.operatorFormatted()    = "<>";
	eq OrExp.operatorFormatted()     = "or";
	eq AndExp.operatorFormatted()    = "and";
	eq AddExp.operatorFormatted()    = "+";
	eq SubExp.operatorFormatted()    = "-";
	eq MulExp.operatorFormatted()    = "*";
	eq DivExp.operatorFormatted()    = "/";
	eq PowExp.operatorFormatted()    = "^";
	eq DotAddExp.operatorFormatted() = ".+";
	eq DotSubExp.operatorFormatted() = ".-";
	eq DotMulExp.operatorFormatted() = ".*";
	eq DotDivExp.operatorFormatted() = "./";
	eq DotPowExp.operatorFormatted() = ".^";

	/** @TODO: Copy & pasted from pretty print, needs more customization */
	void ComponentDecl.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		if (hasRedeclare()) {
			getRedeclare().doPrettyPrintFormatted(printer, printStream); //str.print(getRedeclare().toString() + " ");
		}
		if (hasFinal()) {
			getFinal().doPrettyPrintFormatted(printer, printStream);
		}
		if (hasInner()) {
			getInner().doPrettyPrintFormatted(printer, printStream);
		}
		if (hasOuter()) {
			getOuter().doPrettyPrintFormatted(printer, printStream);
		}
		if (hasReplaceable()) {
			getReplaceable().doPrettyPrintFormatted(printer, printStream);
		}
		if (hasTypePrefixFlow()) {
			getTypePrefixFlow().doPrettyPrintFormatted(printer, printStream);
		}
		if (hasTypePrefixVariability()) {
			getTypePrefixVariability().doPrettyPrintFormatted(printer, printStream);
		}
		if (hasTypePrefixInputOutput()) {
			getTypePrefixInputOutput().doPrettyPrintFormatted(printer, printStream);
		}
		
		printer.print(getClassName(), printStream, ""); // WHY?
		if (hasTypeArraySubscripts()) {
			//printer.print(getTypeArraySubscripts(), printStream, "");
			getTypeArraySubscripts().doPrettyPrintFormatted(printer, printStream);
		}
		//
		getName().doPrettyPrintFormatted(printer, printStream); 
	    if (hasVarArraySubscripts()) {
	    	//printer.print(getVarArraySubscripts(), printStream, "");
	    	getVarArraySubscripts().doPrettyPrintFormatted(printer, printStream);
	    }
	    //printer.print(getModificationOpt(), printStream, "");
	    if (hasModification()) {
	    	getModification().doPrettyPrintFormatted(printer, printStream);
	    }
	    if (hasConditionalAttribute()) {
	    	getConditionalAttribute().doPrettyPrintFormatted(printer, printStream);
	    }
	    
	    getComment().doPrettyPrintFormatted(printer, printStream);
				 
		if (hasConstrainingClause()) {
			printer.print(getConstrainingClause(), printStream, "");
		}
		printStream.print(";");
	}
	
	syn String TypePrefix.formattedToString();
	eq Flow.formattedToString()			= "flow";
	eq Stream.formattedToString()		= "stream";
	eq Continuous.formattedToString()	= "continuous";
	eq Discrete.formattedToString()		= "discrete";
	eq Parameter.formattedToString()	= "parameter";
	eq Constant.formattedToString()		= "constant";
	eq Input.formattedToString()		= "input";
	eq Output.formattedToString()		= "output";
	
	void TypePrefix.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(formattedToString());
	}
	
	void ConditionalAttribute.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("if");
		getExp().doPrettyPrintFormatted(printer, printStream);
	}
	
	void Comment.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		if (hasStringComment()) {
			getStringComment().doPrettyPrintFormatted(printer, printStream);
		}
		if (hasAnnotation()) {
			getAnnotation().doPrettyPrintFormatted(printer, printStream);
		}
	}
	
	void StringComment.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("\"");
		printStream.print(getComment());
		printStream.print("\"");
	}

	void ParseAnnotation.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("annotation");
		getClassModification().doPrettyPrintFormatted(printer, printStream);
	}
	
	void EndDecl.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print("end" + insideFormatting + getEndID() + ";");
	}
	
	syn String FBinExp.operatorFormatted();
	eq FLtExp.operatorFormatted()     = "<";
	eq FLeqExp.operatorFormatted()    = "<=";
	eq FGtExp.operatorFormatted()     = ">";
	eq FGeqExp.operatorFormatted()    = ">=";
	eq FEqExp.operatorFormatted()     = "==";
	eq FNeqExp.operatorFormatted()    = "<>";
	eq FOrExp.operatorFormatted()     = "or";
	eq FAndExp.operatorFormatted()    = "and";
	eq FAddExp.operatorFormatted()    = "+";
	eq FSubExp.operatorFormatted()    = "-";
	eq FMulExp.operatorFormatted()    = "*";
	eq FDivExp.operatorFormatted()    = "/";
	eq FPowExp.operatorFormatted()    = "^";
	eq FDotAddExp.operatorFormatted() = ".+";
	eq FDotSubExp.operatorFormatted() = ".-";
	eq FDotMulExp.operatorFormatted() = ".*";
	eq FDotDivExp.operatorFormatted() = "./";
	eq FDotPowExp.operatorFormatted() = ".^";
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// MISCELLANEOUS:
	//
	// This section of the aspect contains attributes and methods for misscellaneous activities which are related
	// to pretty printing with preserved formatting.
	//
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	void ASTNode.copyFormattingFrom(ASTNode node) {
		if (this.getClass() != node.getClass())
			return;
		if (numChildren() != node.numChildren())
			return;
		for (int i = 0; i < numChildren(); i++) {
			getChild(i).copyFormattingFrom(node.getChild(i));
		}
	}
	
	void List.copyFormattingFrom(ASTNode node) {
		if (this.getClass() != node.getClass())
			return;
	}
	
	void BaseNode.copyFormattingFrom(ASTNode node) {
		if (this.getClass() != node.getClass())
			return;
		BaseNode bn = (BaseNode) node;
		node.propagateFormatting();
		preFormatting = bn.preFormatting;
		postFormatting = bn.postFormatting;
		super.copyFormattingFrom(node);
	}
}