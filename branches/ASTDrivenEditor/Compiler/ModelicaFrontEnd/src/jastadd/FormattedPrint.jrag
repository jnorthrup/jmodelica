import org.jmodelica.util.FormattingInfo;
import org.jmodelica.util.FormattingItem;
import org.jmodelica.util.EmptyFormattingItem;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

aspect FormattedPrint {
	/**
	 * A pretty printer that prints the AST in code, with the old formatting.
	 */
	class FormattedPrettyPrinter extends Printer {
		/**
		 * Creates a <code>FormattedPrettyPrinter</code>.
		 */
		public FormattedPrettyPrinter() {
			super("");
		}
		
		/**
		 * Takes an AST node and prints it using a <code>PrintStream</code>. The formatting that the code that
		 * generated this node is preserved.
		 * @param node the AST node to print.
		 * @param printStream the stream to which the node should be printed.
		 * @param ident not used.
		 */
		@Override
		@SuppressWarnings({"unchecked"})
		public void print(ASTNode node, PrintStream printStream, String ident) {
			node.prettyPrintFormattedHelper(this, printStream);
		}
		
		public String op(FBinExp exp) {
			return exp.op();
		}
	}
	
	static FormattedPrettyPrinter ASTNode.formattedPrettyPrinter = new FormattedPrettyPrinter();
	protected FormattingItem BaseNode.preFormatting = new EmptyFormattingItem();
	protected FormattingItem BaseNode.postFormatting = new EmptyFormattingItem();

	/**
	 * Adds formatting information to this AST node and all its children, which can then be used by the method
	 * <code>prettyPrintFormatted</code>.
	 * @param formattingInfo the information to use to format this AST node.
	 */	
	protected void ASTNode.addFormattingInformation(FormattingInfo formattingInfo) {
		Iterator<FormattingItem> formattingIterator = formattingInfo.getFormattingCollection().iterator();
		formattingIterator = addPreFormatting(formattingIterator);
		formattingIterator = addPostFormatting(formattingIterator);
		for (int i = 0; i < getNumChild(); i++) {
			getChild(i).addFormattingInformation(formattingInfo);
		}
	}
	
	protected void BaseNode.addFormattingInformation(FormattingInfo formattingInfo) {
		if (formatting == null) {
			return;
		}

		super.addFormattingInformation(formattingInfo);
		formatting = null;
	}
	
	public void Opt.addFormattingInformation(FormattingInfo formattingInfo) {
		if (getNumChild() != 0) {
			getChild(0).addFormattingInformation(formattingInfo);
		}
	}
	
	public void List.addFormattingInformation(FormattingInfo formattingInfo) {
		for (int i = 0; i < getNumChild(); i++) {
			getChild(i).addFormattingInformation(formattingInfo);
		}
	}
	
	public Iterator<FormattingItem> ASTNode.addPreFormatting(Iterator<FormattingItem> formattingIterator) {
		return formattingIterator;
	}
	
	public Iterator<FormattingItem> ASTNode.addPostFormatting(Iterator<FormattingItem> formattingIterator) {
		return formattingIterator;
	}
	
	public Iterator<FormattingItem> BaseNode.addPreFormatting(Iterator<FormattingItem> formattingIterator) {
		int startLine = getLine(getStart());
		int startColumn = getColumn(getStart());

		while (formattingIterator.hasNext()) {
			FormattingItem formattingItem = formattingIterator.next();
			
			if (formattingItem.getEndLine() < startLine || formattingItem.getEndColumn() + 1 < startColumn) {
				continue;
			} else if (formattingItem.getEndLine() == startLine &&
					formattingItem.getEndColumn() + 1 == startColumn) {
				preFormatting = formattingItem;
				formattingIterator.remove();
				break;
			} else {
				break;
			}
		}
		
		return formattingIterator;
	}
	
	public Iterator<FormattingItem> BaseNode.addPostFormatting(Iterator<FormattingItem> formattingIterator) {
		int endLine = getLine(getEnd());
		int endColumnPlusOne = getColumn(getEnd()) + 1;

		while (formattingIterator.hasNext()) {
			FormattingItem formattingItem = formattingIterator.next();
			
			if (formattingItem.getStartLine() < endLine || formattingItem.getStartColumn() < endColumnPlusOne) {
				continue;
			} else if (formattingItem.getStartLine() == endLine &&
					formattingItem.getStartColumn() == endColumnPlusOne) {
				postFormatting = formattingItem;
				formattingIterator.remove();
				break;
			} else {
				break;
			}
		}
		
		return formattingIterator;
	}
	
	protected FormattingInfo BaseNode.formatting = null;
	public void ASTNode.setFormatting(FormattingInfo formattingInfo) {
		for (int i = 0; i < getNumChild(); i++) {
			getChild(i).setFormatting(formattingInfo);
		}
	}
	
	public void BaseNode.setFormatting(FormattingInfo formattingInfo) {
		formatting = formattingInfo;
		super.setFormatting(formattingInfo);
	}
	
	/**
	 * Propagates the formatting information downwards in the AST if this has not already been done.
	 */
	public void ASTNode.propagateFormatting() {
		getParent().propagateFormatting();
	}
	
	protected void ASTNode.propagateFormatting(FormattingInfo formattingInfo) {
		if (formattingInfo != null) {
			formattingInfo.mergeAdjacentFormattingItems();
			addFormattingInformation(formattingInfo);
		}
	}
	
	@Override
	public void BaseNode.propagateFormatting() {
		propagateFormatting(formatting);
	}

	/**
	 * Pretty prints this AST node and all its children, with preserved formatting.
	 * @return a string, consisting of the formatted code printed from this AST node.
	 */
	public String ASTNode.prettyPrintFormatted() {
		OutputStream outputStream = new ByteArrayOutputStream();
		PrintStream printStream = new PrintStream(outputStream);
		prettyPrintFormatted(formattedPrettyPrinter, printStream);
		
		return outputStream.toString();
	}
	
	/**
	 * Pretty prints this AST node and all its childred, with preserved formatting.
	 * @param printer the printer to use when pretty printing.
	 * @param printStream the stream, to which the AST node should be printed.
	 */
	public void ASTNode.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		propagateFormatting();
		prettyPrintFormattedHelper(printer, printStream);
	}
	
	void ASTNode.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		for (int i = 0; i < getNumChild(); i++) {
			getChild(i).prettyPrintFormattedHelper(printer, printStream);
		}
	}

	void BaseNode.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		for (int i = 0; i < getNumChild(); i++) {
			getChild(i).prettyPrintFormattedHelper(printer, printStream);
		}
		//prettyPrint(printer, printStream, "");
		printStream.print(postFormatting);
	}
	
	void StoredDefinition.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
 		if (hasWithin()) {
 			getWithin().prettyPrintFormattedHelper(printer, printStream);
 		}

 		for (Element element : getElements()) {
	 		printer.print(element, printStream, "");
		}
 		printStream.print(postFormatting);
	}

	void Within.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("within");
		if (hasPackageName()) {
			getPackageName().prettyPrintFormattedHelper(printer, printStream);
		}
		printStream.print(postFormatting);
	}

	void ShortClassDecl.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);

	    if (hasEncapsulated()) {
	    	getEncapsulated().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasPartial()) {
	    	getPartial().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasRedeclare()) {
	    	getRedeclare().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasFinal()) {
	    	getFinal().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasInner()) {
	    	getInner().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasOuter()) {
	    	getOuter().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasReplaceable()) {
	    	getReplaceable().prettyPrintFormattedHelper(printer, printStream);
	    }
	    
	    getRestriction().prettyPrintFormattedHelper(printer, printStream);
	    getName().prettyPrintFormattedHelper(printer, printStream);
	    printStream.print("=");
	    getExtendsClauseShortClass().prettyPrintFormattedHelper(printer, printStream);
	    if (hasConstrainingClause()) {
	    	getConstrainingClause().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasConstrainingClauseComment()) {
	    	getConstrainingClauseComment().prettyPrintFormattedHelper(printer, printStream);
	    }

	    printStream.print(postFormatting);
	}
    
    void Encapsulated.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("encapsulated");
    	printStream.print(postFormatting);
    }

    void Partial.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("partial");
    	printStream.print(postFormatting);
    }
    
    void Redeclare.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("redeclare");
    	printStream.print(postFormatting);
    }
    
    void Final.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("final");
    	printStream.print(postFormatting);
    }
    
    void Inner.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("inner");
    	printStream.print(postFormatting);
    }
    
    void Outer.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("outer");
    	printStream.print(postFormatting);
    }
    
    void Replaceable.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("replaceable");
    	printStream.print(postFormatting);
    }
    
    void Restriction.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print(this);
    	printStream.print(postFormatting);
    }
    
    void IdDecl.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print(getID());
    	printStream.print(postFormatting);
    }
    
    void ExtendsClauseShortClass.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);

    	getSuper().prettyPrintFormattedHelper(printer, printStream);
    	
    	if (hasArraySubscripts()) {
	    	getArraySubscripts().prettyPrintFormattedHelper(printer, printStream);
    	}
	    if (hasClassModification()) {
	    	getClassModification().prettyPrintFormattedHelper(printer, printStream);
	    }
	    
    	printStream.print(postFormatting);
    }

    void Access.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print(name());
    	printStream.print(postFormatting);
    }
    
    void ArraySubscripts.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	for (int i = 0; i < getNumSubscript(); i++) {
    		getSubscript(i).prettyPrintFormattedHelper(printer, printStream);
    	}
    	printStream.print(postFormatting);
    }

    void ClassModification.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	for (int i = 0; i < getNumArgument(); i++) {
    		getArgument(i).prettyPrintFormattedHelper(printer, printStream);
    	}
    	printStream.print(postFormatting);
    }
    
    void Each.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("each");
    	printStream.print(postFormatting);
    }
    
    void ConstrainingClause.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	getAccess().prettyPrintFormattedHelper(printer, printStream);
    	if (hasClassModification()) {
    		getClassModification().prettyPrintFormattedHelper(printer, printStream);
    	}
    	printStream.print(postFormatting);
    }

    /** @TODO: Copy & pasted from pretty print, needs more customization */
    void FullClassDecl.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
	    printStream.print(preFormatting);

	    if (hasEncapsulated()) {
	    	getEncapsulated().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasPartial()) {
	    	getPartial().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasRedeclare()) {
	    	getRedeclare().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasFinal()) {
	    	getFinal().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasInner()) {
	    	getInner().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasOuter()) {
	    	getOuter().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasReplaceable()) {
	    	getReplaceable().prettyPrintFormattedHelper(printer, printStream);
	    }
	    
	    getRestriction().prettyPrintFormattedHelper(printer, printStream);
	    getName().prettyPrintFormattedHelper(printer, printStream);
	    if (hasStringComment()) {
	    	getStringComment().prettyPrintFormattedHelper(printer, printStream);
	    }

	    /*getExtendsClauseShortClass().prettyPrintFormatted(printer, printStream);
	    if (hasConstrainingClause()) {
	    	getConstrainingClause().prettyPrintFormatted(printer, printStream);
	    }
	    if (hasConstrainingClauseComment()) {
	    	getConstrainingClauseComment().prettyPrintFormatted(printer, printStream);
	    }*/

		
 		// Print all local classes
 		/*int numPubClass = 0;
// 		str.print(indent + "public\n");
 		for (int i=0;i<getNumClassDecl();i++)
 			if (((BaseClassDecl)getClassDecl(i)).isPublic()) {
 			 	numPubClass++;
 			 	printer.print(getClassDecl(i), printStream, "");
	 			printStream.print(";\n\n");
			}
			
		if (getNumClassDecl()-numPubClass>0) {	
			printStream.print("protected\n");
 			for (int i=0;i<getNumClassDecl();i++)
 				if (((BaseClassDecl)getClassDecl(i)).isProtected()) {
 					printer.print(getClassDecl(i), printStream, "");
		 			printStream.print(";\n\n");
		 		}
		}*/
	    
	    for (int i = 0; i < getNumClassDecl(); i++) {
	    	getClassDecl(i).prettyPrintFormattedHelper(printer, printStream);
	    }
	    for (int i = 0; i < getNumImport(); i++) {
	    	getImport(i).prettyPrintFormattedHelper(printer, printStream);
	    }
	    for (int i = 0; i < getNumSuper(); i++) {
	    	getSuper(i).prettyPrintFormattedHelper(printer, printStream);
	    }
	    for (int i = 0; i < getNumComponentDecl(); i++) {
	    	getComponentDecl(i).prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (getNumEquation() > 0) {
	    	printStream.print("equation");
	    	for (int i = 0; i < getNumEquation(); i++) {
	    		getEquation(i).prettyPrintFormattedHelper(printer, printStream);
	    	}
	    }
	    for (int i = 0; i < getNumAnnotation(); i++) {
	    	getAnnotation(i).prettyPrintFormattedHelper(printer, printStream);
	    }
		
	    /** @TODO: Format end */
		printStream.print("end " + getName().getID());

		printStream.print(postFormatting);
	}
	
	void ExtendsClause.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("extends");
		getSuper().prettyPrintFormattedHelper(printer, printStream);
		getClassModificationOpt().prettyPrintFormattedHelper(printer, printStream);
		printStream.print(postFormatting);
	}
	
	void ImportClause.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("import");
		getPackageName().prettyPrintFormattedHelper(printer, printStream);
		getComment().prettyPrintFormattedHelper(printer, printStream);
		printStream.print(postFormatting);
	}
	
	void CompleteModification.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);

		getClassModification().prettyPrintFormattedHelper(printer, printStream);
		if (hasValueModification()) {
			getValueModification().prettyPrintFormattedHelper(printer, printStream);
		}

		printStream.print(postFormatting);
	}
	
	void ValueModification.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("=");
		getExp().prettyPrintFormattedHelper(printer, printStream);
		printStream.print(postFormatting);
	}
	
	void ElementModification.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		
		if (hasEach()) {
			getEach().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasFinal()) {
			getFinal().prettyPrintFormattedHelper(printer, printStream);
		}
		getName().prettyPrintFormattedHelper(printer, printStream);
		if (hasModification()) {
			getModification().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasStringComment()) {
			getStringComment().prettyPrintFormattedHelper(printer, printStream);
		}
		
		printStream.print(postFormatting);
	}
	
	void ClassRedeclare.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		
		if (hasEach()) {
			getEach().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasFinal()) {
			getFinal().prettyPrintFormattedHelper(printer, printStream);
		}
		getBaseClassDecl().prettyPrintFormattedHelper(printer, printStream);
		
		printStream.print(postFormatting);
	}
	
	void ComponentRedeclare.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		
		if (hasEach()) {
			getEach().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasFinal()) {
			getFinal().prettyPrintFormattedHelper(printer, printStream);
		}
		getComponentDecl().prettyPrintFormattedHelper(printer, printStream);
		
		printStream.print(postFormatting);
	}
	
	void ConnectClause.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("connect");
		getConnector1().prettyPrintFormattedHelper(printer, printStream);
		getConnector2().prettyPrintFormattedHelper(printer, printStream);
		getComment().prettyPrintFormattedHelper(printer, printStream);
		printStream.print(postFormatting);
	}
	
	void RealLitExp.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print(getUNSIGNED_NUMBER());
		printStream.print(postFormatting);
	}

	void IntegerLitExp.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print(getUNSIGNED_INTEGER());
		printStream.print(postFormatting);
	}
	
	void StringLitExp.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("\"" + getSTRING() + "\"");
		printStream.print(postFormatting);
	}
	
	void BooleanLitExpTrue.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("true");
		printStream.print(postFormatting);
	}
	
	void BooleanLitExpFalse.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("false");
		printStream.print(postFormatting);
	}
	
	void NegExp.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("-");
		getExp().prettyPrintFormattedHelper(printer, printStream);
		printStream.print(postFormatting);
	}

	/** @TODO: Copy & pasted from pretty print, needs more customization */
	void ComponentDecl.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		
		if (hasRedeclare()) {
			getRedeclare().prettyPrintFormattedHelper(printer, printStream); //str.print(getRedeclare().toString() + " ");
		}
		if (hasFinal()) {
			getFinal().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasInner()) {
			getInner().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasOuter()) {
			getOuter().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasReplaceable()) {
			getReplaceable().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasTypePrefixFlow()) {
			getTypePrefixFlow().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasTypePrefixVariability()) {
			getTypePrefixVariability().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasTypePrefixInputOutput()) {
			getTypePrefixInputOutput().prettyPrintFormattedHelper(printer, printStream);
		}
		
		printer.print(getClassName(), printStream, ""); // WHY?
		if (hasTypeArraySubscripts()) {
			//printer.print(getTypeArraySubscripts(), printStream, "");
			getTypeArraySubscripts().prettyPrintFormattedHelper(printer, printStream);
		}
		//printStream.print(preFormatting);
		getName().prettyPrintFormattedHelper(printer, printStream); 
	    if (hasVarArraySubscripts()) {
	    	//printer.print(getVarArraySubscripts(), printStream, "");
	    	getVarArraySubscripts().prettyPrintFormattedHelper(printer, printStream);
	    }
	    //printer.print(getModificationOpt(), printStream, "");
	    getModificationOpt().prettyPrintFormattedHelper(printer, printStream);
	    
	    getComment().prettyPrintFormattedHelper(printer, printStream);
				 
		if (hasConstrainingClause()) {
			printer.print(getConstrainingClause(), printStream, "");
		}		 

				    
	}
	
	void Comment.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		if (hasStringComment()) {
			getStringComment().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasAnnotation()) {
			getAnnotation().prettyPrintFormattedHelper(printer, printStream);
		}
	}
	
	void StringComment.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting + "\"");
		printStream.print(getComment());
		printStream.print("\"" + postFormatting);
	}

	void ParseAnnotation.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("annotation");
		getClassModification().prettyPrintFormattedHelper(printer, printStream);
		printStream.print(postFormatting);
	}
}