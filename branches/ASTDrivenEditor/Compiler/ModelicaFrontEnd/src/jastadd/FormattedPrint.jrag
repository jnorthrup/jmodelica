import org.jmodelica.util.FormattingInfo;
import org.jmodelica.util.FormattingItem;
import org.jmodelica.util.EmptyFormattingItem;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

aspect FormattedPrint {
	/**
	 * A pretty printer that prints the AST in code, with the old formatting.
	 */
	class FormattedPrettyPrinter extends Printer {
		/**
		 * Creates a <code>FormattedPrettyPrinter</code>.
		 */
		public FormattedPrettyPrinter() {
			super("");
		}
		
		/**
		 * Takes an AST node and prints it using a <code>PrintStream</code>. The formatting that the code that
		 * generated this node is preserved.
		 * @param node the AST node to print.
		 * @param printStream the stream to which the node should be printed.
		 * @param ident not used.
		 */
		@Override
		@SuppressWarnings({"unchecked"})
		public void print(ASTNode node, PrintStream printStream, String ident) {
			node.prettyPrintFormatted(this, printStream);
		}
	}
	
	private FormattedPrettyPrinter ASTNode.formattedPrettyPrinter = new FormattedPrettyPrinter();
	protected FormattingItem ASTNode.preFormatting = new EmptyFormattingItem();
	protected FormattingItem ASTNode.postFormatting = new EmptyFormattingItem();

	/**
	 * Adds formatting information to this AST node and all its children, which can then be used by the method
	 * <code>prettyPrintFormatted</code>.
	 * @param formattingInfo the information to use to format this AST node.
	 */
	public void ASTNode.addFormattingInformation(FormattingInfo formattingInfo) {
		Iterator<FormattingItem> formattingIterator = formattingInfo.getFormattingCollection().iterator();

		while (formattingIterator.hasNext()) {
			FormattingItem formattingItem = formattingIterator.next();

			if (formattingItem.getEndLine() == getLine(getStart()) &&
					formattingItem.getEndColumn() + 1 == getColumn(getStart())) {
				addPreFormatting(formattingItem);
				formattingIterator.remove();
			} else if (formattingItem.getStartLine() == getLine(getEnd()) &&
					formattingItem.getStartColumn() == getColumn(getEnd()) + 1) {
				addPostFormatting(formattingItem);
				formattingIterator.remove();
			}
		}

		for (int i = 0; i < getNumChild(); i++) {
			getChild(i).addFormattingInformation(formattingInfo);
		}
	}
	
	public void Opt.addFormattingInformation(FormattingInfo formattingInfo) {
		for (int i = 0; i < getNumChild(); i++) {
			getChild(i).addFormattingInformation(formattingInfo);
		}
	}

	/**
	 * Sets the formatting that should be used before (left-hand side of) this node.
	 * @param formatting the formatting item.
	 */
	protected void ASTNode.addPreFormatting(FormattingItem formatting) {
		preFormatting = formatting;
	}
	
	/**
	 * Sets the formatting that should be used after (right-hand side of) this node.
	 * @param formatting the formatting item.
	 */
	protected void ASTNode.addPostFormatting(FormattingItem formatting) {
		postFormatting = formatting;
	}

	/**
	 * Pretty prints this AST node and all its children, with preserved formatting.
	 * @return a string, consisting of the formatted code printed from this AST node.
	 */
	public String ASTNode.prettyPrintFormatted() {
		OutputStream outputStream = new ByteArrayOutputStream();
		PrintStream printStream = new PrintStream(outputStream);

		prettyPrintFormatted(formattedPrettyPrinter, printStream);

		return outputStream.toString();
	}
	
	/**
	 * Pretty prints this AST node and all its childred, with preserved formatting.
	 * @param printer the printer to use when pretty printing.
	 * @param printStream the stream, to which the AST node should be printed.
	 */
	public void ASTNode.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		for (int i = 0; i < getNumChild(); i++) {
			getChild(i).prettyPrintFormatted(printer, printStream);
		}
		//prettyPrint(printer, printStream, "");
		printStream.print(postFormatting);
	}
	
	public void StoredDefinition.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
 		if (hasWithin()) {
 			getWithin().prettyPrintFormatted(printer, printStream);
 		}

 		for (Element element : getElements()) {
	 		printer.print(element, printStream, "");
		}
 		printStream.print(postFormatting);
	}

	public void Within.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("within");
		if (hasPackageName()) {
			getPackageName().prettyPrintFormatted(printer, printStream);
		}
		printStream.print(postFormatting);
	}

    public void ShortClassDecl.prettyPrintFormatted(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);

	    if (hasEncapsulated()) {
	    	getEncapsulated().prettyPrintFormatted(printer, printStream);
	    }
	    if (hasPartial()) {
	    	getPartial().prettyPrintFormatted(printer, printStream);
	    }
	    if (hasRedeclare()) {
	    	getRedeclare().prettyPrintFormatted(printer, printStream);
	    }
	    if (hasFinal()) {
	    	getFinal().prettyPrintFormatted(printer, printStream);
	    }
	    if (hasInner()) {
	    	getInner().prettyPrintFormatted(printer, printStream);
	    }
	    if (hasOuter()) {
	    	getOuter().prettyPrintFormatted(printer, printStream);
	    }
	    if (hasReplaceable()) {
	    	getReplaceable().prettyPrintFormatted(printer, printStream);
	    }
	    
	    getRestriction().prettyPrintFormatted(printer, printStream);
	    getName().prettyPrintFormatted(printer, printStream);
	    /** @TODO: Handle equals when scanning:
	     * printStream.print(" = ");
	     * */
	    getExtendsClauseShortClass().prettyPrintFormatted(printer, printStream);
	    if (hasConstrainingClause()) {
	    	getConstrainingClause().prettyPrintFormatted(printer, printStream);
	    }
	    if (hasConstrainingClauseComment()) {
	    	getConstrainingClauseComment().prettyPrintFormatted(printer, printStream);
	    }

	    printStream.print(postFormatting);
	}
    
    public void Encapsulated.prettyPrintFormatted(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("encapsulated");
    	printStream.print(postFormatting);
    }

    public void Partial.prettyPrintFormatted(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("partial");
    	printStream.print(postFormatting);
    }
    
    public void Redeclare.prettyPrintFormatted(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("redeclare");
    	printStream.print(postFormatting);
    }
    
    public void Final.prettyPrintFormatted(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("final");
    	printStream.print(postFormatting);
    }
    
    public void Inner.prettyPrintFormatted(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("inner");
    	printStream.print(postFormatting);
    }
    
    public void Outer.prettyPrintFormatted(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("outer");
    	printStream.print(postFormatting);
    }
    
    public void Replaceable.prettyPrintFormatted(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("replaceable");
    	printStream.print(postFormatting);
    }
    
    public void Restriction.prettyPrintFormatted(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print(this);
    	printStream.print(postFormatting);
    }
    
    public void IdDecl.prettyPrintFormatted(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print(getID());
    	printStream.print(postFormatting);
    }
    
    public void ExtendsClauseShortClass.prettyPrintFormatted(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);

    	getSuper().prettyPrintFormatted(printer, printStream);
    	
    	if (hasArraySubscripts()) {
	    	getArraySubscripts().prettyPrintFormatted(printer, printStream);
    	}
	    if (hasClassModification()) {
	    	getClassModification().prettyPrintFormatted(printer, printStream);
	    }
	    
    	printStream.print(postFormatting);
    }

    public void Access.prettyPrintFormatted(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print(name());
    	printStream.print(postFormatting);
    }
    
    public void ArraySubscripts.prettyPrintFormatted(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	for (int i = 0; i < getNumSubscript(); i++) {
    		getSubscript(i).prettyPrintFormatted(printer, printStream);
    	}
    	printStream.print(postFormatting);
    }
    
    public void Subscript.prettyPrintFormatted(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("SUBSCRIPT"); /** @TODO: Recognize what should be printed here. */
    	printStream.print(postFormatting);
    }

    public void ClassModification.prettyPrintFormatted(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	for (int i = 0; i < getNumArgument(); i++) {
    		getArgument(i).prettyPrintFormatted(printer, printStream);
    	}
    	printStream.print(postFormatting);
    }
    
    /*public void Argument.prettyPrintFormatted(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	if (hasEach()) {
    		getEach().prettyPrintFormatted(printer, printStream);
    	}
    	if (hasFinal()) {
    		getFinal().prettyPrintFormatted(printer, printStream);
    	}
    	printStream.print(postFormatting);
    }*/
    
    public void Each.prettyPrintFormatted(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("each");
    	printStream.print(postFormatting);
    }
    
    public void ConstrainingClause.prettyPrintFormatted(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	getAccess().prettyPrintFormatted(printer, printStream);
    	if (hasClassModification()) {
    		getClassModification().prettyPrintFormatted(printer, printStream);
    	}
    	printStream.print(postFormatting);
    }

    /** @TODO: Copy & pasted from pretty print, needs more customization */
	public void FullClassDecl.prettyPrintFormatted(Printer printer, PrintStream printStream) {
	    printStream.print(preFormatting);

	    if (hasEncapsulated()) {
	    	getEncapsulated().prettyPrintFormatted(printer, printStream);
	    }
	    if (hasPartial()) {
	    	getPartial().prettyPrintFormatted(printer, printStream);
	    }
	    if (hasRedeclare()) {
	    	getRedeclare().prettyPrintFormatted(printer, printStream);
	    }
	    if (hasFinal()) {
	    	getFinal().prettyPrintFormatted(printer, printStream);
	    }
	    if (hasInner()) {
	    	getInner().prettyPrintFormatted(printer, printStream);
	    }
	    if (hasOuter()) {
	    	getOuter().prettyPrintFormatted(printer, printStream);
	    }
	    if (hasReplaceable()) {
	    	getReplaceable().prettyPrintFormatted(printer, printStream);
	    }
	    
	    getRestriction().prettyPrintFormatted(printer, printStream);
	    getName().prettyPrintFormatted(printer, printStream);

	    /*getExtendsClauseShortClass().prettyPrintFormatted(printer, printStream);
	    if (hasConstrainingClause()) {
	    	getConstrainingClause().prettyPrintFormatted(printer, printStream);
	    }
	    if (hasConstrainingClauseComment()) {
	    	getConstrainingClauseComment().prettyPrintFormatted(printer, printStream);
	    }*/

		
 		// Print all local classes
 		/*int numPubClass = 0;
// 		str.print(indent + "public\n");
 		for (int i=0;i<getNumClassDecl();i++)
 			if (((BaseClassDecl)getClassDecl(i)).isPublic()) {
 			 	numPubClass++;
 			 	printer.print(getClassDecl(i), printStream, "");
	 			printStream.print(";\n\n");
			}
			
		if (getNumClassDecl()-numPubClass>0) {	
			printStream.print("protected\n");
 			for (int i=0;i<getNumClassDecl();i++)
 				if (((BaseClassDecl)getClassDecl(i)).isProtected()) {
 					printer.print(getClassDecl(i), printStream, "");
		 			printStream.print(";\n\n");
		 		}
		}*/
	    
	    for (int i = 0; i < getNumClassDecl(); i++) {
	    	getClassDecl(i).prettyPrintFormatted(printer, printStream);
	    }
	    for (int i = 0; i < getNumImport(); i++) {
	    	getImport(i).prettyPrintFormatted(printer, printStream);
	    }
	    for (int i = 0; i < getNumSuper(); i++) {
	    	getSuper(i).prettyPrintFormatted(printer, printStream);
	    }
	    for (int i = 0; i < getNumComponentDecl(); i++) {
	    	getComponentDecl(i).prettyPrintFormatted(printer, printStream);
	    }
	    for (int i = 0; i < getNumEquation(); i++) {
	    	getEquation(i).prettyPrintFormatted(printer, printStream);
	    }
			
 		// Print all components
 		/*int numPubComp = 0;
// 		str.print(indent + "public\n");
 		for (int i=0;i<getNumComponentDecl();i++)
 			if (getComponentDecl(i).isPublic()) {
 			 	numPubComp++;
 			 	printer.print(getComponentDecl(i), printStream, "");
	 			printStream.print(";\n");
			}
			
		if (getNumComponentDecl()-numPubComp>0) {	
			printStream.print("protected\n");
 			for (int i=0;i<getNumComponentDecl();i++)
 				if (getComponentDecl(i).isProtected()) {
 					printer.print(getComponentDecl(i), printStream, "");
		 			printStream.print(";\n");
			}
		}	
		
		if (getNumEquation()>0) {
			printStream.print("equation\n");
			for (int i=0;i<getNumEquation();i++) {
				printer.print(getEquation(i), printStream, "");
				printStream.print(";\n");
			}
		}*/
		
	    /** @TODO: Format end */
		printStream.print("end " + getName().getID());

		printStream.print(postFormatting);
	}
	
	public void ExtendsClause.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("extends");
		getSuper().prettyPrintFormatted(printer, printStream);
		getClassModificationOpt().prettyPrintFormatted(printer, printStream);
		printStream.print(postFormatting);
	}
	
	public void ImportClause.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("import");
		getPackageName().prettyPrintFormatted(printer, printStream);
		getComment().prettyPrintFormatted(printer, printStream);
		printStream.print(postFormatting);
	}
	
	public void CompleteModification.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);

		getClassModification().prettyPrintFormatted(printer, printStream);
		if (hasValueModification()) {
			getValueModification().prettyPrintFormatted(printer, printStream);
		}

		printStream.print(postFormatting);
	}
	
	public void ValueModification.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		getExp().prettyPrintFormatted(printer, printStream);
		printStream.print(postFormatting);
	}
	
	public void ElementModification.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		
		if (hasEach()) {
			getEach().prettyPrintFormatted(printer, printStream);
		}
		if (hasFinal()) {
			getFinal().prettyPrintFormatted(printer, printStream);
		}
		getName().prettyPrintFormatted(printer, printStream);
		if (hasModification()) {
			getModification().prettyPrintFormatted(printer, printStream);
		}
		if (hasStringComment()) {
			getStringComment().prettyPrintFormatted(printer, printStream);
		}
		
		printStream.print(postFormatting);
	}
	
	public void ClassRedeclare.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		
		if (hasEach()) {
			getEach().prettyPrintFormatted(printer, printStream);
		}
		if (hasFinal()) {
			getFinal().prettyPrintFormatted(printer, printStream);
		}
		getBaseClassDecl().prettyPrintFormatted(printer, printStream);
		
		printStream.print(postFormatting);
	}
	
	public void ComponentRedeclare.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		
		if (hasEach()) {
			getEach().prettyPrintFormatted(printer, printStream);
		}
		if (hasFinal()) {
			getFinal().prettyPrintFormatted(printer, printStream);
		}
		getComponentDecl().prettyPrintFormatted(printer, printStream);
		
		printStream.print(postFormatting);
	}
	
	public void RealLitExp.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print(getUNSIGNED_NUMBER());
		printStream.print(postFormatting);
	}

	public void IntegerLitExp.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print(getUNSIGNED_INTEGER());
		printStream.print(postFormatting);
	}
	
	public void NegExp.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("-");
		getExp().prettyPrintFormatted(printer, printStream);
		printStream.print(postFormatting);
	}

	/** @TODO: Copy & pasted from pretty print, needs more customization */
	public void ComponentDecl.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		
		if (hasRedeclare()) {
			getRedeclare().prettyPrintFormatted(printer, printStream); //str.print(getRedeclare().toString() + " ");
		}
		if (hasFinal()) {
			getFinal().prettyPrintFormatted(printer, printStream);
		}
		if (hasInner()) {
			getInner().prettyPrintFormatted(printer, printStream);
		}
		if (hasOuter()) {
			getOuter().prettyPrintFormatted(printer, printStream);
		}
		if (hasReplaceable()) {
			getReplaceable().prettyPrintFormatted(printer, printStream);
		}
		if (hasTypePrefixFlow()) {
			getTypePrefixFlow().prettyPrintFormatted(printer, printStream);
		}
		if (hasTypePrefixVariability()) {
			getTypePrefixVariability().prettyPrintFormatted(printer, printStream);
		}
		if (hasTypePrefixInputOutput()) {
			getTypePrefixInputOutput().prettyPrintFormatted(printer, printStream);
		}
		
		printer.print(getClassName(), printStream, ""); // WHY?
		if (hasTypeArraySubscripts()) {
			printer.print(getTypeArraySubscripts(), printStream, "");
		}
		getName().prettyPrintFormatted(printer, printStream); 
	    if (hasVarArraySubscripts()) {
	    	printer.print(getVarArraySubscripts(), printStream, "");
	    }
	    printer.print(getModificationOpt(), printStream, "");
	    
	    getComment().prettyPrintFormatted(printer, printStream);
				 
		if (hasConstrainingClause()) {
			printer.print(getConstrainingClause(), printStream, "");
		}		 

				    
	}
	
	public void Comment.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		if (hasAnnotation()) {
			getAnnotation().prettyPrintFormatted(printer, printStream);
		}
		if (hasStringComment()) {
			getStringComment().prettyPrintFormatted(printer, printStream);
		}
	}
	
	public void StringComment.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting + "\"");
		printStream.print(getComment());
		printStream.print("\"" + postFormatting);
	}

	public void ParseAnnotation.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("annotation");
		getClassModification().prettyPrintFormatted(printer, printStream);
		printStream.print(postFormatting);
	}
}