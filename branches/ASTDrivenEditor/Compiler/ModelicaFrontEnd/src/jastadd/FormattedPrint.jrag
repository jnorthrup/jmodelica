import org.jmodelica.util.FormattingInfo;
import org.jmodelica.util.FormattingItem;
import org.jmodelica.util.EmptyFormattingItem;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

aspect FormattedPrint {
	/**
	 * A pretty printer that prints the AST in code, with the old formatting.
	 */
	class FormattedPrettyPrinter extends Printer {
		/**
		 * Creates a <code>FormattedPrettyPrinter</code>.
		 */
		public FormattedPrettyPrinter() {
			super("");
		}
		
		/**
		 * Takes an AST node and prints it using a <code>PrintStream</code>. The formatting that the code that
		 * generated this node is preserved.
		 * @param node the AST node to print.
		 * @param printStream the stream to which the node should be printed.
		 * @param ident not used.
		 */
		@Override
		@SuppressWarnings({"unchecked"})
		public void print(ASTNode node, PrintStream printStream, String ident) {
			node.prettyPrintFormattedHelper(this, printStream);
		}
		
		public String op(FBinExp exp) {
			return exp.op();
		}
	}
	
	static FormattedPrettyPrinter ASTNode.formattedPrettyPrinter = new FormattedPrettyPrinter();
	protected FormattingInfo BaseNode.formatting = new FormattingInfo();
	protected FormattingItem BaseNode.preFormatting = new EmptyFormattingItem();
	protected FormattingItem BaseNode.postFormatting = new EmptyFormattingItem();
	
	public void ASTNode.setFormatting(FormattingInfo formattingInfo) {
		for (ASTNode childNode : this) {
			childNode.setFormatting(formattingInfo);
		}
	}
	
	public void BaseNode.setFormatting(FormattingInfo formattingInfo) {
		formatting = formattingInfo;
		super.setFormatting(formattingInfo);
	}

	/**
	 * Adds formatting information to this AST node and all its children, which can then be used by the method
	 * <code>prettyPrintFormatted</code>.
	 * @param formattingInfo the information to use to format this AST node.
	 */	
	protected void ASTNode.addFormattingInformation(FormattingInfo formattingInfo) {
		for (ASTNode childNode : this) {
			childNode.addFormattingInformation(formattingInfo);
		}
	}
	
	protected void BaseNode.addFormattingInformation(FormattingInfo formattingInfo) {
		if (formatting == null) {
			super.addFormattingInformation(formattingInfo);
			return;
		}

		setDefaultFormatting();
		Iterator<ScannedFormattingItem> formattingIterator = formattingInfo.getFormattingCollection().iterator();
		FormattingItem nextItem = addPreFormatting(formattingIterator);
		addPostFormatting(formattingIterator, nextItem);
		super.addFormattingInformation(formattingInfo);
	}
	
	public FormattingItem BaseNode.addPreFormatting(Iterator<ScannedFormattingItem> formattingIterator) {
		FormattingItem formattingItem = new EmptyFormattingItem();
		FormattingItem.RelativePosition relativePosition = FormattingItem.RelativePosition.BEFORE;

		while (formattingIterator.hasNext() && relativePosition == FormattingItem.RelativePosition.BEFORE) {
			formattingItem = formattingIterator.next();
			relativePosition = formattingItem.getFrontRelativePosition(this);
		}
		
		if (formattingItem.getFrontRelativePosition(this) == FormattingItem.RelativePosition.FRONT_ADJACENT) {
			preFormatting = formattingItem;
			formattingIterator.remove();
			if (formattingIterator.hasNext()) {
				formattingItem = formattingIterator.next();
			} else {
				formattingItem = new EmptyFormattingItem();
			}
		}
		
		return formattingItem;
	}
	
	public void BaseNode.addPostFormatting(Iterator<ScannedFormattingItem> formattingIterator, FormattingItem startingFormattingItem) {
		FormattingItem formattingItem = startingFormattingItem;
		FormattingItem.RelativePosition relativePosition = formattingItem.getBackRelativePosition(this);

		while (formattingIterator.hasNext() && (relativePosition == FormattingItem.RelativePosition.BEFORE ||
				relativePosition == FormattingItem.RelativePosition.UNDEFINED)) {
			formattingItem = formattingIterator.next();
			relativePosition = formattingItem.getBackRelativePosition(this);
		}
		
		if (formattingItem.getBackRelativePosition(this) == FormattingItem.RelativePosition.BACK_ADJACENT) {
			postFormatting = formattingItem;
			formattingIterator.remove();
		}
	}
	
	public void ASTNode.addFormattingRest(FormattingInfo formattingInfo) {
		for (ASTNode childNode : this) {
			childNode.addFormattingRest(formattingInfo);
		}
	}
	
	public void BaseNode.addFormattingRest(FormattingInfo formattingInfo) {
		Iterator<ScannedFormattingItem> formattingIterator = formattingInfo.getFormattingCollection().iterator();
		while (formattingIterator.hasNext()) {
			FormattingItem formattingItem = formattingIterator.next();
			FormattingItem.Adjacency preAdjacency = preFormatting.getAdjacency(formattingItem);
			FormattingItem.Adjacency postAdjacency = postFormatting.getAdjacency(formattingItem);
			if (preAdjacency != FormattingItem.Adjacency.NONE) {
				preFormatting = preFormatting.mergeItems(preAdjacency, formattingItem);
				formattingIterator.remove();
			} else if (postAdjacency != FormattingItem.Adjacency.NONE) {
				postFormatting = postFormatting.mergeItems(postAdjacency, formattingItem);
				formattingIterator.remove();
			}
		}
		super.addFormattingRest(formattingInfo);
		formatting = null;
	}
	
	/** TODO: Check the following nodes:
	 * StoredDefinition
	 * Access?
	 * ExtendsClauseShortClass
	 * ArraySubscripts?
	 * ArrayConstructor?
	 * ConstrainingClause
	 * CompleteModification
	 * ValueModification
	 * ElementModification
	 * ClassRedeclare
	 * ComponentRedeclare
	 * ConnectClause
	 * FunctionCall
	 * FunctionArguments
	 * NamedArgument
	 * *LitExp
	 */
	
	protected void BaseNode.setDefaultFormatting() {
		return;
	}
	
	protected void Within.setDefaultFormatting() {
		if (hasPackageName()) {
			getPackageName().preFormatting = new DefaultFormattingItem(" ");
		}
		postFormatting = new DefaultFormattingItem("\n");
	}
	
	protected void Encapsulated.setDefaultFormatting() {
		postFormatting = new DefaultFormattingItem(" ");
	}
	
	protected void Partial.setDefaultFormatting() {
		postFormatting = new DefaultFormattingItem(" ");
	}
	
	protected void Redeclare.setDefaultFormatting() {
		postFormatting = new DefaultFormattingItem(" ");
	}
	
	protected void Final.setDefaultFormatting() {
		postFormatting = new DefaultFormattingItem(" ");
	}
	
	protected void Inner.setDefaultFormatting() {
		postFormatting = new DefaultFormattingItem(" ");
	}
	
	protected void Outer.setDefaultFormatting() {
		postFormatting = new DefaultFormattingItem(" ");
	}
	
	protected void Replaceable.setDefaultFormatting() {
		postFormatting = new DefaultFormattingItem(" ");
	}
	
	protected void Restriction.setDefaultFormatting() {
		postFormatting = new DefaultFormattingItem(" ");
	}
	
	protected void FullClassDecl.setDefaultFormatting() {
		if (hasStringComment()) {
			getName().postFormatting = new DefaultFormattingItem(" ");
			getStringComment().postFormatting = new DefaultFormattingItem("\n");
		}
		
		if (getNumEquation() > 0) {
			getEquation(0).preFormatting = new DefaultFormattingItem("\n");
		}
		
		for (Annotation annotation : getAnnotations()) {
			annotation.preFormatting = new DefaultFormattingItem(" ");
		}
	}
	
	public void AbstractEquation.setDefaultFormatting() {
		preFormatting = preFormatting.mergeItems(FormattingItem.Adjacency.BACK, new DefaultFormattingItem(" "));
		if (getComment().hasStringComment()) {
			getComment().getStringComment().preFormatting = new DefaultFormattingItem(" ");
		} else if (getComment().hasAnnotation()) {
			getComment().getAnnotation().preFormatting = new DefaultFormattingItem(" ");
		}
		postFormatting = new DefaultFormattingItem("\n");
	}
	
	protected void Each.setDefaultFormatting() {
		postFormatting = new DefaultFormattingItem(" ");
	}
	
	public void ExtendsClause.setDefaultFormatting() {
		preFormatting = new DefaultFormattingItem(" ");
		getSuper().preFormatting = new DefaultFormattingItem(" ");
		postFormatting = new DefaultFormattingItem("\n");
	}
	
	public void ImportClause.setDefaultFormatting() {
		preFormatting = new DefaultFormattingItem(" ");
		getPackageName().preFormatting = new DefaultFormattingItem(" ");
		if (getComment().hasStringComment() || getComment().hasAnnotation()) {
			getPackageName().postFormatting = new DefaultFormattingItem(" ");
		}
		postFormatting = new DefaultFormattingItem("\n");
	}
	
	protected void ComponentDecl.setDefaultFormatting() {
		getClassName().preFormatting = new DefaultFormattingItem(" ");
		getClassName().postFormatting = new DefaultFormattingItem(" ");
		if (getComment().hasStringComment() || getComment().hasAnnotation()) {
			if (hasModification()) {
				getModification().postFormatting = new DefaultFormattingItem(" ");
			} else {
				getName().postFormatting = new DefaultFormattingItem(" ");
			}
		}
		postFormatting = new DefaultFormattingItem("\n");
	}
	
	protected void Comment.setDefaultFormatting() {
		if (hasStringComment() && hasAnnotation()) {
			getStringComment().preFormatting = new DefaultFormattingItem(" ");
		}
	}
	
	protected void ParseAnnotation.setDefaultFormatting() {
		getClassModification().preFormatting = new DefaultFormattingItem(" ");
	}

	/**
	 * Propagates the formatting information downwards in the AST if this has not already been done.
	 */
	public void ASTNode.propagateFormatting() {
		getParent().propagateFormatting();
	}
	
	protected void ASTNode.propagateFormatting(FormattingInfo formattingInfo) {
		if (formattingInfo != null) {
			formattingInfo.mergeAdjacentFormattingItems();
			addFormattingInformation(formattingInfo);
			addFormattingRest(formattingInfo);
		}
	}
	
	@Override
	public void BaseNode.propagateFormatting() {
		propagateFormatting(formatting);
	}

	/**
	 * Pretty prints this AST node and all its children, with preserved formatting.
	 * @return a string, consisting of the formatted code printed from this AST node.
	 */
	public String ASTNode.prettyPrintFormatted() {
		OutputStream outputStream = new ByteArrayOutputStream();
		PrintStream printStream = new PrintStream(outputStream);
		prettyPrintFormatted(formattedPrettyPrinter, printStream);
		
		return outputStream.toString();
	}
	
	/**
	 * Pretty prints this AST node and all its childred, with preserved formatting.
	 * @param printer the printer to use when pretty printing.
	 * @param printStream the stream, to which the AST node should be printed.
	 */
	public void ASTNode.prettyPrintFormatted(Printer printer, PrintStream printStream) {
		propagateFormatting();
		prettyPrintFormattedHelper(printer, printStream);
	}
	
	void ASTNode.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		for (ASTNode childNode : this) {
			childNode.prettyPrintFormattedHelper(printer, printStream);
		}
	}

	void BaseNode.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		for (ASTNode childNode : this) {
			childNode.prettyPrintFormattedHelper(printer, printStream);
		}
		printStream.print(postFormatting);
	}
	
	void StoredDefinition.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
 		if (hasWithin()) {
 			getWithin().prettyPrintFormattedHelper(printer, printStream);
 		}

 		for (Element element : getElements()) {
	 		printer.print(element, printStream, "");
		}
 		printStream.print(postFormatting);
	}

	void Within.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("within");
		if (hasPackageName()) {
			getPackageName().prettyPrintFormattedHelper(printer, printStream);
		}
		printStream.print(";");
		printStream.print(postFormatting);
	}

	void ShortClassDecl.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);

	    if (hasEncapsulated()) {
	    	getEncapsulated().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasPartial()) {
	    	getPartial().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasRedeclare()) {
	    	getRedeclare().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasFinal()) {
	    	getFinal().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasInner()) {
	    	getInner().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasOuter()) {
	    	getOuter().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasReplaceable()) {
	    	getReplaceable().prettyPrintFormattedHelper(printer, printStream);
	    }
	    
	    getRestriction().prettyPrintFormattedHelper(printer, printStream);
	    getName().prettyPrintFormattedHelper(printer, printStream);
	    printStream.print("=");
	    getExtendsClauseShortClass().prettyPrintFormattedHelper(printer, printStream);
	    if (hasConstrainingClause()) {
	    	getConstrainingClause().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasConstrainingClauseComment()) {
	    	getConstrainingClauseComment().prettyPrintFormattedHelper(printer, printStream);
	    }

	    printStream.print(postFormatting);
	}
    
    void Encapsulated.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("encapsulated");
    	printStream.print(postFormatting);
    }

    void Partial.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("partial");
    	printStream.print(postFormatting);
    }
    
    void Redeclare.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("redeclare");
    	printStream.print(postFormatting);
    }
    
    void Final.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("final");
    	printStream.print(postFormatting);
    }
    
    void Inner.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("inner");
    	printStream.print(postFormatting);
    }
    
    void Outer.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("outer");
    	printStream.print(postFormatting);
    }
    
    void Replaceable.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("replaceable");
    	printStream.print(postFormatting);
    }
    
    void Restriction.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print(this);
    	printStream.print(postFormatting);
    }
    
    void IdDecl.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print(getID());
    	printStream.print(postFormatting);
    }
    
    void ExtendsClauseShortClass.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);

    	getSuper().prettyPrintFormattedHelper(printer, printStream);
    	
    	if (hasArraySubscripts()) {
	    	getArraySubscripts().prettyPrintFormattedHelper(printer, printStream);
    	}
	    if (hasClassModification()) {
	    	getClassModification().prettyPrintFormattedHelper(printer, printStream);
	    }
	    
    	printStream.print(postFormatting);
    }

    void Access.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print(name());
    	printStream.print(postFormatting);
    }
    
    void ArraySubscripts.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	for (Subscript subscript : getSubscripts()) {
    		subscript.prettyPrintFormattedHelper(printer, printStream);
    	}
    	printStream.print(postFormatting);
    }
    
    void ArrayConstructor.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("{");
    	getFunctionArguments().prettyPrintFormattedHelper(printer, printStream);
    	printStream.print("}");
    	printStream.print(postFormatting);
    }

    void ClassModification.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("(");
    	if (getNumArgument() > 0) {
    		getArgument(0).prettyPrintFormattedHelper(printer, printStream);
    	}
    	for (int i = 1; i < getNumArgument(); i++) {
    		printStream.print(",");
    		getArgument(i).prettyPrintFormattedHelper(printer, printStream);
    	}
    	printStream.print(")");
    	printStream.print(postFormatting);
    }
    
    void Each.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	printStream.print("each");
    	printStream.print(postFormatting);
    }
    
    void ConstrainingClause.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
    	printStream.print(preFormatting);
    	getAccess().prettyPrintFormattedHelper(printer, printStream);
    	if (hasClassModification()) {
    		getClassModification().prettyPrintFormattedHelper(printer, printStream);
    	}
    	printStream.print(postFormatting);
    }

    /** @TODO: Copy & pasted from pretty print, needs more customization */
    void FullClassDecl.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
	    printStream.print(preFormatting);

	    if (hasEncapsulated()) {
	    	getEncapsulated().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasPartial()) {
	    	getPartial().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasRedeclare()) {
	    	getRedeclare().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasFinal()) {
	    	getFinal().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasInner()) {
	    	getInner().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasOuter()) {
	    	getOuter().prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (hasReplaceable()) {
	    	getReplaceable().prettyPrintFormattedHelper(printer, printStream);
	    }
	    
	    getRestriction().prettyPrintFormattedHelper(printer, printStream);
	    getName().prettyPrintFormattedHelper(printer, printStream);
	    if (hasStringComment()) {
	    	getStringComment().prettyPrintFormattedHelper(printer, printStream);
	    }

	    /*getExtendsClauseShortClass().prettyPrintFormatted(printer, printStream);
	    if (hasConstrainingClause()) {
	    	getConstrainingClause().prettyPrintFormatted(printer, printStream);
	    }
	    if (hasConstrainingClauseComment()) {
	    	getConstrainingClauseComment().prettyPrintFormatted(printer, printStream);
	    }*/

		
 		// Print all local classes
 		/*int numPubClass = 0;
// 		str.print(indent + "public\n");
 		for (int i=0;i<getNumClassDecl();i++)
 			if (((BaseClassDecl)getClassDecl(i)).isPublic()) {
 			 	numPubClass++;
 			 	printer.print(getClassDecl(i), printStream, "");
	 			printStream.print(";\n\n");
			}
			
		if (getNumClassDecl()-numPubClass>0) {	
			printStream.print("protected\n");
 			for (int i=0;i<getNumClassDecl();i++)
 				if (((BaseClassDecl)getClassDecl(i)).isProtected()) {
 					printer.print(getClassDecl(i), printStream, "");
		 			printStream.print(";\n\n");
		 		}
		}*/
	    
	    /** @TODO: Print public and private before respective class. */
	    for (ClassDecl classDecl : getClassDecls()) {
	    	classDecl.prettyPrintFormattedHelper(printer, printStream);
	    }
	    for (ImportClause importClause : getImports()) {
	    	importClause.prettyPrintFormattedHelper(printer, printStream);
	    }
	    for (ExtendsClause superClass : getSupers()) {
	    	superClass.prettyPrintFormattedHelper(printer, printStream);
	    }
	    for (ComponentDecl componentDecl : getComponentDecls()) {
	    	componentDecl.prettyPrintFormattedHelper(printer, printStream);
	    }
	    if (getNumEquation() > 0) {
	    	printStream.print("equation");
	    	for (AbstractEquation equation : getEquations()) {
	    		equation.prettyPrintFormattedHelper(printer, printStream);
	    	}
	    }
	    for (Annotation annotation : getAnnotations()) {
	    	annotation.prettyPrintFormattedHelper(printer, printStream);
	    	printStream.print(";\n"); /** TODO: Fix ugly hack! */
	    }
		
	    /** @TODO: Format end */
		printStream.print("end " + getEndName() + ";");

		printStream.print(postFormatting);
	}
	
	void ExtendsClause.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("extends");
		getSuper().prettyPrintFormattedHelper(printer, printStream);
		getClassModificationOpt().prettyPrintFormattedHelper(printer, printStream);
		printStream.print(";");
		printStream.print(postFormatting);
	}
	
	void ImportClause.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("import");
		getPackageName().prettyPrintFormattedHelper(printer, printStream);
		getComment().prettyPrintFormattedHelper(printer, printStream);
		printStream.print(";");
		printStream.print(postFormatting);
	}
	
	void CompleteModification.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		getClassModification().prettyPrintFormattedHelper(printer, printStream);
		if (hasValueModification()) {
			getValueModification().prettyPrintFormattedHelper(printer, printStream);
		}
		printStream.print(postFormatting);
	}
	
	void ValueModification.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("=");
		getExp().prettyPrintFormattedHelper(printer, printStream);
		printStream.print(postFormatting);
	}
	
	void ElementModification.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		
		if (hasEach()) {
			getEach().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasFinal()) {
			getFinal().prettyPrintFormattedHelper(printer, printStream);
		}
		getName().prettyPrintFormattedHelper(printer, printStream);
		if (hasModification()) {
			getModification().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasStringComment()) {
			getStringComment().prettyPrintFormattedHelper(printer, printStream);
		}
		
		printStream.print(postFormatting);
	}
	
	void ClassRedeclare.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		
		if (hasEach()) {
			getEach().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasFinal()) {
			getFinal().prettyPrintFormattedHelper(printer, printStream);
		}
		getBaseClassDecl().prettyPrintFormattedHelper(printer, printStream);
		
		printStream.print(postFormatting);
	}
	
	void ComponentRedeclare.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		
		if (hasEach()) {
			getEach().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasFinal()) {
			getFinal().prettyPrintFormattedHelper(printer, printStream);
		}
		getComponentDecl().prettyPrintFormattedHelper(printer, printStream);
		
		printStream.print(postFormatting);
	}
	
	void ConnectClause.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("connect");
		printStream.print("(");
		getConnector1().prettyPrintFormattedHelper(printer, printStream);
		printStream.print(",");
		getConnector2().prettyPrintFormattedHelper(printer, printStream);
		printStream.print(")");
		getComment().prettyPrintFormattedHelper(printer, printStream);
		printStream.print(";");
		printStream.print(postFormatting);
	}
	
	void FunctionCall.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		getName().prettyPrintFormattedHelper(printer, printStream);
		printStream.print("(");
		if (hasFunctionArguments()) {
			getFunctionArguments().prettyPrintFormattedHelper(printer, printStream);
		}
		printStream.print(")");
		printStream.print(postFormatting);
	}
	
	void FunctionArguments.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		int totalNumberOfArguments = getNumExp() + getNumNamedArgument();

		for (int i = 0; i < getNumExp(); i++) {
			getExp(i).prettyPrintFormattedHelper(printer, printStream);
			if (i + 1 < totalNumberOfArguments) {
				printStream.print(",");
			}
		}
		for (int i = 0; i < getNumNamedArgument(); i++) {
			getNamedArgument(i).prettyPrintFormattedHelper(printer, printStream);
			if (i + 1 < totalNumberOfArguments) {
				printStream.print(",");
			}
		}
		
		printStream.print(postFormatting);
	}
	
	void NamedArgument.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		getName().prettyPrintFormattedHelper(printer, printStream);
		printStream.print("=");
		getExp().prettyPrintFormattedHelper(printer, printStream);
		printStream.print(postFormatting);
	}
	
	void RealLitExp.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print(getUNSIGNED_NUMBER());
		printStream.print(postFormatting);
	}

	void IntegerLitExp.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print(getUNSIGNED_INTEGER());
		printStream.print(postFormatting);
	}
	
	void StringLitExp.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("\"" + getSTRING() + "\"");
		printStream.print(postFormatting);
	}
	
	void BooleanLitExpTrue.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("true");
		printStream.print(postFormatting);
	}
	
	void BooleanLitExpFalse.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("false");
		printStream.print(postFormatting);
	}
	
	void NegExp.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("-");
		getExp().prettyPrintFormattedHelper(printer, printStream);
		printStream.print(postFormatting);
	}

	/** @TODO: Copy & pasted from pretty print, needs more customization */
	void ComponentDecl.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		
		if (hasRedeclare()) {
			getRedeclare().prettyPrintFormattedHelper(printer, printStream); //str.print(getRedeclare().toString() + " ");
		}
		if (hasFinal()) {
			getFinal().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasInner()) {
			getInner().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasOuter()) {
			getOuter().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasReplaceable()) {
			getReplaceable().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasTypePrefixFlow()) {
			getTypePrefixFlow().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasTypePrefixVariability()) {
			getTypePrefixVariability().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasTypePrefixInputOutput()) {
			getTypePrefixInputOutput().prettyPrintFormattedHelper(printer, printStream);
		}
		
		printer.print(getClassName(), printStream, ""); // WHY?
		if (hasTypeArraySubscripts()) {
			//printer.print(getTypeArraySubscripts(), printStream, "");
			getTypeArraySubscripts().prettyPrintFormattedHelper(printer, printStream);
		}
		//printStream.print(preFormatting);
		getName().prettyPrintFormattedHelper(printer, printStream); 
	    if (hasVarArraySubscripts()) {
	    	//printer.print(getVarArraySubscripts(), printStream, "");
	    	getVarArraySubscripts().prettyPrintFormattedHelper(printer, printStream);
	    }
	    //printer.print(getModificationOpt(), printStream, "");
	    getModificationOpt().prettyPrintFormattedHelper(printer, printStream);
	    
	    getComment().prettyPrintFormattedHelper(printer, printStream);
				 
		if (hasConstrainingClause()) {
			printer.print(getConstrainingClause(), printStream, "");
		}
		printStream.print(";");
		printStream.print(postFormatting);
	}
	
	void Comment.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		if (hasStringComment()) {
			getStringComment().prettyPrintFormattedHelper(printer, printStream);
		}
		if (hasAnnotation()) {
			getAnnotation().prettyPrintFormattedHelper(printer, printStream);
		}
	}
	
	void StringComment.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting + "\"");
		printStream.print(getComment());
		printStream.print("\"" + postFormatting);
	}

	void ParseAnnotation.prettyPrintFormattedHelper(Printer printer, PrintStream printStream) {
		printStream.print(preFormatting);
		printStream.print("annotation");
		getClassModification().prettyPrintFormattedHelper(printer, printStream);
		printStream.print(postFormatting);
	}
	
	void ASTNode.copyFormattingFrom(ASTNode node) {
		if (this.getClass() != node.getClass())
			return;
		if (numChildren() != node.numChildren())
			return;
		for (int i = 0; i < numChildren(); i++) {
			getChild(i).copyFormattingFrom(node.getChild(i));
		}
	}
	
	void List.copyFormattingFrom(ASTNode node) {
		if (this.getClass() != node.getClass())
			return;
	}
	
	void BaseNode.copyFormattingFrom(ASTNode node) {
		if (this.getClass() != node.getClass())
			return;
		BaseNode bn = (BaseNode) node;
		node.propagateFormatting();
		preFormatting = bn.preFormatting;
		postFormatting = bn.postFormatting;
		super.copyFormattingFrom(node);
	}
	
}