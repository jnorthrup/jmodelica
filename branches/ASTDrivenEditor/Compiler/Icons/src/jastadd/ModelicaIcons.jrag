import org.jmodelica.icons.Icon;
import org.jmodelica.icons.Diagram;
import org.jmodelica.icons.Connection;
import org.jmodelica.icons.Component;
import org.jmodelica.icons.exceptions.FailedConstructionException;
import org.jmodelica.icons.drawing.IconConstants.Context;
import org.jmodelica.icons.drawing.AWTIconDrawer;
import java.awt.image.BufferedImage;
import org.jmodelica.icons.Observer;
import org.jmodelica.icons.Observable;

aspect ModelicaIcons
{
	syn lazy Icon BaseNode.icon() 		= Icon.NULL_ICON;
	syn lazy Icon BaseNode.diagram() 	= Icon.NULL_ICON;
	
	eq UnknownClassDecl.icon()	 		= Icon.NULL_ICON;
	eq UnknownClassDecl.diagram() 		= Icon.NULL_ICON;
	eq UnknownInstClassDecl.icon() 		= Icon.NULL_ICON;
	eq UnknownInstClassDecl.diagram() 	= Icon.NULL_ICON;

	eq ComponentDecl.icon() 		= 	findClassDecl().icon();
	eq ComponentDecl.diagram() 		= 	findClassDecl().diagram();
	eq InstShortClassDecl.icon()	= 	getInstExtends(0).myInstClass().icon();
	eq InstShortClassDecl.diagram()	= 	getInstExtends(0).myInstClass().diagram();


	protected boolean ClassDecl.visitingDuringIconRendering;
	
	public class InstClassDecl implements Observer{}
	public void InstClassDecl.update(Observable o, Object flag, Object additionalInfo) {
		System.out.println(o.getClass().getName() + " " + flag + " " + additionalInfo);
		if (o == diagram() && flag == Icon.SUBCOMPONENT_ADDED) {
			Component component = (Component)additionalInfo;
			ComponentDecl componentDecl = new ComponentDecl();
			componentDecl.setVisibilityType(new PublicVisibilityType());
			componentDecl.setName(new IdDecl(component.getComponentName()));
			componentDecl.setClassName(Access.fromClassName(component.getIcon().getClassName()));
			componentDecl.setComment(new Comment());
			componentDecl.annotation().savePlacement(component.getPlacement());
			((FullClassDecl)getClassDecl()).addComponentDecl(componentDecl);
			InstComposite instComponentDecl = (InstComposite)createInstComponentDecl(componentDecl);
			addInstComponentDecl(instComponentDecl);
		} else if (o == diagram() && flag == Icon.SUBCOMPONENT_REMOVED) {
			
		} else if (o == diagram() && flag == Diagram.CONNECTION_ADDED) {
//			Connection con = (Connection)additionalInfo;
//			ConnectClause cc = new ConnectClause();
//			cc.setComment(new Comment());
//			cc.set
//			con.gett
//			
		} else if (o == diagram() && flag == Diagram.CONNECTION_REMOVED) {
			
		}
	}
	
	public class InstComponentDecl implements Observer{}
	public void InstComponentDecl.update(Observable o, Object flag, Object additionalInfo) {
		System.out.println(o.getClass().getName() + " " + flag + " " + additionalInfo);
		if (o == component(Context.DIAGRAM) && flag == Component.PLACEMENT_UPDATED) {
			getComponentDecl().annotation().savePlacement(component(Context.DIAGRAM).getPlacement());
		}
	}
	
	
	eq ClassDecl.icon() { 
		visitingDuringIconRendering = true;
		Icon icon;
		Layer layer = Layer.NO_LAYER;
		AnnotationNode annotation = annotation();
		if (annotation.exists()) {
			layer = annotation.createIconLayer();
		}
		icon = new Icon(qualifiedName(), layer, Context.ICON); 
		icon = addSuperClasses(icon);
		icon = addSubComponents(icon);
		visitingDuringIconRendering = false;
		return icon;
	}
	eq ShortClassDecl.icon() {
		visitingDuringIconRendering = true;
		Icon icon;
		Layer layer = Layer.NO_LAYER;
		AnnotationNode annotation = annotation();
		if (annotation.exists()) {
			layer = annotation.createIconLayer();
		}
		icon = new Icon(qualifiedName(), layer, Context.ICON);
		Icon superIcon = getExtendsClauseShortClass().findClassDecl().icon();
		if (superIcon != Icon.NULL_ICON) {
			icon.addSuperclass(superIcon);
		}
		visitingDuringIconRendering = false;
		return icon;
	}

	eq InstClassDecl.icon() {
		Icon icon;
		Layer layer = Layer.NO_LAYER;
		AnnotationNode annotation = annotation();
		if (annotation.exists()) {
			layer = annotation.createIconLayer();
		}
		icon = new Icon(qualifiedName(), layer, Context.ICON);
		addSuperClasses(icon);
		addSubComponents(icon);
		return icon;
	}
	
	eq InstClassDecl.diagram() {
		Diagram diagram;
		Layer layer = annotation().createIconLayer();
		diagram = new Diagram(qualifiedName(), layer, Context.DIAGRAM);
		addSuperClasses(diagram);
		addSubComponents(diagram);
		for (FAbstractEquation fae : getFAbstractEquations()) {
			if (fae instanceof FConnectClause) {
				Connection con;
				try {
					con = ((FConnectClause) fae).getConnectClause().annotation().createConnection();
				} catch (FailedConstructionException e) {
					con = new Connection();
				}
				con.setSourceConnector(((FConnectClause) fae).getConnector1().getInstAccess().myInstComponentDecl().iconConnector);
				con.setTargetConnector(((FConnectClause) fae).getConnector2().getInstAccess().myInstComponentDecl().iconConnector);
				diagram.addConnection(con);
			}
		}
		diagram.addObserver(this);
		return diagram;
	}
	
	eq InstComponentDecl.icon() {
		Icon icon;
		Layer layer = Layer.NO_LAYER;
		AnnotationNode annotation = myInstClass().annotation();
		if (annotation.exists()) {
			layer = annotation.createIconLayer();
		}
		icon = new Icon(qualifiedName(), layer, Context.ICON);
		addSuperClasses(icon);
		addSubComponents(icon);
		return icon;
	}
	
	eq InstExtends.icon() {
		Icon icon;
		Layer layer = Layer.NO_LAYER;
		AnnotationNode annotation = myInstClass().annotation();
		if (annotation.exists()) {
			layer = annotation.createIconLayer();
		}
		icon = new Icon(myInstClass().qualifiedName(), layer, Context.ICON);
		addSuperClasses(icon);
		addSubComponents(icon);
		return icon;
	}
	
	public BufferedImage BaseNode.render(Icon icon, int w, int h) {
		return new AWTIconDrawer(icon, w, h).getImage();
	}
	
	public static final int BaseNode.iconImageSize = 400;
	
	public BufferedImage BaseNode.createIconImage() {
		return render(icon(), iconImageSize, iconImageSize);
	}
	
	syn boolean BaseNode.hasIcon() = !icon().isEmpty();
	
	private Icon ClassDecl.addSuperClasses(Icon icon) {	
		for(ExtendsClause ext: superClasses()) {
			ClassDecl superClass = ext.findClassDecl();
			if(superClass.visitingDuringIconRendering) {		
				continue;
			}
			Icon superIcon;
			if (icon.getContext().equals(Context.ICON)) {
				superIcon = superClass.icon();
			} else {
				superIcon = superClass.diagram();
			}
			if(superIcon != Icon.NULL_ICON) {
				icon.addSuperclass(superIcon);
			}
		}
		
		return icon;
	}
	
	private Icon ClassDecl.addSubComponents(Icon icon) {
		for(ComponentDecl componentDecl : components()) {
			ClassDecl subDecl = componentDecl.findClassDecl();
			if(subDecl.isUnknown() || subDecl.visitingDuringIconRendering) {
				continue;
			}
			AnnotationNode compAnnotation = componentDecl.annotation();
			if(compAnnotation.hasPlacement()) {
				try {
					if (subDecl instanceof BaseClassDecl) {
						Context componentContext = Context.ICON;
						boolean isProtected = componentDecl.isProtected();
						boolean isConnector = ((BaseClassDecl)subDecl).getRestriction() instanceof Connector;
						Icon subIcon = Icon.NULL_ICON;
						if (icon.getContext().equals(Context.ICON)) {
							if (isConnector && !isProtected) {
								subIcon = subDecl.icon();
							}
						} else {
							if (isConnector) {
								subIcon = subDecl.diagram();
								componentContext = Context.DIAGRAM;
								
							} else {
								subIcon = subDecl.icon();
							}
						}
						if(subIcon != Icon.NULL_ICON) {
							Placement placement = compAnnotation.createPlacement(componentContext);
							icon.addSubcomponent(
									new Component(subIcon, placement)
							);
						}
					}
				}
				catch(FailedConstructionException fe) {
//					System.out.println(fe.getMessage());
				}
			}
		}
		return icon;
	}
	
	protected void InstNode.addSuperClasses(Icon icon) {	
		for (InstExtends ie : instExtends()) {
			Icon superIcon;
			if (icon.getContext().equals(Context.ICON)) {
				superIcon = ie.icon();
			} else {
				superIcon = ie.diagram();
			}
			if (superIcon != Icon.NULL_ICON) {
				icon.addSuperclass(superIcon);
			}
	 	}
	}
	
	protected org.jmodelica.icons.Connector InstComponentDecl.iconConnector = null;
	
	protected void InstNode.addSubComponents(Icon icon) {
		for(InstComponentDecl componentDecl : getInstComponentDecls()) {
			Component c = componentDecl.component(icon.getContext());
			if (c != null)
				icon.addSubcomponent(c);
		}
	}
	
	syn lazy Component InstComponentDecl.component(Context context) {
		InstClassDecl subDecl = myInstClass();		
		if(subDecl.isUnknown()) {
			return null;
		}
		Placement placement;
		try {
			placement = annotation().createPlacement(context);
		}
		catch(FailedConstructionException fe) {
			placement = new Placement(new Transformation(new Extent(new Point(-10, -10), new Point(10, 10))));
		}
		if (subDecl instanceof InstBaseClassDecl) {
			boolean isProtected = getComponentDecl().isProtected();
			boolean isConnector = ((InstBaseClassDecl)subDecl).isConnector();
			if (context.equals(Context.ICON)) {
				if (isConnector && !isProtected) {
					iconConnector = new org.jmodelica.icons.Connector(icon(), placement, name());
					return iconConnector;
				}
			} else {
				if (isConnector) {
					iconConnector = new org.jmodelica.icons.Connector(diagram(), placement, name());
					return iconConnector;
				} else {
					Component c = new Component(icon(), placement, name());
					c.addObserver(this);
					return c;
				}
			}
		}
		return null;
	}

	/*
	 * Fï¿½r tidtagning.
	 */
//	eq ClassDecl.contentOutlineImage() {
//		System.out.println("ClassDecl.contentOutlineImage(), Namn = " + name());
//	
//		java.util.Date before = new Date();
//		Icon icon = icon();
//		java.util.Date after = new Date();
//		long duration = after.getTime()-before.getTime();
//		System.out.println("icon() tog " + duration + " ms.");
//		
//		if (icon.equals(Icon.NULL_ICON)) {
//			return ImageLoader.getImage("dummy.png");
//		}
//		
//		before = new Date();
//		Image image = icon.draw(new AWTIconDrawer(icon));
//		after = new Date();
//		duration = after.getTime()-before.getTime();
//		System.out.println("draw() tog " + duration + " ms.");
//		
//		return image;
//	}
//	eq ComponentDecl.contentOutlineImage() {
//		
//		System.out.println("ComponentDecl.contentOutlineImage(), Namn = " + name());
//		
//		java.util.Date before = new Date();
//		ClassDecl decl = findClassDecl();
//		java.util.Date after = new Date();
//		long duration = after.getTime()-before.getTime();
//		System.out.println("findClassDecl() tog " + duration + " ms.");
//		
//		before = new Date();
//		Icon icon = icon();
//		after = new Date();
//		duration = after.getTime()-before.getTime();
//		System.out.println("icon() tog " + duration + " ms.");
//	
//		if (icon.equals(Icon.NULL_ICON)) {
//			return ImageLoader.getImage("dummy.png");
//		}
//		
//		before = new Date();
//		Image image = icon.draw(new AWTIconDrawer(icon));
//		after = new Date();
//		duration = after.getTime()-before.getTime();
//		System.out.println("draw() tog " + duration + " ms.");
//		return image;
//	}
}