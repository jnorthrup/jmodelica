/*
Copyright (C) 2013 Modelon AB

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

optimization vdp (objectiveIntegrand = cost,
                      startTime = 0,
                      finalTime = 1)

  // The states
  Real x1(start=0,fixed=true);
  Real x2(start=1,fixed=true);

  // The control signal
  input Real u;
  
  function cost_function
    input Real in1;
    input Real in2;
    input Real in3;
    output Real out;
    Real internal;
  algorithm
    //out  := in1^2 + in2^2 + in3^2;
    (out, internal) := f2({ {{in1,0}, {in3,4}}, {{1,in2}, {3,4}} });
  end cost_function;
  function f2 
      input Real[2,2,2] ins;
      output Real out1;
      output Real out2;
  algorithm
      out1 := ins[1,1,1]^2  + ins[2,1,2]^2 + ins[1,2,1]^2;
      out2 := 100*ins[2,2,2];
  end f2;
  
  Real cost(start=0,fixed=true);

equation
  der(x1) = (1 - x2^2) * x1 - x2 + u;
  der(x2) = x1;
  der(cost) = cost_function(x1,x2,u);
constraint 
   u<=0.75;
end vdp;

optimization optimizationOne (objectiveIntegrand=a^2 + sqrt(b^2) + u, finalTime=10) 
    Real a(start=5.0);
    Real b(start=1.0,fixed=true);
    input Real u;
    function f
      input Real a;
      output Real b;
    algorithm
      b := a^2;
    end f;
equation
    der(a) =  -u*b^4;
    b = 1.0+u^2; 
constraint
    a <=  0.00;
end optimizationOne;

optimization optimizationOneWithSimpleFunction (objectiveIntegrand=a^2 + abs(b) + u, finalTime=10) 
    Real a(start=5.0);
    Real b(start=1.0,fixed=true);
    input Real u;
    function f
      input Real a;
      output Real b;
    algorithm
      b := a^2;
    end f;
equation
    der(a) =  -u*b^4;
    b*f(1.0) = f(1.0)+f(u);
constraint
    a <=  0.00;
end optimizationOneWithSimpleFunction;

optimization optimizationOneWithMessyFunction (objectiveIntegrand=a^2 + abs(b) + u, finalTime=10) 
    Real a(start=5.0);
    Real b(start=1.0,fixed=true);
    input Real u;
    function f
      input Real a;
      output Real b;
    algorithm
      b := a^2;
    end f;
    function f2
      input Real a1;
      input Real a2;
      output Real b;
      Real c;
    algorithm
      c := a1;
      c := c*a1;
      b := c+a2*f(1.0);
      c := c*2.0;
      c := c /2.0;
      b := b - c;
      b := b + c;
      b := b+2;
    end f2;
equation
    der(a) =  -u*b^4;
    b*f(1.0) = f(1.0)+f2(u,a)-a-2; 
constraint
    a <=  0.00;
end optimizationOneWithMessyFunction;
