/*
Copyright (C) 2009-2017 Modelon AB

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect CADCodeGenAlgorithms {

	//Methods to handle If clauses starts here
    @Override
	public void FIfWhenStmt.prettyPrint_CAD(CodePrinter p, CodeStream str, String indent) {
		for (FIfWhenClause clause : getFIfWhenClauses())
			clause.getTest().genTempVars_CAD(p, str, indent);
		str.print(indent);
		getFIfWhenClauses().prettyPrintWithSep(p, str, indent, indent + "} else ");
		prettyPrintElse_C(p, str, indent);
		str.print(indent);
		str.print("}\n");
	}
	
	//Methods to handle while loops starts here
    @Override
	public void FWhileStmt.prettyPrint_CAD(CodePrinter p, CodeStream str, String indent) {
		getTest().genTempVars_CAD(p, str, indent);
		str.print(indent);
		str.print("while (");
		p.print(getTest(), str, indent);
		str.print(") {\n");
		p.print(getWhileStmts(), str, p.indent(indent));
		getTest().genTempVars_CAD(p, str, p.indent(indent));
		str.print(indent);
		str.print("}\n");
	}
	
	//Methods to handle for-loops in functions starts here
    @Override
	public void FForStmt.prettyPrint_CAD(CodePrinter p, CodeStream str, String indent) {
		getIndex().genTempVars_CAD(p, str, indent);
		getIndex().printForIndexInit_C(p, str, indent);
		str.print(indent);
		str.print("for (");
		p.print(getIndex(), str, indent);
		str.print(") {\n");
		getIndex().printForIndexNext_C(p, str, p.indent(indent));
		p.print(getForStmts(), str, p.indent(indent));
		str.print(indent);
		str.print("}\n");
	}

    /**
     * @param p  use CADPrettyPrinter for p.print to call prettyPrint_CAD
     * @param indent  used to get a consistently formated c-code
     * @param str  the c-code is written to this stream 
     */
    @Override
    public void FReturnStmt.prettyPrint_CAD(CodePrinter p, CodeStream str, String indent) {
        returnDefinition().printReturnWrite_CAD(str, indent);
        // TODO: Check if there are any dynamic declarations first
        str.print(indent + "JMI_DYNAMIC_FREE()\n");
        str.print(indent + "return;\n");
    }

    @Override
	public void FFunctionCallStmt.prettyPrint_CAD(CodePrinter p, CodeStream str, String indent) {
		if (!getCall().isIgnored())
			genTempVars_CAD(p, str, indent);
	}

    /**
     *  Prints AD code for this assignement statement
     * @param p  use CADPrettyPrinter for p.print to call prettyPrint_CAD
     * @param indent  used to get a consistently formated c-code
     * @param str  the c-code is written to this stream 
     */
    @Override
    public void FAssignStmt.prettyPrint_CAD(CodePrinter p, CodeStream str, String indent) {
        genTempVars_CAD(p, str, indent);
        str.print(indent);
        p.print(getLeft(), str, indent);
        str.print(" = ");
        p.print(getRight(), str, indent);
        str.print(";\n");

        if (shouldBeDifferentiated()) {
            str.print(indent);
            str.print(((FIdUseExp)getLeft()).getFIdUse().toString_der_CAD(p));
            str.print(" = ");
            getRight().genDer_CAD(p, str, indent);
            str.print(";\n");
        }
    }

}