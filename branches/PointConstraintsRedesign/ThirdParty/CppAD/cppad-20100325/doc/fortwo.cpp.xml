<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Subset of Second Order Partials: Example and Test</title>
<meta name="description" id="description" content="Subset of Second Order Partials: Example and Test"/>
<meta name="keywords" id="keywords" content=" second partial example test "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_fortwo.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="fortwo.xml" target="_top">Prev</a>
</td><td><a href="revtwo.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>Drivers</option>
<option>ForTwo</option>
<option>ForTwo.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADFun-&gt;</option>
<option>Independent</option>
<option>FunConstruct</option>
<option>Dependent</option>
<option>abort_recording</option>
<option>seq_property</option>
<option>FunEval</option>
<option>Drivers</option>
<option>FunCheck</option>
<option>omp_max_thread</option>
<option>optimize</option>
<option>FunDeprecated</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Drivers-&gt;</option>
<option>Jacobian</option>
<option>ForOne</option>
<option>RevOne</option>
<option>Hessian</option>
<option>ForTwo</option>
<option>RevTwo</option>
<option>sparse_jacobian</option>
<option>sparse_hessian</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>ForTwo-&gt;</option>
<option>ForTwo.cpp</option>
</select>
</td>
<td>ForTwo.cpp</td>
<td>Headings</td>
</tr></table><br/>



<center><b><big><big>Subset of Second Order Partials: Example and Test</big></big></b></center>
<code><font color="blue"><pre style='display:inline'> 
# include &lt;cppad/cppad.hpp&gt;
namespace { // -----------------------------------------------------
// define the template function in empty namespace
// bool ForTwoCases&lt;VectorBase, VectorSize_t&gt;(void)
template &lt;class VectorBase, class VectorSize_t&gt; 
bool ForTwoCases()
{	bool ok = true;
	using CppAD::AD;
	using CppAD::NearEqual;
	using CppAD::exp;
	using CppAD::sin;
	using CppAD::cos;

	// domain space vector
	size_t n = 2;
	<a href="test_vector.xml" target="_top">CPPAD_TEST_VECTOR</a>&lt; <a href="ad.xml" target="_top">AD</a>&lt;double&gt; &gt;  X(n);
	X[0] = 1.;
	X[1] = 2.;

	// declare independent variables and starting recording
	CppAD::<a href="independent.xml" target="_top">Independent</a>(X);

	// a calculation between the domain and range values
	<a href="ad.xml" target="_top">AD</a>&lt;double&gt; Square = X[0] * X[0];

	// range space vector
	size_t m = 3;
	<a href="test_vector.xml" target="_top">CPPAD_TEST_VECTOR</a>&lt; <a href="ad.xml" target="_top">AD</a>&lt;double&gt; &gt;  Y(m);
	Y[0] = Square * exp( X[1] );
	Y[1] = Square * sin( X[1] );
	Y[2] = Square * cos( X[1] );

	// create f: X -&gt; Y and stop tape recording
	CppAD::<a href="funconstruct.xml" target="_top">ADFun</a>&lt;double&gt; f(X, Y);

	// new value for the independent variable vector
	VectorBase x(n);
	x[0] = 2.;
	x[1] = 1.;

	// set j and k to compute specific second partials of y 
	size_t p = 2;
	VectorSize_t j(p);
	VectorSize_t k(p);
	j[0] = 0; k[0] = 0; // for second partial w.r.t. x[0] and x[0]
	j[1] = 0; k[1] = 1; // for second partial w.r.t x[0] and x[1]

	// compute the second partials
	VectorBase ddy(m * p);
	ddy = f.ForTwo(x, j, k);
	/* 
	partial of y w.r.t x[0] is
	[ 2 * x[0] * exp(x[1]) ]
	[ 2 * x[0] * sin(x[1]) ]
	[ 2 * x[0] * cos(x[1]) ] 
	*/
	// second partial of y w.r.t x[0] and x[1]
	ok &amp;=  <a href="nearequal.xml" target="_top">NearEqual</a>( 2.*exp(x[1]), ddy[0*p+0], 1e-10, 1e-10 );
	ok &amp;=  <a href="nearequal.xml" target="_top">NearEqual</a>( 2.*sin(x[1]), ddy[1*p+0], 1e-10, 1e-10 );
	ok &amp;=  <a href="nearequal.xml" target="_top">NearEqual</a>( 2.*cos(x[1]), ddy[2*p+0], 1e-10, 1e-10 );

	// second partial of F w.r.t x[0] and x[1]
	ok &amp;=  <a href="nearequal.xml" target="_top">NearEqual</a>( 2.*x[0]*exp(x[1]), ddy[0*p+1], 1e-10, 1e-10 );
	ok &amp;=  <a href="nearequal.xml" target="_top">NearEqual</a>( 2.*x[0]*cos(x[1]), ddy[1*p+1], 1e-10, 1e-10 );
	ok &amp;=  <a href="nearequal.xml" target="_top">NearEqual</a>(-2.*x[0]*sin(x[1]), ddy[2*p+1], 1e-10, 1e-10 );

	return ok;
}
} // End empty namespace 
# include &lt;vector&gt;
# include &lt;valarray&gt;
bool ForTwo(void)
{	bool ok = true;
        // Run with VectorBase equal to three different cases
        // all of which are Simple Vectors with elements of type double.
	ok &amp;= ForTwoCases&lt; CppAD::vector &lt;double&gt;, std::vector&lt;size_t&gt; &gt;();
	ok &amp;= ForTwoCases&lt; std::vector   &lt;double&gt;, std::vector&lt;size_t&gt; &gt;();
	ok &amp;= ForTwoCases&lt; std::valarray &lt;double&gt;, std::vector&lt;size_t&gt; &gt;();

        // Run with VectorSize_t equal to two other cases
        // which are Simple Vectors with elements of type size_t.
	ok &amp;= ForTwoCases&lt; std::vector &lt;double&gt;, CppAD::vector&lt;size_t&gt; &gt;();
	ok &amp;= ForTwoCases&lt; std::vector &lt;double&gt;, std::valarray&lt;size_t&gt; &gt;();

	return ok;
}</pre>
</font></code>


<hr/>Input File: example/for_two.cpp

</body>
</html>
