/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


aspect VariabilityPropagation {

	// TODO: move
	syn boolean FTypePrefixVariability.lessThan(FTypePrefixVariability other) =
			variabilityLevel() < other.variabilityLevel();
	//
	syn boolean ASTNode.isWhen() = false;
	eq FWhenEquation.isWhen() = true;
	//
	
	public boolean FAbstractEquation.taggedForRemoval = false;
	
	public void FClass.variabilityPropagationIfSet() {
		if (root().options.getBooleanOption("constant_propagation")) {
			beginStep("variabilityPropagationIfSet()");
			
			enableConstantFolding();
		
			LinkedHashSet<FAbstractEquation> worklist = new LinkedHashSet<FAbstractEquation>(equations());
			List<FAbstractEquation> parameterEquations = getFParameterEquations();

			while(!worklist.isEmpty()) {
				FAbstractEquation equation = worklist.iterator().next();
				equation.variabilityPropagation(worklist,parameterEquations);		
				worklist.remove(equation);
			}
			
			// Remove tagged equations
			for (FEquationBlock block : getFEquationBlocks()) {
				for (int i = 0; i < block.getNumFAbstractEquation(); i++) {
					if (block.getFAbstractEquations().getChild(i).taggedForRemoval) {
						block.getFAbstractEquations().removeChild(i);
						i--;
					}
				}
			}
			
			endStep("variabilityPropagationIfSet()");
		}
	}

	
	public void FAbstractEquation.variabilityPropagation(
			LinkedHashSet<FAbstractEquation> worklist,
			List<FAbstractEquation> parameterEquations) {
		
	}
	
	public void FEquation.variabilityPropagation(
			LinkedHashSet<FAbstractEquation> worklist,
			List<FAbstractEquation> parameterEquations) {
		
		if (getParent().isWhen()) {
			return;
		}
		
		tryPropagate(getLeft(),getRight(),worklist,parameterEquations);
		tryPropagate(getRight(),getLeft(),worklist,parameterEquations);
	}
	
	public void FEquation.tryPropagate(
			FExp toExp, FExp fromExp,
			LinkedHashSet<FAbstractEquation> worklist,
			List<FAbstractEquation> parameterEquations) {
		
		if (fromExp.variability().lessThan(toExp.variability()) &&
			!fromExp.isDiscreteExp() && toExp.variabilityPropagationGoDown(worklist,fromExp)) {
			
			if (fromExp.variability().parameterOrLess()) {
				taggedForRemoval = true;
			}
			if (fromExp.variability().parameterVariability()) {
				parameterEquations.add(new FEquation(toExp,fromExp));
			}
		}
	}
	
	
	public boolean FExp.variabilityPropagationGoDown(
			LinkedHashSet<FAbstractEquation> worklist,
			FExp exp) {
		
		return false;
	}
	public boolean FIdUseExp.variabilityPropagationGoDown(
			LinkedHashSet<FAbstractEquation> worklist,
			FExp exp) {
		
		return myFV().variabilityPropagationGoDown(worklist, exp);
	}
	public boolean FAbstractVariable.variabilityPropagationGoDown(
			LinkedHashSet<FAbstractEquation> worklist,
			FExp exp) {
		
		return false;
	}
	public boolean FVariable.variabilityPropagationGoDown(
			LinkedHashSet<FAbstractEquation> worklist,
			FExp exp) {
		
		if (exp.isConstantExp()) {
			try { // TODO: this should not give exception
				if (exp.ceval().isUnknown()) {
					return false;
				}				
			} catch (ConstantEvaluationException e) { 
				return false;
			}
			setBindingExp(exp.ceval().buildLiteral());	
		}
		
		setFTypePrefixVariability(exp.variability());
		
		for (FIdUseExp use: uses()) {
			use.variability_computed = false;
			use.is$Final = false;
			use.getParent().variabilityPropagationGoUp(worklist);
		} 

		return true;
		
	}
	
	
	public void ASTNode.variabilityPropagationGoUp(
			LinkedHashSet<FAbstractEquation> worklist) {
		
	}
	public void FExp.variabilityPropagationGoUp(
			LinkedHashSet<FAbstractEquation> worklist) {
		
		flushAll();
		is$Final = false;
		getParent().variabilityPropagationGoUp(worklist);
	}
	public void FAbstractEquation.variabilityPropagationGoUp(
			LinkedHashSet<FAbstractEquation> worklist) {
		
		flushAll();
		worklist.add(this);
	}
}



aspect ConstantFolding {
	public boolean FExp.constantFoldingEnabled = false;
	
	syn boolean FExp.constantFoldingEligible() = false;
	eq FIdUseExp.constantFoldingEligible() =  true;
	eq FUnaryExp.constantFoldingEligible() = true;
	eq FBinExp.constantFoldingEligible() = true;
	eq FIfExp.constantFoldingEligible() = true;
		
	public void FClass.enableConstantFolding() {
		super.enableConstantFolding();
	}
	
	public void ASTNode.enableConstantFolding() {
		for (ASTNode n: this)
			n.enableConstantFolding();
	}

//	public void FFunctionDecl.enableConstantFolding() {} /* Gives exceptions during function ceval */
	
	public void FExp.enableConstantFolding() {
		constantFoldingEnabled = true;
		is$Final = false;
		super.enableConstantFolding();
	}
	
	rewrite FIfExp {
		when (constantFoldingEnabled && getIfExp().isConstantExp() && !getIfExp().ceval().isUnknown()) to FExp {
			return getIfExp().ceval().booleanValue() ? getThenExp() : getElseExp();
		}
	}

	rewrite FExp {
		when (constantFoldingEnabled && constantFoldingEligible() && isConstantExp() && !ceval().isUnknown()) to FExp {
			return ceval().buildLiteral();
		}
	}

}
