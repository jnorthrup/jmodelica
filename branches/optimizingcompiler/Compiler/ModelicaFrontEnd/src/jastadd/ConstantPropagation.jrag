/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect ConstantPropagation {
	
	// TODO: from id use get a fvariables binding exp 
	syn FExp FAbstractVariable.CPROP_getBindingExp() = null;
	eq FVariable.CPROP_getBindingExp() = getBindingExp();
	//
	
	public boolean ASTNode.constantPropagation = false;
	
	public void FClass.constantPropagationIfSet() {
		if (root().options.getBooleanOption("constant_propagation")) {
			
			LinkedHashSet<FAbstractEquation> worklist = new LinkedHashSet<FAbstractEquation>(equations());
			List<FAbstractEquation> allEquations = this.getFEquationBlock(0).getFAbstractEquations(); // TODO '0'

			while(!worklist.isEmpty()) {
				FAbstractEquation equation = worklist.iterator().next();
				worklist.remove(equation);
				if (equation.constantPropagation(worklist)) {
					allEquations.removeChild(allEquations.getIndexOfChild(equation));					
				}
			}
			
			flushAllRecursive();
		}
	}

	public boolean FAbstractEquation.constantPropagation(
			LinkedHashSet<FAbstractEquation> worklist) {
		
		return false;
	}
	
	public boolean FEquation.constantPropagation(
			LinkedHashSet<FAbstractEquation> worklist) {
		
		getLeft().simplify();
		getRight().simplify();
		
		return ((getRight().isConstantExp() && getLeft().cprop_down(worklist, getRight().ceval().buildLiteral())) ||
				(getLeft().isConstantExp() && getRight().cprop_down(worklist, getLeft().ceval().buildLiteral())));
	}
	
	public void FExp.simplify() {
		constantPropagation = true;
		is$Final = false;
		if( !isConstantExp() ) {
			for (FExp fe: this.childFExps())
				fe.simplify();
		}
	}
	
	
	public boolean FExp.cprop_down(
			LinkedHashSet<FAbstractEquation> worklist,
			FExp exp) {
		return false;
	}
	public boolean FIdUseExp.cprop_down(
			LinkedHashSet<FAbstractEquation> worklist,
			FExp exp) {
		
		return myFV().cprop_down(worklist,exp);
	}
	public boolean FAbstractVariable.cprop_down(
			LinkedHashSet<FAbstractEquation> worklist,
			FExp exp) {
		
		return false;
	}
	public boolean FVariable.cprop_down(
			LinkedHashSet<FAbstractEquation> worklist,
			FExp exp) {
		
		setBindingExp(exp);
		setFTypePrefixVariability(exp.expVariability());
		
		for (FIdUseExp use: uses()) {
			use.is$Final = false;
			use.getParent().cprop_up(worklist);
		}
		
		return true;
	}
	
	
	public void ASTNode.cprop_up(
			LinkedHashSet<FAbstractEquation> worklist) {
		
	}
	public void FExp.cprop_up(
			LinkedHashSet<FAbstractEquation> worklist) {
		
		flushAll();
		getParent().cprop_up(worklist);
	}
	public void FEquation.cprop_up(
			LinkedHashSet<FAbstractEquation> worklist) {
		
		flushAll();
		worklist.add(this);
	}
	
	
	rewrite FIdUseExp {
		when (constantPropagation && myFV().hasBindingExp()) to FExp {
			return myFV().CPROP_getBindingExp().copy();
		}
	}
	rewrite FBinExp {
		when (constantPropagation && isConstantExp()) to FExp {
			return ceval().buildLiteral();
		}
	}

}