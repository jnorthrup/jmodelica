/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect ConstantPropagation {
	
	// TODO: from id use get a fvariables binding exp 
	syn FExp FAbstractVariable.CPROP_getBindingExp() = null;
	eq FVariable.CPROP_getBindingExp() = getBindingExp();
	//
	
	public boolean ASTNode.constantPropagation = false;
	public boolean FAbstractEquation.taggedForRemoval = false;
	
	public void FClass.constantPropagationIfSet() {
		if (root().options.getBooleanOption("constant_propagation")) {
			
			LinkedHashSet<FAbstractEquation> worklist = new LinkedHashSet<FAbstractEquation>(equations());
			List<FAbstractEquation> parameterEquations = getFParameterEquations();

			while(!worklist.isEmpty()) {
				FAbstractEquation equation = worklist.iterator().next();
				equation.constantPropagation(worklist,parameterEquations);
				worklist.remove(equation);
			}
			
			// Remove tagged equations
			for (FEquationBlock block : getFEquationBlocks()) {
				for (int i = 0; i < block.getNumFAbstractEquation(); i++) {
					if (block.getFAbstractEquations().getChild(i).taggedForRemoval) {
						block.getFAbstractEquations().removeChild(i);
						i--;
					}
				}
			}
			
			flushAllRecursive();
		}
	}

	public void FAbstractEquation.constantPropagation(
			LinkedHashSet<FAbstractEquation> worklist,
			List<FAbstractEquation> parameterEquations) {
		
	}
	
	public void FEquation.constantPropagation(
			LinkedHashSet<FAbstractEquation> worklist,
			List<FAbstractEquation> parameterEquations) {
		
		getLeft().simplify();
		getRight().simplify();
		
		FTypePrefixVariability leftVariability = getLeft().variability();
		FTypePrefixVariability rightVariability = getRight().variability();
				
		if (!leftVariability.lessOrEqual(rightVariability)) {
			getLeft().constantPropagationGoDown(worklist, getRight());
			if (rightVariability.parameterOrLess()) {
				taggedForRemoval = true;
			}
			if (rightVariability.parameterVariability()) {
				parameterEquations.add(new FEquation(getLeft(),getRight()));		
			}
		}
			
		if (!rightVariability.lessOrEqual(leftVariability)) {
			getRight().constantPropagationGoDown(worklist, getLeft());
			if (leftVariability.parameterOrLess()) {
				taggedForRemoval = true;
			}
			if (leftVariability.parameterVariability()) {
				parameterEquations.add(new FEquation(getRight(),getLeft()));
			}
		}
		
	}
	
	public void FExp.simplify() {
		constantPropagation = true;
		is$Final = false;

		for (FExp fe: this.childFExps())
			fe.simplify();
		
	}
	
	
	public void FExp.constantPropagationGoDown(
			LinkedHashSet<FAbstractEquation> worklist,
			FExp exp) {

	}
	public void FIdUseExp.constantPropagationGoDown(
			LinkedHashSet<FAbstractEquation> worklist,
			FExp exp) {
		
		myFV().constantPropagationGoDown(worklist, exp);
	}
	public void FAbstractVariable.constantPropagationGoDown(
			LinkedHashSet<FAbstractEquation> worklist,
			FExp exp) {
		
	}
	public void FVariable.constantPropagationGoDown(
			LinkedHashSet<FAbstractEquation> worklist,
			FExp exp) {
		
		setFTypePrefixVariability(exp.variability());
		
		for (FIdUseExp use: uses()) {
			use.is$Final = false;
			use.getParent().constantPropagationGoUp(worklist);
		} 
		
		if (exp.isConstantExp()) {
			setBindingExp(exp);	
		}
		
	}
	
	
	// TODO: use inh instead of getParent
	public void ASTNode.constantPropagationGoUp(
			LinkedHashSet<FAbstractEquation> worklist) {
		
	}
	public void FExp.constantPropagationGoUp(
			LinkedHashSet<FAbstractEquation> worklist) {
		
		flushAll();
		getParent().constantPropagationGoUp(worklist);
	}
	public void FEquation.constantPropagationGoUp(
			LinkedHashSet<FAbstractEquation> worklist) {
		
		flushAll();
		worklist.add(this);
	}
	
	
	rewrite FIdUseExp {
		when (constantPropagation && myFV().isConstant()) to FExp {
			return myFV().CPROP_getBindingExp().ceval().buildLiteral();
		}
	}
	rewrite FBinExp {
		when (constantPropagation && isConstantExp()) to FExp {
			return ceval().buildLiteral();
		}
	}

}