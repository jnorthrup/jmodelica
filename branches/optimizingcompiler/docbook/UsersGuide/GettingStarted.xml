<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Getting started</title>

  <para>This chapter is intended to give a brief introduction to using the
  JModelica.org Python packages and will therefore not go into any details.
  Please refer to the other chapters of this manual for more information on
  each specific topic.</para>

  <section>
    <title>The JModelica.org Python packages</title>

    <para>The JModelica.org Python interface enables users to use Python
    scripting to interact with Modelica and Optimica models. The interface
    consists of three packages:</para>

    <para><itemizedlist>
        <listitem>
          <para><literal>PyModelica</literal> - Compile Modelica and Optimica
          code into model units (FMUs and JMUs, see <xref
          linkend="ch_models"/> for more information).</para>
        </listitem>

        <listitem>
          <para><literal>PyFMI</literal> - Work with models that have been
          compiled into FMUs (Functional Mock-up Units). Perform simulations,
          parameter manipulation, plot results etc.</para>
        </listitem>

        <listitem>
          <para><literal>PyJMI</literal> - Work with models that have been
          compiled into JMUs. Perform simulations, solve optimization
          problems, parameter manipulation, plot results etc.</para>
        </listitem>
      </itemizedlist></para>

    <para>The Python packages will be further presented in the following
    chapters.</para>
  </section>

  <section xml:id="gs_sec_starting_a_python_session">
    <title>Starting a Python session</title>

    <para>Starting a Python session differs somewhat depending on your
    operating system.</para>

    <section>
      <title>Windows</title>

      <para>If you are running Windows, three different Python shells are
      available under the JModelica.org start menu.<itemizedlist>
          <listitem>
            <para><emphasis role="bold">Python</emphasis> - Normal command
            shell started with Python.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">IPython</emphasis> - Interactive shell
            for Python with, for example, code highlighting and tab
            completion.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">pylab</emphasis> - IPython shell which
            also loads the numeric computation environment <link
            xlink:href="http://www.scipy.org/PyLab">PyLab</link>.</para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section>
      <title>Linux or Mac OS</title>

      <para>To start the IPython shell with <link
      xlink:href="PyLab">PyLab</link> on Linux or Mac OS X, open a terminal
      and enter the command:</para>

      <programlisting language="python">&gt; $JMODELICA_HOME/Python/jm_ipython.sh -pylab
</programlisting>
    </section>
  </section>

  <section>
    <title>Run an example</title>

    <para>The Python packages <literal>pyfmi</literal> and
    <literal>pyjmi</literal> each contain a folder called
    <literal>examples</literal> in which there are several Python example
    scripts. The scripts demonstrate compilation, loading and simulation or
    optimization of models. The corresponding model files are located in the
    subdirectory <filename>files</filename>. The following code demonstrates
    how to run such an example. First a Python session must be started, see
    <xref linkend="gs_sec_starting_a_python_session"/> above. The example
    scripts are preferably run in the pylab python shell.</para>

    <para>The following code will run the RLC example and plot some
    results.</para>

    <para><programlisting language="python"># Import the RLC example
from pyjmi.examples import RLC

# Run the RLC example and plot results
RLC.run_demo()</programlisting></para>

    <para>Open <filename>RLC.py</filename> in a text editor and look at the
    Python code to see what happens when the script is run.</para>
  </section>

  <section>
    <title>Check your installation</title>

    <para>The JModelica.org Python packages requires some additional Python
    packages in order to run correctly. Use the function
    <literal>&lt;package&gt;.check_packages()</literal>, where
    <literal>&lt;package&gt;</literal> is either
    <literal>pymodelica</literal>, <literal>pyfmi</literal> or
    <literal>pyjmi</literal>, to list which Python packages that are found on
    your computer. Missing or having the wrong version of a package can be a
    source of errors. Therefore it can be useful to run
    <literal>&lt;package&gt;.check_packages()</literal> after installation or
    when trouble-shooting.<programlisting language="python">Performing pymodelica/pyjmi package check
=========================================

Platform...................... win32

Python version:............... 2.7.3

pymodelica/pyjmi version:..... 1.9


Dependencies:

Package                        Version
-------                        -------
assimulo...................... --
casadi........................ latest
Cython........................ 0.17.2
jpype......................... --
lxml.......................... 2.3.0
matplotlib.................... 1.1.0
nose.......................... 1.2.1
numpy......................... 1.6.2
scipy......................... 0.10.1
wxPython...................... 2.8.12.1
pyreadline.................... 1.7.1
setuptools.................... 0.6
</programlisting></para>
  </section>

  <section>
    <title>Redefining the JModelica.org environment</title>

    <para>When importing <literal>pyjmi</literal> or
    <literal>pymodelica</literal> in Python the script
    <filename>startup.py</filename> is run which sets the environment used by
    JModelica.org for the current Python session. For example, the environment
    variable <literal>JMODELICA_HOME</literal> points at the JModelica.org
    installation directory and <literal>IPOPT_HOME</literal> points at the
    Ipopt installation directory. One or more of these environment variables
    set in <filename>startup.py</filename> can be overridden by a user defined
    script: <filename>user_startup.py</filename>.</para>

    <para>The script <filename>startup.py</filename> looks for
    <filename>user_startup.py</filename> in the folder</para>

    <itemizedlist>
      <listitem>
        <para><filename>$USERPROFILE/.jmodelica.org/</filename>
        (Windows)</para>
      </listitem>

      <listitem>
        <para><filename>$HOME/.jmodelica.org/</filename> (unix)</para>
      </listitem>
    </itemizedlist>

    <para>If the script <filename>user_startup.py</filename> is not found, the
    default environment variables will be used.</para>

    <section>
      <title>Example redefining IPOPT_HOME</title>

      <para>The following step-by-step procedure will redefine the
      JModelica.org environment variable <literal>IPOPT_HOME</literal>:</para>

      <orderedlist>
        <listitem>
          <para>Create a text file and name it
          <filename>user_startup.py</filename>.</para>
        </listitem>

        <listitem>
          <para>Place the file in
          <filename>$USERPROFILE/.jmodelica.org/</filename> (Windows) or
          <filename>$HOME/.jmodelica.org/</filename> (unix). To find out where
          <literal>$USERPROFILE</literal> or <literal>$HOME</literal> points
          to, open a Python shell and type:</para>

          <programlisting language="python">import os
os.environ['USERPROFILE']   // windows
os.environ['HOME']          // unix</programlisting>
        </listitem>

        <listitem>
          <para>Open the file and type</para>

          <programlisting>environ['IPOPT_HOME']='&lt;new path to Ipopt home&gt;'</programlisting>
        </listitem>

        <listitem>
          <para>Save and close.</para>
        </listitem>

        <listitem>
          <para>Check your changes by opening a Python shell, import
          <literal>pyjmi</literal> and check the <literal>IPOPT_HOME</literal>
          environment variable:</para>

          <programlisting language="python">import pyjmi
pyjmi.environ['IPOPT_HOME']</programlisting>
        </listitem>
      </orderedlist>
    </section>
  </section>

  <section>
    <title>The JModelica.org user forum</title>

    <para>Please use the <link
    xlink:href="http://www.jmodelica.org/forum">JModelica.org forum</link> for
    any questions related to JModelica.org. You can search in old threads to
    see if someone has asked your question before or start a new thread if you
    are a member.</para>
  </section>
</chapter>
