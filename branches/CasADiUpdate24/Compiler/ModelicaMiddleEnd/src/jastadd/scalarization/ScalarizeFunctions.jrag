/*
    Copyright (C) 2016 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect FunctionScalarization {
    
    /**
     * Scalarize the function, replacing all array assignments with separate scalar 
     *        assignments and scalarize all expressions.
     */
    public void FFunctionDecl.scalarize() {
        Map<String,FExp> emptyIndexMap = Collections.emptyMap();
        List<FStatement> stmts = new List<FStatement>();
        List<FAttribute> attrs = new List<FAttribute>();
        FStatement.scalarizeStmtList(Scalarizer.function(getFFunctionVariables(), stmts), getFAlgorithm().getFStatements());
        setFAlgorithm(new FAlgorithm(stmts));
        clearScalarized();  // Functions need scalarized = false in FQNames
        flushAllRecursive();
    }
    
    /**
     * Post processing FFunctionDecls after scalarization.
     * Clear the scalarized flag for all FQNames.
     * Rewrite FIdTempExp to FIdUseExp
     */
    public void ASTNode.clearScalarized() {
        for (ASTNode node : this)
            node.clearScalarized();
    }
    
    public void FQName.clearScalarized() {
        scalarized = false;
    }
    
    private boolean FIdTempExp.clearScalarized = false;
    public void FIdTempExp.clearScalarized() {
        super.clearScalarized();
        clearScalarized = true;
    }
    
    rewrite FIdTempExp {
        when (clearScalarized) to FIdUseExp new FIdUseExp(getFIdUse());
    }
    
    /**
     * Should this expression be extracted into its own statement?
     */
    syn boolean FExp.extractTemp()          = 
        (size().isUnknown() && isComposite() && isFunctionCallIO()) || extractForIndexTemp();
    eq FIdUseExp.extractTemp()              = super.extractTemp() && isSlice();
    eq FMulExp.extractTemp()                = !isElementWise() && extractAsUnknown() || isForIndexExp();
    eq FReductionExp.extractTemp()          = getFExp().size().isUnknown() || isForIndexExp();
    eq FMinMaxExp.extractTemp()             = getX().size().isUnknown() || isForIndexExp();
    eq FFunctionCall.extractTemp()          = (isFVectorFunctionCallArg() || !isFunctionCallIO()) &&
            isComposite() && !isFunctionCallClause() || isForIndexExp();
    eq FVectorFunctionCall.extractTemp()    = true;
    eq FArray.extractTemp()                 = extractTempArrayCon(this);
    eq FAbstractCat.extractTemp()           = extractTempArrayCon(this);
    eq FAbstractDiagonal.extractTemp()      = extractTempArrayCon(this);
    eq FVectorExp.extractTemp()             = extractTempArrayCon(getFExp());
    eq FMatrixExp.extractTemp()             = extractTempArrayCon(getFExp());
    eq FIdTempExp.extractTemp()             = false;
    eq FIfExp.extractTemp()                 = false;
    
    syn boolean FExp.extractForIndexTemp() = isForIndexExp();
    eq FRangeExp.extractForIndexTemp()     = false;
    
    syn boolean FExp.extractTempArrayCon(FExp e) = e.size().isUnknown() || inUnknownSize() || isForIndexExp();
    
    inh boolean FExp.isFunctionCallIO();
    eq BaseNode.getChild().isFunctionCallIO()         = false;
    eq FFunctionCall.getArg().isFunctionCallIO()      = true;
    eq FFunctionCallLeft.getFExp().isFunctionCallIO() = true;
    eq FIfExp.getChild().isFunctionCallIO()           = isFunctionCallIO();
    
    inh boolean FExp.isForIndexExp();
    eq BaseNode.getChild().isForIndexExp() = false;
    eq FForIndex.getFExp().isForIndexExp() = !duringExtractedTempScalarization;

    inh ASTNode FExp.myExtractedTempOwner();
    inh ASTNode CommonForIndex.myExtractedTempOwner();
    eq Root.getChild().myExtractedTempOwner()                 = null;
    eq FFunctionCallEquation.getLeft().myExtractedTempOwner() = getCall();
    eq FFunctionCallStmt.getLeft().myExtractedTempOwner()     = getCall();
    eq FFunctionCall.getArg(int i).myExtractedTempOwner()     = this;
    eq FForIndex.getFExp().myExtractedTempOwner()             = this;
    
    inh boolean FExp.isFVectorFunctionCallArg();
    eq BaseNode.getChild().isFVectorFunctionCallArg()          = false;
    eq FVectorFunctionCall.getArg().isFVectorFunctionCallArg() = true;
    
    syn boolean FExp.extractAsUnknown() = size().isUnknown();
    eq FReductionExp.extractAsUnknown() = getFExp().size().isUnknown();
    eq FMinMaxExp.extractAsUnknown()    = getX().size().isUnknown();
    eq FMulExp.extractAsUnknown()       = getLeft().size().isUnknown() || getRight().size().isUnknown();
    eq FAbstractDiagonal.extractAsUnknown() = size().isUnknown();
    eq FVectorExp.extractAsUnknown()    = getFExp().size().isUnknown();
    eq FMatrixExp.extractAsUnknown()    = getFExp().size().isUnknown();
    
    inh boolean FExp.inUnknownSize();
    eq Root.getChild().inUnknownSize()               = false;
    eq FStatement.getChild().inUnknownSize()         = false;
    eq FEquation.getChild().inUnknownSize()          = false;
    eq FFunctionCall.getChild().inUnknownSize()      = false;
    eq FRecordConstructor.getChild().inUnknownSize() = false;
    eq FAssignStmt.getChild().inUnknownSize()        = getLeft().size().isUnknown() || getRight().size().isUnknown();
    eq FExp.getChild().inUnknownSize()               = size().isUnknown() || (extractTemp() && extractAsUnknown()) ||
            inUnknownSize();
    eq FAbstractVariable.getChild().inUnknownSize()  = false;
    
    syn boolean FAssignStmt.extractTemp() {
        if (type().size().isUnknown() || type().isArray()) {
            Set<FAbstractVariable> left = getLeft().usesInScalarizedExp();
            Set<FAbstractVariable> right = getRight().usesInScalarizedExp();
            for (FAbstractVariable fv : left) {
                if (right.contains(fv)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    syn Set<FAbstractVariable> FExp.usesInScalarizedExp() {
        Set<FAbstractVariable> res = new HashSet<FAbstractVariable>();
        usesInScalarizedExp(res);
        return res;
    }
    
    public void ASTNode.usesInScalarizedExp(Set<FAbstractVariable> res) {
        for (ASTNode n : this)
            n.usesInScalarizedExp(res);
    }
    
    public void FExp.usesInScalarizedExp(Set<FAbstractVariable> res) {
        if (!extractTemp()) {
            super.usesInScalarizedExp(res);
        }
    }
    
    public void FIdUseExp.usesInScalarizedExp(Set<FAbstractVariable> res) {
        res.add(myFV());
    }
    
    public void FSizeExp.usesInScalarizedExp(Set<FAbstractVariable> res) {
        
    }
    
    /**
     * Traverser for {@link FExp#createArrayTemporaries(Scalarizer s)}.
     */
    public void ASTNode.createArrayTemporaries(Scalarizer s) {
        for (ASTNode n : this)
            n.createArrayTemporaries(s);
    }
    
    /**
     * Finds, extracts, and replaces expressions with temporaries
     */
    public void FExp.createArrayTemporaries(Scalarizer s) {
        if (extractTemp()) {
            if (extractAsUnknown()) {
                unknownFunctionArrayTemporaries_pre(s);
            } else {
                knownArrayTemporaries(s);
            }
        } else {
            createArrayTemporariesInChildren(s);
        }
    }
    
    public void FExp.createArrayTemporariesInChildren(Scalarizer s) {
        for (ASTNode n : this) {
            n.createArrayTemporaries(s);
        }
    }
    
    public void FIfExp.createArrayTemporariesInChildren(Scalarizer s) {
        if (inFAlgorithm()) {
            List thenClauses = new List();
            List elseClauses = new List();
            getIfExp().createArrayTemporaries(s);
            getThenExp().createArrayTemporaries(s.block(thenClauses));
            getElseExp().createArrayTemporaries(s.block(elseClauses));
            if (thenClauses.getNumChild() > 0 || elseClauses.getNumChild() > 0) {
                List<FIfWhenClause> cl = new List<FIfWhenClause>();
                cl.add(new FIfClause(getIfExp().scalarize(s), thenClauses));
                ((Scalarizer.Algorithm)s).add(new FIfStmt(cl, elseClauses));
            }
        } else {
            createArrayTemporariesIfBranch(null, s);
        }
    }
    
    public void FExp.createArrayTemporariesIfBranch(FExp ifExp, Scalarizer s) {
        List thenClauses = new List();
        List elseClauses = new List();
        List<FAbstractVariable> thenVars = new List<FAbstractVariable>();
        createArrayTemporaries(s.block(thenVars, thenClauses));
        if (thenClauses.getNumChild() > 0) {
            if (inFAlgorithm()) {
                List<FIfWhenClause> cl = new List<FIfWhenClause>();
                cl.add(new FIfClause(ifExp, thenClauses));
                s.add(new FIfStmt(cl, elseClauses));
            } else {
                for (FAbstractVariable fv : thenVars) {
                    elseClauses.add(new FEquation(fv.createUseExp(), fv.type().zeroLiteral()));
                }
                FElseEquation elseClause = new FElseEquation(new FNormalEquation(), elseClauses);
                FIfEquation equation = new FIfEquation(new FNormalEquation(), thenClauses, ifExp, new Opt<FIfWhenElseEquation>(elseClause));
                equation.setIsTempAssign();
                s.add(equation);
            }
            s.add(thenVars);
        }
    }
    
    private boolean FIfWhenElseEquation.isTempAssign = false;
    public void FIfWhenElseEquation.setIsTempAssign() { isTempAssign = true; }
    public boolean FIfWhenElseEquation.isTempAssign() { return isTempAssign; }
    
    public void FIfExp.createArrayTemporariesIfBranch(FExp guard, Scalarizer s) {
        if (guard == null) {
            getIfExp().createArrayTemporaries(s);
        } else {
            getIfExp().createArrayTemporariesIfBranch(guard.treeCopyNoTransform(), s);
        }
        FExp ifExp = getIfExp().scalarize(s);
        FExp thenGuard = ifExp.treeCopyNoTransform();
        FExp elseGuard = new FNotExp(ifExp.treeCopyNoTransform());
        if (guard != null) {
            thenGuard = new FAndExp(guard.treeCopyNoTransform(), thenGuard);
            elseGuard = new FAndExp(guard.treeCopyNoTransform(), elseGuard);
        }
        getThenExp().createArrayTemporariesIfBranch(thenGuard, s);
        getElseExp().createArrayTemporariesIfBranch(elseGuard, s);
    }
    
    
    public void FFunctionCall.createArrayTemporaries(Scalarizer s) {
        // No names available as a function call arg.
        boolean b = !extractTemp();
        if (b)
            s.getNames().addLayer(0);
        super.createArrayTemporaries(s);
        if (b)
            s.getNames().removeLayer();
    }
    
    public void FRecordConstructor.createArrayTemporaries(Scalarizer s) {
        // No names available as record con arg.
        boolean b = !extractTemp();
        if (b)
            s.getNames().addLayer(0);
        super.createArrayTemporaries(s);
        if (b)
            s.getNames().removeLayer();
    }
    
    public void FSizeExp.createArrayTemporaries(Scalarizer s) {
        
    }
    
    /**
     * Create clauses for and replace this known size expression with a temp variable.
     * Used in both functions and equations.
     * @param s Scalarization visitor
     */
    public void FExp.knownArrayTemporaries(Scalarizer s) {
        s.addTempVar(this);
        Array arr = getArray();
        for (Index i : indices()) {
            FQName name = new FQNameFull(tempVarName(), i.createFArraySubscripts());
            name.scalarized = true;
            s.add(new FIdUseExp(name), arr.get(i).scalarize(s));
        }
        useTempVar = true;
    }
    
    public void FFunctionCall.knownArrayTemporaries(Scalarizer s) {
        s.addTempVar(this);
        s.createScalarizedFunctionCallClause(this, this);
    }
    
    public void FVectorFunctionCall.knownArrayTemporaries(Scalarizer s) {
        getArray().createArrayTemporaries(s);
    }
    
    /**
     * Wrapper for {@link FExp#unknownFunctionArrayTemporaries(Scalarizer s)}.
     * Performs some common operations
     */
    public void FExp.unknownFunctionArrayTemporaries_pre(Scalarizer s) {
        s.addTempVar(this);
        unknownFunctionArrayTemporaries(s);
        useTempVar = true;
    }
    
    /**
     * Create clauses for and replace this unknown size expression with a temp variable.
     * Used in functions.
     * @param s Scalarization visitor
     */
    public void FExp.unknownFunctionArrayTemporaries(Scalarizer s) {
        boolean writeBack = inFunctionCallLeft();
        if (!writeBack || s.getWriteBack()) {
            ASTNode owner = myExtractedTempOwner();
            FIdUseExp left = tempExp();
            FExp right = owner.enterExtractedTempScalarization(this);
            if (writeBack) {
                FIdUseExp temp = (FIdUseExp) right;
                right = left;
                left  = temp;
            }
            
            useTempVar = false;
            type().scalarizeAssignment((Scalarizer.Algorithm)s, left, right);
            useTempVar = true;
            owner.exitExtractedTempScalarization(this);
            left.indexNames = null;
            right.indexNames = null;
        }
    }

    public FExp ASTNode.enterExtractedTempScalarization(FExp e) {
        return e;
    }

    public void ASTNode.exitExtractedTempScalarization(FExp e) {
    }

    public FExp FAbstractFunctionCall.enterExtractedTempScalarization(FExp e) {
        e.setParent(null); // Force dynamicFExp
        return dynamicFExp(e);
    }

    public FExp FForIndex.enterExtractedTempScalarization(FExp e) {
        duringExtractedTempScalarization = true;
        return e;
    }

    public void FForIndex.exitExtractedTempScalarization(FExp e) {
        duringExtractedTempScalarization = false;
    }

    private boolean FForIndex.duringExtractedTempScalarization = false;

    public void FFunctionCall.unknownFunctionArrayTemporaries(Scalarizer s) {
        s.createScalarizedFunctionCallClause(this, this);
    }
    
    public void FVectorFunctionCall.unknownFunctionArrayTemporaries(Scalarizer s) {
        List<FExp> newArgs = new List<FExp>();
        List<FStatement> result = new List<FStatement>();
        List<FStatement> outer = s.getClauses();
        ForNames names = s.getNames();

        names.addLayer(ndims());
        names.fillLayer(this);

        List<FStatement> firstLoop = names.createForLoops(result, this, 1);
        FIdUseExp funcLeft = tempExp(names.createFArraySubscripts(1));

        for (int i = 0; i < getNumArg(); ++i) {
            FExp arg = getArg(i);

            arg.createArrayTemporaries(s.block(outer));

            if (getVectorized()[i]) {
                arg.addArrayUsesToIndexMap(s);
                int dimDiff = arg.ndims() - ndims();

                if (dimDiff > 0) {
                    names.addLayer(dimDiff + 1);
                    names.promote(0);
                    names.fillLayer(arg);
                    
                    String tempName = arg.calcTempVarName();
                    FIdUseExp tempExp = new FIdUseExp(new FIdUse(tempName));

                    FType tempType = arg.type().arrayType(arg.size().contract(1));
                    s.block(firstLoop).addTempVar(tempType, tempName);

                    newArgs.add(names.createUseWithSubscripts(tempName, 0, dimDiff - 1));

                    FAssignableExp left = names.createUseWithSubscripts(tempName, 1, dimDiff + 1);
                    FExp right = arg.tempExp(names.createFArraySubscripts(0, dimDiff + 1));
                    names.createForLoops(firstLoop, arg, 1, dimDiff + 1).add(new FAssignStmt(left, right));
                    names.removeLayer();
                } else {
                    newArgs.add(arg.scalarize(s));
                }
            } else {
                newArgs.add(arg.scalarize(s));
            }
        }

        FFunctionCall funcRight = new FFunctionCall(getName().fullCopy(), newArgs, getFType().scalarType());
        firstLoop.add(new FAssignStmt(funcLeft, funcRight));

        outer.addAll(result);
        names.removeLayer();
    }
    
    public void FArray.unknownFunctionArrayTemporaries(Scalarizer s) {
        ForNames names = s.getNames();
        boolean iter = isIterArray();
        names.addLayer(ndims()- (iter ? 0 : 1));
        names.fillLayer(this);
        
        for (int i = 0; i < getNumFExp(); i++) {
            List<FStatement> inner = new List<FStatement>();
            List<FStatement> outer = s.getClauses();
            FExp right = getFExp(i);
            FIdUseExp left;
            if (iter) {
                left = names.createUseWithSubscripts(tempVarName());
                getFExp(0).editNamesIter(s);
                right.createArrayTemporaries(s.block(inner));
                right.addArrayUsesToIndexMap(s);
                names.removeLayer();
                outer = names.createForLoops(outer, right);
                outer.addAll(inner);
                right = ((FIterExp) right).getFExp();
            } else {
                right.createArrayTemporaries(s);
                right.addArrayUsesToIndexMap(s);
                outer = names.createForLoops(outer, right);
                List<FSubscript> subs = new List<FSubscript>();
                subs.add(new FIntegerSubscript(i+1));
                subs.addAll(names.createFArraySubscripts().getFSubscriptListNoTransform());
                left = tempExp(new FArraySubscripts(subs));
            }
            
            type().scalarizeAssignment_sub((Scalarizer.Algorithm)s.block(outer), left, right);
        }
        
        names.removeLayer();
    }
    
    public void FMulExp.unknownFunctionArrayTemporaries(Scalarizer s) {
        ForNames names = s.getNames();
        FIdUseExp sum = new FIdUseExp(calcTempVarName());
        s.addTempVar(type().scalarType(), sum.name());
        
        names.addLayer(ndims());
        names.fillLayer(this);
        
        // Set up indices for the left operand
        FExp exp = getLeft();
        names.addLayer(exp.ndims());
        if (names.size() > 1)
            names.promote(0);
        String i = names.create(this);
        
        // Create inner loop
        FForStmt fs = new FForStmt(new FForIndex(i, getRight().size().createFExp(0)), new List());
        List<FStatement> inner = fs.getForStmts();
        
        // Scalarize left operand
        exp.createArrayTemporaries(s);
        exp.addArrayUsesToIndexMap(s);
        FExp left = exp.scalarize(s);
        names.removeLayer();
        
        // Set up indices and scalarize the right operand
        exp = getRight();
        names.addLayer(exp.ndims());
        names.add(i);
        if (names.size() > 1)
            names.promote(ndims() - 1);
        exp.createArrayTemporaries(s);
        exp.addArrayUsesToIndexMap(s);
        FExp right = exp.scalarize(s);
        names.removeLayer();
        
        // Add statement updating temp var to loop
        FExp mul = new FMulExp(left, right);
        FExp add = new FAddExp(sum.fullCopy(), mul);
        inner.add(new FAssignStmt(sum.fullCopy(), add));
        
        // Create outer loops
        List<FStatement> outer = s.createForLoops(this);
        outer.add(new FAssignStmt(sum, type().scalarType().zeroLiteral()));
        outer.add(fs);
        outer.add(new FAssignStmt(names.createUseWithSubscripts(tempVarName()), sum.fullCopy()));
        
        names.removeLayer();
    }
    
    public void FAbstractCat.unknownFunctionArrayTemporaries(Scalarizer s) {
        ForNames names = s.getNames();
        int catDim  = dimension();
        FExp offset = new FIntegerLitExp(0);
        FExp firstArg = getFExp(0);
        ForNames orig = names.copySurface();
        
        for (FExp exp : getFExps()) {
            names.addLayer(exp.ndims());
            names.fillLayer(exp);
            
            exp.createArrayTemporaries(s);
            exp.addArrayUsesToIndexMap(s);
            
            FArraySubscripts fas = names.createFArraySubscripts(ndims());
            FExp ind = fas.getFSubscript(catDim).asExpSubscript().getFExp();
            ind = new FAddExp(ind, offset.fullCopy());
            fas.setFSubscript(new FExpSubscript(ind), catDim);
            
            FIdUseExp left = tempExp(fas);
            s.createForLoops(exp).add(new FAssignStmt(left, exp.scalarize(s)));
            names.removeLayer();
            
            offset = new FAddExp(offset, exp.size().has(catDim) ? exp.size().createFExp(catDim) : new FIntegerLitExp(1));
        }
    }
    
    public void FAbstractDiagonal.unknownFunctionArrayTemporaries(Scalarizer s) {
        ForNames names = s.getNames();
        names.addLayer(ndims());
        names.fillLayer(this);
        
        getFExp().createArrayTemporaries(s);
        getFExp().addArrayUsesToIndexMap(s);
        
        FArraySubscripts fas = names.createFArraySubscripts(ndims());
        FIdUseExp left = tempExp(fas);
        FIfExp right = new FIfExp(
                new FEqExp(new FIdUseExp(names.get(0)), new FIdUseExp(names.get(1))),
                scalarizeDiagonalElement(s.map()),
                new FIntegerLitExp(0)
        );
        s.createForLoops(this).add(new FAssignStmt(left, right));
        names.removeLayer();
    }
    
    syn FExp FAbstractDiagonal.scalarizeDiagonalElement(Map<String,FExp> indexMap);
    eq FIdentity.scalarizeDiagonalElement(Map<String,FExp> indexMap) = new FIntegerLitExp(1);
    eq FDiagonal.scalarizeDiagonalElement(Map<String,FExp> indexMap) = getFExp().scalarize(indexMap);
    
    public void FVectorExp.unknownFunctionArrayTemporaries(Scalarizer s) {
        ForNames names = s.getNames();
        names.addLayer(getFExp().ndims());
        names.fillLayer(getFExp());
        
        getFExp().createArrayTemporaries(s);
        getFExp().addArrayUsesToIndexMap(s);
        
        FExp ind = null;
        for (int i = 0; i < names.size(); i++) {
            FIdUseExp u = new FIdUseExp(names.get(i));
            FSubExp u1 = new FSubExp(u, new FIntegerLitExp(1));
            if (ind != null) {
                ind = new FMulExp(ind, getFExp().size().createFExp(i));
                ind = new FAddExp(ind, u1);
            } else {
                ind = u1;
            }
        }
        ind = new FAddExp(ind, new FIntegerLitExp(1));
        
        FArraySubscripts fas = new FArraySubscripts();
        fas.addFSubscript(new FExpSubscript(ind));
        FIdUseExp left = tempExp(fas);
        FExp right = getFExp().scalarize(s);
        s.createForLoops(getFExp()).add(new FAssignStmt(left, right));
        names.removeLayer();
    }
    
    public void FMatrixExp.unknownFunctionArrayTemporaries(Scalarizer s) {
        ForNames names = s.getNames();
        names.addLayer(getFExp().ndims());
        names.fillLayer(getFExp());
        
        getFExp().createArrayTemporaries(s);
        getFExp().addArrayUsesToIndexMap(s);
        
        FIdUseExp left = tempExp(names.createFArraySubscripts(2));
        FExp right = getFExp().scalarize(s);
        s.createForLoops(getFExp()).add(new FAssignStmt(left, right));
        names.removeLayer();
    }

    public void FReductionExp.unknownFunctionArrayTemporaries(Scalarizer s) {
        ForNames names = s.getNames();
        // Set up names and create for loop(s)
        FExp exp = getFExp();
        names.addLayer(exp.ndims());
        names.fillLayer(this);
        
        FIdUseExp reducer;
        if (type().isArray())
            reducer = tempExp(names.createFArraySubscripts(ndims()));
        else
            reducer = tempExp();
        
        FStatement initStmt = new FAssignStmt(reducer, scalarReduceStartValue().buildLiteral());
        
        List clauses = unknownReductionSub(s, exp, initStmt);
        
        // Add statement updating temp var to loop
        FBinExp scalarizedExp = scalarReduceExp();
        scalarizedExp.setLeft(reducer.fullCopy());
        scalarizedExp.setRight(exp.scalarize(s));
        clauses.add(new FAssignStmt(reducer.fullCopy(), scalarizedExp));
        
        names.removeLayer();
    }

    public void FMinMaxExp.unknownFunctionArrayTemporaries(Scalarizer s) {
        // Set up names and create for loop(s)
        ForNames names = s.getNames();
        FExp exp = getX();
        names.addLayer(exp.ndims());
        names.fillLayer(this);
        
        FIdUseExp reducer = tempExp();
        
        FStatement initStmt = new FAssignStmt(reducer, scalarReduceStartValue().buildLiteral());
        
        List clauses = unknownReductionSub(s, exp, initStmt);
        
        // Add statement updating temp var to loop
        FExp scalarizedExp = scalarReduceExp(reducer, exp.scalarize(s));
        clauses.add(new FAssignStmt(reducer.fullCopy(), scalarizedExp));
        
        names.removeLayer();
    }
    
    syn FExp FMinMaxExp.scalarReduceExp(FExp reducer, FExp scalar);
    eq FMaxExp.scalarReduceExp(FExp reducer, FExp scalar) = new FIfExp(new FGtExp(reducer.unboundCopy(), scalar.unboundCopy()), reducer.unboundCopy(), scalar.unboundCopy());
    eq FMinExp.scalarReduceExp(FExp reducer, FExp scalar) = new FIfExp(new FLtExp(reducer.unboundCopy(), scalar.unboundCopy()), reducer.unboundCopy(), scalar.unboundCopy());
    
    protected List FExp.unknownReductionSub(Scalarizer s, FExp exp, FStatement initStmt) {
        ForNames names = s.getNames();
        List clauses = s.getClauses();
        List<FStatement> inner = new List<FStatement>();
        boolean iter = exp.editNamesIter(s);
        exp.createArrayTemporaries(s.block(inner));
        exp.addArrayUsesToIndexMap(s);
        if (iter) {
            names.removeLayer();
            clauses = names.createForLoops(clauses, exp, 0, ndims());
            clauses.add(initStmt);
            clauses = names.createForLoops(clauses, exp, ndims(), exp.ndims());
            clauses.addAll(inner);
        } else {
            clauses.addAll(inner);
            clauses.add(initStmt);
            clauses = names.createForLoops(clauses, exp);
        }
        return clauses;
    }
    
    /**
     * Helper for unknown size expressions containing iteration expressions.
     * Transfers some names  in <code>names</code> to <code>indexMap</code>
     */
    public boolean FExp.editNamesIter(Scalarizer s) {
        return false;
    }
    public boolean FIterExp.editNamesIter(Scalarizer s) {
        ForNames names = s.getNames();
        Map<String,FExp> indexMap = s.map();
        int i = 0;
        for (; i < getNumForIndex(); i++) {
            indexMap.put(getForIndex(i).name(), new FIdUseExp(names.get(i)));
        }
        names.addLayer(getFExp().ndims());
        for (; i < getFExp().ndims() + getNumForIndex(); i++) {
            names.promote(i);
        }
        return true;
    }
    
    /**
     * Wrapper for {@link ASTNode#addArrayUsesToIndexMap(FExp[] names)}.
     */
    public void ASTNode.addArrayUsesToIndexMap(Scalarizer s) {
        addArrayUsesToIndexMap(s.getNames().createFExpArray());
    }
    
    /**
     * Traverser for {@link FExp#addArrayUsesToIndexMap(FExp[] names)}.
     */
    public void ASTNode.addArrayUsesToIndexMap(FExp[] names) {
        for (ASTNode n : this)
            n.addArrayUsesToIndexMap(names);
    }
    
    /**
     * Copies top layer in <code>names</code> to id uses and creates entries
     * in <code>indexNames</code> for expressions replaced with temps.
     */
    public void FExp.addArrayUsesToIndexMap(FExp[] names) {
        if (useTempVar) {
            if (isArray()) {
                indexNames = names;
            }
        } else {
            super.addArrayUsesToIndexMap(names);
        }
    }
    
    public void FSizeExp.addArrayUsesToIndexMap(FExp[] names) {
        
    }
    
    public void FIdUseExp.addArrayUsesToIndexMap(FExp[] names) {
        if (!hasFArraySubscripts() && isArray())
            indexNames = names;
        super.addArrayUsesToIndexMap(names);
    }
    public void FIdTempExp.addArrayUsesToIndexMap(FExp[] names) {
        indexNames = names;
    }

    public void FRangeExp.addArrayUsesToIndexMap(FExp[] names) {
        indexNames = names;
        super.addArrayUsesToIndexMap(names);
    }

    public void FLinspace.addArrayUsesToIndexMap(FExp[] names) {
        indexNames = names;
        super.addArrayUsesToIndexMap(names);
    }

    public void FColonSubscript.addArrayUsesToIndexMap(FExp[] names) {
        indexName = names[0];
    }

    public void FArraySubscripts.addArrayUsesToIndexMap(FExp[] names) {
        int i = 0;
        for (FSubscript fs : getFSubscripts()) {
            if (fs.type().isArray()) {
                FExp[] local = new FExp[1];
                local[0] = names[i++];
                fs.addArrayUsesToIndexMap(local);
            }
        }
    }

    public void FTranspose.addArrayUsesToIndexMap(FExp[] names) {
        FExp[] local = names.clone();
        local[0] = names[1];
        local[1] = names[0];
        super.addArrayUsesToIndexMap(local);
    }

    public void FFunctionCall.addArrayUsesToIndexMap(FExp[] names) {
        // No names available as a function call arg.
        super.addArrayUsesToIndexMap(extractTemp() ? names : new FExp[0]);
    }

    public void FRecordConstructor.addArrayUsesToIndexMap(FExp[] names) {
        // No names available as record con arg.
        super.addArrayUsesToIndexMap(extractTemp() ? names : new FExp[0]);
    }

}

aspect FunctionScalarizationHelpers {
    
    /**
     * A node that can look up variable names in the flat tree.
     */
    public interface FlatLookupNode {
        public FAbstractVariable lookupFV(FQName fqn);
    }
    FFunctionVariable implements FlatLookupNode;
    FExp implements FlatLookupNode;
    
    /**
     * Creates and organizes names of for indices for generated for loops.
     */
    public class ForNames implements Iterable<String> {
        private ArrayList<String[]> names;
        private ArrayList<Integer> last;
        private int pos;
        
        /**
         * Standard constructor.
         */
        public ForNames() {
            names = new ArrayList<String[]>();
            last = new ArrayList<Integer>();
            last.add(0);
        }
        
        /**
         * Creates a new ForNames with a single layer with space for <code>n</code> names.
         */
        public ForNames(int n) {
            this();
            addLayer(n);
        }
        
        /**
         * Add a new layer of names, that can be filled with new names or names 
         *        from the layer underneath.
         * 
         * @param n  the number of names in the new layer
         */
        public void addLayer(int n) {
            names.add(new String[n]);
            pos = 0;
            last.add(last());
        }
        
        /**
         * Fills all empty spots in the top layer with newly created names.
         */
        public void fillLayer(FlatLookupNode context) {
            String[] top = topLayer();
            for (int i = pos; i < top.length; i++) 
                create(context);
        }
        
        /**
         * Removes the top layer, exposing the layer underneath.
         */
        public void removeLayer() {
            names.remove(names.size() - 1);
            last.remove(last.size() - 1);
        }

        private String[] topLayer() {
            return names.get(names.size() - 1);
        }
        
        public boolean hasNames() {
            return names.size() > 0 && topLayer().length > 0;
        }
        
        /**
         * Gets name with index <code>i</code> in the top layer.
         */
        public String get(int i) {
            return topLayer()[i];
        }
        
        /**
         * Adds a name to the top layer.
         */
        public void add(String name) {
            topLayer()[pos++] = name;
        }
        
        /**
         * Creates a new name and adds it to the top layer.
         * 
         * @return the created name
         */
        public String create(FlatLookupNode context) {
            String name;
            int l = last();
            do {
                name = "i" + (++l);
            } while (!context.lookupFV(new FQNameString(name)).isUnknown()); 
            add(name);
            last.set(last.size()-1, l);
            return name;
        }
        
        private int last() {
            return last.get(last.size()-1);
        }
        
        /**
         * Adds a name from the underlying layer to the top layer.
         * 
         * @param i  the index in the underlying layer
         */
        public void promote(int i) {
            add(names.get(names.size() - 2)[i]);
        }
        
        /**
         * Checks if there are enough layers to promote a name.
         */
        public boolean canPromote() {
            return names.size() > 1;
        }
        
        /**
         * Return the number of names in the top layer.
         */
        public int size() {
            return topLayer().length;
        }
        
        /**
         * Iterates over the top layer.
         */
        public Iterator<String> iterator() {
            return Arrays.asList(topLayer()).iterator();
        }
        
        /**
         * Pushes a copy of the top layer with first and second names switched
         */
        public void createTransposedLayer() {
            String[] lay = topLayer();
            addLayer(lay.length);
            for (int i = 0; i < lay.length; i++) {
                promote(i);
            }
            topLayer()[0] = lay[1];
            topLayer()[1] = lay[0];
            
        }
        
        /**
         * Creates nestled for loops using the top layer of names.
         *  
         * Adds the outermost for loop to a list of statements.
         * 
         * @param stmts  list to add the created for statements to
         * @param sizes  array of expressions describing the size of each dimension
         * @return  the list of statements of the innermost loop
         */
        public List<FStatement> createForLoops(List<FStatement> stmts, FExp[] sizes, int startDim) {
            List<FStatement> cur = stmts;
            for (int i = 0; i < sizes.length; i++) {
                FForIndex ffi = new FForIndex(topLayer()[startDim + i], sizes[i]);
                FForStmt fs = new FForStmt(ffi, new List());
                cur.add(fs);
                cur = fs.getForStmts();
            }
            return cur;
        }
        
        /**
         * Creates nestled for loops over a single variable, using the top layer of names.
         *  
         * Adds the outermost for loop to a list of statements.
         * 
         * @param stmts  list to add the created for statements to
         * @param var    name of the variable to loop over
         * @return  the list of statements of the innermost loop
         */
        public List<FStatement> createForLoops(List<FStatement> stmts, FQName var) {
            int n = topLayer().length;
            FExp[] sizes = new FExp[n];
            for (int i = 0; i < n; i++)
                sizes[i] = new FSizeExp(var, i);
            return createForLoops(stmts, sizes, 0);
        }
        
        /**
         * Creates nestled (maximum d) for loops  over an expression, 
         * using the top layer of names.
         *  
         * Adds the outermost for loop to a list of statements.
         * 
         * @param stmts  list to add the created for statements to
         * @param exp    expression to loop over
         * @param d      dimensions to loop over
         * @return  the list of statements of the innermost loop
         */
        public List<FStatement> createForLoops(List<FStatement> stmts, FExp exp, int d) {
            return createForLoops(stmts, exp, 0, d);
        }
        
        /**
         * Creates nestled (from d1 to d2) for loops over an expression, 
         * using the top layer of names.
         *  
         * Adds the outermost for loop to a list of statements.
         * 
         * @param stmts  list to add the created for statements to
         * @param exp    expression to loop over
         * @param d1     dimensions to start in
         * @param d2     dimensions to end in
         * @return  the list of statements of the innermost loop
         */
        public List<FStatement> createForLoops(List<FStatement> stmts, FExp exp, int d1, int d2) {
            FExp[] sizes = new FExp[d2 - d1];
            for (int i = d1; i < d2; i++)
                sizes[i-d1] = exp.size().createFExp(i);
            return createForLoops(stmts, sizes, d1);
        }
        
        /**
         * Creates nestled for loops over an expression, using the top layer of names.
         *  
         * Adds the outermost for loop to a list of statements.
         * 
         * @param stmts  list to add the created for statements to
         * @param exp    expression to loop over
         * @return  the list of statements of the innermost loop
         */
        public List<FStatement> createForLoops(List<FStatement> stmts, FExp exp) {
            return createForLoops(stmts, exp, exp.ndims());
        }
        
        public void createForLoops(List clauses, List inner, FExp exp) {
            List<FStatement> fsl = createForLoops(clauses, exp);
            fsl.addAll(inner);
        }
        
        /**
         * Creates a new FArraySubscripts with uses of the <code>d1</code> to <code>d2</code> names
         * in the top layer as subscripts. When out of names, adds 1s.
         */
        public FArraySubscripts createFArraySubscripts(int d1, int d2) {
            if (d1 < 0)
                throw new UnsupportedOperationException();
            FArraySubscripts fas = new FArraySubscripts();
            for (int i = d1; i < d2; ++i) {
                if (i < topLayer().length)
                    fas.addFSubscript(new FIdTempExp(new FIdUse(topLayer()[i])));
                else
                    fas.addFSubscript(new FIntegerLitExp(1));
            }
            return fas;
        }
        
        /**
         * Creates a new FArraySubscripts with uses of the <code>d</code> 
         * first names in the top layer as subscripts. When out of names, adds 1s.
         */
        public FArraySubscripts createFArraySubscripts(int d) {
            return createFArraySubscripts(0, d);
        }
        
        /**
         * Creates a new FArraySubscripts with uses of all the names in the top layer.
         */
        public FArraySubscripts createFArraySubscripts() {
            return createFArraySubscripts(topLayer().length);
        }
        
        /**
         * Creates a new FArraySubscripts with uses of the names in the top layer as subscripts.
         * 
         * @param name  the name of the expression to have subscripts.
         * @param d1    the first subscript integer to use.
         * @param d2    the first subscript integer not to use after d1.
         * @return  the expression using subscripts in top layer [d1, d2).
         */
        public FIdUseExp createUseWithSubscripts(String name, int d1, int d2) {
            FQName fqn;
            if (hasNames() && (d2 - d1) > 0)
                fqn = new FQNameFull(name, createFArraySubscripts(d1, d2));
            else
                fqn = new FQNameFull(name);
            return new FIdTempExp(new FIdUse(fqn));
        }
        
        /**
         * Creates a new FIdUseExp with the first </code>d</code> names in the top layer.
         */
        public FIdUseExp createUseWithSubscripts(String name, int d) {
            return createUseWithSubscripts(name, 0, d < topLayer().length ? d : topLayer().length);
        }
        
        /**
         * Creates a new FIdUseExp with all of the names in the top layer.
         */
        public FIdUseExp createUseWithSubscripts(String name) {
            return createUseWithSubscripts(name, topLayer().length);
        }
        
        public FExp[] createFExpArray() {
            if (!hasNames())
                return new FExp[0];
            FExp[] subs = new FExp[topLayer().length];
            int i = 0;
            for (String s : topLayer()) {
                subs[i++] = new FIdUseExp(s);
            }
            return subs;
        }
        
        /**
         * Creates a new ForNames with the top layer copied
         */
        public ForNames copySurface() {
            ForNames fn = new ForNames();
            if (names.size() > 0) {
                fn.addLayer(topLayer().length);
                for (String s : topLayer())
                    fn.add(s);
            }
            fn.last.add(last());
            return fn;
        }
    }
}
