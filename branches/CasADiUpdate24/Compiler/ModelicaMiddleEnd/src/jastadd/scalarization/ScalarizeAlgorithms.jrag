/*
    Copyright (C) 2016 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


aspect AlgorithmScalarization {
    
    public static void FStatement.scalarizeStmtList(Scalarizer.Algorithm s, List<FStatement> fromList) {
        for (FStatement stmt : fromList) {
            stmt.addSizeAsserts(s.getClauses());
            stmt.scalarize(s);
        }
    }
    
    public void FStatement.scalarize(Scalarizer.Algorithm s) {
        s.add(fullCopy());
    }
    
    @Override
    public void FAssignStmt.scalarize(Scalarizer.Algorithm s) {
        
        FAssignableExp left = getLeft();
        FExp right = getRight();
        
        if (scalarizedAsFFunctionCallStmt()) {
            // Special case, Function call stmt
            FFunctionCall call = (FFunctionCall) right;
            s.createScalarizedFunctionCallClause(left, call);
        } else {
            FType t = left.size().isUnknown() ? left.type() : right.type();
            if (extractTemp()) {
                s.addTempVar(this);
                FIdUseExp temp = getRight().tempExp(tempVarName());
                t.scalarizeAssignment(s, temp, right);
                right = temp;
            }
            t.scalarizeAssignment(s, left, right);
        }
    }
    
    
    syn boolean FAssignStmt.scalarizedAsFFunctionCallStmt() = 
            getRight().isNonVectorizedFunctionCall() && getLeft().type().isComposite() && 
            inFunction() && !getLeft().isSlice();
    
    syn boolean FExp.isNonVectorizedFunctionCall()          = false;
    eq InstFunctionCall.isNonVectorizedFunctionCall()       = true;
    eq InstVectorFunctionCall.isNonVectorizedFunctionCall() = false;
    eq FFunctionCall.isNonVectorizedFunctionCall()          = true;
    eq FVectorFunctionCall.isNonVectorizedFunctionCall()    = false;
    
    @Override
    public void FFunctionCallStmt.scalarize(Scalarizer.Algorithm s) {
        FFunctionCallStmt stmt = new FFunctionCallStmt();
        getCall().createArrayTemporaries(s);
        getLefts().createArrayTemporaries(s);
        s.add(stmt);
        s.setWriteBack(true);
        getLefts().createArrayTemporaries(s);
        s.setWriteBack(false);
        for (FFunctionCallLeft left : getLefts()) {
            stmt.addLeft(left.scalarize(s.map()));
        }
        stmt.setCall((FAbstractFunctionCall) getCall().scalarizeExp(s.map()));
    }
    
    @Override
    public void FIfWhenStmt.scalarize(Scalarizer.Algorithm s) {
        for (FIfWhenClause cl : getFIfWhenClauses()) {
            cl.getTest().createArrayTemporaries(s);
        }
        FIfWhenStmt stmt = createEmptyNode();
        for (FIfWhenClause cl : getFIfWhenClauses()) {
            cl.scalarize(s, stmt.getFIfWhenClauses());
        }
        scalarizeElse(s, stmt);
        s.add(stmt);
    }
    
    /**
     * Scalarize the else part of an if statement. Does nothing for when statements.
     */
    public void FIfWhenStmt.scalarizeElse(Scalarizer.Algorithm s, FIfWhenStmt stmt) { 
        
    }
    
    public void FIfStmt.scalarizeElse(Scalarizer.Algorithm s, FIfWhenStmt stmt) {
        FIfStmt ifstmt = (FIfStmt) stmt;
        FStatement.scalarizeStmtList(s.block(ifstmt.getElseStmtList()), getElseStmts());
    }
    
    /**
     * Scalarize the if or when clause.
     */
    public void FIfWhenClause.scalarize(Scalarizer.Algorithm s, List<FIfWhenClause> clauses) {
        FExp test = getTest().scalarize(s);
        List<FStatement> stmts = new List<FStatement>();
        clauses.add(createNode(test, stmts));
        FStatement.scalarizeStmtList(s.block(stmts), getFStatements());
    }
    
    @Override
    public void FForStmt.scalarize(Scalarizer.Algorithm s) {
        getIndex().createArrayTemporaries(s);
        FForStmt stmt = new FForStmt();
        stmt.setIndex(getIndex().scalarize(s.map()));
        FStatement.scalarizeStmtList(s.block(stmt.getForStmtList()), getForStmts());
        s.add(stmt);
    }
    
    @Override
    public void FWhileStmt.scalarize(Scalarizer.Algorithm s) {
        getTest().createArrayTemporaries(s);
        FWhileStmt stmt = new FWhileStmt();
        stmt.setTest(getTest().scalarize(s));
        Scalarizer.Algorithm sb = s.block(stmt.getWhileStmtList());
        FStatement.scalarizeStmtList(sb, getWhileStmts());
        sb.setWriteBack(true);
        getTest().createArrayTemporaries(sb);
        sb.setWriteBack(false);
        s.add(stmt);
    }
    
    @Override
    public void FInitArrayStmt.scalarize(Scalarizer.Algorithm s) {
        type().scalarizeInitArray(s, null);
        super.scalarize(s);
    }
    
    public void FType.scalarizeInitArray(Scalarizer.Algorithm s, ASTNode context) {
        setSize(getSize().scalarizeInitArray(s, context == null ? this : context));
    }
    
    public Size Size.scalarizeInitArray(Scalarizer.Algorithm s, ASTNode context) {
        return this;
    }
    
    @Override
    public Size MutableSize.scalarizeInitArray(Scalarizer.Algorithm s, ASTNode context) {
        MutableSize res = new MutableSize(ndims());
        for (int i = 0; i < exps.length; i++) {
            res.size[i] = size[i];
            if (exps[i] != null) {
                exps[i].createArrayTemporaries(s);
                res.exps[i] = exps[i].scalarize(s.map());
                res.exps[i].parent = context;
            }
        }
        return res;
    }
}

aspect AssignmentScalarization {
    /**
     * Scalarize an assignment and put the resulting statements in the list of statements. 
     */
    public void FType.scalarizeAssignment(Scalarizer.Algorithm s, FAssignableExp left, FExp right) {
        
        FExp expInAst = right.getParent() != null ? right : left;
        
        left.createArrayTemporaries(s);
        right.createArrayTemporaries(s);
        
        ForNames names = s.getNames();
        if (size().isUnknown()) {
            names.addLayer(ndims());
            names.fillLayer(expInAst);
        }
        
        if (size().isUnknown()) {
            left.addArrayUsesToIndexMap(s);
            right.addArrayUsesToIndexMap(s);
            List<FStatement> stmts = s.createForLoops(expInAst);
            s = s.block(stmts);
            names.removeLayer();
        }
        
        scalarizeAssignment_sub(s, left, right);
    }
    
    public void FType.scalarizeAssignment_sub(Scalarizer.Algorithm s, FAssignableExp left, FExp right) {
        if (size().isUnknown() || !isArray()) {
            scalarizeScalarAssignment(s, left, right);
        } else {
            scalarizeArrayAssignment(s, left, right);
        }
    }
    
    /**
     * Scalarize an array assignment of known size.
     */
    public void FType.scalarizeArrayAssignment(Scalarizer.Algorithm s, FAssignableExp left, FExp right) {
        Indices ind = size().isUnknown() ? right.indices() : indices();
        for (Index i : ind) {
            scalarizeScalarAssignment(s, (FAssignableExp) left.extractArrayCell(s.map(), i), right.extractArrayCell(s.map(), i));
        }
    }
    
    /**
     * Scalarize a scalar assignment
     */
    protected void FType.scalarizeScalarAssignment(Scalarizer.Algorithm s, FAssignableExp left, FExp right) {
        left = (FAssignableExp) left.scalarize(s.map());
        right = right.scalarize(s.map());
        s.add(new FAssignStmt(left,right));
    }
    
    protected void FRecordType.scalarizeScalarAssignment(Scalarizer.Algorithm s, FAssignableExp left, FExp right) {
        scalarRecordClauses(s, new FQNameEmpty(), left, right);
    }
}
