/*
    Copyright (C) 2015 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
import java.util.Collections;
import java.util.Iterator;
import org.jmodelica.util.ErrorCheckType;

aspect ErrorClasses {
	
	syn boolean ASTNode.isError() = false;

	eq BadDefinition.isError() = true;
	eq BadClassDecl.isError() = true;
	eq BadElement.isError() = true;
	eq BadArgument.isError() = true;
	eq BadStatement.isError() = true;
	
	public InstModification BadArgument.newInstModification() {
		return null;
	}
	
	public FStatement BadStatement.instantiateStatement() {
		return null;
	}
	
	
	// Make iterator empty to prevent traversials from throwing null pointer exceptions.
	
	public Iterator<ASTNode> BadDefinition.iterator() {
		return Collections.<ASTNode>emptyList().iterator();
	}
	
	public Iterator<ASTNode> BadClassDecl.iterator() {
		return Collections.<ASTNode>emptyList().iterator();
	}
	
	public Iterator<ASTNode> BadElement.iterator() {
		return Collections.<ASTNode>emptyList().iterator();
	}
	
	public Iterator<ASTNode> BadArgument.iterator() {
		return Collections.<ASTNode>emptyList().iterator();
	}
	
	public Iterator<ASTNode> BadStatement.iterator() {
		return Collections.<ASTNode>emptyList().iterator();
	}
	
	
	// Common information to save in bad nodes
	
	public class BadNodeInfo {
		
		private Problem problemToReport;
		private ASTNode node;
		
		public BadNodeInfo(ASTNode n) {
			node = n;
			problemToReport = null;
		}
		
		public void reportProblem(Problem p) {
			problemToReport = p;
		}

		public void collectErrors(ErrorCheckType checkType) {
			if (problemToReport != null) {
				// report problem (missing suupport in error handler
			}
		}

	}
	
	private BadNodeInfo BadDefinition.badNodeInfo = null;
	private BadNodeInfo BadClassDecl.badNodeInfo = null;
	private BadNodeInfo BadElement.badNodeInfo = null;
	private BadNodeInfo BadArgument.badNodeInfo = null;
	private BadNodeInfo BadStatement.badNodeInfo = null;
	
	public BadNodeInfo BadDefinition.badInfo() {
		if (badNodeInfo == null)
			badNodeInfo = new BadNodeInfo(this);
		return badNodeInfo;
	}
	
	public BadNodeInfo BadClassDecl.badInfo() {
		if (badNodeInfo == null)
			badNodeInfo = new BadNodeInfo(this);
		return badNodeInfo;
	}
	
	public BadNodeInfo BadElement.badInfo() {
		if (badNodeInfo == null)
			badNodeInfo = new BadNodeInfo(this);
		return badNodeInfo;
	}
	
	public BadNodeInfo BadArgument.badInfo() {
		if (badNodeInfo == null)
			badNodeInfo = new BadNodeInfo(this);
		return badNodeInfo;
	}
	
	public BadNodeInfo BadStatement.badInfo() {
		if (badNodeInfo == null)
			badNodeInfo = new BadNodeInfo(this);
		return badNodeInfo;
	}
	
	
	// Delegate error reporting to BadInfoNode
	
	public void BadDefinition.collectErrors(ErrorCheckType checkType) {
		if (badNodeInfo != null)
			badNodeInfo.collectErrors(checkType);
		super.collectErrors(checkType);
	}
	
	public void BadClassDecl.collectErrors(ErrorCheckType checkType) {
		if (badNodeInfo != null)
			badNodeInfo.collectErrors(checkType);
		super.collectErrors(checkType);
	}
	
	public void BadElement.collectErrors(ErrorCheckType checkType) {
		if (badNodeInfo != null)
			badNodeInfo.collectErrors(checkType);
		super.collectErrors(checkType);
	}
	
	public void BadArgument.collectErrors(ErrorCheckType checkType) {
		if (badNodeInfo != null)
			badNodeInfo.collectErrors(checkType);
		super.collectErrors(checkType);
	}
	
	public void BadStatement.collectErrors(ErrorCheckType checkType) {
		if (badNodeInfo != null)
			badNodeInfo.collectErrors(checkType);
		super.collectErrors(checkType);
	}

    public BadClassDecl.BadClassDecl(String name) {
        super(new IdDecl(name));
    }

}
