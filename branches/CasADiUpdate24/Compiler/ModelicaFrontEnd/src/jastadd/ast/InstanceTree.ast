/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

abstract InstNode : BaseNode ::= /InstComponentDecl*/ 
                                 /InstClassDecl*/ 
                                 /InstExtends*/ 
                                 /InstImport*/ 
                                 /RedeclaredInstClassDecl:InstClassDecl*/
                                 /FAbstractEquation*/ 
                                 /ElementInstModification:InstModification*/ 
                                 /FQName/;

DynamicOpt : Opt;

abstract InstBaseNode : InstNode;

abstract InstRoot : InstBaseNode;
InstProgramRoot : InstRoot ::= <Program:Program>
                               /UnknownInstClassDecl/
                               /UnknownInstComponentDecl/
                               /InstAnonymousClass:InstClassDecl*/ 
                               /InstPredefinedType:InstClassDecl*/ 
                               /InstBuiltInType:InstClassDecl*/   
                               /InstBuiltInFunction:InstClassDecl*/
                               /InstLibClassDecl:InstClassDecl*/
                               [Dummy:InstNode]                // Dummy node to prevent InstNode from being classified as root
                               [Dummy2:InstGeneratedInner]     // Dummy node to prevent InstGeneratedInner from being classified as root
                               [Dummy3:InstConstraining];      // Dummy node to prevent InstConstraining from being classified as root

abstract InstClassDecl: InstBaseNode ::= <ClassDecl:ClassDecl> /[ClassAnnotation:InstClassModification]/ /FunctionType:FType/;
abstract InstBaseClassDecl : InstClassDecl ::= [InstConstrainingClass] InstRestriction;
InstFullClassDecl        : InstBaseClassDecl ::= [InstExternal];
InstExtendClassDecl      : InstFullClassDecl;
abstract InstAbstractShortClassDecl : InstBaseClassDecl;
InstSimpleShortClassDecl : InstAbstractShortClassDecl ::= /Target:InstAccess/;
InstShortClassDecl       : InstAbstractShortClassDecl ::= [FArraySubscripts];
InstPrimitiveClassDecl   : InstFullClassDecl;
InstEnumClassDecl        : InstPrimitiveClassDecl;
InstBuiltInClassDecl     : InstClassDecl;
UnknownInstClassDecl     : InstFullClassDecl;
BadInstClassDecl         : InstFullClassDecl;

InstReplacingFullClassDecl        : InstFullClassDecl  ::= 
                                     <OriginalClassDecl:ClassDecl> 
                                     /OriginalInstClass:InstClassDecl/ 
                                     <InstClassRedeclare:InstRedeclareClassNode>;
InstReplacingShortClassDecl       : InstShortClassDecl ::= 
                                     <OriginalClassDecl:ClassDecl> 
                                     /OriginalInstClass:InstClassDecl/ 
                                     <InstClassRedeclare:InstRedeclareClassNode>;
InstReplacingSimpleShortClassDecl : InstSimpleShortClassDecl ::=
                                     <OriginalClassDecl:ClassDecl> 
                                     /OriginalInstClass:InstClassDecl/ 
                                     <InstClassRedeclare:InstRedeclareClassNode>;
InstReplacingPrimitiveClassDecl : InstReplacingFullClassDecl;

abstract InstRestriction : BaseNode;
InstModel               : InstRestriction;
InstBlock               : InstRestriction;
InstMClass              : InstRestriction;
InstConnector           : InstRestriction;
InstExpandableConnector : InstConnector;
InstMType               : InstRestriction;
InstMPackage            : InstRestriction;
InstFunction            : InstRestriction;
InstMRecord             : InstRestriction;
InstOperator            : InstRestriction;
InstOperatorFunction    : InstFunction;
InstOperatorRecord      : InstMRecord;

InstExternal     : BaseNode ::= <ExternalClause:ExternalClause> [FExternalLanguage] [InstExternalCall];
InstExternalCall : BaseNode ::= [ReturnVar:InstAccess] <Name> Arg:FExp*;

abstract InstImport : BaseNode ::= PackageName:InstAccess <ImportClause:ImportClause>;
InstImportQualified   : InstImport;
InstImportUnqualified : InstImport;
InstImportRename      : InstImport;

abstract InstConstraining : BaseNode         ::=  ClassName:InstAccess [InstClassModification] /InstNode:InstBaseNode/;
InstConstrainingClass     : InstConstraining ::= <BaseClassDecl:BaseClassDecl> <InstRedeclare:InstRedeclareClassNode>;
InstConstrainingComponent : InstConstraining ::= <ComponentDecl:ComponentDecl> <InstRedeclare:InstComponentRedeclare>;

// The class to expand may differ from the declared class of the component due to 
// redeclaration of classes.
abstract InstComponentDecl : InstBaseNode ::= ClassName:InstAccess 
                                              [LocalFArraySubscripts:FArraySubscripts] 
                                              <ComponentDecl:ComponentDecl> 
                                              [InstModification] 
                                              [InstConstrainingComponent] 
                                              /FArraySubscripts/ 
                                              [ConditionalAttribute:FExp]
                                              /[Annotation:InstClassModification]/
                                              /[ClassAnnotation:InstClassModification]/;
InstComposite                 : InstComponentDecl;
abstract InstAssignable       : InstComponentDecl ::= /BindingFExp:FExp/;
InstPrimitive                 : InstAssignable;
InstEnum                      : InstPrimitive;
InstRecord                    : InstAssignable;
InstBuiltIn                   : InstPrimitive;
InstEnumLiteral               : InstBuiltIn;
InstExternalObject            : InstPrimitive ::= /DestructorCall:FFunctionCallStmt/;
InstPartialFunction           : InstAssignable;
UnknownInstComponentDecl      : InstComponentDecl;
InstArrayComponentDecl        : InstComponentDecl ::= <Index:int>;
InstExpandableConnectorDecl   : InstComposite;
InstArrayExpandableConnector  : InstArrayComponentDecl;
InstExpandableConnectorMember : InstComponentDecl ::= <CopyOf:InstComponentDecl> <Name:String>;

InstReplacingComposite   : InstComposite ::= <OriginalDecl:ComponentDecl> 
                                             /OriginalInstComponent:InstComponentDecl/ 
                                             <InstComponentRedeclare:InstComponentRedeclare>;
InstReplacingRecord      : InstRecord    ::= <OriginalDecl:ComponentDecl>
                                             /OriginalInstComponent:InstComponentDecl/ 
                                             <InstComponentRedeclare:InstComponentRedeclare>;
InstReplacingPrimitive   : InstPrimitive ::= <OriginalDecl:ComponentDecl>
                                             /OriginalInstComponent:InstComponentDecl/ 
                                             <InstComponentRedeclare:InstComponentRedeclare>;
InstReplacingExpandableConnectorDecl : InstReplacingComposite;

InstCreateComponentDecl : InstComponentDecl ::= <LookupNode:InstLookupRedirectNode>;
InstCreateForIndexPrimitive : InstPrimitive ::= <LookupNode:InstLookupRedirectNode>;
InstCreateReplacingComponentDecl : InstCreateComponentDecl ::= <OriginalDecl:ComponentDecl> 
                                                               <InstComponentRedeclare:InstComponentRedeclare> 
                                                               <InstConstrainingRedeclare:InstComponentRedeclare>;

InstGeneratedInner : BaseNode ::= InstComponentDecl 
                                  <CopiedOuter:InstComponentDecl> 
                                  <MatchingNonInner:InstComponentDecl>;

InstExtends : InstNode ::=  ClassName:InstAccess <ExtendsClause:ExtendsClause>
                            /[ClassAnnotation:InstClassModification]/
                            /[ClassAnnotationExtends:InstClassModification]/;
InstNormalExtends : InstExtends ::= [InstClassModification];
InstExtendsShortClass : InstNormalExtends ::= <LookupNode:InstNode>;
InstInlineExtends     : InstNormalExtends;
InstReplacingExtendsShortClass : InstExtends ::= <InstExtendsShortClass:InstExtendsShortClass>;

// Accesses in the instance tree
abstract InstAccess : CommonAccess;
abstract InstNamedAccess : InstAccess ::= <ID>;
InstDot : InstAccess ::= InstAccess*;

InstClassAccess           : InstNamedAccess;
abstract InstScalarAccess : InstNamedAccess ::= /ExpandedSubscripts:FArraySubscripts/;
InstParseAccess           : InstScalarAccess;
InstAmbiguousAccess       : InstScalarAccess;
InstComponentAccess       : InstScalarAccess;
abstract InstArrayAccess  : InstNamedAccess ::= FArraySubscripts;
InstParseArrayAccess      : InstArrayAccess;
InstAmbiguousArrayAccess  : InstArrayAccess;
InstComponentArrayAccess  : InstArrayAccess;
InstGlobalAccess          : InstAccess ::= InstAccess;

InstForIndex : CommonForIndex ::= InstPrimitive;

InstForClauseE : FAbstractEquation ::= InstForIndex* FAbstractEquation*;
InstForStmt    : FStatement        ::= InstForIndex* ForStmt:FStatement*;

// An expression array subscript that defers name lookup to another subscript
FDeferExpSubscript : FExpSubscript ::= <Defer:FExpSubscript>;

// These nodes are used to create instance copies of modification trees intended for
// error checking.	
abstract InstModification : BaseNode ::= <Modification:Modification>;
InstCompleteModification : InstModification ::= InstClassModification [InstValueModification];
InstValueModification    : InstModification ::= /FExp/ 
                                                /InstRecordModification*/ 
                                                /InstArrayModification*/;
InstClassModification    : InstModification ::= InstArgument*;
//Virtual modification for member of record type modification.
abstract InstRecordModification : InstValueModification ::= <Name:String>;
InstValueRecordModification : InstRecordModification ::= <Value:FExp>;
InstDefaultRecordModification : InstRecordModification ::= <Arg:InstDefaultArgument>;
//Virtual modification for cell of array constant value modification.
InstArrayModification : InstValueModification ::= <Cell:FExp>;

abstract InstArgument            : InstModification      ::= <Each:boolean> <Final:boolean>;
abstract InstNamedModification   : InstArgument          ::= Name:InstAccess;
abstract InstElementModification : InstNamedModification ::= [InstModification] /[Annotation:InstClassModification]/;
abstract InstElementRedeclare    : InstNamedModification;
InstComponentModification : InstElementModification; 
InstClassRedeclare        : InstElementRedeclare ::= /InstClassDecl/;
InstComponentRedeclare    : InstElementRedeclare ::= /InstComponentDecl/;
