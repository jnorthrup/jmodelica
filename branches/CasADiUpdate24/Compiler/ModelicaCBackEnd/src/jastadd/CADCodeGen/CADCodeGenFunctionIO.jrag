/*
Copyright (C) 2016 Modelon AB

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect CADCodeGenFunctionIO {
    
    public class CADPrettyPrinter {
        
        private class ExecuteCodePrinter_var extends ExecuteCodePrinter {
            @Override
            public void printIO(FExp n, CodeStream str, String indent) {
                CADPrettyPrinter.this.printIOExec_var_CAD(n, str, indent);
            }
        }
        
        private class ExecuteCodePrinter_der extends ExecuteCodePrinter {
            @Override
            public void printIO(FExp n, CodeStream str, String indent) {
                CADPrettyPrinter.this.printIOExec_der_CAD(n, str, indent);
            }
        }
        
        public StepPrinter ExecStep_var  = new ExecuteCodePrinter_var();
        public StepPrinter ExecStep_der  = new ExecuteCodePrinter_der();
        
        @Override
        public void printIODecl(FExp n, CodeStream str, String indent) {
            n.genTempInputDecl_CAD(this, str, indent);
        }
        @Override
        public void printIOPre(FExp n, CodeStream str, String indent) {
            n.genTempInputs_CAD(this, str, indent);
        }
        @Override
        public void printIOExec(FExp n, CodeStream str, String indent) {
            throw new UnsupportedOperationException();
        }
        public void printIOExec_var_CAD(FExp n, CodeStream str, String indent) {
            n.genArgument_var_CAD(this, str, indent);
        }
        public void printIOExec_der_CAD(FExp n, CodeStream str, String indent) {
            n.genArgument_der_CAD(this, str, indent);
        }
    }
    
    public void FExp.genTempInputDecl_CAD(CodePrinter p, CodeStream str, String indent) {
        if (replaceWithTemp(false)) {
            printDecls_CAD(p, str, indent, tempName_var_CAD(), tempName_der_CAD());
        } else {
            genVarDecls_CAD(p, str, indent);
        }
    }
    
    public void FFunctionCall.genTempInputDecl_CAD(CodePrinter p, CodeStream str, String indent) {
        if (replaceWithTemp(false)) {
            printDecls_CAD(p, str, indent, tempName_var_CAD(), tempName_der_CAD());
            genVarDecls_CAD(p, str, indent);
        }
    }
    
    public void FExp.genTempInputs_CAD(CodePrinter p, CodeStream str, String indent) {
        if (replaceWithTemp(false)) {
            type().printInit_C(p, str, indent, tempName_var_CAD(), this);
            type().printInit_C(p, str, indent, tempName_der_CAD(), this);
            p.printTempInputAssigns(str, indent, this);
        }
    }
    
    @Override
    public void FFunctionCall.genTempInputs_CAD(CodePrinter p, CodeStream str, String indent) {
        type().printInit_C(p, str, indent, tempName_var_CAD(), this);
        type().printInit_C(p, str, indent, tempName_der_CAD(), this);
    }

    @Override
    public void FPartialFunctionCall.genTempInputs_CAD(CodePrinter p, CodeStream str, String indent) {
        if (myFCallable().isPartialFunction()) {
            p.printTempInputAssigns(str, indent, this);
            str.formatln("%sJMI_DYNAMIC_ADD(%s)", indent, tempName_var_CAD());
            str.formatln("%sJMI_DYNAMIC_ADD(%s)", indent, tempName_der_CAD());
        }
    }
    
    public void FExp.genArgument_var_CAD(CodePrinter p, CodeStream str, String indent) {
        if (replaceWithTemp(false)) {
            str.print(tempName_var_CAD());
        } else {
            genVar_CAD(p, str, indent);
        }
    }
    
    public void FExp.genArgument_der_CAD(CodePrinter p, CodeStream str, String indent) {
        if (replaceWithTemp(false)) {
            str.print(tempName_der_CAD());
        } else {
            genDer_CAD(p, str, indent);
        }
    }
    
    public void FExp.genTempInputCellAssigns_der_CAD(
            CodePrinter p, CodeStream str, String indent, String name) {
        str.print(indent + name + " = ");
        genDer_CAD(p, str, indent);
        str.print(";\n");
    }
    
    syn String FFunctionCallLeft.varName_CAD() {
        if (replaceWithTemp()) {
            return getFExp().tempName_var_CAD();
        }
        return ((FIdUseExp) getFExp()).getFIdUse().varName_CAD();
    }
    
    syn String FFunctionCallLeft.derName_CAD() {
        if (replaceWithTemp()) {
            return getFExp().tempName_der_CAD();
        }
        return ((FIdUseExp) getFExp()).getFIdUse().derName_CAD();
    }
    
    /**
     * Used when function calls are printed. It is used to  generate outputs for the function call and the  
     * arguments are written as references to be filled (if they are not arrays or records). 
     * If it does not contain any expression print NULL (for the case: (x,,y) = f(<ins>). 
     * 
     * @param str  the c-code is written to this stream 
     */
    public void FFunctionCallLeft.genArgument_var_CAD(CodeStream str) {
        if (hasFExp()) {
            if (!getFExp().isComposite())
                str.print("&");
            str.print(varName_CAD());
        } else {
            str.print("NULL");
        }
    }

    /**
     * Used when function calls are printed. It is used to generate derivative outputs for the function call and the  
     * arguments are written as references to be filled (if they are not arrays or records). 
     * If it does not contain any expression print NULL (for the case: (x,,y) = f(<ins>). 
     * 
     * @param str  the c-code is written to this stream 
     */
    public void FFunctionCallLeft.genArgument_der_CAD(CodeStream str) {
        if (hasFExp()) {
            if (!getFExp().isComposite())
                str.print("&");
            str.print(derName_CAD());
        } else {
            str.print("NULL");
        }
    }
    
    /**
     * Generates variable declarations for the left hand side in a function call. 
     * 
     * TODO: This method is a duplicate from c-codegen. Should be refactored!
     * TODO: Declare in genTempForFunc instead.
     * 
     * @param p       use CADPrettyPrinter for p.print to call prettyPrint_CAD
     * @param str     the c-code is written to this stream
     * @param indent  used to get a consistently formated c-code
     */
    @Override
    public void FFunctionCallLeft.genVarDecls_CAD(CodePrinter p, CodeStream str, String indent) {
        if (replaceWithTemp()) {
            getFExp().printDecls_CAD(p, str, indent, getFExp().tempName_var_CAD(), getFExp().tempName_der_CAD());
        }
    }
    
    @Override
    public void FFunctionCallLeft.genTempVars_CAD(CodePrinter p, CodeStream str, String indent) {
        if (replaceWithTemp()) {
            getFExp().type().printInit_C(p, str, indent, getFExp().tempName_var_CAD(), getFExp());
            getFExp().type().printInit_C(p, str, indent, getFExp().tempName_der_CAD(), getFExp());
        }
    }
    
}