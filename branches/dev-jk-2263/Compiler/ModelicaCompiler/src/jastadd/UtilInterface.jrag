aspect UtilInterface {
    
    private UtilInterface Root.utilInterface = null;
    
    public void Root.setUtilInterface(UtilInterface utilInterface) {
        if (this.utilInterface != null || utilInterface == null) {
            throw new UnsupportedOperationException();
        }
        this.utilInterface = utilInterface;
    }
    
    public UtilInterface Root.getUtilInterface() {
        return utilInterface;
    }
    
    
    /**
     * Provides easy access to non-ast utils via the AST root.
     */
    public class UtilInterface {
        
        /**
         * Registers interfacers when UtilInterface is created.
         */
        interface Registrant {
            Interfacer getInterfacer(UtilInterface uif);
        }
        
        /**
         * Hooks for different steps in the compilation. Can keep states as opposed to the 
         * CompilationHooks in ModelicaCompiler.
         */
        interface Interfacer {
            /**
             * Called when the UtilInterface is transferred between roots.
             * States need to be copied here.
             */
            void transfer(UtilInterface uif);
            
            /**
             * Called after model has been instantiated.
             */
            void modelInstantiated(UtilInterface uif, InstClassDecl icd);
            
            /**
             * Called at each transfer and on tearDown.
             */
            void clean();
            
            /**
             * Called at end of compilation.
             */
            void tearDown();
        }
        
        abstract class InterfacerImpl implements Interfacer {
            @Override
            public void transfer(UtilInterface uif) {}
            @Override
            public void modelInstantiated(UtilInterface uif, InstClassDecl icd) {}
            @Override
            public void clean() {}
            @Override
            public void tearDown() {}
        }
        
        private static LinkedList<Registrant> registrants = new LinkedList<>();
        private static Registrant addRegistrant(Registrant registrant) {
            registrants.add(registrant);
            return registrant;
        }
        
        private LinkedList<Interfacer> interfacers;
        
        private ModelicaCompiler mc;
        private OptionRegistry options;
        private IErrorHandler eh;
        private ExternalFunctionCache efc;
        private GUIDManager guidManager;
        private File compilationOutputPath;
        
        protected UtilInterface(ModelicaCompiler mc, OptionRegistry options, IErrorHandler eh, ExternalFunctionCache efc, File compilationOutputPath) {
            this.mc = mc;
            this.options = options;
            this.eh = eh;
            this.efc = efc;
            this.compilationOutputPath = compilationOutputPath;
            guidManager = new GUIDManager(ASTNode.vendorName(), options.getStringOption("compiler_version"));
            
            interfacers = new LinkedList<>();
            for (UtilInterface.Registrant registrant : registrants) {
                interfacers.add(registrant.getInterfacer(this));
            }
        }
        
        public ModelicaCompiler getModelicaCompiler() {
            return mc;
        }
        
        public OptionRegistry getOptionRegistry() {
            return options;
        }
        
        public IErrorHandler getErrorHandler() {
            return eh;
        }
        
        public ExternalFunctionCache getExternalFunctionCache() {
            return efc;
        }
        
        public GUIDManager getGuidManager() {
            return guidManager;
        }
        
        public File getCompilationOutputPath() {
            return compilationOutputPath;
        }
        
        public void setCompilationOutputPath(File compilationOutputPath) {
            this.compilationOutputPath = compilationOutputPath;
        }
    }
    
    UtilInterface ModelicaCompiler.createUtilInterface() {
        return UtilInterface.create(this);
    }
    
    public static UtilInterface UtilInterface.create(ModelicaCompiler mc) {
        return create(mc, mc.getOptions(), mc.getErrorHandler(), mc.getExternalFunctionCache(), null);
    }
    
    public static UtilInterface UtilInterface.create(UtilInterface other) {
        return create(other.getModelicaCompiler(), other.getOptionRegistry().copy(), 
                other.getErrorHandler(), other.getExternalFunctionCache(), other.getCompilationOutputPath());
    }
    
    public static UtilInterface UtilInterface.create(OptionRegistry options) {
        return create(null, options, new DefaultErrorHandler(), null, null);
    }
    
    public static UtilInterface UtilInterface.create(OptionRegistry options, IErrorHandler eh) {
        return create(null, options, eh, null, null);
    }
    
    private static UtilInterface UtilInterface.create(ModelicaCompiler mc, OptionRegistry options, 
            IErrorHandler eh, ExternalFunctionCache efc, File path) {
        return new UtilInterface(mc, options, eh, efc, path);
    }
    
    public void Root.transferRoot(Root other) {
        other.getUtilInterface().transferRoot(this);
    }
    
    public void UtilInterface.transferRoot(Root root) {
        clean();
        UtilInterface transferred = UtilInterface.create(this);
        transferred.interfacers = interfacers;
        for (Interfacer interfacer : transferred.interfacers) {
            interfacer.transfer(transferred);
        }
        root.setUtilInterface(transferred);
    }
    
    public void UtilInterface.tearDown() {
        clean();
        for (Interfacer interfacer : interfacers) {
            interfacer.tearDown();
        }
    }
    
    public void UtilInterface.clean() {
        ExternalFunctionCache efc = getExternalFunctionCache();
        if (efc != null) {
            efc.destroyProcesses();
        }
        for (Interfacer interfacer : interfacers) {
            interfacer.clean();
        }
    }
    
    public void UtilInterface.modelInstantiated(InstClassDecl icd) {
        for (Interfacer interfacer : interfacers) {
            interfacer.modelInstantiated(this, icd);
        }
    }
}
