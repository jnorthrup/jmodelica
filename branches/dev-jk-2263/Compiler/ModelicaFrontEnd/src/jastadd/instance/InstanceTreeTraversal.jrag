/*
    Copyright (C) 2019 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect InstanceTreeTraversal {
    
    /**
     * This collects all nodes in the subtree rooted at this node which are
     * assignable to the specificed class. Does not search the subtrees of any
     * collected nodes.
     */
    public final <Node extends ASTNode> void ASTNode.collectInstanceNodes(final Class<Node> clazz, final Collection<Node> result) {
        visitInstanceTree(new InstanceTreeVisitor() {
            @Override
            public boolean accept(ASTNode node) {
                if (clazz.isInstance(node)) {
                    result.add(clazz.cast(node));
                    return false;
                }
                return true;
            }
        });
    }
    
    // Java 8 note: Convert to a functional interface with a default method
    abstract class InstanceTreeVisitor {
        /**
         * Called for each visited node.
         * @return True if the visitor should traverse the subnodes of {@code node},
         *         false otherwise
         */
        public abstract boolean accept(ASTNode node);
        public final void acceptAndTraverse(ASTNode node) {
            if (accept(node)) {
                node.visitInstanceChildren(this);
            }
        }
    }
    
    /**
     * Traverses the subtree for this node, calling the method
     * {@link InstanceTreeVisitor#accept(ASTNode)} for each node. If
     * {@code accept()} returns false the subtree for that node is not visited.
     * Note: not all ntas for {@link InstNode} are visited.
     */
    public final void ASTNode.visitInstanceTree(InstanceTreeVisitor visitor) {
        visitor.acceptAndTraverse(this);
    }
    
    protected void ASTNode.visitInstanceChildren(InstanceTreeVisitor visitor) {
        for (T child : this) {
            child.visitInstanceTree(visitor);
        }
    }

    @Override
    protected void InstNode.visitInstanceChildren(InstanceTreeVisitor visitor) {
        super.visitInstanceChildren(visitor);
        getElementInstModifications().visitInstanceTree(visitor);
        getAnnotationExps().visitInstanceTree(visitor);
    }
    
    @Override
    protected void InstClassDecl.visitInstanceChildren(InstanceTreeVisitor visitor) {
        super.visitInstanceChildren(visitor);
        getInstImports().visitInstanceTree(visitor);
        getRedeclaredInstClassDecls().visitInstanceTree(visitor);
        getFAbstractEquations().visitInstanceTree(visitor);
        getInstComponentDecls().visitInstanceTree(visitor);
        getInstClassDecls().visitInstanceTree(visitor);
        getInstExtendss().visitInstanceTree(visitor);
        getClassAnnotationOpt().visitInstanceTree(visitor);
        getFunctionType().visitInstanceTree(visitor);
    }
    
    @Override
    protected void InstLibNode.visitInstanceChildren(InstanceTreeVisitor visitor) {
        getActualInstClass().visitInstanceTree(visitor);
    }
    
    @Override
    protected void InstSimpleShortClassDecl.visitInstanceChildren(InstanceTreeVisitor visitor) {
        getTarget().visitInstanceTree(visitor);
    }
    
    @Override
    protected void InstComponentDecl.visitInstanceChildren(InstanceTreeVisitor visitor) {
        super.visitInstanceChildren(visitor);
        getFArraySubscriptsOpt().visitInstanceTree(visitor);
        getAnnotationOpt().visitInstanceTree(visitor);
    }
    
    @Override
    protected void InstValueModification.visitInstanceChildren(InstanceTreeVisitor visitor) {
        super.visitInstanceChildren(visitor);
        getFExp().visitInstanceTree(visitor);
    }
    
    // TODO: rename either this or FClass.collectInstAccesses()
    /**
     * Collect all {@link InstAccess}es in the subtree for this node, including any
     * accesses inside the {@link FArraySubscripts} of an access. For composite
     * accesses only the topmost access is collected but subscripts are searched for
     * all parts.
     */
    public Collection<InstAccess> ASTNode.collectInstAccesses() {
        Collection<InstAccess> results = new ArrayList<>();
        collectInstanceNodes(InstAccess.class, results);
        Collection<FArraySubscripts> subscripts = new ArrayList<>();
        for (InstAccess access : results) {
            access.collectInstanceNodes(FArraySubscripts.class, subscripts);
        }
        for (FArraySubscripts fas : subscripts) {
            results.addAll(fas.collectInstAccesses());
        }
        return results;
    }
}