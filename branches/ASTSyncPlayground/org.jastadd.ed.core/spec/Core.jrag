
import org.jastadd.ed.core.model.node.IASTNode;

aspect Core {

	// ASTNode interaction interface

	ASTNode implements IASTNode;

	// ASTNode editor interaction interface
	/*
	ASTNode implements IEditorNode;
	
	public void ASTNode.fullFlush() {
		for (int i = 0; i < getNumChild(); i++) {
			getChild(i).fullFlush();
		}
		flushCache();
	}
	* */
	/*
	 * Default behavior for the replaceWith(IJenGenNode)
	 */ 
	 /*
	public void ASTNode.replaceWith(IJedGenNode node) {
		ASTNode child = (ASTNode)node;
		ASTNode parent = getParent();
		if (parent != null) {
			int index = parent.getIndexOfChild(this);
			parent.setChild(child, index);
		}
	}
	* */
	
	/*
	 * Default behavior of lookupNode(NodeKey.NodeIterator path)
	 */
	 /*
	public IJedGenNode ASTNode.lookupNode(NodeKey.PathIterator path) {
	
		System.out.println("\t--Arriving at node with key (" + nodeKey() + ")");
	
		// Make sure we're on the right path
		if (path.keyOnPath(nodeKey())) {
		
			// Move to the next node
			if (path.next()) {
			
				// We can move directly to the next node on the path
				if (path.hasIndex()) {
				
					int index = path.index();
					
					System.out.println("\t--Moving to indexed node (" + index + ")");
					
					// Extra index check
					if (index >= 0 && index < getNumChild()) { 
						return getChild(index).lookupNode(path);
					}
				} 
				
				// We have to check which of the child nodes that is on the path
				else {
				
					System.out.println("\t--Moving to node that need matching (" + nodeKey() + ")");
				
					for (int i = 0; i < getNumChild(); i++) {
					
						System.out.println("\t--Moving to node, trying child with index (" + i + ")");
						
						ASTNode child = getChild(i);
						IJedGenNode node = child.lookupNode(path);
						if (node != null) {
							return node;
						}
					}
				}
			}
			
			// No next node, we're at the end of the path -- this is the node
			else {
				return this;
			}	
		} else if (path.fullKeyOnPath(nodeKey())) {
		
			return this;
		}

		// We're not on the path		
		return null;
	}
	*/
		
	/* 
	 * Default implementation of flushAttributes() is to flush all attributes for all non-transformed children
	 */
	 /*
	public void ASTNode.flushAttributes() {
		flushCache();
    	for (int i = 0; i < getNumChild(); i++) {
      		if (getChildNoTransform(i) != null) {
        		getChildNoTransform(i).flushAttributes(); 
        	}
        }
	}
	*/

}
