import org.eclipse.swt.graphics.Image;
import org.jmodelica.icons.Icon;
import org.jmodelica.icons.Component;
import org.jmodelica.icons.exceptions.FailedConstructionException;
import org.jmodelica.icons.drawing.IconConstants.Context;
import org.jmodelica.ide.helpers.ImageLoader;
import org.jmodelica.icons.drawing.AWTIconDrawer;
import org.jmodelica.ide.helpers.SWTIconDrawer;
import java.awt.image.BufferedImage;

aspect ModelicaEclipseIcons
{
	
	public Image BaseNode.renderIcon(Icon icon) {
		if (icon.isEmpty()) 
			return defaultIcon();
		else
			return SWTIconDrawer.convertImage(new AWTIconDrawer(icon).getImage());
	}
	
	syn Image BaseNode.defaultIcon() = null;
	eq ClassDecl.defaultIcon() = ImageLoader.getFrequentImage(ImageLoader.GENERIC_CLASS_IMAGE);

	eq ClassDecl.contentOutlineImage()         = cachedIcon();
	eq ComponentDecl.contentOutlineImage()     = cachedIcon();
	eq InstClassDecl.contentOutlineImage()     = cachedIcon();
	eq InstComponentDecl.contentOutlineImage() = cachedIcon();
	
	syn boolean ASTNode.contentOutlineImageCalculated() = true;
	eq BaseNode.contentOutlineImageCalculated()         = myCachedIcon != null && myCachedIcon.iscurrent;
	
	public void ASTNode.updateCachedIcon() {}
	
	
   	// Add caching with delayed calculation for icons
	public class BaseNode {
		
		private CachedIcon myCachedIcon = null;
		
		private CachedIcon myCachedIcon() {
			if (myCachedIcon == null)
				myCachedIcon = new CachedIcon();
			return myCachedIcon;
		}
		
		public Image cachedIcon() {
			return myCachedIcon().icon;
		}
		
		public void updateCachedIcon() {
			myCachedIcon();
			try {
				myCachedIcon.update(renderIcon(icon()));
			} catch (Exception e) {
				// Make sure *something* is shown
				myCachedIcon.update(defaultIcon());
				e.printStackTrace();
			}
			myCachedIcon.iscurrent = true;
		}
		
		protected void disposeCachedIcon() {
			if (myCachedIcon != null)
				myCachedIcon.dispose();
		}

		private static class CachedIcon {
			public Image icon = null;
			public Image prev = null;
			public boolean iscurrent = false;
			
			public void update(Image i) {
				if (i != icon) {
					if (prev != null)
						prev = dispose(prev);
					prev = icon;
					icon = i;
				}
			}
			
			public Image transfer() {
				Image res = icon;
				icon = null;
				return res;
			}
			
			public void dispose() {
				icon = dispose(icon);
				prev = dispose(prev);
				iscurrent = false;
			}

			private Image dispose(Image img) {
				if (img != null) 
					img.dispose();
				return null;
			}
		}
		
	}

}