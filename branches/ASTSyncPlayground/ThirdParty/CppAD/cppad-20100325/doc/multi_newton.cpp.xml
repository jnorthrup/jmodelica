<?xml version='1.0'?>
<?xml-stylesheet type='text/xsl' href='pmathml.xsl'?>
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
<title>Multi-Threaded Newton's Method Main Program</title>
<meta name="description" id="description" content="Multi-Threaded Newton's Method Main Program"/>
<meta name="keywords" id="keywords" content=" Openmp example program "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_multi_newton.cpp_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="example_a11c.cpp.xml" target="_top">Prev</a>
</td><td><a href="multi_newton.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>ADFun</option>
<option>omp_max_thread</option>
<option>openmp_run.sh</option>
<option>multi_newton.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>ADFun-&gt;</option>
<option>Independent</option>
<option>FunConstruct</option>
<option>Dependent</option>
<option>abort_recording</option>
<option>seq_property</option>
<option>FunEval</option>
<option>Drivers</option>
<option>FunCheck</option>
<option>omp_max_thread</option>
<option>optimize</option>
<option>FunDeprecated</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>omp_max_thread-&gt;</option>
<option>openmp_run.sh</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>openmp_run.sh-&gt;</option>
<option>example_a11c.cpp</option>
<option>multi_newton.cpp</option>
<option>sum_i_inv.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>multi_newton.cpp-&gt;</option>
<option>multi_newton</option>
<option>multi_newton.hpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>n_thread</option>
<option>repeat</option>
<option>n_zero</option>
<option>n_grid</option>
<option>n_sum</option>
<option>Subroutines</option>
<option>Example Source</option>
</select>
</td>
</tr></table><br/>







<center><b><big><big>Multi-Threaded Newton's Method Main Program</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br/>
<code><font color="blue"><span style='white-space: nowrap'>multi_newton&#xA0;</span></font></code><i><span style='white-space: nowrap'>n_thread</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font></code><i><span style='white-space: nowrap'>repeat</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font></code><i><span style='white-space: nowrap'>n_zero</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font></code><i><span style='white-space: nowrap'>n_grid</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;</span></font></code><i><span style='white-space: nowrap'>n_sum</span></i>

<br/>
<br/>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br/>
Runs a timing test of the <a href="multi_newton.xml" target="_top"><span style='white-space: nowrap'>multi_newton</span></a>
 routine.
This routine uses Newton's method to determine if there is a zero of a 
function on each of a set of sub-intervals.
CppAD is used to calculate the derivatives required by Newton's method.
OpenMP is used to parallelize the calculation on the different sub-intervals.

<br/>
<br/>
<b><big><a name="n_thread" id="n_thread">n_thread</a></big></b>
<br/>
If the argument <i>n_thread</i> is equal to <code><font color="blue">automatic</font></code>, 
dynamic thread adjustment is used.
Otherwise, <i>n_thread</i> must be a positive number
specifying the number of OpenMP threads to use.

<br/>
<br/>
<b><big><a name="repeat" id="repeat">repeat</a></big></b>
<br/>
If the argument <i>repeat</i> is equal to <code><font color="blue">automatic</font></code>,
the number of times to repeat the calculation of the number of zeros
in total interval is automatically determined.
In this case, the rate of execution of the total solution is reported.
<code><span style='white-space: nowrap'><br/>
<br/>
</span></code>If the argument <i>repeat</i> is not equal to <i>automatic</i>,
it must be a positive integer.
In this case <i>repeat</i> determination of the number of times 
the calculation of the zeros in the total interval is repeated.
The rate of execution is not reported (it is assumed that the
program execution time is being calculated some other way).

<br/>
<br/>
<b><big><a name="n_zero" id="n_zero">n_zero</a></big></b>
<br/>
The argument <i>n_zero</i> is the actual number of zeros
that there should be in the test function, 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi>sin</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

.
It must be an integer greater than one.
The total interval searched  for zeros is 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">[</mo>
<mn>0</mn>
<mo stretchy="false">,</mo>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>n</mi>
<mo stretchy="false">_</mo>
<mi mathvariant='italic'>zero</mi>
<mo stretchy="false">-</mo>
<mn>1</mn>
<mo stretchy="false">)</mo>
<mi mathvariant='normal'>&#x003C0;</mi>
<mo stretchy="false">]</mo>
</mrow></math>

.

<br/>
<br/>
<b><big><a name="n_grid" id="n_grid">n_grid</a></big></b>
<br/>
The argument <i>n_grid</i>
specifies the number of sub-intervals to divide the total interval into.
It must an integer greater than zero
(should probably be greater than two times <i>n_zero</i>).

<br/>
<br/>
<b><big><a name="n_sum" id="n_sum">n_sum</a></big></b>
<br/>
The actual function that is used is 

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<mi mathvariant='italic'>f</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
<mo stretchy="false">=</mo>
<mfrac><mrow><mn>1</mn>
</mrow>
<mrow><mi mathvariant='italic'>n</mi>
<mo stretchy="false">_</mo>
<mi mathvariant='italic'>sum</mi>
</mrow>
</mfrac>
<munderover><mo displaystyle='true' largeop='true'>&#x02211;</mo>
<mrow><mi mathvariant='italic'>i</mi>
<mo stretchy="false">=</mo>
<mn>1</mn>
</mrow>
<mrow><mi mathvariant='italic'>n</mi>
<mo stretchy="false">_</mo>
<mi mathvariant='italic'>sum</mi>
</mrow>
</munderover>
<mi>sin</mi>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>x</mi>
<mo stretchy="false">)</mo>
</mrow></math>

where <i>n_sum</i> is a positive integer.
The larger the value of <i>n_sum</i>,
the more computation is required to calculate the function.

<br/>
<br/>
<b><big><a name="Subroutines" id="Subroutines">Subroutines</a></big></b>


<table><tr><td align='left'  valign='top'>

<a href="multi_newton.xml" target="_top">multi_newton</a></td><td>
Multi-Threaded Newton's Method Routine</td></tr>
<tr><td>

<a href="multi_newton.hpp.xml" target="_top">multi_newton.hpp</a></td><td>
OpenMP Multi-Threading Newton's Method Source Code</td></tr>
<tr><td>

</td></tr>
</table>
<br/>
<b><big><a name="Example Source" id="Example Source">Example Source</a></big></b>

<code><font color="blue">
<br/>
<pre style='display:inline'> 

# include &lt;cppad/cppad.hpp&gt;
# include &lt;cmath&gt;
# include &lt;cstring&gt;
# include &quot;multi_newton.hpp&quot;

# ifdef _OPENMP
# include &lt;omp.h&gt;
# endif


namespace { // empty namespace
	size_t n_sum;  // larger values make fun(x) take longer to calculate
        size_t n_zero; // number of zeros of fun(x) in the total interval
}

// A slow version of the sine function
CppAD::<a href="ad.xml" target="_top">AD</a>&lt;double&gt; fun(const CppAD::<a href="ad.xml" target="_top">AD</a>&lt;double&gt; &amp;x)
{	CppAD::<a href="ad.xml" target="_top">AD</a>&lt;double&gt; sum = 0.;
	size_t i;
	for(i = 0; i &lt; n_sum; i++)
		sum += sin(x);

	return sum / double(n_sum);
}

void test_once(CppAD::vector&lt;double&gt; &amp;xout, size_t n_grid)
{	assert( n_zero &gt; 1 );
	double pi      = 4. * std::atan(1.); 
	double xlow    = 0.;
	double xup     = (n_zero - 1) * pi;
	double epsilon = 1e-6;
	size_t max_itr = 20;

	multi_newton(
		xout    ,
		fun     ,
		n_grid  ,
		xlow    ,
		xup     ,
		epsilon ,
		max_itr
	);
	return;
}

void test_repeat(size_t size, size_t repeat)
{	size_t i;
	CppAD::vector&lt;double&gt; xout;
	for(i = 0; i &lt; repeat; i++)
		test_once(xout, size);
	return;
}

int main(int argc, char *argv[])
{
	using std::cout;
	using std::endl;
	using CppAD::vector;

	const char *usage = &quot;multi_newton n_thread repeat n_zero n_grid n_sum&quot;;
	if( argc != 6 )
	{	std::cerr &lt;&lt; usage &lt;&lt; endl;
		exit(1);
	}
	argv++;

	// n_thread command line argument
	int n_thread;
	if( std::strcmp(*argv, &quot;automatic&quot;) == 0 )
		n_thread = 0;
	else	n_thread = std::atoi(*argv);
	argv++;

	// repeat command line argument
	size_t repeat;
	if( std::strcmp(*argv, &quot;automatic&quot;) == 0 )
		repeat = 0;
	else
	{	assert( std::atoi(*argv) &gt; 0 );
		repeat = std::atoi(*argv);
	}
	argv++;

	// n_zero command line argument 
	assert( std::atoi(*argv) &gt; 1 );
	n_zero = std::atoi(*argv++);

	// n_grid command line argument
	assert( std::atoi(*argv) &gt; 0 );
	size_t n_grid = std::atoi(*argv++);
       
	// n_sum command line argument 
	assert( std::atoi(*argv) &gt; 0 );
	n_sum = std::atoi(*argv++);

	// minimum time for test (repeat until this much time)
	double time_min = 1.;

# ifdef _OPENMP
	if( n_thread &gt; 0 )
	{	omp_set_dynamic(0);            // off dynamic thread adjust
		omp_set_num_threads(n_thread); // set the number of threads 
	}
	// now determine the maximum number of threads
	n_thread = omp_get_max_threads();
	assert( n_thread &gt; 0 );
	
	// No tapes are currently active,
	// so we can inform CppAD of the maximum number of threads
	CppAD::<a href="ad.xml" target="_top">AD</a>&lt;double&gt;::omp_max_thread(size_t(n_thread));

	// inform the user of the maximum number of threads
	cout &lt;&lt; &quot;OpenMP: version = &quot;         &lt;&lt; _OPENMP;
	cout &lt;&lt; &quot;, max number of threads = &quot; &lt;&lt; n_thread &lt;&lt; endl;
# else
	cout &lt;&lt; &quot;_OPENMP is not defined, &quot;;
	cout &lt;&lt; &quot;running in single tread mode&quot; &lt;&lt; endl;
	n_thread = 1;
# endif
	// initialize flag
	bool ok = true;

	// sub-block so xout gets deallocated before call to CPPAD_TRACK_COUNT
	{	// Correctness check
		vector&lt;double&gt; xout;
		test_once(xout, n_grid);
		double epsilon = 1e-6;
		double pi      = 4. * std::atan(1.);
		ok            &amp;= (xout.size() == n_zero);
		size_t i       = 0;
		while( ok &amp; (i &lt; n_zero) )
		{	ok &amp;= std::fabs( xout[i] - pi * i) &lt;= 2 * epsilon;
			++i;
		}
	}
	if( repeat &gt; 0 )
	{	// run the calculation the requested number of time
		test_repeat(n_grid, repeat);
	}
	else
	{	// actually time the calculation	 

		// size of the one test case
		vector&lt;size_t&gt; size_vec(1);
		size_vec[0] = n_grid;

		// run the test case
		vector&lt;size_t&gt; rate_vec =
		CppAD::speed_test(test_repeat, size_vec, time_min);

		// report results
		cout &lt;&lt; &quot;n_grid           = &quot; &lt;&lt; size_vec[0] &lt;&lt; endl;
		cout &lt;&lt; &quot;repeats per sec  = &quot; &lt;&lt; rate_vec[0] &lt;&lt; endl;
	}
	// check all the threads for a CppAD memory leak
	if( CPPAD_TRACK_COUNT() != 0 )
	{	ok = false;
		cout &lt;&lt; &quot;Error: memory leak detected&quot; &lt;&lt; endl;
	}
	if( ok )
		cout &lt;&lt; &quot;Correctness Test Passed&quot; &lt;&lt; endl;
	else	cout &lt;&lt; &quot;Correctness Test Failed&quot; &lt;&lt; endl;

	return static_cast&lt;int&gt;( ! ok );
}
</pre>
</font></code>


<hr/>Input File: openmp/multi_newton.cpp

</body>
</html>
