#!/bin/bash

# Creates a dockerfile where the contents are based upon the given configs,
# it is a basic dockerfile used to set up an environment without having to
# have multiple dockerfiles checked in for multiple platforms.

BASE_TYPE=$1
INSTALL_BASE_DEPENDENCIES=$2
CONFIG=$3
USER_CONFIG=$4

RESET="\e[0m"
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[94m"


[[ -e "$CONFIG" ]] && source $CONFIG || echo "generate_dockerfile: No such config $CONFIG"
[[ -e "$USER_CONFIG" ]] && source $USER_CONFIG || echo "generate_dockerfile: No such user config $USER_CONFIG"
echo -e $YELLOW "\tgenerate_dockerfile: BASE_TYPE=${BASE_TYPE}" $RESET
# variables are sourced already in build system
# The X is just to allow empty strings
if [[ X"$BASE_TYPE" = X"PYFMI_BASE" ]]; then
cat <<EOF> $(dirname     "$0")/Dockerfile
# Automatically generated by generate_dockerfile.sh
ARG LINUX_DIST=${PLATFORM}
ARG DIST_VERSION=${DIST_VERSION}
ARG PYTHON_VERSION=${PYTHON_VERSION}
ARG BUILD_TARGET=${BUILD_TARGET}

# starting linux environment
FROM \$LINUX_DIST:\$DIST_VERSION
LABEL maintainer="Modelon AB"
RUN mkdir -p fmil && mkdir -p build_scripts
COPY ${PLATFORM}_${DIST_VERSION}/fmil_install /fmil
COPY build_environment/platforms/${PLATFORM}/*.sh build_scripts/
RUN if [ ${PLATFORM} = "ubuntu" ]; then apt-get update && apt-get install -y make gcc; else yum install -y make gcc; fi

RUN build_scripts/install_python.sh

# cleanup
RUN rm -rf build_scripts
EOF
#############################################
elif [[ X"$BASE_TYPE" = X"BASE" ]]; then
cat <<EOF> $(dirname     "$0")/Dockerfile
# Automatically generated by generate_dockerfile.sh
ARG LINUX_DIST=${PLATFORM}
ARG DIST_VERSION=${DIST_VERSION}
ARG PYTHON_VERSION=${PYTHON_VERSION}
ARG BUILD_TARGET=${BUILD_TARGET}

# starting linux environment
FROM \$LINUX_DIST:\$DIST_VERSION
LABEL maintainer="Modelon AB"

RUN ${INSTALL_BASE_DEPENDENCIES}

EOF
#############################################


elif [[ X"$BASE_TYPE" = X"ASSIMULO_BASE" ]]; then
cat <<EOF> $(dirname     "$0")/Dockerfile
# Automatically generated by generate_dockerfile.sh
ARG LINUX_DIST=${PLATFORM}
ARG DIST_VERSION=${DIST_VERSION}
ARG PYTHON_VERSION=${PYTHON_VERSION}
ARG BUILD_TARGET=${BUILD_TARGET}

# starting linux environment
FROM \$LINUX_DIST:\$DIST_VERSION
LABEL maintainer="Modelon AB"

COPY ${PLATFORM}_${DIST_VERSION}/sundials_install ${BUILD_DIR}/sundials_install
COPY ${PLATFORM}_${DIST_VERSION}/superlu_install ${BUILD_DIR}/superlu_install
COPY ${PLATFORM}_${DIST_VERSION}/blas_install ${BUILD_DIR}/blas_install
COPY ${PLATFORM}_${DIST_VERSION}/lapack_install ${BUILD_DIR}/lapack_install
COPY build_environment/platforms/${PLATFORM}/*.sh build_scripts/

RUN ${INSTALL_BASE_DEPENDENCIES}
RUN build_scripts/install_python${PYTHON_VERSION}.sh
RUN rm -rf build_scripts

EOF
############################################



elif [[ X"$BASE_TYPE" = X"assimulo_folder" ]] || [[ X"$BASE_TYPE" = X"assimulo_wheel" ]]; then
ASSIMULO_TYPE=$BASE_TYPE
cat <<EOF> $(dirname     "$0")/Dockerfile
# Automatically generated by generate_dockerfile.sh
ARG LINUX_DIST=${PLATFORM}
ARG DIST_VERSION=${DIST_VERSION}
ARG PYTHON_VERSION=${PYTHON_VERSION}
ARG BUILD_TARGET=${BUILD_TARGET}

# starting linux environment
FROM \$LINUX_DIST:\$DIST_VERSION
LABEL maintainer="Modelon AB"

COPY /${PLATFORM}_${DIST_VERSION}/${ASSIMULO_TYPE}/ /usr/bin/assimulo/
COPY build_environment/platforms/${PLATFORM}/*.sh build_scripts/
COPY external/build_externals/docker/platforms/${PLATFORM}/*.sh build_scripts/

RUN build_scripts/install_python${PYTHON_VERSION}.sh
RUN build_scripts/install_test_dependencies.sh
RUN cd /usr/bin/assimulo && mv *.whl Assimulo-1.0.0.-cp27-cp27mu-linux_x86_64.whl && pip install *.whl



RUN rm -rf build_scripts

EOF
############################################




else
cat <<EOF> $(dirname     "$0")/Dockerfile
# Automatically generated by generate_dockerfile.sh
ARG LINUX_DIST=${PLATFORM}
ARG DIST_VERSION=${DIST_VERSION}
ARG PYTHON_VERSION=${PYTHON_VERSION}
ARG BUILD_TARGET=${BUILD_TARGET}

# starting linux environment
FROM \$LINUX_DIST:\$DIST_VERSION
LABEL maintainer="Modelon AB"
#TODO add script to get rid of "if..."
RUN if [ ${PLATFORM} = "ubuntu" ]; then apt-get update && apt-get install -y make; else yum install -y make; fi

# cleanup
RUN echo "TODO: Add cleanup script"
EOF
fi


# 
#    Copyright (C) 2018 Modelon AB
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the Common Public License as published by
#    IBM, version 1.0 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY. See the Common Public License for more details.
#
#    You should have received a copy of the Common Public License
#    along with this program.  If not, see
#     <http://www.ibm.com/developerworks/library/os-cpl.html/>.
