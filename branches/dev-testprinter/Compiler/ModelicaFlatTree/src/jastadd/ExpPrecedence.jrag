import org.jmodelica.util.Precedence;

aspect ExpPrecedence {
    syn Precedence FExp.precedence() = Precedence.HIGHEST;
    syn Precedence Exp.precedence()  = Precedence.HIGHEST;
    eq FDotAddExp.precedence()       = Precedence.ADDITIVE;
    eq DotAddExp.precedence()        = Precedence.ADDITIVE;
    eq FDotDivExp.precedence()       = Precedence.MULTIPLICATIVE;
    eq DotDivExp.precedence()        = Precedence.MULTIPLICATIVE;
    eq FDotMulExp.precedence()       = Precedence.MULTIPLICATIVE;
    eq DotMulExp.precedence()        = Precedence.MULTIPLICATIVE;
    eq FDotPowExp.precedence()       = Precedence.EXPONENTIATION;
    eq DotPowExp.precedence()        = Precedence.EXPONENTIATION;
    eq FDotSubExp.precedence()       = Precedence.ADDITIVE;
    eq DotSubExp.precedence()        = Precedence.ADDITIVE;
    eq FAndExp.precedence()          = Precedence.LOGICAL_AND;
    eq AndExp.precedence()           = Precedence.LOGICAL_AND;
    eq FOrExp.precedence()           = Precedence.LOGICAL_OR;
    eq OrExp.precedence()            = Precedence.LOGICAL_OR;
    eq FRelExp.precedence()          = Precedence.RELATIONAL;
    eq EqExp.precedence()            = Precedence.RELATIONAL;
    eq GeqExp.precedence()           = Precedence.RELATIONAL;
    eq GtExp.precedence()            = Precedence.RELATIONAL;
    eq LeqExp.precedence()           = Precedence.RELATIONAL;
    eq LtExp.precedence()            = Precedence.RELATIONAL;
    eq NeqExp.precedence()           = Precedence.RELATIONAL;
    eq FIfExp.precedence()           = Precedence.CONDITIONAL;
    eq IfExp.precedence()            = Precedence.CONDITIONAL;
    eq FRangeExp.precedence()        = Precedence.ARRAY_RANGE;
    eq RangeExp.precedence()         = Precedence.ARRAY_RANGE;
    eq FNegExp.precedence()          = Precedence.ADDITIVE;
    eq NegExp.precedence()           = Precedence.ADDITIVE;
    eq FNotExp.precedence()          = Precedence.UNARY;
    eq NotExp.precedence()           = Precedence.UNARY;

    /**
     * The reason for using parent here is that this attribute is intended to be used by 
     * prettyPrint(), that is in turn used by toString(). Checking if our parent is null lets   
     * us use toString() on expressions that are not yet in the AST without getting a 
     * NullPointerException. This is useful e.g. when debugging. */
    syn Precedence FExp.parentPrecedence() = parent != null ? retrieveParentPrecedence() : Precedence.LOWEST;
    syn Precedence Exp.parentPrecedence()  = parent != null ? retrieveParentPrecedence() : Precedence.LOWEST;
    syn Precedence List.parentPrecedence() = parent != null ? retrieveParentPrecedence() : Precedence.LOWEST;
    syn Precedence Opt.parentPrecedence()  = parent != null ? retrieveParentPrecedence() : Precedence.LOWEST;
    
    inh Precedence FExp.retrieveParentPrecedence();
    inh Precedence Exp.retrieveParentPrecedence();
    inh Precedence List.retrieveParentPrecedence();
    inh Precedence Opt.retrieveParentPrecedence();
    eq FExp.getChild().retrieveParentPrecedence() {
        Precedence precedence = precedence();
        if (precedence == Precedence.HIGHEST)
            return Precedence.LOWEST;
        else
            return precedence;
    }
    eq Exp.getChild().retrieveParentPrecedence() {
        Precedence precedence = precedence();
        if (precedence == Precedence.HIGHEST)
            return Precedence.LOWEST;
        else
            return precedence;
    }
    eq List.getChild().retrieveParentPrecedence()    = parentPrecedence();
    eq Opt.getChild().retrieveParentPrecedence()     = parentPrecedence();
    eq ASTNode.getChild().retrieveParentPrecedence() = Precedence.LOWEST;
    
    /**
     * Used if precedence is equal for node and its parent.
     */
    syn boolean FExp.shouldHaveParenthesis() = parent != null ? retrieveShouldHaveParenthesis() : false;
    /**
     * Used if precedence is equal for node and its parent.
     */
    syn boolean Exp.shouldHaveParenthesis() = parent != null ? retrieveShouldHaveParenthesis() : false;

    inh boolean FExp.retrieveShouldHaveParenthesis();
    inh boolean Exp.retrieveShouldHaveParenthesis();
    eq BaseNode.getChild().retrieveShouldHaveParenthesis()  = false;
    eq FBinExp.getRight().retrieveShouldHaveParenthesis()   = true;
    eq BinExp.getRight().retrieveShouldHaveParenthesis()    = true;
    eq FDotPowExp.getLeft().retrieveShouldHaveParenthesis() = true;
    eq DotPowExp.getLeft().retrieveShouldHaveParenthesis()  = true;
    eq FNegExp.getFExp().retrieveShouldHaveParenthesis()    = true;
    eq NegExp.getExp().retrieveShouldHaveParenthesis()      = true;

    /**
     * Returns true if this exp should add parenthesis given a certain precedence.
     */
    syn boolean FExp.addParenthesis(Precedence parentPrecedence) =
            precedence().needParenthesis(parentPrecedence, shouldHaveParenthesis());

    /**
     * Returns true if this exp should add parenthesis given a certain precedence.
     */
    syn boolean Exp.addParenthesis(Precedence parentPrecedence) =
            precedence().needParenthesis(parentPrecedence, shouldHaveParenthesis());
}