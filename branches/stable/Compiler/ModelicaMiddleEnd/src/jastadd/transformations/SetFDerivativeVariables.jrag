/*
    Copyright (C) 2009-2017 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect SetFDerivativeVariables {

    public static final SimpleProblemProducer ASTNode.DIFFERENTIATED_DISCRETE_VARIABLE =
            new SimpleErrorProducer("DIFFERENTIATED_DISCRETE_VARIABLE", ProblemKind.SEMANTIC,
                    "Unable to differentiate the variable %s which is declared or infered to be discrete");
	
    public class FClass {
        
        public setFDerivativeVariables setFDerivativeVariables = new setFDerivativeVariables();
        
        /**
         * Remake all FDerivativeVariables.
         */
        public class setFDerivativeVariables extends Transformation {
            protected Set<FVariable> variablesToVisit() {
                return new LinkedHashSet<FVariable>(differentiatedRealVariablesFilteredSet());
            }
            
            public void perform() {
                ArrayList<FVariable> l = new ArrayList<FVariable>();
                for (FVariable fv : getFVariables()) {
                    if (!fv.isDerivativeVariable()) {
                        l.add(fv);
                    }
                }
                for (FVariable fv : variablesToVisit()) {
                    if (fv.isDiscrete()) {
                        DIFFERENTIATED_DISCRETE_VARIABLE.invoke(fv, fv.name());
                    }
                    l.add(fv.createFDerivativeVariable());
                }
                setFVariableList(new List<FVariable>(l));
                root().flushAllRecursive();
                breakOnErrors();
            }
        }
        
        /**
         * Used by index reduction when removing derivatives of state select
         * prefer variables.
         */
        private Set<FVariable> ssPreferVars = null;
        
        /**
         * Add derivative variables to the list of FVariables.
         * Derivative variable is added for a variable of either of the following is true:
         *  - Occurres differentiated
         *  - Have StateSelect always or prefer
         */
        public class setFDerivativeVariablesPreBLT extends setFDerivativeVariables {
            @Override
            protected Set<FVariable> variablesToVisit() {
                ssPreferVars = new HashSet<FVariable>();
                Set<FVariable> fvsToVisit = super.variablesToVisit();
                boolean indexReductionActive = myOptions().getBooleanOption("index_reduction");
                for (FVariable fv : variables()) {
                    if (!fv.isReal()) {
                        continue;
                    }
                    FRealVariable.StateSelect ss = ((FRealVariable)fv).stateSelectAttribute();
                    if (!(ss == FRealVariable.StateSelect.ALWAYS
                            || ss == FRealVariable.StateSelect.PREFER && indexReductionActive)) {
                        continue;
                    }
                    if (ss == FRealVariable.StateSelect.PREFER && !fvsToVisit.contains(fv)) {
                        ssPreferVars.add(fv);
                    }
                    fvsToVisit.add(fv);
                }
                return fvsToVisit;
            }
        }
    }

    public void FClass.addFDerivativeVariables(Collection<FVariable> fvs) {
        for (FVariable fv : fvs)
            addFVariable(fv);
        root().flushAllRecursive();
    }

	public FAbstractDerivativeVariable FVariable.createFDerivativeVariable() {
	    throw new UnsupportedOperationException("Trying to create a derivative variable from the non real variable " + name() + "! Java class type: '" + getClass().getSimpleName() + "'");
	}

    @Override
    public FAbstractDerivativeVariable FRealVariable.createFDerivativeVariable() {
        FAbstractDerivativeVariable fdv;
        if (isDynamicState()) {
            FDynamicDerivativeVariable var = new FDynamicDerivativeVariable();
            var.setSet(dynamicStateSet());
            fdv = var;
        } else {
            fdv = new FDerivativeVariable();
        }
        fdv.setVisibilityType(getVisibilityType());
        fdv.setTypePrefixVariability(getTypePrefixVariability());
        fdv.setTypePrefixInputOutput(TypePrefixInputOutput.NONE);
        fdv.setFAccess(getFAccess().fullCopy());
        fdv.setOrder(order() + 1);
        fdv.setMeIntegrated(this);
        this.setMeDifferentiated(fdv);
        fdv = dynamicVariable(fdv);
        FAttribute ssAttr = findAttributeLocal(FAttribute.STATE_SELECT);
        if (ssAttr != null) {
            StateSelect ss = stateSelectAttribute();
            if (ss == StateSelect.NEVER || ss == StateSelect.AVOID)
                fdv.addFAttribute(ssAttr.fullCopy());
        }
        return fdv;
    }

}
