$Id: whats_new_10.omh 1662 2010-03-11 18:31:11Z bradbell $
/* --------------------------------------------------------------------------
CppAD: C++ Algorithmic Differentiation: Copyright (C) 2003-10 Bradley M. Bell

CppAD is distributed under multiple licenses. This distribution is under
the terms of the 
                    Common Public License Version 1.0.

A copy of this license is included in the COPYING file of this distribution.
Please visit http://www.coin-or.org/CppAD/ for information on other licenses.
-------------------------------------------------------------------------- */

$begin whats_new_10$$
$spell
	checkpointing
	sizeof
	libcppad_ipopt.a
	Microsoft
	Lagragian
	iostream
	obj_value
	std::cout
	endl
	gcc
	retape
	hpp
	ifdef
	nlp
	ipopt_cppad/src
	CppAD
$$

$section Changes and Additions to CppAD During 2010$$

$head Introduction$$
This section contains a list of the changes to CppAD during 2010
(in reverse order by date).
The purpose of this section is to
assist you in learning about changes between various versions of CppAD.

$head 03-11$$
The old $cref/reverse_any/$$ example was moved to $cref/reverse_three.cpp/$$,
the old checkpoint example is now the general case reverse example,
and a better $cref/checkpointing/checkpoint.cpp/$$ example was created.

$head 03-10$$
The $cref/optimize/$$ routine would mistakenly remove some
expressions that depended on the independent variables and that 
affected the result of certain $cref/CondExp/$$ operations.
This has been fixed. 

$head 03-09$$
Extend $cref/reverse_any/$$ so that it can be used for 
$cref/checkpointing/checkpoint.cpp/$$; i.e.,
splitting reverse mode calculations at function composition points.


$head 03-03$$
Fixed a bug in handling
$cref/vector of boolean/glossary/Sparsity Pattern/Vector of Boolean/$$ 
sparsity patterns.
(when the number of elements per set was a multiple of
$code sizeof(size_t))$$.

$head 02-11$$
The $code speed$$ directory has been reorganized and the
common part of the $cref/link functions/speed_main/Link Functions/$$,
as well as the $cref/microsoft_timer/$$,
have been moved to the subdirectory $code speed/src$$
where a library is built.

$head 02-08$$
A bug was introduced in the $cref/02-05/whats_new_10/02-05/$$
change whereby the $code make$$ command tried to build the
$code libcppad_ipopt.a$$ library even if $code IPOPT_DIR$$ was
not specified on the $cref/configure/InstallUnix/Configure/$$ command line.
This has been fixed.

$head 02-06$$
The Microsoft project files for the speed tests were extended 
so that the worked properly for the Release (as well as the Debug)
configuration, see
$cref/cppad speed test/InstallWindows/CppAD Speed Test/$$,
$cref/double speed test/InstallWindows/Double Speed Test/$$, and
$cref/speed utility example/InstallWindows/Speed Utility Example/$$.
(This required conversion from Visual Studio Version 7 to Visual Studio 2008
format.)
$pre

$$
Add an automated check for $cref/optimize/$$ bug 
fixed on $code 02-05$$. 
(Automatic checking for $cref/PrintFor/$$ bug was added on $code 02-05$$.)

$head 02-05$$
$list number$$
Simplify running all the tests by adding the
$cref/make test/InstallUnix/make test/$$ command.
$lnext
Simplify the $cref/configure/InstallUnix/Configure/$$ command by removing
need for:
$code --with-Speed$$,
$code --with-Introduction$$,
$code --with-Example$$,
$code --with-TestMore$$,
and $code --with-PrintFor$$.
$lnext
Add files that were missing in the Microsoft Visual Studio
projects; see $cref/InstallWindows/$$.
$lnext
Fix two significant bugs. One in the $cref/optimize/$$ command
and the other in the $cref/PrintFor/$$ command.
$lend

$head 02-03$$
Fix a mistakes in the test $cref/BenderQuad.cpp/$$.
In addition, the $cref/optimize/$$ routine was used to reduce the 
tape before doing the calculations.
$pre

$$
The routine $cref/opt_val_hes/$$ was added as an alternative to
$cref/BenderQuad/$$.

$head 01-26$$
Another speed improvement was made to $cref/cppad_ipopt_nlp/$$.
To be specific, the Lagragian multipliers where checked and components
that were zero were excluded form the Hessian evaluation.

$head 01-24$$
It appears that in $cref/cppad_ipopt_nlp/$$, when $code retape[k]$$ was true,
and $code L[k] > 1$$, it was possible to use the wrong operation sequence
in the calculations (though a test case that demonstrated this could not be 
produced). This is because the argument value to $latex r_k (u)$$ depends
on the value of $latex \ell$$ in the expression
$latex \[
	r_k \circ [ J_{k, \ell} \otimes n ] (x)
\] $$
(even when the value of $latex x$$ does not change).
$pre

$$
There was a bug in the $cref/ipopt_ode_check.cpp/$$ program,
for a long time,  that did not show up until now. Basically,
the check had code of the was using an undefined value.
This has been fixed.

$head 01-23$$
Improve the sparsity patterns and reduce the amount of memory
required for large sparse problems using $cref/cppad_ipopt_nlp/$$.
The speed test $code cppad_ipopt/speed$$ showed significant improvement.


$head 01-20$$
We plan to split up the 
$code ipopt_cppad/src/ipopt_cppad_nlp.hpp$$ include file.
In preparation,
the example $code ipopt_cppad$$ has been changed to $code cppad_ipopt$$.
This will facilitate using $code CPPAD_IPOPT_*$$ for the
$code # ifdef$$ commands in the new include files
(note that they must begin with $code CPPAD$$).


$head 01-18$$
The $code ipopt_cppad$$ subdirectory of the distribution
has been split into an $code src$$, $code example$$, and $code speed$$
subdirectories.
The $code example$$ ($code speed$$)
subdirectory is where one builds the $cref/ipopt_cppad_nlp/cppad_ipopt_nlp/$$ examples
($cref%speed tests%ipopt_ode_speed.cpp%$$).

$head 01-04$$
The following items have been fulfilled and
hence were removed for the $cref/WishList/$$:
$list number$$
If an exception occurs before the call to the corresponding
$xref/ADFun/$$ constructor or $cref/Dependent/$$, 
the tape recording can be stopped using $cref/abort_recording/$$.

$lnext
A speed test for $cref/ipopt_cppad_nlp/cppad_ipopt_nlp/$$ was added; see
$cref/ipopt_ode_speed.cpp/$$.

$lnext
The $cref/optimize/$$ command uses hash coding to check
when an expression is already in the tape and can be reused.

$lnext
The $cref/optimize/$$ command removes operations that
are not used by any of the dependent variables.

$lnext
The $cref/ad_in_c.cpp/$$ example demonstrates how to connect
CppAD to an arbitrary scripting language.

$lnext
The vector of sets option has been added to sparsity calculations; 
see $cref/sparsity pattern/glossary/Sparsity Pattern/$$.

$lend


$end
