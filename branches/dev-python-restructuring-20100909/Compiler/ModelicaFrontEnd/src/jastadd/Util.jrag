/*
    Copyright (C) 2009 Modelon AB

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


import java.util.HashSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.NoSuchElementException;
import java.util.logging.Level;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

aspect RootAccess {
    
    syn String SourceRoot.language() = "Modelica";
    
    inh Root ASTNode.retrieveRoot();
    eq SourceRoot.getChild().retrieveRoot() = this;
    eq FlatRoot.getChild().retrieveRoot()   = this;
    syn Root ASTNode.root() = retrieveRoot();
    syn lazy Root BaseNode.root() = retrieveRoot();
    eq Root.root() = this;
    
    // TODO: When uses of HashSet has been generalised to Set, replace with Collections.emptySet()
    public static final HashSet ASTNode.EMPTY_HASH_SET = new HashSet(2);
    syn HashSet ASTNode.emptyHashSet() = EMPTY_HASH_SET;
    
    // TODO: When uses of ArrayList has been generalised to List, replace with Collections.emptyList()
    public static final ArrayList ASTNode.EMPTY_ARRAY_LIST = new ArrayList(0);
    syn ArrayList ASTNode.emptyArrayList() = EMPTY_ARRAY_LIST;
    
    public boolean ASTNode.hasRoot() { return (getParent() == null) ? false : getParent().hasRoot(); }
    public boolean Root.hasRoot()    { return true; }
    
    public FClass ParserHandler.newFClass() {
        return new FClass();
    }
    
    /*
     * The Parser methods are introduced here so that they can be refined in
     * extensions where other parsers are used.
     */
    
    public SourceRoot ParserHandler.parseFile(String fileName) 
       throws ParserException, beaver.Parser.Exception, FileNotFoundException, IOException{
        return parseModelicaFile(fileName);
    }
    
    public SourceRoot ParserHandler.parseString(String str, String fileName) 
       throws ParserException, beaver.Parser.Exception, FileNotFoundException, IOException{
        return parseModelicaString(str,fileName);
    }
    
    public Exp ParserHandler.parseExpString(String str)
       throws ParserException, beaver.Parser.Exception, FileNotFoundException, IOException{
        return parseModelicaExpString(str);
    }
    
    public SourceRoot ParserHandler.parseModelicaFile(String fileName) 
       throws ParserException, beaver.Parser.Exception, FileNotFoundException, IOException{
        SourceRoot sr = null;
        Reader reader = new FileReader(fileName);
        org.jmodelica.modelica.parser.ModelicaScanner scanner = 
            new org.jmodelica.modelica.parser.ModelicaScanner(new BufferedReader(reader));
        org.jmodelica.modelica.parser.ModelicaParser parser = new org.jmodelica.modelica.parser.ModelicaParser();
        parser.setLineBreakMap(scanner.getLineBreakMap());
        sr = (SourceRoot)parser.parse(scanner);
        sr.setFileName(fileName);
        reader.close();
        return sr;
    }
    
    public SourceRoot ParserHandler.parseModelicaString(String str, String fileName) 
       throws ParserException, beaver.Parser.Exception, FileNotFoundException, IOException{
        SourceRoot sr = null;
        org.jmodelica.modelica.parser.ModelicaScanner scanner = 
            new org.jmodelica.modelica.parser.ModelicaScanner(new StringReader(str));
        org.jmodelica.modelica.parser.ModelicaParser parser = 
            new org.jmodelica.modelica.parser.ModelicaParser();
        parser.setLineBreakMap(scanner.getLineBreakMap());
        sr = (SourceRoot)parser.parse(scanner);
        sr.setFileName(fileName);
        return sr;
    }
    
    public Exp ParserHandler.parseModelicaExpString(String str)
       throws ParserException, beaver.Parser.Exception, FileNotFoundException, IOException{
        Exp exp = null;
        org.jmodelica.modelica.parser.ModelicaScanner scanner = 
            new org.jmodelica.modelica.parser.ModelicaScanner(new StringReader(str));
        org.jmodelica.modelica.parser.ModelicaParser parser = 
            new org.jmodelica.modelica.parser.ModelicaParser();
        exp = (Exp)parser.parse(scanner,org.jmodelica.modelica.parser.ModelicaParser.AltGoals.exp);
        //log.debug("ModelicaParser.parseExpString: "+str);
        //exp.dumpTreeBasic("");
        return exp;
    }
    
}

aspect Logging {

    /**
     * \brief Base class for logging messages from the tree.
     * 
     * This implementation discards all messages.
     */
    public class ModelicaLogger {
        /**
         * \brief Log <code>message</code> on log level <code>level</code>.
         * 
         * This implementation discards all messages.
         * 
         * Override this method to provide log facilities.
         */
        public void log(Level level, String message) {}
        
        /**
         * \brief Get the current log level.
         * 
         * This implementation returns null.
         * 
         * Override this method to provide log facilities.
         */
        public Level getLevel() { return null; }
        
        /**
         * \brief Set the current log level.
         * 
         * This implementation does nothing.
         * 
         * Override this method to provide log facilities.
         */
        public void setLevel(Level lv) { }

        public void debug(String message)   { log(Level.FINE,    message); }
        public void info(String message)    { log(Level.INFO,    message); }
        public void warning(String message) { log(Level.WARNING, message); }
        public void error(String message)   { log(Level.SEVERE,  message); }
        
        /**
         * Log stack trace of exception on debug log level.
         */
        public void stackTrace(Throwable e) {
    		StringWriter str = new StringWriter();
    		PrintWriter print = new PrintWriter(str);
    		e.printStackTrace(print);
    		debug(str.toString());
        }
    }

    public static ModelicaLogger ASTNode.log = new ModelicaLogger();
    
}

aspect NodeMethods {
	  
    public class ASTNode{
        /**
         * \brief Copies the member variables defining the location within 
         *        the source to another node.
         *        
         * @param n  the node to copy the location to
         * @return   the node given as <code>n</code>, for convenience
         */
        public <N extends ASTNode> N copyLocationTo(N n) {
      	    n.setLocation(this, this);
            return n;
        }
    }
    
    /**
     * \brief Sets the member variables defining the location of the node within 
     *        the source to values copied another node.
     */
    public void ASTNode.setLocation(ASTNode node) {
  	    setLocation(node, node);
    }
    
    /**
     * \brief Sets the member variables defining the location of the node within 
     *        the source to values copied from two other nodes.
     * 
     * @param start  the node to copy the <code>start</code> member from.
     * @param end    the node to copy the <code>end</code> member from.
     */
    public void ASTNode.setLocation(ASTNode start, ASTNode end) {
        this.start = start.start;
        this.end = end.end;
    }
    
    /**
     * \brief Sets the member variables defining the location of the node within 
     *        the source to values copied from two other nodes.
     * 
     * @param start  the node to copy the <code>start</code> and <code>fName</code> 
     *               members from.
     * @param end    the node to copy the <code>end</code> member from.
     */
    public void BaseNode.setLocation(ASTNode start, ASTNode end) {
        super.setLocation(start, end);
        fName = start.fileName();
    }
    
    /**
     * \brief Sets the member variables defining the location of the node within 
     *        the source to values copied another node, that might not be in a 
     *        proper AST.
     */
    public void ASTNode.setLocationNoTree(ASTNode node) {
  	    setLocationNoTree(node, node);
    }
    
    /**
     * \brief Sets the member variables defining the location of the node within 
     *        the source to values copied from two other nodes, that might not be 
     *        in a proper AST.
     * 
     * @param start  the node to copy the <code>start</code> member from.
     * @param end    the node to copy the <code>end</code> member from.
     */
    public void ASTNode.setLocationNoTree(ASTNode start, ASTNode end) {
        setLocation(start, end);
    }
    
    /**
     * \brief Sets the member variables defining the location of the node within 
     *        the source to values copied from two other nodes, that might not be 
     *        in a proper AST.
     * 
     * @param start  the node to copy the <code>start</code> and <code>fName</code> 
     *               members from.
     * @param end    the node to copy the <code>end</code> member from.
     */
    public void BaseNode.setLocationNoTree(ASTNode start, ASTNode end) {
        super.setLocation(start, end);
        if (start instanceof BaseNode)
        	fName = ((BaseNode) start).fName;
    }
    
    public int ASTNode.beginLine() { return getLine(getStart()); }
    public int ASTNode.beginColumn() { return getColumn(getStart()); }

    public String ASTNode.getNodeName() {
        return dump();
    }
    
    public String IdDecl.getNodeName() {
        return dump() + ": '" + getID() + "'";
    }

    public String Access.getNodeName() {
        return dump() + ": '" + getID() + "'";
    }
    
    public String RealLitExp.getNodeName() {
        return dump() + ": " + getUNSIGNED_NUMBER();
    }
    
    public String InstComponentDecl.getNodeName() {
        return dump() + ": '" + getComponentDecl().getClassName().qualifiedName() + " " + getComponentDecl().getName().getID() + "'";
    }
    
    /**
     * \brief Creates a new ArrayList containing all the elements in this list, in the same order.
     */
    public ArrayList<T> List.toArrayList() {
        ArrayList<T> l = new ArrayList<T>(getNumChild());
        for (T e : this)
            l.add(e);
        return l;
    }
    
    /**
     * \brief Replace <code>from</code> with <code>to</code>.
     * 
     * Search through children after <code>from</code>. If it is found, 
     * replace it with <code>to</code> and return <code>true</code>.
     * Comparisons are done with ==, not with equals().
     */
    public boolean List.replaceChild(T oldNode, T newNode) {
    	int n = getNumChildNoTransform();
        for (int i = 0; i < n; i++) {
            if (getChildNoTransform(i) == oldNode) {
                setChild(newNode, i);
                return true;
            }
        }
        return false;
    }
    
    /**
     * \brief Return a copy of node that is not in any tree.
     * 
     * Returns <code>this</code> if node has no parent, <code>fullCopy()</code> otherwise.
     */
    public ASTNode ASTNode.unboundCopy() {
        return (parent == null) ? this : fullCopy();
    }
    
    /**
     * \brief Returns an iterable, that has an iterator that iterates over all direct FExp children.
     * 
     * The iterator passes through Lists and Opts.
     */
    public Iterable<FExp> FExp.childFExps() {
        return new ChildFExpIterable();
    }
    
    public class FExp {
        
        private class ChildFExpIterable implements Iterable<FExp> {
            public Iterator<FExp> iterator() {
                return new ChildFExpIterator();
            }
        }
        
        
        private class ChildFExpIterator implements Iterator<FExp> {
            
            Iterator<ASTNode> it1;
            Iterator<ASTNode> it2;
            FExp next = null;

            public ChildFExpIterator() {
                it1 = iterator();
                it2 = null;
                update();
            }
            
            private void update() {
                boolean cont = true;
                ASTNode node = null;
                while (cont) {
                    node = null;
                    if (it2 == null) {
                        if (it1.hasNext())
                            node = it1.next();
                        else 
                            cont = false;
                        if (node instanceof List || node instanceof Opt)
                            it2 = node.iterator();
                    } else {
                        if (it2.hasNext()) 
                            node = it2.next();
                        else 
                            it2 = null;
                    }
                    if (node instanceof FExp) 
                        cont = false;
                }
                next = (FExp) node;
            }

            public boolean hasNext() {
                return next != null;
            }

            public FExp next() {
                FExp res = next;
                update();
                return res;
            }

            public void remove() {
                throw new UnsupportedOperationException();
            }
            
        }
        
    }

}

aspect FileNames {
    
    protected String BaseNode.fName = null;

    public String ASTNode.fileName() { 
    	return retrieveFileName(); 
    }
    public String BaseNode.fileName() {
    	if (fName == null)
    	    fName = retrieveFileName();
    	return fName;
    }
    public String Root.fileName() { 
    	return fName; 
    }
    
    syn String ASTNode.dirName() = 
    	fileName().replaceFirst("^[^\\\\/]*$", ".").replaceFirst("[\\\\/][^\\\\/]*$", "");
    
    inh String ASTNode.retrieveFileName();
    eq BaseNode.getChild().retrieveFileName() = fileName();
    
    public void Root.setFileName(String fName)             { this.fName = fName; }
    public void StoredDefinition.setFileName(String fName) { this.fName = fName; }
}
    
aspect Names {
  // simple names
  syn String Access.name()          = getID();
  syn String ParseAccess.name()     = getID();
  syn String ClassAccess.name()     = getID();
  syn String AmbiguousAccess.name() = getID();
  syn String ComponentAccess.name() = getID();
  syn String IdDecl.name()          = getID();
  syn String Dot.name() = getLeftNoTransform().name() + "." + getRightNoTransform().name();
  
   // simple names of InstAccess:es
  syn String InstAccess.name()          = getID();
  syn String InstParseAccess.name()     = getID();
  syn String InstClassAccess.name()     = getID();
  syn String InstAmbiguousAccess.name() = getID();
  syn String InstComponentAccess.name() = getID();
  syn String InstDot.name() = getLeftNoTransform().name() + "." + getRightNoTransform().name(); 
  
  syn String InstNamedModification.name() = getNameNoTransform().name();
  
  syn String Access.qualifiedName()   = getID();
  syn lazy String Dot.qualifiedName() = getLeft().qualifiedName() + "." + getRight().qualifiedName();
  
  syn String InstAccess.qualifiedName()   = getID();
  syn lazy String InstDot.qualifiedName() = getLeft().qualifiedName() + "." + getRight().qualifiedName();
  
  syn String ClassDecl.name();
  eq BaseClassDecl.name()    = getNameNoTransform().getID();
  eq BuiltInClassDecl.name() = getNameNoTransform().getID();
  //eq LibNode.name() = getName();
  
  syn String ComponentDecl.name() = getNameNoTransform().getID();
  
  syn String FunctionCall.name() = getNameNoTransform().name();
  
  syn String InstImport.name();
  eq InstImportQualified.name()   = getPackageNameNoTransform().lastName();
  eq InstImportRename.name()      = 
	  ((ImportClauseRename) getImportClause()).getIdDeclNoTransform().getID();
  eq InstImportUnqualified.name() = "*";    // To avoid returning null
  
  syn String Access.lastName() = name();
  eq Dot.lastName() = getRightNoTransform().lastName();
  
  syn String InstAccess.lastName() = name();
  eq InstDot.lastName() = getRightNoTransform().lastName();
  
  syn String ClassDecl.qualifiedName();
  eq BaseClassDecl.qualifiedName() = combineName(classNamePrefix(), name());
  inh String BaseClassDecl.classNamePrefix();
  eq FullClassDecl.getClassDecl().classNamePrefix() = combineName(classNamePrefix(), name());
  eq BuiltInClassDecl.qualifiedName() = getName().getID();
  
  // For proxy
  public String SourceRoot.computeClassNamePrefix() {
      return "";
  }
  
  eq SourceRoot.getProgram().classNamePrefix() = computeClassNamePrefix();
  eq Root.getChild().classNamePrefix() = "";
  
  /**
   * \brief Compose a dotted name of two components.
   * 
   * Each component can be a dotted name, a single name or empty.
   */
  public static String ASTNode.combineName(String first, String second) {
	  if (first.equals(""))
		  return second;
	  if (second.equals(""))
		  return first;
	  return first + "." + second;
  }
    
  syn String InstClassDecl.qualifiedName();
  eq InstBaseClassDecl.qualifiedName() = combineName(instClassNamePrefix(), name());
  
  inh lazy String InstBaseClassDecl.instClassNamePrefix();
  eq InstFullClassDecl.getInstClassDecl().instClassNamePrefix() = 
	  combineName(instClassNamePrefix(), name());
  eq InstFullClassDecl.getInstExtends().instClassNamePrefix()   = 
	  combineName(instClassNamePrefix(), name());

  eq InstBuiltInClassDecl.qualifiedName() = name();
  
  eq SourceRoot.getChild().instClassNamePrefix() = "";
  eq FlatRoot.getChild().instClassNamePrefix() = "";
  eq InstRoot.getChild().instClassNamePrefix() = "";
  
  syn String InstClassDecl.primitiveName();
  eq InstBaseClassDecl.primitiveName() = name();
  eq InstBuiltInClassDecl.primitiveName() = name();
  
  eq InstFullClassDecl.primitiveName() {
      if (extendsPrimitive())
          return getInstExtends(0).getClassName().myInstClassDecl().finalClass().primitiveName();
      else 
          return name();
  }
  
  syn String InstForIndex.name() = getInstPrimitiveNoTransform().name();
  syn String FForIndex.name()    = getFVariableNoTransform().name();
 
  syn String InstAccess.enclosingName() = "";
  eq InstDot.enclosingName() = name().substring(0, name().lastIndexOf('.'));
  
  
  inh String InstExternal.packageName();
  inh String InstBaseClassDecl.packageName();
  eq InstBaseClassDecl.getChild().packageName() = isPackage() ? qualifiedName() : packageName();
  eq InstRoot.getChild().packageName() = null;
  eq FlatRoot.getChild().packageName() = null;
  
  inh String InstExternal.packagePath(String name);
  eq InstNode.getChild().packagePath(String name) {
	  HashSet res = lookupInstClass(name);
	  return res.isEmpty() ? null : ((InstClassDecl) res.iterator().next()).dirName();
  }

  
  inh InstClassDecl ASTNode.enclosingInstClassDecl();
  eq SourceRoot.getProgram().enclosingInstClassDecl() = null;
  eq FlatRoot.getChild().enclosingInstClassDecl() = null;
  eq InstBaseClassDecl.getChild().enclosingInstClassDecl() = this;
  eq InstComponentDecl.getChild().enclosingInstClassDecl() = myInstClass();
  
  inh BaseClassDecl ASTNode.enclosingClassDecl();
  eq SourceRoot.getProgram().enclosingClassDecl() = null;

  eq FullClassDecl.getEquation().enclosingClassDecl() = this; 
  eq FullClassDecl.getAlgorithm().enclosingClassDecl() = this; 
  eq FullClassDecl.getSuper().enclosingClassDecl() = this;  
  eq FullClassDecl.getImport().enclosingClassDecl() = this; 
  eq FullClassDecl.getClassDecl().enclosingClassDecl() = this; 
  eq FullClassDecl.getComponentDecl().enclosingClassDecl() = this; 
  eq FullClassDecl.getAnnotation().enclosingClassDecl() = this; 
  eq FullClassDecl.getExternalClause().enclosingClassDecl() = this;     

  eq ShortClassDecl.getExtendsClauseShortClass().enclosingClassDecl() = this;
  
  
    /**
     * Access method for the last Access of a qualified or
     * unqualified name.
     */ 
    syn Access Access.getLastAccess() = this;
    eq Dot.getLastAccess() = getRight().getLastAccess();
    
    syn InstAccess InstAccess.getLastInstAccess() = this;
    eq InstDot.getLastInstAccess() = getRight().getLastInstAccess();
    
    /**
     * Access method for the first Access of a qualified or
     * unqualified name.
     */
    syn Access Access.getFirstAccess() = this;
    eq Dot.getFirstAccess() = getLeft().getFirstAccess();

    // For proxy
    public Access SourceRoot.computeNextAccess() {
        return null;
    }
    
    inh Access Access.getNextAccess();
    eq Dot.getLeft().getNextAccess() = getRight().getFirstAccess();
    eq SourceRoot.getProgram().getNextAccess() = computeNextAccess();
    eq Root.getChild().getNextAccess() = null;

    /**
     * Access method for the first Access of a qualified or
     * unqualified name.
     */
    syn InstAccess InstAccess.getFirstInstAccess() = this;
    eq InstDot.getFirstInstAccess() = getLeft().getFirstInstAccess();
   
    inh InstAccess InstAccess.getNextInstAccess();
    eq InstDot.getLeft().getNextInstAccess()  = getRight().getFirstInstAccess();
    eq InstDot.getRight().getNextInstAccess() = getNextInstAccess();
    eq ASTNode.getChild().getNextInstAccess() = null;

    
    /**
     * stripFirstAccess removes the first access in a qualified
     * name. If the name is not qualified, null is returned. 
     */
    public Access Access.stripFirstAccess() {
        return null;
    }
    
    public Access Dot.stripFirstAccess() {
        // A right skewed Dot three is stipped by
        //getRight().myDecl();
        return (Access)getRight().fullCopy();
    }
    
    syn boolean Access.isQualified() = false;
    eq Dot.isQualified() = true;
    
    /**
     * \brief Get the top node in an access (possibly qualified).
     */
    syn Access Access.getTopAccess() = retrieveTopAccess(this);
    
    inh Access Access.retrieveTopAccess(Access pre);
    eq ASTNode.getChild().retrieveTopAccess(Access pre) = pre;
    eq Dot.getChild().retrieveTopAccess(Access pre)     = retrieveTopAccess(this);
    
    /**
     * \brief Get the top node in an access (possibly qualified).
     */
    syn InstAccess InstAccess.getTopInstAccess() = retrieveTopInstAccess(this);
    
    inh InstAccess InstAccess.retrieveTopInstAccess(InstAccess pre);
    eq ASTNode.getChild().retrieveTopInstAccess(InstAccess pre) = pre;
    eq InstDot.getChild().retrieveTopInstAccess(InstAccess pre) = retrieveTopInstAccess(this);
    
    /**
     * \brief Get the array subscripts of the last name part.
     */
    syn FArraySubscripts InstAccess.getLastFArraySubscripts() = 
        getLastInstAccess().getFArraySubscripts();
    
    syn FArraySubscripts InstAccess.getFArraySubscripts() = null;
    eq InstDot.getFArraySubscripts() = getRight().getFArraySubscripts();

    syn boolean InstAccess.hasFArraySubscripts() = false;
    eq InstDot.hasFArraySubscripts() = getRight().hasFArraySubscripts();
    
    /**
     * \brief Set the array subscripts of the last name part.
     */
    public void InstAccess.setLastFArraySubscripts(FArraySubscripts fas) {
        Opt o = (fas == null) ? new Opt() : new Opt(fas);
        ((InstArrayAccess) getLastInstAccess()).setFArraySubscriptsOpt(o);
    }
    
    /**
     * \brief Copy this access, append a name part to the copy and return the copy.
     */
    public InstDot InstAccess.copyAndAppend(String id) {
    	InstAccess left = (InstAccess) fullCopy();
    	InstAccess right = createPartToAppend(id);
        return new InstDot(left, right);
    }
    
    public InstDot InstDot.copyAndAppend(String id) {
    	InstDot res = (InstDot) copy();
    	res.setLeft((InstAccess) getLeft().fullCopy());
    	res.setRight(getRight().copyAndAppend(id));
    	return res;
    }
    
    /**
     * \brief Create an InstAccess suitable for appending to this access.
     */
    public InstAccess InstAccess.createPartToAppend(String id) {
    	return new InstParseAccess(id, new Opt());
    }
    
    public InstAccess InstComponentAccess.createPartToAppend(String id) {
    	return new InstComponentAccess(id, new Opt());
    }
    
}

aspect Slices {
	
    /**
     * \brief Check if this is a slice operation.
     */
    syn boolean InstAccess.isSlice() = hasFArraySubscripts() && isArray();
    eq InstDot.isSlice() = getLeft().isArray() || getRight().isSlice();
    
    /**
     * \brief Check if this is a slice operation.
     */
    syn boolean FQName.isSlice() {
    	int n = getNumFQNamePart() - 1;
    	for (int i = 0; i < n; i++) {
    		FQNamePart part = getFQNamePart(i);
    		if (part.hasFArraySubscripts())
    			for (FSubscript fs : part.getFArraySubscripts().getFSubscripts())
    				if (fs.ndims() > 0)
    					return true;
    	}
    	boolean array = false;
    	boolean exp = false;
		FQNamePart part = getFQNamePart(n);
		if (part.hasFArraySubscripts()) {
			for (FSubscript fs : part.getFArraySubscripts().getFSubscripts()) {
				if (fs instanceof FExpSubscript) 
					exp = true;
				if (fs.ndims() > 0)
					array = true;
			}
		}
		return array && exp;
    }
	
    /**
     * \brief Check if this is a slice operation.
     */
    syn boolean FIdUse.isSlice()  = getFQName().isSlice();
    eq FIdUseInstAccess.isSlice() = getInstAccess().isSlice();
	
    /**
     * \brief Check if this is a slice operation.
     */
    syn boolean FInstAccessExp.isSlice() = getInstAccess().isSlice();
	
    /**
     * \brief Check if this is a slice operation.
     */
    syn boolean FIdUseExp.isSlice() = isArray() && getFIdUse().isSlice();
    
}

aspect FlatNames {
    
    syn String FVariable.varKind() {
        if (isIndependentConstant()) {
            return "ci";
        } else if (isDependentConstant()) {
            return "cd";
        } else if (isIndependentParameter()) {
            return "pi";
        } else if (isDependentParameter()) {
            return "pd";
        } else if (isDifferentiatedVariable()) {
            return "x";
        } else if (isDerivativeVariable()) {
            return "dx";
        } else if (isAlgebraicVariable()) {
            return "w";
        } else if (isInput()) {
            return "u";
        } else {
            return "unknown";
        }
    }

    public FQName FQName.append(String name) {
        addFQNamePart(new FQNamePart(name, new Opt()));
        return this;
    }

    public FQName FQName.append(FQName fqname) {
        for (int i=0;i<fqname.getNumFQNamePart();i++)
            addFQNamePart((FQNamePart)fqname.getFQNamePart(i).fullCopy());
        return this;
    }
    
    syn FQNamePart FQName.lastFQNamePart() = getFQNamePart(getNumFQNamePart()-1);

    syn boolean FQName.hasFArraySubscripts() = isScalarized()? false:
        lastFQNamePart().hasFArraySubscripts();
    syn FArraySubscripts FQName.getFArraySubscripts() = isScalarized()? null:
        lastFQNamePart().getFArraySubscripts();

    syn boolean FIdUse.hasFArraySubscripts() = 
        getFQName().hasFArraySubscripts();
    syn FArraySubscripts FIdUse.getFArraySubscripts() = 
        getFQName().getFArraySubscripts();

    syn boolean FIdUseInstAccess.hasFArraySubscripts() = 
        getInstAccess().hasFArraySubscripts();
    syn FArraySubscripts FIdUseInstAccess.getFArraySubscripts() = 
        getInstAccess().getFArraySubscripts();

    syn boolean FIdUseExp.hasFArraySubscripts() = 
        getFIdUse().hasFArraySubscripts();
    syn FArraySubscripts FIdUseExp.getFArraySubscripts() = 
        getFIdUse().getFArraySubscripts();

    /**
     * \brief Get the array subscripts of the last name part.
     */
    syn FArraySubscripts FQName.getLastFArraySubscripts() =
        hasFArraySubscripts() ? lastFQNamePart().getFArraySubscripts() : null;
    
    /**
     * \brief Set the array subscripts of the last name part.
     */
    public void FQName.setLastFArraySubscripts(FArraySubscripts fas) {
        Opt o = (fas == null) ? new Opt() : new Opt(fas);
        lastFQNamePart().setFArraySubscriptsOpt(o);
    }
    
    syn lazy FQName InstNode.getFQNamePrefix() = new FQName(retrieveFQName());
    
    syn lazy FQName InstNode.getFQName() = getFQNamePrefix();
    
    eq InstComponentDecl.getFQName() {
        FQName myName = new FQName(retrieveFQName());
        Opt array_subscr = new Opt();
        if (isAssignable() && isArrayDecl()) 
            array_subscr.setChild(size().flattenFArraySubscripts(myName), 0);
        myName.addFQNamePart(new FQNamePart(name(), array_subscr));
        return myName;
    }
    
    eq InstArrayComponentDecl.getFQName() {
        FQName myName = new FQName(retrieveFQName());
        if (!myName.hasFArraySubscripts())
        	myName.setLastFArraySubscripts(new FArraySubscripts());
        myName.getFArraySubscripts().addFSubscript(new FExpSubscript(getIndex()));
        return myName;
    }

    eq InstClassDecl.getFQName() = new FQName();
    inh lazy FQName InstNode.retrieveFQName();
    eq InstComponentDecl.getChild().retrieveFQName() = getFQName();
    eq InstComponentDecl.getInstModification().retrieveFQName() = retrieveFQName();
    eq InstReplacingComposite.getOriginalInstComponent().retrieveFQName() = retrieveFQName();
    eq InstReplacingPrimitive.getOriginalInstComponent().retrieveFQName() = retrieveFQName();
    eq InstReplacingShortClassDecl.getChild().retrieveFQName() = retrieveFQName();
    eq InstClassDecl.getChild().retrieveFQName() = new FQName(); //getFQName();
    eq InstForIndex.getChild().retrieveFQName() = new FQName();
    
    eq InstRoot.getChild().retrieveFQName() = new FQName();
    eq SourceRoot.getProgram().retrieveFQName() = new FQName();

    /**
     * \brief Get a string representation of a prefix of this name.
     * 
     * @param n  the number of parts to include. If <code>n <= 0</code>, then 
     *           all but the last <code>-n</code> parts are included.
     */
    syn String FQName.prefixName(int n) {
    	int tot = getNumFQNamePart();
    	if (n <= 0)
    		n = tot + n;
        StringBuilder str = new StringBuilder();
        for (int i = 0; i < n; i++) {
            FQNamePart part = getFQNamePart(i);
            str.append(part.getName());
            if ((i < n-1 || isScalarized()) && part.hasFArraySubscripts()) 
            	str.append(part.getFArraySubscripts());
            if (i < n-1) 
                str.append(".");
        }
        return str.toString();
    }

    syn lazy String FQName.name() = prefixName(0);
    
    syn String FQNamePart.name() = getName();

    syn String FIdUse.name() = getFQName().name();
    syn String FIdUseExp.name() = getFIdUse().name();
    eq FDerExp.name() = derName();
    syn String FInstAccessExp.name() = getInstAccessNoTransform().name();
    syn String FIdUseInstAccess.name() = getInstAccessNoTransform().name();
    
    syn String FIdDecl.name() = getFQNameNoTransform().name();

    syn String FClass.name()        = getFQNameNoTransform().name();
    syn String FFunctionDecl.name() = getFQNameNoTransform().name();
    syn String FRecordDecl.name()   = getFQNameNoTransform().name();
    
    syn String FAbstractFunctionCall.name();
    eq InstFunctionCall.name()     = getNameNoTransform().name();
    eq FFunctionCall.name()        = getNameNoTransform().name();
    eq FBuiltInFunctionCall.name() = builtInName();
    
    syn String AbstractFVariable.name() = null;
    eq FVariable.name()         = getFQNameNoTransform().name();
    eq FFunctionVariable.name() = getFQNameNoTransform().name();

//  syn lazy String FQName.derName() = "der(" + name() + ")";
    
    eq FDerivativeVariable.name()  = getFQNameNoTransform().derName();
    syn String FIdUse.derName()    = getFQNameNoTransform().derName();
    syn String FIdUseExp.derName() = getFIdUseNoTransform().derName();

    syn lazy String FQName.derName() {
        StringBuilder str = new StringBuilder();
        for (int i=0;i<getNumFQNamePart();i++) {
            if (i==getNumFQNamePart()-1) {
                str.append("der(");
            }
            str.append(getFQNamePart(i).getName());
            //if (i<getNumFQNamePart()-1 || isScalarized()) {
                if (getFQNamePart(i).hasFArraySubscripts()) {
                    str.append(getFQNamePart(i).getFArraySubscripts().prettyPrint(""));
                }
                if (i<getNumFQNamePart()-1) {
                    str.append(".");
                }
            //}
        }
        str.append(")");
        return str.toString();
    }
    
    //syn String FIdUse.derName2() = getFQName().derName2();
    //syn String FIdUseExp.derName2() = getFIdUse().derName2();
    
    syn lazy String FQName.nameUnderscore() {
        StringBuilder str = new StringBuilder();
        for (int i=0;i<getNumFQNamePart();i++) {
            str.append(getFQNamePart(i).getName());
            if (i<getNumFQNamePart()-1 || isScalarized()) {
                if (getFQNamePart(i).hasFArraySubscripts()) {
                    for (FSubscript fs : 
                        getFQNamePart(i).getFArraySubscripts().getFSubscripts()) {
                        str.append("_");
                        str.append(fs.prettyPrint(""));
                    }
                }
                if (i<getNumFQNamePart()-1) {
                    str.append("_");
                }
            }
        }
        return str.toString();
    }

    syn String FQNamePart.nameUnderscore() = getName();

    syn String FIdUse.nameUnderscore() = getFQName().nameUnderscore();
    syn String FIdUseExp.nameUnderscore() = getFIdUse().nameUnderscore();
    eq FDerExp.nameUnderscore() = "der_" + getFIdUse().nameUnderscore();
    //syn String FInstAccessExp.nameUnderscore() = getInstAccess().nameUnderscore();
    //syn String FIdUseInstAccess.nameUnderscore() = getInstAccess().nameUnderscore();
    
    syn String FIdDecl.nameUnderscore() = getFQName().nameUnderscore();

    syn String FClass.nameUnderscore() = getFQName().nameUnderscore();
    
    syn String AbstractFVariable.nameUnderscore() = null;
    eq FVariable.nameUnderscore()           = getFQName().nameUnderscore();
    eq FDerivativeVariable.nameUnderscore() = "der_" + getFQName().nameUnderscore();
    eq FFunctionVariable.nameUnderscore()   = getFQName().nameUnderscore();
    
    syn String FQName.funcNameUnderscore(String suffix) = "func_" + nameUnderscore() + "_" + suffix;
    syn String FIdUse.funcNameUnderscore(String suffix) = getFQName().funcNameUnderscore(suffix);

    inh int FVariable.variableIndex();
    eq FClass.getFVariable(int i).variableIndex()     = i;
    eq FClass.getAliasVariable(int i).variableIndex() = getNumFVariable() + i;
    eq FForIndex.getFVariable().variableIndex()       = -1;
    eq FRecordDecl.getFVariable().variableIndex()     = -1;

    inh int FRecordDecl.recordIndex();
    eq FClass.getFRecordDecl(int i).recordIndex() = i;
    
    /**
     * \brief Copy this FQName, append a String to the copy and return the copy.
     */
    public FQName FQName.copyAndAppend(String name) {
        return fullCopy().append(name);
    }
    
    /**
     * \brief Copy this FQName, append another FQName to the copy and return the copy.
     */
    public FQName FQName.copyAndAppend(FQName name) {
        return fullCopy().append(name);
    }
    
    /**
     * \brief Create a copy of all parts but the first of this name.
     */
    public FQName FQName.copySuffix() {
        FQName res = new FQName();
        for (int i = 1; i < getNumFQNamePart(); i++)
            res.addFQNamePart(getFQNamePart(i).fullCopy());
        return res;
    }
    
    /**
     * \brief Create a copy of the first part of this name.
     */
    public FQName FQName.copyPrefix() {
        FQName res = new FQName();
        if (getNumFQNamePart() > 0)
            res.addFQNamePart(getFQNamePart(0).fullCopy());
        res.scalarized = scalarized;
        return res;
    }

    /**
     * \brief Create a copy of the name excluding the last name.
     */
    public FQName FQName.copyFullPrefix() {
        FQName res = new FQName();
        for (int i = 0; i < getNumFQNamePart()-1; i++)
            res.addFQNamePart(getFQNamePart(i).fullCopy());
        res.scalarized = scalarized;
        return res;
    }
    
    /**
     * \brief Create a copy of this name without array subscripts.
     */
    public FQName FQName.copyWithoutSubscripts() {
        FQName res = new FQName();
        for (FQNamePart part : getFQNameParts())
        	res.addFQNamePart(new FQNamePart(part.getName(), new Opt()));
        return res;
    }
    
    /**
     * \brief Create an FIdUseExp using a copy of this name.
     */
    public FIdUseExp FQName.createFIdUseExp() {
        return new FIdUseExp(createFIdUse()); 
    }
    
    /**
     * \brief Create an FIdUse using a copy of this name.
     */
    public FIdUse FQName.createFIdUse() {
        return new FIdUse(fullCopy()); 
    }
    
    syn String FType.name();
    eq FRealType.name()    = "Real";
    eq FIntegerType.name() = "Integer";
    eq FBooleanType.name() = "Boolean";
    eq FStringType.name()  = "String";
    eq FRecordType.name()  = getName();
    eq FUnknownType.name() = "(unknown type)";
    
    syn boolean FAbstractFunctionCall.isIgnored() = false;
    eq FIgnoredBuiltIn.isIgnored() = true;
    
    syn boolean FAbstractEquation.isIgnored() = false;
    eq FFunctionCallEquation.isIgnored() = getCall().isIgnored();
    
    /**
     * \brief Add an equation to the first equation block.
     */
    public void FClass.addFEquation(FAbstractEquation feq) {
        getFEquationBlock(0).addFAbstractEquation(feq);
    }
    
}

aspect DebugHelpers {
    
    /**
     * \brief Convert to string. Primarily useful for debugging.
     * 
     * Default implementation uses prettyPrint().
     */
    public String ASTNode.toString() {
        return prettyPrint("");
    }
    
}

aspect FlatFunctionUtils {
     
     syn boolean FFunctionVariable.isInput()  = hasFTypePrefixInputOutput() && getFTypePrefixInputOutput().inputCausality();
     syn boolean FFunctionVariable.isOutput() = hasFTypePrefixInputOutput() && getFTypePrefixInputOutput().outputCausality();
     
     /**
      * \brief Returns a list of all InstComponentDecls declared as "input".
      */
     syn lazy ArrayList<InstComponentDecl> InstNode.myInputs() {
         ArrayList<InstComponentDecl> l = new ArrayList<InstComponentDecl>();
         for (InstComponentDecl icd : getInstComponentDecls())
             if (icd.isInput())
                 l.add(icd);
         for (InstExtends ie : getInstExtendss())
        	 l.addAll(ie.myInputs());
         return l;
     }
     
     /**
      * \brief Returns a list of all InstComponentDecls not declared as "input".
      */
     syn lazy ArrayList<InstComponentDecl> InstNode.myNonInputs() {
         ArrayList<InstComponentDecl> l = new ArrayList<InstComponentDecl>();
         for (InstComponentDecl icd : getInstComponentDecls())
             if (!icd.isInput())
                 l.add(icd);
         for (InstExtends ie : getInstExtendss())
        	 l.addAll(ie.myNonInputs());
         return l;
     }
     
     /**
      * \brief Returns a list of all InstComponentDecls declared as "output".
      */
     syn lazy ArrayList<InstComponentDecl> InstNode.myOutputs() {
         ArrayList<InstComponentDecl> l = new ArrayList<InstComponentDecl>();
         for (InstComponentDecl icd : getInstComponentDecls())
             if (icd.isOutput())
                 l.add(icd);
         for (InstExtends ie : getInstExtendss())
        	 l.addAll(ie.myOutputs());
         return l;
     }
     
     /**
      * \brief Returns a list of all contained InstComponentDecls that may be altered by a modification.
      */
     syn lazy ArrayList<InstComponentDecl> InstNode.myModifiableComponents() {
         ArrayList<InstComponentDecl> l = new ArrayList<InstComponentDecl>();
         // TODO: Only add components that are not final or constant
         // TODO: Are there other reasons a component might not be modifiable?
         for (InstComponentDecl icd : getInstComponentDecls())
             l.add(icd);
         for (InstExtends ie : getInstExtendss())
        	 l.addAll(ie.myModifiableComponents());
         return l;
     }
     
     /**
      * \brief Returns a list of all FFunctionVariables declared as "input".
      */
     syn lazy ArrayList<FFunctionVariable> FFunctionDecl.myInputs() {
         ArrayList<FFunctionVariable> l = new ArrayList<FFunctionVariable>();
         for (FFunctionVariable var : getFFunctionVariables())
             if (var.isInput())
                 l.add(var);
         return l;
     }
     
     /**
      * \brief Returns a list of all FFunctionVariables declared as "input".
      */
     syn lazy ArrayList<FFunctionVariable> FFunctionDecl.myProtected() {
         ArrayList<FFunctionVariable> l = new ArrayList<FFunctionVariable>();
         for (FFunctionVariable var : myNonInputs())
             if (!var.isOutput())
                 l.add(var);
         return l;
     }
     
     /**
      * \brief Returns a list of all FFunctionVariables not declared as "input".
      */
     syn lazy ArrayList<FFunctionVariable> FFunctionDecl.myNonInputs() {
         ArrayList<FFunctionVariable> l = new ArrayList<FFunctionVariable>();
         for (FFunctionVariable var : getFFunctionVariables())
             if (!var.isInput())
                 l.add(var);
         return l;
     }
     
     /**
      * \brief Returns a list of all FFunctionVariables declared as "output".
      */
     syn lazy ArrayList<FFunctionVariable> FFunctionDecl.myOutputs() {
         ArrayList<FFunctionVariable> l = new ArrayList<FFunctionVariable>();
         for (FFunctionVariable var : getFFunctionVariables())
             if (var.isOutput())
                 l.add(var);
         return l;
     }
     
     syn ArrayList<InstComponentDecl> InstFunctionCall.myInputs() {
         InstClassDecl icd = getName().myInstClassDecl();
         // If class is a record, then function call is record constructor
         return icd.isRecord() ? icd.myModifiableComponents() : icd.myInputs();
     }
     syn ArrayList<InstComponentDecl> InstFunctionCall.myOutputs() = getName().myInstClassDecl().myOutputs();
     syn ArrayList<FFunctionVariable> FFunctionCall.myInputs()     = myFFunctionDecl().myInputs();
     syn ArrayList<FFunctionVariable> FFunctionCall.myOutputs()    = myFFunctionDecl().myOutputs();
     
     syn boolean InstFunctionCall.hasOutputs() = !myOutputs().isEmpty();
     syn boolean FFunctionDecl.hasOutputs()    = !myOutputs().isEmpty();
     syn boolean FFunctionCall.hasOutputs()    = myFFunctionDecl().hasOutputs();
     
     syn InstComponentDecl InstFunctionCall.expOutput() = myOutputs().get(0);
     syn FFunctionVariable FFunctionDecl.expOutput()    = myOutputs().get(0);
     syn FFunctionVariable FFunctionCall.expOutput()    = myFFunctionDecl().expOutput();
    
     syn lazy FunctionReturnDefinition FFunctionDecl.returnDefinition() = new FunctionReturnDefinition(this);
     inh FunctionReturnDefinition FReturnStmt.returnDefinition();
     eq FFunctionDecl.getFAlgorithmBlock().returnDefinition() = returnDefinition();
     eq InstProgramRoot.getChild().returnDefinition()         = null;
     eq FClass.getChild().returnDefinition()                  = null;
     
     inh String InstFunctionArgument.funcName();
     inh String FFunctionCallLeft.funcName();
     eq FAbstractFunctionCall.getChild().funcName() = name();
     eq FFunctionCallEquation.getChild().funcName() = getCall().name();
     eq FFunctionCallStmt.getChild().funcName()     = getCall().name();
     
     /**
      * \brief Check if this function returns an array when used as an expression.
      */
     syn boolean FFunctionDecl.isArray() = hasOutputs() ? expOutput().isArray() : false;
     
     /**
      * \brief Check if this function returns a record when used as an expression.
      */
     syn boolean FFunctionDecl.isRecord() = hasOutputs() ? expOutput().type().isRecord() : false;
     
     /**
      * \brief Check if this function returns a non-primitive when used as an expression.
      */
     syn boolean FFunctionDecl.isComposite() = hasOutputs() ? expOutput().isComposite() : false;
     
     /**
      * \brief Check is this node is in a function.
      */
     inh boolean FQName.inFunction();
     inh boolean InstAssignable.inFunction();
     inh boolean InstExternal.inFunction();
     inh boolean InstAccess.inFunction();
     inh boolean FExp.inFunction();
     inh boolean FIdUse.inFunction();
     inh boolean FStatement.inFunction();
     inh boolean FAbstractEquation.inFunction();
     inh boolean FSubscript.inFunction();
     inh boolean FFunctionCallLeft.inFunction();
     eq InstBaseClassDecl.getChild().inFunction() = isFunction();
     eq FFunctionDecl.getChild().inFunction()     = true;
     eq Root.getChild().inFunction()              = false;
     
     /**
      * \brief Check is this node is in a non-function algorithm.
      */
     inh boolean FSubscript.inAlgorithm();
     eq FAlgorithmBlock.getChild().inAlgorithm()   = !inFunction();
     eq InstNode.getChild().inAlgorithm()          = false;
     eq FAbstractEquation.getChild().inAlgorithm() = false;
     eq FClass.getChild().inAlgorithm()            = false;
     
     /**
      * \brief Check is this node is in an algorithm or a function.
      */
     syn boolean FSubscript.inAlgorithmOrFunction() = inFunction() || inAlgorithm();
     
     /**
      * \brief Check if this function call is the call of a function call equation 
      *        or function call statement.
      */
     inh boolean FAbstractFunctionCall.isFunctionCallClause();
     eq ASTNode.getChild().isFunctionCallClause()              = false;
     eq FFunctionCallEquation.getCall().isFunctionCallClause() = true;
     eq FFunctionCallStmt.getCall().isFunctionCallClause()     = true;
     
     inh boolean FWhenStmt.insideBlockStmt();
     eq FAlgorithmBlock.getChild().insideBlockStmt() = false;
     eq FIfWhenStmt.getChild().insideBlockStmt()     = true;
     eq FWhileStmt.getChild().insideBlockStmt()      = true;
     eq FForStmt.getChild().insideBlockStmt()        = true;
     eq InstForStmt.getChild().insideBlockStmt()     = true;
     
     /**
      * \brief Return the index of the variable assigned by this FFunctionCallLeft among 
      *        all those assigned by the same FFunctionCallEquation/Stmt
      */
     syn lazy int FFunctionCallLeft.myIndex() = prevIndex() + (hasFExp() ? 1 : 0);
     inh int FFunctionCallLeft.prevIndex();
     eq FFunctionCallEquation.getLeft(int i).prevIndex() = (i == 0) ? -1 : getLeft(i - 1).myLastIndex();
     eq FFunctionCallStmt.getLeft(int i).prevIndex()     = (i == 0) ? -1 : getLeft(i - 1).myLastIndex();
     
     syn int FFunctionCallLeft.myLastIndex() = myIndex() + (hasFExp() ? numScalarVars() - 1 : 0);
     
     /**
      * \brief Get the number of scalar variables assigned by this FFunctionCallLeft.
      * 
      * Only valid after scalarization.
      */
     syn int FFunctionCallLeft.numScalarVars() = (hasFExp() ? getFExp().numScalarVars() : 0);
     
     /**
      * \brief Get the number of scalar variables assigned by this a FFunctionCallLeft with this 
      *        FExp as its expression.
      * 
      * Only valid after scalarization.
      */
     syn int FExp.numScalarVars() = 1;
     eq FArray.numScalarVars() {
    	 int n = getNumFExp();
    	 return (n == 0) ? 0 : n * getFExp(0).numScalarVars();
     }
     eq FRecordConstructor.numScalarVars() {
         int n = 0;
         for (FExp e : getArgs())
             n += e.numScalarVars();
         return n;
     }
     
     inh lazy InstComponentDecl FFunctionCallLeft.myOutput();
     eq FFunctionCallEquation.getLeft(int i).myOutput() = getCall().findOutput(i);
     eq FFunctionCallStmt.getLeft(int i).myOutput()     = getCall().findOutput(i);
     syn InstComponentDecl FAbstractFunctionCall.findOutput(int i) = unknownInstComponentDecl();
     eq InstFunctionCall.findOutput(int i)                         = 
         (i >= myOutputs().size()) ? unknownInstComponentDecl() : myOutputs().get(i);
     
     inh boolean FAbstractFunctionCall.functionCallIsExp();
     eq FExp.getChild().functionCallIsExp()                 = true;
     eq FClass.getChild().functionCallIsExp()               = true;
     eq InstNode.getChild().functionCallIsExp()             = true;
     eq FFunctionCallEquation.getCall().functionCallIsExp() = false;
     eq FFunctionCallStmt.getCall().functionCallIsExp()     = false;
     
     inh lazy ArrayList<FFunctionCallLeft> FAbstractFunctionCall.myLefts();
     eq FExp.getChild().myLefts()                 = new ArrayList<FFunctionCallLeft>();
     eq FClass.getChild().myLefts()               = new ArrayList<FFunctionCallLeft>();
     eq InstNode.getChild().myLefts()             = new ArrayList<FFunctionCallLeft>();
     eq FFunctionCallEquation.getCall().myLefts() = getLefts().toArrayList();
     eq FFunctionCallStmt.getCall().myLefts()     = getLefts().toArrayList();

     inh lazy String FExp.tempVarName();
     eq InstNode.getChild().tempVarName()      = null;
     eq FFunctionCall.getArray().tempVarName() = tempVarName();
     eq FClass.getChild().tempVarName() {
         HashMap<String,FVariable> vars = fullyQualifiedVariablesMap();
         String name;
         do {
             name = "temp_" + nextTempVarIndex++;
         } while (vars.get(name) != null);
         return name;
     }
     eq FFunctionDecl.getChild().tempVarName() {
         HashMap<String,FFunctionVariable> vars = fullyQualifiedVariablesMap();
         String name;
         do {
             name = "temp_" + nextTempVarIndex++;
         } while (vars.get(name) != null);
         return name;
     }
     
     private int FFunctionDecl.nextTempVarIndex = 1;
     private int FClass.nextTempVarIndex = 1;
}

aspect Visibility {
    
    syn boolean BaseClassDecl.isPublic() = getVisibilityType().isPublic();
    syn boolean ComponentDecl.isPublic() = getVisibilityType().isPublic();

    syn boolean BaseClassDecl.isProtected() = getVisibilityType().isProtected();
    syn boolean ComponentDecl.isProtected() = getVisibilityType().isProtected();

    syn boolean VisibilityType.isPublic() = false;
    eq PublicVisibilityType.isPublic() = true;

    syn boolean VisibilityType.isProtected() = false;
    eq ProtectedVisibilityType.isProtected() = true;

    syn boolean FVisibilityType.isPublic() = false;
    eq FPublicVisibilityType.isPublic() = true;

    syn boolean FVisibilityType.isProtected() = false;
    eq FProtectedVisibilityType.isProtected() = true;

    syn boolean FVariable.isPublic() = getFVisibilityType().isPublic();
    syn boolean FVariable.isProtected() = getFVisibilityType().isProtected();
    
}

aspect ComponentDeclMethods {
	
    /**
     * \brief Check if a ComponentDecl is declared flow.
     */
	syn boolean ComponentDecl.isFlow()  = hasTypePrefixFlow() && getTypePrefixFlow().isFlow();
	syn boolean TypePrefixFlow.isFlow() = false;
	eq Flow.isFlow()                    = true;
	
    /**
     * \brief Check if a ComponentDecl is declared stream.
     */
	syn boolean ComponentDecl.isStream()  = hasTypePrefixFlow() && getTypePrefixFlow().isStream();
	syn boolean TypePrefixFlow.isStream() = false;
	eq Stream.isStream()                  = true;

    /**
     * Check if a ComponentDecl is declared parameter.
     */
    syn boolean ComponentDecl.isParameter() {
    
        if (hasTypePrefixVariability())
            if (getTypePrefixVariability() instanceof Parameter)
                return true;
    
        return false;
    }
      
    /**
     * Check if a ComponentDecl is declared inner.
     */
    syn boolean ComponentDecl.isInner() {
        return hasInner();
    }
    
    /**
     * Check if a ComponentDecl is declared outer.
     */
    syn boolean ComponentDecl.isOuter() {
        return hasOuter();
    }
    
    
     /**
     * Check if a ComponentDecl is declared constant.
     */
    syn boolean ComponentDecl.isConstant() {
    
        if (hasTypePrefixVariability())
            if (getTypePrefixVariability() instanceof Constant)
                return true;
    
        return false;
    }
    
    /**
     * Check if a ComponentDecl is declared discrete.
     */
    syn boolean ComponentDecl.isDiscrete() {
    
        if (hasTypePrefixVariability())
            if (getTypePrefixVariability() instanceof Discrete)
                return true;
    
        return false;
    }
    
    syn boolean InstComponentDecl.isInput() {
        
        if (getComponentDecl().hasTypePrefixInputOutput())
            if (getComponentDecl().getTypePrefixInputOutput() instanceof Input)
                return true;
        if (myInstClass().isInput())
            return true;
        
        return false;
    }
    
    
 
    syn boolean InstComponentDecl.isOutput() {
        
        if (getComponentDecl().hasTypePrefixInputOutput())
            if (getComponentDecl().getTypePrefixInputOutput() instanceof Output)
                return true;
        if (myInstClass().isOutput())
            return true;
        
        return false;
    }
    
    syn boolean AbstractEquation.isInitial() {
        if (hasAbstractEquationModifier())
            if (getAbstractEquationModifier() instanceof Initial)
                return true;
        return false;
    
    }

    /**
     * Check if a InstComponentDecl is declared flow.
     */
    syn boolean InstComponentDecl.isFlow() {
    
        if (getComponentDecl().hasTypePrefixFlow())
            return true;
    
        return false;
    }
    
    /**
     * Check if a component is disabled by a conditional clause
     */
    syn boolean InstComponentDecl.isDisabled() {
    	if (!hasConditionalAttribute() || 
    			(hasConditionalAttribute() && getConditionalAttribute().ceval().booleanValue())) {
    		return false;
    	} else {
    		return true;
    	}
    }
    
    syn boolean FIdUseInstAccess.isDisabled() = getInstAccess().isDisabled();
    syn boolean InstAccess.isDisabled() = false;
    eq InstComponentAccess.isDisabled() = myInstComponentDecl().isDisabled();
    eq InstDot.isDisabled() = getRight().isDisabled() || getLeft().isDisabled();
    
}

aspect ShortClassUtil {

    syn InstClassDecl InstClassDecl.finalClass() = this;
    eq InstShortClassDecl.finalClass() = getInstExtends(0).getClassName().myInstClassDecl().finalClass();


    syn boolean ClassDecl.isInput() = false;
    eq ShortClassDecl.isInput() {
        if (getExtendsClauseShortClass().hasTypePrefixInputOutput())
            if (getExtendsClauseShortClass().getTypePrefixInputOutput() instanceof Input)
                return true;
        return false;
    }
    
    syn boolean ClassDecl.isOutput() = false;
    eq ShortClassDecl.isOutput() {
        if (getExtendsClauseShortClass().hasTypePrefixInputOutput())
            if (getExtendsClauseShortClass().getTypePrefixInputOutput() instanceof Output)
                return true;
        return false;
    }

    syn boolean InstClassDecl.isInput() = false;
    eq InstShortClassDecl.isInput() {
        if (getClassDecl().isInput()) {
            return true;
        }
        return getInstExtends(0).getClassName().myInstClassDecl().isInput();
    }

    syn boolean InstClassDecl.isOutput() = false;
    eq InstShortClassDecl.isOutput() {
        if (getClassDecl().isOutput()) {
            return true;
        }
        return getInstExtends(0).getClassName().myInstClassDecl().isOutput();
    }
    
}

aspect FlatExpressions {
    
    inh lazy boolean FExp.inEquationSection();
    eq FClass.getFEquationBlock().inEquationSection() = true;
    eq Root.getChild().inEquationSection() = false;
    inh lazy boolean FExp.inInitialEquationSection();
    eq FClass.getFInitialEquation().inInitialEquationSection() = true;
    eq Root.getChild().inInitialEquationSection() = false;

    inh lazy boolean FExp.inEquation();
    eq FAbstractEquation.getChild().inEquation() = true;
    eq Root.getChild().inEquation() = false;
    
    inh boolean FExp.inNoEventExp();
    eq FNoEventExp.getChild().inNoEventExp() = true;
    eq FAlgorithmBlock.getChild().inNoEventExp() = true;
    eq SourceRoot.getChild().inNoEventExp() = false;
    eq FlatRoot.getChild().inNoEventExp() = false;
    eq FClass.getFParameterEquation().inNoEventExp() = true;
    
    inh boolean InstAccess.inConnectClause();
    inh boolean FExp.inConnectClause();
    eq FConnectClause.getChild().inConnectClause() = true;
    eq FAlgorithmBlock.getChild().inConnectClause() = false;
    eq FAbstractEquation.getChild().inConnectClause() = false;
    eq SourceRoot.getChild().inConnectClause() = false;
    eq FlatRoot.getChild().inConnectClause() = false;

    inh boolean FExp.inIfCondition();
    eq FIfExp.getChild().inIfCondition() = true;
    eq FElseIfExp.getChild().inIfCondition() = true;
    eq FAbsExp.getChild().inIfCondition() = true;
    eq FAbstractEquation.getChild().inIfCondition() = false;
    eq SourceRoot.getChild().inIfCondition() = false;
    eq FlatRoot.getChild().inIfCondition() = false;
    
    /**
     * \brief Is this expression of a type that is valid for most uses?
     * 
     * Only dummy expressions and similar return false.
     */
    syn boolean FExp.isValidExp()       = true;
    eq FNoExp.isValidExp()              = false;
    eq FUnsupportedExp.isValidExp()     = false;
    eq FUnsupportedBuiltIn.isValidExp() = false;
    eq FUnknownSizeExp.isValidExp()     = false;
    
}

aspect LineOffsets {
    private Map<Integer, Integer> StoredDefinition.lineBreakMap;
    
    public void StoredDefinition.setLineBreakMap(Map<Integer, Integer> map) {
        lineBreakMap = map;
    }
}

aspect ParserHelpers {

    /**
     * An exception for parser errors.
     */
    public class ParserException extends java.lang.RuntimeException {
        private Problem p;
        
        /**
         * Default constructor.
         */
        public ParserException(Problem p) {
            this.p = p;
        }
        
        /**
         * Getter for problem.
         */
         public Problem getProblem() {
             return p;
         }
        
    }
    
}

aspect NodeSearch {
    
    /**
     * \brief Does node match <code>string</code>? Override for node types that 
     * need to be searched for.
     * 
     * Base implementation always returns <code>false</code.
     * Generally, this is implemented with something like 
     * <code>str.equals(name())</code>.
     * 
     * @param str  the string to match
     * @return     <code>true</code if <code>str</code> matches this node, 
     *             <code>false</code> otherwise
     */
    syn boolean ASTNode.matches(String str) = false;
    
    public class ASTNode {
        
        /**
         * \brief Searches <code>set</code> for a node that returns <code>true</code> for 
         * <code>node.matches(str)</code>.
         * 
         * @param set  the container to search for a matching node
         * @param str  the string to match nodes to
         * @return     a matching node if one is found, <code>null</code> otherwise
         */
        public static <T extends ASTNode> T findMatching(Iterable<T> set, String str) {
            for (T node : set) 
                if (node.matches(str)) 
                    return node;
            return null;
        }
        
    }
    
}

aspect Strings {
	
	/**
	 * \brief Get the value of this string literal with all escape sequences 
	 *        replaced with their actual meaning.
	 */
	syn String StringLitExp.unEscape() {
		StringBuffer buf = new StringBuffer();
		Matcher m = ESCAPE_PATTERN.matcher(getSTRING());
		HashMap<String,String> repl = escapeReplacements();
		while (m.find())
			m.appendReplacement(buf, repl.get(m.group(1)));
		m.appendTail(buf);
		return buf.toString();
	}
	
	protected static Pattern ASTNode.ESCAPE_PATTERN = Pattern.compile("\\\\(.)");
	
	protected static HashMap<String,String> ASTNode.escapeReplacements() {
		if (ESCAPE_REPLACEMENTS == null) {
			ESCAPE_REPLACEMENTS = new HashMap<String,String>();
			ESCAPE_REPLACEMENTS.put("'", "'");
			ESCAPE_REPLACEMENTS.put("\"", "\"");
			ESCAPE_REPLACEMENTS.put("?", "?");
			ESCAPE_REPLACEMENTS.put("\\", Matcher.quoteReplacement("\\"));
			ESCAPE_REPLACEMENTS.put("a", "\007");
			ESCAPE_REPLACEMENTS.put("b", "\b");
			ESCAPE_REPLACEMENTS.put("f", "\f");
			ESCAPE_REPLACEMENTS.put("n", "\n");
			ESCAPE_REPLACEMENTS.put("r", "\r");
			ESCAPE_REPLACEMENTS.put("v", "\013");
			ESCAPE_REPLACEMENTS.put("t", "\t");
		}
		return ESCAPE_REPLACEMENTS;
	}

	private static HashMap<String,String> ASTNode.ESCAPE_REPLACEMENTS = null;

}

aspect GeneralHelpers {
	
	/**
	 * \brief Generic iterator over constant array.
	 */
	public class ConstArrayIterator<T> implements Iterator<T> {
		
		protected T[] elems;
		protected int i;
		
		public ConstArrayIterator(T[] arr) {
			elems = arr;
			i = 0;
		}
		
		public boolean hasNext() {
			return i < elems.length;
		}
		
		public T next() {
			return elems[i++];
		}
		
		public void remove() {
			throw new UnsupportedOperationException();
		}
		
	}
	
	/**
	 * \brief Generic iterator over a single value.
	 */
	public class SingleIterator<T> implements Iterator<T> {
		
		protected T elem;
		protected boolean ok;
		
		public SingleIterator(T e) {
			elem = e;
			ok = true;
		}
		
		public boolean hasNext() {
			return ok;
		}
		
		public T next() {
			if (!ok)
				throw new NoSuchElementException();
			ok = false;
			return elem;
		}
		
		public void remove() {
			throw new UnsupportedOperationException();
		}
	}

	syn boolean Restriction.isModel() = false;
	eq Model.isModel() = true;
	syn boolean ClassDecl.isModel() = false;
	eq BaseClassDecl.isModel() = getRestriction().isModel();
	syn boolean InstClassDecl.isModel() = getClassDecl().isModel();

	syn boolean Restriction.isBlock() = false;
	eq Block.isBlock() = true;
	syn boolean ClassDecl.isBlock() = false;
	eq BaseClassDecl.isBlock() = getRestriction().isBlock();
	syn boolean InstClassDecl.isBlock() = getClassDecl().isBlock();

	syn boolean Restriction.isClass() = false;
	eq MClass.isClass() = true;
	syn boolean ClassDecl.isClass() = false;
	eq BaseClassDecl.isClass() = getRestriction().isClass();
	syn boolean InstClassDecl.isClass() = getClassDecl().isClass();

	/**
	 * \brief Round a number to 2 decimals if it is < 10, 1 decimal otherwise.
	 */
	public static double ASTNode.roundFriendly(double val) {
		double round = val < 10.0 ? 100.0 : 10.0;
		return Math.round(val * round) / round;
	}

	/**
	 * \brief Creates a human-readable memory size string (e.g. 2.34 kB).
	 * 
	 * @param mem  size to format, in bytes. May be negative.
	 */
	public static String ASTNode.formatMem(int mem) {
		int i = 0;
		double scaledMem = Math.abs(mem);
		for (; i < 4 && scaledMem >= 1000.0; i++)
			scaledMem /= 1024.0;
		StringBuilder buf = new StringBuilder();
		if (mem < 0)
			buf.append('-');
		if (i == 0)
			buf.append(mem);
		else
			buf.append(roundFriendly(scaledMem));
		buf.append(memUnits[i]);
		return buf.toString();
	}
	
	private static final String[] ASTNode.memUnits = { " B", " kB", " MB", " GB", " TB" };
	
}
