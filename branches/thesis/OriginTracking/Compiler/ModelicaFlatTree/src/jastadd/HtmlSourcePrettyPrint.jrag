import java.io.File;

import beaver.Symbol;

//fabstractequaton
	//fabstractvariable
	//fexp

aspect HtmlSourcePrettyPrint {

	public class HtmlSourcePrettyPrinter extends PrettyPrinter {
		
			private int htmlLineDepth;
			//private int nextColour;
			public BaseNode prevNode;
			
			public TreeMap<String,Integer> fileColour;
			
		
			public HtmlSourcePrettyPrinter() {
				super();
				htmlLineDepth = 0;
				//nextColour = 0;
				//fileColour = new TreeMap<String,Integer>();
				prevNode = null;
			}
			
	 		public void print(ASTNode node, CodeStream str, String indent) { 
	 			node.htmlSourcePrettyPrint(this, str, indent); 
	 		
	 		}
	 		
	 		public int incLineDepth(){ return htmlLineDepth++; }
	 		
	 		public int decLineDepth(){ return htmlLineDepth--; }
	}
	public void ASTNode.htmlSourcePrettyPrint(Printer p, CodeStream str, String indent) {
		prettyPrint(p, str, indent);
	}
	public void ASTNode.htmlSourcePrettyPrint(CodeStream str, String indent, File css) {
		
		str.println("<html>\n<head>\n");
		str.println("<link rel=\"stylesheet\" href=\"" + css.getName() + "\">\n");
		str.println("</head>\n<body>");
		HtmlSourcePrettyPrinter p = new HtmlSourcePrettyPrinter();
		htmlSourcePrettyPrint(p, str, indent);
		str.println("</body>\n</html>");
		try{
			if(css != null){
				CodeStream cssStr = new CodeStream(css);
				cssStr.println(p.htmlStyle());
				cssStr.close();
			}
	 	} catch (IOException e) {
	 		//Do nothing
	 	}
	}
	
	public static String HtmlSourcePrettyPrinter.htmlStyle(){
		StringBuilder sb = new StringBuilder();
		sb.append("span {\n");
		sb.append("\tline-height: 20px;\n");
		sb.append("\tbackground: linear-gradient(0deg, blue 1px, white 1px, transparent 1px);\n");
		sb.append("\tbackground-position: 0 100%;\n}\n");
		for(Integer i = 1; i < 6; i++){
			sb.append(".s" + i + " {\n");
			sb.append("\tline-height: " + (i * 4 + 20) + "px;\n");
			sb.append("\tpadding-bottom: " + (i * 4) + "px;\n}\n");
		}
		sb.append("\n");
		return sb.toString();
		
	}
	
	/*public String HtmlSourcePrettyPrinter.htmlStyle(){
		StringBuilder sb = new StringBuilder();
		sb.append("s" + 0 + " {\n\t    background-color:rgba(255,0,0,0.5);\n}\n");
		sb.append("s" + 1 + " {\n\t    background-color:rgba(0,255,0,0.5);\n}\n");
		sb.append("s" + 2 + " {\n\t    background-color:rgba(0,0,255,0.5);\n}\n");
		
		return sb.toString();
	}*/
	
	
/*	public static String HtmlSourcePrettyPrinter.htmlStyle(){
		StringBuilder sb = new StringBuilder();
		sb.append("<style>\n");
		for(Integer i = 0; i < 2; i++){
			sb.append("s" + i + " {\n");
			sb.append("\t    background-color:rgba(100,0," + (i*100) + ",0.5);\n}\n");
			sb.append("s" + (i + 1) + " {\n");
			sb.append("\t    background-color:rgba(" + (i*100) + ",100,0,0.5);\n}\n");
			sb.append("s" + (i + 2) +" {\n");
			sb.append("\t    background-color:rgba(" + (i*100) + "100,0,100,0.5);\n}\n");
		}
		sb.append("</style>\n");
		return sb.toString();
		
	}*/
	
	
	/**
	 * Copied from FClass.prettyPrint and modified
	 */
	public void FClass.htmlSourcePrettyPrint(Printer p, CodeStream str, String indent) {
        String nextInd = p.indent(indent);
        str.print(indent + "<b>fclass " + name() + "</b><br>\n");
        ArrayList<FVariable> protectedVars = new ArrayList<FVariable>();
        for (FVariable fv : getFVariables()) {
            if (!fv.isDerivativeVariable() && !fv.isPreVariable() &&
                    !fv.getFVisibilityType().isRuntimeOptionVisibility()) {
                if (fv.isProtected()) {
                  protectedVars.add(fv);
                } else {
                    p.print(fv, str, nextInd);
                    str.print(";<br>\n");
                    ((HtmlSourcePrettyPrinter)p).prevNode = null;
                }
            }
        }
        if (!protectedVars.isEmpty()) {
            str.print(indent + "<b>protected</b><br>\n");
            for (FVariable fv : protectedVars) {
                p.print(fv, str, nextInd);
                str.print(";<br>\n");
                ((HtmlSourcePrettyPrinter)p).prevNode = null;
            }
        }

        if (getNumFInitialEquation()>0)
            str.print(indent + "<b>initial equation</b><br>\n");
        getFInitialEquations().prettyPrintWithFix(p, str, nextInd, "", "");

        if (getNumFParameterEquation()>0)
            str.print(indent + "<b>parameter equation</b><br>\n");
        getFParameterEquations().prettyPrintWithFix(p, str, nextInd, "", "");
    
        boolean wroteEquation = false;
        for (FAbstractEquation e : getFAbstractEquations()) {
            if (e instanceof FAlgorithm) {
                p.print(e, str, indent);
                str.print("<br>");
                wroteEquation = false;
            } else {
                if (!e.isIgnored()) {
                    if (!wroteEquation) {
                        str.print(indent);
                        str.print("<b>equation</b><br>\n");
                        wroteEquation = true;
                    }
                    p.print(e, str, nextInd);
                   // str.print(";\n");
                }
            }
        }
        
        if (getNumFFunctionDecl() > 0 || getNumFRecordDecl() > 0 || 
                getNumFEnumDecl() > 0 || getNumFDerivedType() > 0) {
            str.print("\n" + indent + "<b>public</b><br>\n");
            p.print(getFFunctionDecls(), str, nextInd);
            p.print(getFRecordDecls(), str, nextInd);
            p.print(getFEnumDecls(), str, nextInd);
            p.print(getFDerivedTypes(), str, nextInd);
        }
        
        getFAttributeList().prettyPrintFAnnotationAttributeList(str, p, indent, ";\n");

        str.print(indent);
        str.print("<br><b>end ");
        str.print(name());
        str.print(";</b>\n");
    }
	
	public void BaseNode.htmlSourcePrettyPrint(Printer p, CodeStream str, String indent) {
		String s = this.getClass().toString();
		SourceLocation[] file = null;
		if(fName instanceof String){
			file = new SourceLocation[1];
			file[0] = new SourceLocation((String)fName, start, end);
		}else if(fName != null){
			file = (SourceLocation[])fName;			
		}
		if(file != null && fName != null && p instanceof HtmlSourcePrettyPrinter){// && !locationContainedBy(parent)){
			String dir = System.getProperty("user.dir");
			HtmlSourcePrettyPrinter hp = (HtmlSourcePrettyPrinter)p;
			
			str.print("<span class=\"s" + hp.incLineDepth() + "\" title=\"");
			for(int i = 0; i < file.length; i++){
				String fileName = file[i].getFile();
				try{
					if(fileName.substring(0, dir.lastIndexOf("\\")).equals(dir.substring(0, dir.lastIndexOf("\\")))){
					   	fileName = fileName.substring(dir.lastIndexOf("\\") + 1);
					}
				}catch(IndexOutOfBoundsException e){} 				//keep fileName whole
				if(i > 0)
					str.print("\n");								// works, but produces linebreaks in the html code
				str.print(fileName + " " + Symbol.getLine(file[i].getStart()) + ":" + Symbol.getColumn(file[i].getStart()) 
					+ " " + Symbol.getLine(file[i].getEnd()) + ":" + Symbol.getColumn(file[i].getEnd()));
			}
			
			str.print("\">");
			prettyPrint(p, str, indent);
			hp.decLineDepth();
			str.print("</span>");
		}else{
			prettyPrint(p, str, indent);
		}
	}
	/*public void BaseNode.htmlSourcePrettyPrint(Printer p, CodeStream str, String indent) {

		String s = this.getClass().toString();
		String file = fName;
		if(fName != null && p instanceof HtmlSourcePrettyPrinter && !locationContainedBy(parent)){
			HtmlSourcePrettyPrinter hp = (HtmlSourcePrettyPrinter)p;
			BaseNode prev = hp.prevNode;
			
			if(prev != null)
				str.print("</s" + hp.fileColour.get(cropAbsolutePath(prev.fName)) + ">");
			
			hp.printHTMLColour(this, str);
			hp.prevNode = this; 
			prettyPrint(p, str, indent);
			str.print("</s" + hp.fileColour.get(cropAbsolutePath(fName)) + ">");
			
			if(prev != null)
				hp.printHTMLColour(prev, str); 
		}else{
			prettyPrint(p, str, indent);
		}
	}*/
	
	public static String ASTNode.cropAbsolutePath(String path){
		String p = path;
		String dir = System.getProperty("user.dir");
		try{
			if(p.substring(0, dir.lastIndexOf("\\")).equals(dir.substring(0, dir.lastIndexOf("\\")))){
			   	p = p.substring(dir.lastIndexOf("\\") + 1);
			}
		}catch(IndexOutOfBoundsException e){}
		return p;
	}
	
	/*public void HtmlSourcePrettyPrinter.printHTMLColour(BaseNode node, CodeStream str){
		String file = ASTNode.cropAbsolutePath(node.fName);
		
		if(!fileColour.containsKey(file)){
			fileColour.put(file, nextColour);
			nextColour++;
		}
		str.print("<s" + fileColour.get(file) + " title=\"" + file +  "\">"); 
	}*/
	
	public void FAbstractEquation.htmlSourcePrettyPrint(Printer p, CodeStream str, String indent){
		super.htmlSourcePrettyPrint(p, str, indent);
		str.print(";<br>\n");
		((HtmlSourcePrettyPrinter)p).prevNode = null;
	}
	
	public void FFunctionDecl.htmlSourcePrettyPrint(Printer p, CodeStream str, String indent) {
    	str.print(indent + "function " + name() + "<br>\n");
    	getFFunctionVariables().prettyPrintWithIndent(p, str, p.indent(indent), ";<br>");
    	p.print(getFAlgorithm(), str, indent);
        getFAttributeList().prettyPrintFAnnotationAttributeList(str, p, indent, ";<br>\n");
    	str.print(indent + "end " + name() + ";<br><br>\n\n");
    }
	
    public void FAlgorithm.htmlSourcePrettyPrint(Printer p, CodeStream str, String indent) {
		str.print(indent);
		p.print(getType(),str,"");
		str.print("algorithm<br>\n");
		getFStatements().prettyPrintWithIndent(p, str, p.indent(indent), ";<br>");
	}
    
    public void FDerivedType.htmlSourcePrettyPrint(Printer p, CodeStream str, String indent){
    	if (!getBaseType().isEnum()) {
	    	str.print(indent + "<b>type</b><i> " + getName() + "</i> = ");
	    	str.print(getBaseType());
	    	getFAttributeList().prettyPrintFAttributeList(str, p);
	    	str.print(";<br>\n");
    	}
    }
    
    public void FRecordDecl.htmlSourcePrettyPrint(Printer p, CodeStream str, String indent){
    	str.print(indent + "<b>record</b> " + name() + "<br>\n");
    	getFVariables().prettyPrintWithFix(p, str, p.indent(indent), "", ";<br>\n");
    	str.print(indent + "<b>end</b> " + name() + ";<br><br>\n\n");
    }
	
	/*public void FEquation.htmlSourcePrettyPrint(Printer p, CodeStream str, String indent) {
		if(fName != null && p instanceof HtmlSourcePrettyPrinter){
			HtmlSourcePrettyPrinter hp = (HtmlSourcePrettyPrinter)p;
			str.print("<span class=\"s" + hp.htmlLineDepth++ + "\" title=\"" + fName + hp.htmlLineDepth + "\">");
			super.htmlSourcePrettyPrint(p, str, indent);
			hp.htmlLineDepth--;
			str.print("</span>");
		}else{
			super.htmlSourcePrettyPrint(p, str, indent);
		}
		prettyPrint(p, str, indent);
	}*/
	
	/*public void FExp.htmlSourcePrettyPrint(Printer p, CodeStream str, String indent) {
		if(fName != null && p instanceof HtmlSourcePrettyPrinter){
			HtmlSourcePrettyPrinter hp = (HtmlSourcePrettyPrinter)p;
			str.print("<span class=\"s" + hp.htmlLineDepth++ + "\" title=\"" + fName + hp.htmlLineDepth + "\">");
			super.htmlSourcePrettyPrint(p, str, indent);
			hp.htmlLineDepth--;
			str.print("</span>");
		}else{
			super.htmlSourcePrettyPrint(p, str, indent);
		}
	}
	
	public void FAbstractEquation.htmlSourcePrettyPrint(Printer p, CodeStream str, String indent) {
		if(fName != null && p instanceof HtmlSourcePrettyPrinter){
			HtmlSourcePrettyPrinter hp = (HtmlSourcePrettyPrinter)p;
			str.print("<span class=\"s" + hp.htmlLineDepth++ + "\" title=\"" + fName + hp.htmlLineDepth + "\">");
			super.htmlSourcePrettyPrint(p, str, indent);
			hp.htmlLineDepth--;
			str.print("</span>");
		}else{
			super.htmlSourcePrettyPrint(p, str, indent);
		}
	}
	
	public void FAbstractVariable.htmlSourcePrettyPrint(Printer p, CodeStream str, String indent) {
		if(fName != null && p instanceof HtmlSourcePrettyPrinter){
			HtmlSourcePrettyPrinter hp = (HtmlSourcePrettyPrinter)p;
			str.print("<span class=\"s" + hp.htmlLineDepth++ + "\" title=\"" + fName + hp.htmlLineDepth + "\">");
			super.htmlSourcePrettyPrint(p, str, indent);
			hp.htmlLineDepth--;
			str.print("</span>");
		}else{
			super.htmlSourcePrettyPrint(p, str, indent);
		}
	}*/
	
	public String ASTNode.htmlSourcePrettyPrint(String indent) {
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		CodeStream str = new NotNullCodeStream(os);
		htmlSourcePrettyPrint(str, indent, null);
		return os.toString();
	}
}
