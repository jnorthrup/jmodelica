/*
Copyright (C) 2009-2017 Modelon AB
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

aspect CCodeGenTempNames {

    public interface TempScope {
        public String tempName_C();
        public String tempName_C(FAbstractVariable v);
    }
    
    FAlgorithm implements TempScope;
    syn lazy String FAlgorithm.tempName_C(FAbstractVariable v) = nextTempName_C();

    syn lazy String FExp.tempName_C()       = nextTempName_C();
    syn lazy String FAlgorithm.tempName_C() = nextTempName_C();

    syn String FExp.nextTempName_C()       = myCodeGenContext().nextTempName_C();
    syn String FAlgorithm.nextTempName_C() = myCodeGenContext().nextTempName_C();

    public class CodeGenContext {
        private int nextTempNbr_C = 1;
        
        public String nextTempName_C() {
            return "tmp_" + nextTempNbr_C++;
        }
        public void setAlias(String key, String val) {
            throw new UnsupportedOperationException();
        }
        public String alias(String key) {
            return key;
        }
        public CodeGenContext createProxy() {
            return new CodeGenContextProxy(this);
        }
        private class CodeGenContextProxy extends CodeGenContext {
            private CodeGenContext redirect;
            private Map<String,String> aliases = new HashMap<String,String>();
            public CodeGenContextProxy(CodeGenContext redirect) {
                this.redirect = redirect;
            }
            public String nextTempName_C() {
                return redirect.nextTempName_C();
            }
            public void setAlias(String key, String val) {
                aliases.put(key,val);
            }
            public String alias(String key) {
                return aliases.get(key);
            }
        }
    }

    private CodeGenContext FClass.codeGenContext = new CodeGenContext();
    private CodeGenContext FFunctionDecl.codeGenContext = new CodeGenContext();
    private CodeGenContext FExternalStmt.codeGenContext = null;
    public void FExternalStmt.setCodeGenContext(CodeGenContext cgc) { codeGenContext = cgc; }
    public CodeGenContext FExternalStmt.getCodeGenContext() { return codeGenContext == null ? myCodeGenContext() : codeGenContext; }

    inh CodeGenContext FExp.myCodeGenContext();
    inh CodeGenContext FAlgorithm.myCodeGenContext();
    inh CodeGenContext FExternalStmt.myCodeGenContext();
    eq Root.getChild().myCodeGenContext() = null;
    eq FClass.getChild().myCodeGenContext() = codeGenContext;
    eq FFunctionDecl.getChild().myCodeGenContext() = codeGenContext;
    eq FExternalStmt.getChild().myCodeGenContext() = getCodeGenContext();

}